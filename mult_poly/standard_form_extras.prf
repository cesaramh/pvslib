(standard_form_extras
 (cons_max_length 0
  (cons_max_length-1 nil 3809866434
   ("" (skeep)
    (("" (expand "max_length" 1 1) (("" (assert) nil nil)) nil)) nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   shostak))
 (cutting_null 0
  (cutting_null-1 nil 3810372223
   (""
    (case "FORALL (N:nat, l:list[nat]): N = length(l) IMPLIES (cutting(l) = null IFF every(LAMBDA (n: nat): n = 0)(l))")
    (("1" (skeep) (("1" (inst -1 "length(m`alpha)" "m`alpha") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (skeep)
          (("1" (expand "length")
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "cutting")
                  (("1" (assert)
                    (("1" (expand "every") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" +)
              (("2"
                (case "FORALL (ll:(cons?[nat])): last(ll) = nth(ll, length(ll)-1)")
                (("1" (expand "length" -3)
                  (("1" (assert)
                    (("1" (lift-if -3)
                      (("1" (split -3)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst -2 "l")
                                (("2"
                                  (replace -2 2)
                                  (("2"
                                    (case "nth(l, length(l) - 1) = 0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 "rdc(l)")
                                        (("1"
                                          (expand "rdc" -4 1)
                                          (("1"
                                            (rewrite
                                             "length_reverse"
                                             -4)
                                            (("1"
                                              (case
                                               "NOT j+1 = length(l)")
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "length_reverse"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if -1)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "NOT ((cutting(rdc(l)) = null) = (every(LAMBDA (n: nat): n = 0)(rdc(l))))")
                                                              (("1"
                                                                (iff 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "every_nth"
                                                                   3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "every_nth"
                                                                     3)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (case
                                                                               "i = length(l)-1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -1
                                                                                 "i")
                                                                                (("1"
                                                                                  (expand
                                                                                   "rdc"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "nth_reverse")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "nth_reverse[nat]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "l"
                                                                                         "length(l)-1 -i")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_reverse"
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (move-terms
                                                                                                         -1
                                                                                                         l
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "length_reverse"
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "i")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rdc")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "length_reverse"
                                                                                       1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "rdc"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rdc"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "nth_reverse"
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "length_reverse"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "i")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "nth_reverse[nat]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "l"
                                                                                             "length(l)-1-i")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_reverse"
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "length_reverse"
                                                                                       -1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "NOT j+1 = length(l)")
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "length_reverse"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "NOT j+1 = length(l)")
                                        (("1"
                                          (expand "length" 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite "every_nth" -5)
                                          (("2"
                                            (inst -5 "length(l) -1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (case "NOT j+1 = length(l)")
                                        (("1"
                                          (expand "length" 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (induct "ll")
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (hide -)
                      (("3" (skeep)
                        (("3" (case "null?(cons2_var)")
                          (("1" (expand "last" 1)
                            (("1" (expand "length" +)
                              (("1"
                                (expand "length" +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "last" 2)
                            (("2" (assert)
                              (("2"
                                (expand "length" +)
                                (("2"
                                  (expand "length" 2 1)
                                  (("2"
                                    (lift-if 2)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skeep)
                      (("4" (expand "length" 1)
                        (("4" (assert) nil nil)) nil))
                      nil)
                     ("5" (skeep)
                      (("5" (expand "length" 3)
                        (("5" (assert) nil nil)) nil))
                      nil)
                     ("6" (skeep)
                      (("6" (expand "length" 3)
                        (("6" (assert)
                          (("6" (expand "length" 2)
                            (("6" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (expand "length" 1) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (every_nth formula-decl nil list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_reverse formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_reverse formula-decl nil list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (cutting_cons 0
  (cutting_cons-1 nil 3810378720
   (""
    (case "FORALL (n:nat, l: (cons?[nat])):
                                          (cons?(cutting(l)) and n=length(l)) IMPLIES cutting(l) = cons(car(l), cutting(cdr(l)))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "length(l)") (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (typepred "l")
            (("1" (expand "length") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "cutting" -3)
                      (("1" (assert)
                        (("1" (case "j=0")
                          (("1" (replace -1)
                            (("1" (expand "cutting" -4)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if -4)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (rewrite
                                           "length_reverse"
                                           -5
                                           :dir
                                           rl)
                                          (("2"
                                            (expand "length" -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if -5)
                                                (("2"
                                                  (split -5)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "length_reverse"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "cutting" 2 2)
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "length" -5)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "standard_form_poly.last_cdr")
                                    (("2"
                                      (inst -1 "l")
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -3 "rdc(l)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -3)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (decompose-equality
                                                     2)
                                                    (("1"
                                                      (expand "rdc")
                                                      (("1"
                                                        (lemma
                                                         "nth_reverse[nat]")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "l"
                                                           "length(l)-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cdr(reverse(l))"
                                                                 "0")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_reverse"
                                                                             -7
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -7)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   -7)
                                                                                  (("1"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "length_reverse"
                                                                   -6
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -6)
                                                                    (("2"
                                                                      (lift-if
                                                                       -6)
                                                                      (("2"
                                                                        (split
                                                                         -6)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "every_reverse[number]")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (typepred
                                                                       "l")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "cdr[nat](rdc[nat](l)) = rdc[nat](cdr[nat](l))")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "list_extensionality"
                                                         1)
                                                        (("2"
                                                          (case
                                                           "length(cdr[nat](rdc[nat](l))) = length(rdc[nat](cdr[nat](l)))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep
                                                               :preds?
                                                               T)
                                                              (("1"
                                                                (hide
                                                                 (-3
                                                                  -4
                                                                  -5
                                                                  2))
                                                                (("1"
                                                                  (expand
                                                                   "rdc")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_reverse"
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT nth(cdr[nat](reverse(cdr(reverse(l)))), n) = nth(
                                                                                                                                                            (reverse(cdr(reverse(l)))), n+1)")
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "nth_reverse"
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "not nth(cdr(reverse(cdr[nat](l))),
                                                                                                                                                                                          length(cdr(reverse(cdr[nat](l)))) - 1 - n) = nth((reverse(cdr[nat](l))),
                                                                                                                                                                                          length(cdr(reverse(cdr[nat](l)))) - 1 - n +1)")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (move-terms
                                                                                         -1
                                                                                         l
                                                                                         2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "length_reverse"
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "nth_reverse"
                                                                                   1)
                                                                                  (("1"
                                                                                    (case
                                                                                     " NOT nth(cdr(reverse(l)), length[real](cdr(reverse(l))) - 2 - n) =  nth((reverse(l)), length[real]((reverse(l))) - 2 - n)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "length_reverse"
                                                                                                   -7
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 2
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (move-terms
                                                                                                           -1
                                                                                                           l
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             l
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "length_reverse"
                                                                                                                   -7
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "length_reverse"
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "nth_reverse"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               1
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "length_reverse"
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "length_reverse"
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "length_reverse"
                                                                                                                 -8
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -8)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -5)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "length_reverse"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_reverse"
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "length_reverse"
                                                                                                                   -8
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "length"
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("3"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "length_reverse"
                                                                                                 -7
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "length_reverse"
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "length_reverse"
                                                                                                               -7
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -7)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "length_reverse"
                                                                                                                   -7
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (rewrite
                                                                                       "length_reverse"
                                                                                       -6
                                                                                       :dir
                                                                                       rl)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "length"
                                                                                         -6)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (lift-if
                                                                                             -6)
                                                                                            (("4"
                                                                                              (split
                                                                                               -6)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_reverse"
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "length_reverse"
                                                                                                         2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "length_reverse"
                                                                                     -4)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -4)
                                                                                        (("2"
                                                                                          (swap-rel
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_reverse"
                                                                                             1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "length_reverse"
                                                                                                             -7
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (replace
                                                                                 -3
                                                                                 -2)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_reverse"
                                                                                   -2)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       2)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("3"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   " length"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "length_reverse"
                                                                                                     -6
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -6)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (replace
                                                                                 -3)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "length_reverse"
                                                                                   -2)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "length_reverse"
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if
                                                                                 1)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         -6
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -6)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "length_reverse"
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (rewrite
                                                                           "length_reverse"
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("3"
                                                                                (lift-if
                                                                                 1)
                                                                                (("3"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_reverse"
                                                                                         -5
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_reverse"
                                                                                             -5
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (typepred
                                                                         "l")
                                                                        (("4"
                                                                          (lemma
                                                                           "every_reverse[number]")
                                                                          (("4"
                                                                            (inst?)
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (expand
                                                                                 "every"
                                                                                 -1)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "length_reverse"
                                                                                   -7
                                                                                   :dir
                                                                                   rl)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "length"
                                                                                     -7)
                                                                                    (("4"
                                                                                      (lift-if
                                                                                       -7)
                                                                                      (("4"
                                                                                        (split
                                                                                         -7)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_reverse")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  -4))
                                                                (("2"
                                                                  (lemma
                                                                   "length_reverse[nat]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "l")
                                                                    (("2"
                                                                      (expand
                                                                       "rdc")
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lift-if
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_reverse"
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (label
                                                                                       "fresh"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (with-tccs
                                                                                         (swap-rel
                                                                                          "fresh"))
                                                                                        (("2"
                                                                                          (unlabel
                                                                                           "fresh")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_reverse[nat]"
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "length_reverse[nat]"
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc" 1)
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse"
                                                     -4
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if -4)
                                                          (("2"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite
                                                                 "length_reverse"
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "standard_form_poly.last_cdr")
                                                                      (("2"
                                                                        (lift-if
                                                                         -2)
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   3)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "length_rdc[nat]")
                                              (("2"
                                                (inst -1 "l")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length " -4)
                                            (("2"
                                              (expand "length" -4)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "standard_form_poly.last_cdr")
                      (("2" (inst -1 "l")
                        (("1" (replace -1)
                          (("1" (expand "cutting" 2)
                            (("1" (assert)
                              (("1"
                                (expand "length" -4)
                                (("1"
                                  (expand "length" -4)
                                  (("1"
                                    (lift-if -4)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (expand "every" 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "every"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality 3)
                                            (("2"
                                              (expand "every" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "cdr[nat](l)")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "length")
                            (("2" (assert)
                              (("2"
                                (decompose-equality 3)
                                (("1"
                                  (typepred "l")
                                  (("1"
                                    (case "NOT j=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (expand "length" -6)
                                        (("2"
                                          (lift-if -6)
                                          (("2"
                                            (split -6)
                                            (("1"
                                              (expand "cutting" 1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (typepred "cutting(cdr[nat](l))")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nth_reverse formula-decl nil list_props nil)
    (every_reverse formula-decl nil list_lemmas nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length_rdc formula-decl nil list_lemmas nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (reverse def-decl "list[T]" list_props nil)
    (length_reverse formula-decl nil list_props nil))
   shostak))
 (lft_ml_n 0
  (lft_ml_n-1 nil 3810396968
   ("" (skeep)
    (("" (lemma "max_length_is_nth")
      (("" (inst?)
        (("1" (skeep)
          (("1" (lemma "lft_length_nth")
            (("1" (inst?)
              (("1" (assert) nil nil)
               ("2" (typepred "j")
                (("2" (lemma "Lft_length")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "Lft_length")
          (("2" (inst?)
            (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (lft_max_length_TCC1 0
  (lft_max_length_TCC1-1 nil 3809778143 ("" (subtype-tcc) nil nil) nil
   nil
   (lft_max_length subtype
    "standard_form_mult_poly.max_length(standard_form_extras.p)"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_extras.p))}")))
 (lft_max_length 0
  (lft_max_length-1 nil 3809778149
   ("" (skeep)
    (("" (lemma "lft_length_nth")
      (("" (case "null?(p)")
        (("1" (expand "max_length")
          (("1" (assert)
            (("1" (expand "lft" 1 1)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "max_length_is_nth")
          (("2" (inst -1 "p")
            (("1" (skeep)
              (("1" (inst -2 "p" "max_length(p)" "j")
                (("1" (assert)
                  (("1" (lemma "max_length_is_nth")
                    (("1" (lemma "lft_Unif")
                      (("1" (inst -1 "p")
                        (("1" (lemma "max_length_Unif")
                          (("1" (inst -1 "lft(p)(max_length(p))" "j")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "Unif?")
                                (("2"
                                  (lemma "Lft_length")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (case "length(p)>0")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lft_Unif formula-decl nil standard_form_mult_poly nil)
    (max_length_Unif formula-decl nil standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (UnifInd type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (permutations_max_length 0
  (permutations_max_length-1 nil 3810545320
   ("" (skeep)
    (("" (lemma "max_length_is_nth")
      (("" (inst -1 "p")
        (("1" (skeep)
          (("1" (lemma "permutations_preserve_contents")
            (("1" (inst -1 "p" "q" "_")
              (("1" (inst-cp -1 "j")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (lemma "max_length_is_max")
                      (("1" (inst -1 "q" "j_1")
                        (("1" (lemma "permutations_is_commutative")
                          (("1" (inst?)
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "permutations_preserve_contents")
                                    (("1"
                                      (lemma "max_length_is_nth")
                                      (("1"
                                        (inst -1 "q")
                                        (("1"
                                          (skolem -1 "k")
                                          (("1"
                                            (inst -2 "q" "p" "k")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -2 "k_1")
                                                (("1"
                                                  (lemma
                                                   "max_length_is_max")
                                                  (("1"
                                                    (inst -1 "p" "k_1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "same_occurrences_same_length")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "q")
                                                        (("2"
                                                          (expand
                                                           "permutations"
                                                           -9)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "same_occurrences_same_length")
                                          (("2"
                                            (inst -1 "p" "q")
                                            (("2"
                                              (expand
                                               "permutations"
                                               -8)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "same_occurrences_same_length")
                          (("2" (inst -1 "p" "q")
                            (("2" (expand "permutations" -5)
                              (("2"
                                (split -1)
                                (("1"
                                  (expand "length" -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "same_occurrences_same_length")
          (("2" (inst -1 "p" "q")
            (("2" (expand "permutations" -2)
              (("2" (split -1)
                (("1" (expand "length" -1) (("1" (assert) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (permutations_is_commutative formula-decl nil sorting_aux sorting)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (same_occurrences_same_length formula-decl nil sorting_aux sorting)
    (permutations const-decl "bool" sorting_aux sorting)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (permutations_preserve_contents formula-decl nil sorting_aux
     sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (sortedsimplify_cons_TCC1 0
  (sortedsimplify_cons_TCC1-1 nil 3809855774
   ("" (lemma "leq_total_preorder") (("" (propax) nil nil)) nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil))
   nil
   (sortedsimplify_cons subtype "standard_form_mult_poly.leq"
    "(total_preorder[monomial].total_preorder?)")))
 (sortedsimplify_cons 0
  (sortedsimplify_cons-1 nil 3809855774
   (""
    (case "FORALL (n: nat, p: MultPoly): (n = length(p) and  is_sorted?(p) and cons?(p)) IMPLIES cons?(sortedsimplify(p))")
    (("1" (skeep)
      (("1" (inst -1 "length(p)" "p") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "leq_total_preorder")
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (assert)
              (("1" (expand "length") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "sortedsimplify" 1)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst
                                   -2
                                   "cons(add_mono(car(p), car(cdr(p))),
                                       cdr(cdr(p)))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" 4)
                                      (("1"
                                        (expand "length" -2)
                                        (("1"
                                          (expand "length" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "null?(cdr(cdr(p)))")
                                              (("1"
                                                (expand "is_sorted?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (typepred "k")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "length "
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "length "
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "is_sorted?(cdr(cdr(p)))")
                                                (("1"
                                                  (lemma
                                                   "add_mono_sorted")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "add_mono"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "is_sorted?"
                                                           -4)
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "constant_doesnt_matter")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "car(cdr(p))"
                                                                           "(# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #)"
                                                                           "car(cdr(cdr(p)))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "cdr_of_sorted_is_sorted")
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "cdr_of_sorted_is_sorted")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cdr(p)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep) nil nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (add_mono_sorted formula-decl nil standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (simplify_max_length 0
  (simplify_max_length-1 nil 3809784408
   (""
    (case "FORALL (p: MultPoly): is_sorted?(p) IMPLIES max_length(p) = max_length(sortedsimplify(p))")
    (("1" (skeep)
      (("1" (expand "simplify")
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (inst -1 "mv_sort(p)")
                (("2" (lemma "mv_sort_is_sorted")
                  (("2" (inst?)
                    (("2" (expand "mv_is_sorted?")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "mv_sort_max_length")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (case "null?(p)")
          (("1" (expand "sortedsimplify") (("1" (assert) nil nil)) nil)
           ("2" (lemma "sortedsimplify_cons")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "max_length_is_max")
                  (("2" (lemma "max_length_is_nth")
                    (("2" (inst-cp -1 "p")
                      (("2" (skeep)
                        (("2" (inst -1 "sortedsimplify(p)")
                          (("2" (skolem -1 "k")
                            (("2" (lemma "simplify_alpha_reverse")
                              (("2"
                                (inst -1 "p" "j")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst-cp
                                     -4
                                     "sortedsimplify(p)"
                                     "j_1")
                                    (("2"
                                      (lemma "simplify_alpha")
                                      (("2"
                                        (inst -1 "p" "k")
                                        (("2"
                                          (skolem -1 "k_1")
                                          (("2"
                                            (inst -5 "p" "k_1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (simplify_alpha_reverse formula-decl nil standard_form_mult_poly
     nil)
    (simplify_alpha formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (sortedsimplify_cons formula-decl nil standard_form_extras nil)
    (mv_sort_is_sorted formula-decl nil standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (mv_sort_max_length formula-decl nil standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (mv_standard_form_max_length 0
  (mv_standard_form_max_length-1 nil 3810309731
   ("" (lemma "standard_form_max_length")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (standard_form_max_length formula-decl nil standard_form_mult_poly
     nil))
   shostak))
 (eval_vals_0_TCC1 0
  (eval_vals_0_TCC1-1 nil 3810369354 ("" (subtype-tcc) nil nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (eval_vals_0 subtype "standard_form_extras.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(list_adt[nat].null))}")))
 (eval_vals_0 0
  (eval_vals_0-1 nil 3810369365
   (""
    (case "FORALL (c: real, ind: list[nat], ( vals: list[real]| length(vals) = length(ind))):
        eval((# C := c, alpha := null[nat] #), ind)
            (vals)`C
         = c")
    (("1" (skeep)
      (("1" (expand "full_eval") (("1" (inst?) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "ind")
        (("1" (skeep)
          (("1" (expand "eval") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "eval" 1) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (eval_is_map 0
  (eval_is_map-1 nil 3810486705 ("" (induct-and-simplify "p") nil nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (sum_C_remove_TCC1 0
  (sum_C_remove_TCC1-1 nil 3810548162
   ("" (skeep :preds? T)
    (("" (expand "length")
      (("" (lift-if -2)
        (("" (split -2)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sum_C_remove subtype "standard_form_extras.p"
    "(list_adt[monomial].cons?)")))
 (sum_C_remove 0
  (sum_C_remove-1 nil 3810548174
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep :preds? T)
        (("3" (case "j=0")
          (("1" (case "NOT i=0")
            (("1" (assert) nil nil)
             ("2" (replace -1)
              (("2" (expand "remove" 1)
                (("2" (rewrite "append_null_left")
                  (("2" (replace -2)
                    (("2" (replace -3)
                      (("2" (assert)
                        (("2" (expand "^" +)
                          (("2" (expand "sum_C" 1)
                            (("2" (expand "length" -3)
                              (("2"
                                (lift-if -3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -3)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" -1)
                                          (("2"
                                            (lift-if -1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sum_C")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "i=0")
            (("1" (replace -1)
              (("1" (expand "sum_C" 2 1)
                (("1" (lift-if 2)
                  (("1" (split 2)
                    (("1" (flatten)
                      (("1" (expand "length" -3)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "remove" 2)
                        (("2" (rewrite "append_null_left")
                          (("2" (expand "nth" 2)
                            (("2"
                              (case "cdr(p) = p ^ (1, length[monomial](p) - 1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (lemma
                                   "list_extensionality[monomial]")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "caret_length" 1)
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (lemma
                                                   "caret_nth[monomial]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "p"
                                                     "n+1"
                                                     "(1, length[monomial](p) - 1)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "n")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -2
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -2
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "nth" 3)
                (("2" (expand "sum_C" 3 1)
                  (("2" (lift-if 3)
                    (("2" (split 3)
                      (("1" (flatten)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -3 "cdr(p)" "i-1")
                          (("1" (rewrite "remove_cdr" -3 :dir rl)
                            (("1" (replace -3 2)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "remove_length[monomial]")
                                  (("1"
                                    (inst -1 "p" "i")
                                    (("1"
                                      (expand "sum_C" 2 2)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "length" -2 1)
                                              (("1"
                                                (lift-if -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "remove" 2)
                                                (("2"
                                                  (expand "append" 2)
                                                  (("2"
                                                    (lift-if 2)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 2)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand " length" -1)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (assert)
          (("4" (skeep)
            (("4" (typepred "p")
              (("4" (expand "length") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append_null_left formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_length formula-decl nil perm_props nil)
    (append def-decl "list[T]" list_props nil)
    (remove_cdr formula-decl nil perm_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (caret_nth formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (caret_length formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (remove const-decl "list[T]" perm_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (sum_C_perm 0
  (sum_C_perm-1 nil 3810546941
   ("" (lemma "same_occurrences_same_length")
    (("" (induct "p")
      (("1" (skeep)
        (("1" (assert)
          (("1" (inst -2 "null" "q")
            (("1" (expand "permutations")
              (("1" (assert)
                (("1" (split -2)
                  (("1" (expand "length") (("1" (assert) nil nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (lemma "remove_perm[monomial]")
            (("2" (inst -1 "cons(cons1_var, cons2_var)" "q")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma "sum_C_remove")
                    (("1" (inst -1 "length(q)" "q" "i")
                      (("1" (replace -1)
                        (("1" (expand "sum_C" 1 1)
                          (("1" (inst -4 "remove(q, i)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst -3 "cons(cons1_var, cons2_var)" "q")
                  (("2" (split -3)
                    (("1" (expand "length" -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "permutations")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (permutations const-decl "bool" sorting_aux sorting)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (list_induction formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (remove const-decl "list[T]" perm_props nil)
    (sum_C_remove formula-decl nil standard_form_extras nil)
    (remove_perm formula-decl nil perm_props nil)
    (same_occurrences_same_length formula-decl nil sorting_aux sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (mult_max_length 0
  (mult_max_length-1 nil 3811848893
   ("" (skolem 1 ("r" "_"))
    (("" (induct "p")
      (("1" (expand "mult") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (expand "mult" 1)
          (("2" (expand "max_length" 1)
            (("2" (expand "mult" 1 1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   shostak))
 (sorted_sans_add__max_length 0
  (sorted_sans_add__max_length-1 nil 3814223503
   (""
    (case " FORALL (A,n: nat, p: (mv_standard_sans_cut?(n)),
                                   q: (mv_standard_sans_cut?(n))):
                            ( length(p) + length(q) <= A) IMPLIES max_length(sorted_sans_add(n, p, q)) <=
                              max(max_length(p), max_length(q))")
    (("1" (skeep)
      (("1" (inst -1 "length(p) + length(q)" "n" "p" "q")
        (("1" (case "null?(q)")
          (("1" (case "null?(p)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(q)")
            (("1" (case "null?(p)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sorted_sans_add" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (expand "max_length" 1 2)
                    (("2" (assert)
                      (("2" (hide -2)
                        (("2" (flatten)
                          (("2" (lift-if 2)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "max_length" 1 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -2 "n" "cdr(p)" "cdr(q)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (reveal -)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "length" -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "max(max_length(cdr(p)), max_length(cdr(q))) <= max(max_length(p), max_length(q))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "max_length"
                                                         1
                                                         3)
                                                        (("2"
                                                          (expand
                                                           "max_length"
                                                           1
                                                           4)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             1
                                                             2)
                                                            (("2"
                                                              (lift-if
                                                               1)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (lift-if
                                                                           1)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (lift-if
                                                                         1)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "max"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (expand
                                                 "max_length"
                                                 1
                                                 1)
                                                (("1"
                                                  (expand
                                                   "add_mono"
                                                   1
                                                   1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -)
                                                (("2"
                                                  (expand "length" -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "mv_standard_sans_cdr")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "mv_standard_sans_cdr")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "max_length" 1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "  max(max_length(cdr(p)), max_length(q)) <= max(max_length(p), max_length(q))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT max_length(sorted_sans_add(n, cdr(p), q)) <= max_length(q)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               -2)
                                                              (("1"
                                                                (lift-if
                                                                 -2)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "max_length(sorted_sans_add(n, cdr(p), q)) <=  max(max_length(p), max_length(q))")
                                                                      (("1"
                                                                        (case
                                                                         "length(car(p)`alpha) <=max(max_length(p), max_length(q))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (lift-if
                                                                               2)
                                                                              (("1"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               " max_length(p) <= max(max_length(p), max_length(q))")
                                                                              (("1"
                                                                                (expand
                                                                                 "max_length"
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (lift-if
                                                                             2)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "max_length"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (reveal -)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "max_length" 2 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (reveal -)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         2
                                                         1)
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "max_length"
                                                                 1
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "max_length(sorted_sans_add(n, p, cdr(q))) < max_length(cdr(q))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -5
                                                                         1)
                                                                        (("2"
                                                                          (lift-if
                                                                           -5)
                                                                          (("2"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max_length"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (sorted_add_max_length 0
  (sorted_add_max_length-1 nil 3814224171
   ("" (lemma "sorted_sans_add__max_length")
    (("" (skeep)
      (("" (expand "sorted_add" 1 1)
        (("" (inst?)
          (("" (assert)
            ((""
              (case " max(max_length(lft(p)(max(max_length(p), max_length(q)))),
           max_length(lft(q)(max(max_length(p), max_length(q))))) <=max(max_length(p), max_length(q))")
              (("1" (assert) nil nil)
               ("2" (hide 2 -1)
                (("2" (case "null?(p)")
                  (("1" (case "null?(q)")
                    (("1" (grind) nil nil)
                     ("2" (lemma "lft_n_max_length")
                      (("2"
                        (inst -1 "q"
                         "max(max_length(p), max_length(q))")
                        (("2" (assert)
                          (("2" (replace -1 2)
                            (("2" (expand "lft" 2 1)
                              (("2"
                                (expand "length" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "max_length" 2 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" 2 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case "null?(q)")
                      (("1" (lemma "lft_n_max_length")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -1 2)
                              (("1"
                                (expand "lft" 2)
                                (("1"
                                  (expand "length" 2 1)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "lft_n_max_length")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "lft_n_max_length")
                                (("2"
                                  (inst
                                   -1
                                   "q"
                                   "max(max_length(p), max_length(q))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 3)
                                      (("2"
                                        (replace -2 3)
                                        (("2"
                                          (hide -)
                                          (("2"
                                            (expand "max" 3 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (<= const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lft_n_max_length formula-decl nil standard_form_mult_poly nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_sans_add__max_length formula-decl nil standard_form_extras
     nil))
   shostak))
 (sort_add_max_length 0
  (sort_add_max_length-1 nil 3814225226
   ("" (skeep)
    (("" (lemma "sorted_add_max_length")
      (("" (expand "sort_add" 1 1)
        (("" (assert)
          (("" (inst -1 "mv_standard_form(p)" "mv_standard_form(q)")
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "mv_standard_form" -3)
                    (("1" (assert)
                      (("1" (expand "mv_standard_form" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "mv_standard_form" -2 1)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (expand "mv_standard_form" -2 2)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "standard_form_is_standard")
              (("2" (inst?) nil nil)) nil)
             ("3" (assert)
              (("3" (lemma "standard_form_is_standard")
                (("3" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorted_add_max_length formula-decl nil standard_form_extras nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (min_add_max_length 0
  (min_add_max_length-1 nil 3814225386
   ("" (lemma "sort_add_max_length")
    (("" (skeep)
      (("" (expand "min_add" 1 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (inst -2 "p" "q") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (lemma "lft_n_max_length")
                    (("2" (inst?)
                      (("2" (split -1)
                        (("1" (replace -1 1)
                          (("1" (lemma "max_length_cut")
                            (("1" (inst -1 "sort_add(p,q)")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -3 "p" "q")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "max_length" 2 2)
                          (("2" (assert)
                            (("2" (expand "lft" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "max_length" 2 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (lft_n_max_length formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sort_add_max_length formula-decl nil standard_form_extras nil))
   shostak))
 (add_max_length 0
  (add_max_length-1 nil 3811852700
   (""
    (case "FORALL (m,n: nat, p:(mv_standard_sans_cut?(n)), q:(mv_standard_sans_cut?(n))): m = length(p) + length(q) IMPLIES max_length(sorted_sans_add(n,p,q))<= max(max_length(p), max_length(q))")
    (("1" (skeep)
      (("1" (expand "add")
        (("1" (lemma "allnonzero_max_length")
          (("1" (inst -1 "min_add(p,q)")
            (("1" (assert)
              (("1"
                (case "NOT max_length(min_add(p, q)) <=
                max(max_length(p), max_length(q))")
                (("1" (hide (-1 2))
                  (("1" (lemma "min_add_max_length")
                    (("1" (hide -2)
                      (("1" (inst?)
                        (("1" (lemma "standard_form_max_length")
                          (("1" (inst-cp -1 "p")
                            (("1" (inst-cp -1 "q")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "max" -3 1)
                                    (("1"
                                      (lift-if -3)
                                      (("1"
                                        (split -3)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m" 1 NAT_induction)
          (("2" (skeep)
            (("2" (case "j=0")
              (("1" (hide -2)
                (("1" (skeep)
                  (("1" (expand "length" -2)
                    (("1" (lift-if -2)
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (lift-if -2)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "sorted_sans_add")
                                      (("1"
                                        (expand "max_length" 1 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "sorted_sans_add" +)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "max_length" 1 2)
                          (("1" (assert) (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (expand "max_length" 1 3)
                              (("1"
                                (assert)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst
                                       -3
                                       "length(cdr(p))+length(cdr(q))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (inst
                                             -1
                                             "n"
                                             "cdr(p)"
                                             "cdr(q)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 " max(max_length(cdr(p)), max_length(cdr(q))) <=  max(max_length(p), max_length(q))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "max" 1)
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lift-if 2)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -2
                                               "length(cdr(p)) + length(cdr(q))")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "n"
                                                   "cdr(p)"
                                                   "cdr(q)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "max_length"
                                                       1
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "add_mono"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "max_length"
                                                                       1
                                                                       3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "max_length"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -2 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -2 "n" "cdr(p)" "q")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -3 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "max_length"
                                                   1
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "max_length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (grind
                                                         :defs
                                                         nil)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -1 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -1 " n" "p" "cdr(q)")
                                          (("1"
                                            (expand "length" -2 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "max_length"
                                                 2
                                                 1)
                                                (("1"
                                                  (expand
                                                   "max_length"
                                                   2
                                                   3)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (grind :defs nil)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (allnonzero_max_length formula-decl nil standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (standard_form_max_length formula-decl nil standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_add_max_length formula-decl nil standard_form_extras nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (add_sf_max_length 0
  (add_sf_max_length-1 nil 3862567324
   ("" (induct "p")
    (("1" (assert) nil nil)
     ("2" (assert)
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "add" 1)
            (("2" (expand "min_add")
              (("2" (expand "sort_add")
                (("2" (assert)
                  (("2" (expand "sorted_add")
                    (("2" (expand "max_length" 1 (1 3 5))
                      (("2" (expand "max" 1)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "lft" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (mp_mult_max_length 0
  (mp_mult_max_length-1 nil 3861966855
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "q=null")
          (("1" (grind) nil nil)
           ("2" (expand "mp_mult" 2)
            (("2" (assert)
              (("2" (lemma "add_max_length")
                (("2" (inst?)
                  (("2" (expand "max_length" 2 2)
                    (("2" (inst -2 "q")
                      (("2" (lemma "mp_mono_mult_max")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (expand "max" 2 1)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "max" -2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max" -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "max" -3)
                                              (("1"
                                                (lift-if -3)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "max" (-1 -3))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (expand "max" 1 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           max
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               max
                                                               -4)
                                                              (("1"
                                                                (lift-if
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           max
                                                           -3)
                                                          (("2"
                                                            (lift-if
                                                             -3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           max
                                                           3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               max
                                                               -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           max
                                                           -3)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (mp_mono_mult_max formula-decl nil arithmetic_MultPoly nil)
    (add_max_length formula-decl nil standard_form_extras nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (<= const-decl "bool" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (null_allnonzero 0
  (null_allnonzero-1 nil 3810892729
   ("" (induct-and-simplify "p") nil nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (lft_constants_TCC1 0
  (lft_constants_TCC1-1 nil 3810894456
   ("" (skeep)
    (("" (lemma "Lft_length")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (lft_constants subtype "standard_form_extras.i"
    "below[length[monomial](lft(p)(n))]")))
 (lft_constants 0
  (lft_constants-1 nil 3810894523
   ("" (induct "p")
    (("1" (skeep :preds? T)
      (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep :preds? T)
        (("2" (expand "length" -1)
          (("2" (case "i=0")
            (("1" (replace -1)
              (("1" (lemma "Lft_length")
                (("1" (inst?)
                  (("1" (expand "length" -1)
                    (("1" (assert)
                      (("1" (lift-if -1)
                        (("1" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (expand "nth" 2)
                              (("2"
                                (expand "lft" 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "lft" 2)
              (("2" (assert)
                (("2" (assert)
                  (("2" (expand "nth" +)
                    (("2" (assert) (("2" (inst -3 "i-1" "n") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "Lft_length")
        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (mult_length_monom 0
  (mult_length_monom-1 nil 3814173305
   (""
    (case " FORALL (n:nat,m: monomial, r: real):
        length(m`alpha)=n IMPLIES (length(mult(r, m)`alpha) = length(m`alpha))")
    (("1" (skeep) (("1" (inst -1 "length(m`alpha)" "m" "r") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "mult" 1 1) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil))
   shostak))
 (mult_length 0
  (mult_length-1 nil 3810895488
   ("" (skolem 1 ("_" "r")) (("" (induct-and-simplify "p") nil nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (scale_constants_TCC1 0
  (scale_constants_TCC1-1 nil 3810895272
   ("" (skeep)
    (("" (rewrite "mult_length") (("" (assert) nil nil)) nil)) nil)
   ((mult_length formula-decl nil standard_form_extras nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (scale_constants subtype "standard_form_extras.i"
    "below[length[monomial](mult(r, p))]")))
 (scale_constants 0
  (scale_constants-1 nil 3810895272
   ("" (induct " p")
    (("1" (skeep :preds? T)
      (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (replace -1)
            (("1" (expand "mult" +)
              (("1" (expand "nth" 1)
                (("1" (expand "mult") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "mult" +)
            (("2" (expand "nth" 2)
              (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (rewrite "mult_length") (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((mult_length formula-decl nil standard_form_extras nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (mult_map 0
  (mult_map-1 nil 3811867915 ("" (induct-and-simplify "p") nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil))
   shostak))
 (mult_mv_sans 0
  (mult_mv_sans-1 nil 3811867623
   ("" (skeep :preds? T)
    (("" (rewrite "mult_map")
      (("" (expand "mv_standard_sans_cut?")
        (("" (assert)
          (("" (split -2)
            (("1" (expand "map" 2 1) (("1" (assert) nil nil)) nil)
             ("2" (case "null?(p)")
              (("1" (expand "map" 2 1) (("1" (assert) nil nil)) nil)
               ("2" (expand "map" 3 1)
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "map" 3 2)
                        (("2" (lemma "map_length[monomial, monomial]")
                          (("2" (inst?)
                            (("2" (split 3)
                              (("1"
                                (expand "Unif?")
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "i" "j")
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (rewrite "map_nth_rw")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "allnonzero?")
                                (("2"
                                  (expand "map" 1 1)
                                  (("2"
                                    (split -4)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split 2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (rewrite "map_nth_rw")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "is_sorted?")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst -6 "k")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (rewrite "map_nth_rw")
                                          (("1"
                                            (lemma
                                             "constant_doesnt_matter")
                                            (("1"
                                              (inst
                                               -1
                                               "nth(p, k)"
                                               "(# C := nth(p, k)`C * r, alpha := nth(p,k)`alpha #)"
                                               " nth(p, 1 + k)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "constant_doesnt_matter_last")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "(# C := nth(p, k)`C * r, alpha := nth(p, k)`alpha #)"
                                                     "
          nth(p, 1 + k)"
                                                     " (# C := nth(p, 1 + k)`C * r, alpha := nth(p, 1 + k)`alpha #)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand "simplified?")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "map" 1 1)
                                    (("4"
                                      (split -6)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "i" "j")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "map_nth_rw")
                                                      (("2"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_map formula-decl nil standard_form_extras nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (map_length formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (below type-eq-decl nil nat_types nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (mult_mv_standard 0
  (mult_mv_standard-1 nil 3812101347
   ("" (skeep)
    (("" (rewrite "mult_map")
      (("" (typepred "p")
        (("" (expand "mv_standard_form?")
          (("" (split -1)
            (("1" (expand "map" 1 1) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "map" 2 1)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split 2)
                        (("1" (propax) nil nil)
                         ("2"
                          (case "null?(map(LAMBDA (m: monomial):
                       (# C := m`C * r, alpha := m`alpha #))
                    (p))")
                          (("1" (expand "map" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2"
                            (lemma "map_length[monomial, monomial]")
                            (("2" (inst?)
                              (("2"
                                (lemma
                                 "map_nth_rw[monomial, monomial]")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (expand "minlength?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (split -3)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "i")
                                                    (("1"
                                                      (inst -2 "i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "NOT Unif?(map(LAMBDA (m: monomial): (# C := m`C * r, alpha := m`alpha #))
               (p))")
                                                        (("1"
                                                          (hide (3))
                                                          (("1"
                                                            (expand
                                                             "Unif?")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst-cp
                                                                 -3
                                                                 "i")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "j")
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "i"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep -3)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "j")
                                                              (("2"
                                                                (inst
                                                                 3
                                                                 "j")
                                                                (("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "allnonzero?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (split -5)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "i")
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (inst 1 "i")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "is_sorted?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst -6 "k")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "constant_doesnt_matter")
                                              (("1"
                                                (inst-cp -3 "k")
                                                (("1"
                                                  (inst -3 "k+1")
                                                  (("1"
                                                    (replaces -3)
                                                    (("1"
                                                      (replaces -3)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "nth(p, k)"
                                                         "(# C := nth(p, k)`C * r, alpha := nth(p, k)`alpha #)"
                                                         " nth(p, 1 + k)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "constant_doesnt_matter_last")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(# C := nth(p, k)`C * r, alpha := nth(p, k)`alpha #)"
                                                               " 
          nth(p, 1 + k)"
                                                               " (# C := nth(p, 1 + k)`C * r, alpha := nth(p, 1 + k)`alpha #)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "simplified?")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (split -6)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst-cp
                                                         -3
                                                         "i")
                                                        (("2"
                                                          (inst -3 "j")
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "i"
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_map formula-decl nil standard_form_extras nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (below type-eq-decl nil nat_types nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (max_length_different_lft_nth_TCC1 0
  (max_length_different_lft_nth_TCC1-1 nil 3812114899
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (max_length_different_lft_nth subtype
    "real_defs.max(standard_form_mult_poly.max_length(standard_form_extras.p), standard_form_mult_poly.max_length(standard_form_extras.q))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_extras.p))}")))
 (max_length_different_lft_nth_TCC2 0
  (max_length_different_lft_nth_TCC2-1 nil 3812114899
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "Lft_length" :dir rl) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil))
   nil
   (max_length_different_lft_nth subtype "standard_form_extras.i"
    "below[length[monomial](lft(p)(max(max_length(p), max_length(q))))]")))
 (max_length_different_lft_nth_TCC3 0
  (max_length_different_lft_nth_TCC3-1 nil 3812114899
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (max_length_different_lft_nth subtype
    "real_defs.max(standard_form_mult_poly.max_length(standard_form_extras.p), standard_form_mult_poly.max_length(standard_form_extras.q))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_extras.q))}")))
 (max_length_different_lft_nth_TCC4 0
  (max_length_different_lft_nth_TCC4-1 nil 3812114899
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "Lft_length" :dir rl) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil))
   nil
   (max_length_different_lft_nth subtype "standard_form_extras.i"
    "below[length[monomial](lft(q)(max(max_length(p), max_length(q))))]")))
 (max_length_different_lft_nth 0
  (max_length_different_lft_nth-1 nil 3812114900
   (""
    (case "FORALL (p, q: (minlength?)):
               length(p) = length(q) AND max_length(p) > max_length(q) IMPLIES
                EXISTS (i: below(length(p))):
                  nth(lft(p)(max(max_length(p), max_length(q))), i)`alpha /=
                   nth(lft(q)(max(max_length(p), max_length(q))), i)`alpha")
    (("1" (skeep)
      (("1" (case "max_length(p)> max_length(q)")
        (("1" (inst -2 "p" "q") (("1" (assert) nil nil)) nil)
         ("2" (inst -1 "q" "p")
          (("2" (assert)
            (("2" (skeep)
              (("2" (assert)
                (("2" (inst 4 "i")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2"
                        (case "max(max_length(q), max_length(p)) = max(max_length(p), max_length(q))")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "max") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep :preds? T)
        (("2" (expand "minlength?" -1)
          (("2" (assert)
            (("2" (split -1)
              (("1" (case "NOT null?(q)")
                (("1" (assert)
                  (("1" (expand "length" -3) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "max_length" -5) (("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (case "null?(q)")
                  (("1" (expand "length" -4) (("1" (assert) nil nil))
                    nil)
                   ("2" (split -1)
                    (("1" (lemma " max_length_is_nth")
                      (("1" (inst -1 "p")
                        (("1" (skeep)
                          (("1" (inst -2 "j") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (skeep -2)
                              (("1"
                                (expand "Unif?")
                                (("1"
                                  (lemma "max_length_is_nth")
                                  (("1"
                                    (inst -1 "p")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst -2 "j!1" "j")
                                        (("1"
                                          (inst 5 "j")
                                          (("1"
                                            (rewrite "lft_is_alt" 5)
                                            (("1"
                                              (expand "lft_alt" 5)
                                              (("1"
                                                (rewrite
                                                 "map_nth_rw"
                                                 5)
                                                (("1"
                                                  (expand "lft_one")
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -7
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace -1 -7)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -7)
                                                            (("1"
                                                              (rewrite
                                                               "append_null_right")
                                                              (("1"
                                                                (rewrite
                                                                 "lft_is_alt")
                                                                (("1"
                                                                  (expand
                                                                   "lft_alt")
                                                                  (("1"
                                                                    (rewrite
                                                                     "map_nth_rw"
                                                                     -7)
                                                                    (("1"
                                                                      (expand
                                                                       "lft_one")
                                                                      (("1"
                                                                        (expand
                                                                         "minlength?")
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "last_is_nth")
                                                                            (("1"
                                                                              (rewrite
                                                                               "nth_append")
                                                                              (("1"
                                                                                (split
                                                                                 -4)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "j")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_appendn")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "nth_appendn")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "max_length_is_nth")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "rem(1)(max_length(p) - 1 - length(nth(q, j)`alpha))")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT rem(1)(max_length(p) - 1 - length(nth(q, j)`alpha)) = 0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "q")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "every_nth"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "max_length_is_max")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "q "
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (rewrite
                                                                                               "every_nth"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "max_length_is_max")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "q "
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "max_length_is_max")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "every_nth"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "max_length_is_max")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "q "
                                                                                                     "i!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (copy
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "Unif?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "max_length_is_nth")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "q")
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "j!2"
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "length_append")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "length_appendn")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "nth_appendn")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       " rem(1)(max_length(p) - 1 - max_length(q))")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "not rem(1)(max_length(p) - 1 - max_length(q)) = 0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nth"
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "every_nth"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "max_length_is_max")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "q"
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_append"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "max")
                                                                (("2"
                                                                  (rewrite
                                                                   "every_nth"
                                                                   1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (lemma
                                                                       "max_length_is_max")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "i")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep :preds? T)
        (("3" (rewrite "Lft_length" :dir rl) (("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep) (("4" (expand "max") (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (rewrite "Lft_length" :dir rl) (("5" (assert) nil nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep) (("6" (expand "max") (("6" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_null_right formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_appendn formula-decl nil more_list_props structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (every_nth formula-decl nil list_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (lft_max_on_minlength 0
  (lft_max_on_minlength-1 nil 3812119622
   ("" (skeep :preds? T)
    (("" (lemma "list_extensionality[monomial]")
      (("" (rewrite "lft_is_alt")
        (("" (inst?)
          (("" (flatten)
            (("" (hide -1)
              (("" (assert)
                (("" (expand "lft_alt" 1 1)
                  (("" (rewrite "map_length")
                    (("1" (skeep)
                      (("1" (expand "lft_alt")
                        (("1" (rewrite "map_nth_rw" 1)
                          (("1" (hide 2)
                            (("1" (expand "lft_one")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "minlength?")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "n")
                                        (("1"
                                          (expand "lft_alt")
                                          (("1"
                                            (rewrite "map_length")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (lemma "max_length_is_nth")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst-cp -2 "j")
                                                (("1"
                                                  (inst -2 "n")
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           2)
                                                          (("1"
                                                            (rewrite
                                                             "append_null_right")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 2)
                                                                (("1"
                                                                  (rewrite
                                                                   "every_nth"
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "max_length_is_max")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "every_nth"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "max_length_is_max")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "Unif?" -1)
                                                  (("1"
                                                    (lemma
                                                     "max_length_is_nth")
                                                    (("1"
                                                      (inst -1 "p")
                                                      (("1"
                                                        (skeep -1)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "j"
                                                           "n")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   3)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null_right")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       3)
                                                                      (("1"
                                                                        (rewrite
                                                                         "every_nth"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (lemma
                                                                             "max_length_is_max")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "every_nth"
                                                                       1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (lemma
                                                                           "max_length_is_max")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "every_nth" 1)
                      (("2" (skeep)
                        (("2" (lemma "max_length_is_max")
                          (("2" (inst?)
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "lft_alt" 4)
                                (("2"
                                  (expand "map" 4)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (every_nth formula-decl nil list_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (map_length formula-decl nil more_map_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil))
   shostak))
 (sorted_sans_add_never_zero 0
  (sorted_sans_add_never_zero-1 nil 3814286610
   ("" (skeep)
    (("" (lemma "sorted_sans_add_nz")
      (("" (inst?)
        (("" (skeep)
          (("" (expand "allnonzero?" -1)
            (("" (split -1)
              (("1" (typepred "i")
                (("1" (expand "length" -1) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -1)
                  (("1" (propax) nil nil) ("2" (inst 1 "i") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorted_sans_add_nz formula-decl nil arithmetic_MultPoly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   shostak))
 (sorted_sans_add_zero_TCC1 0
  (sorted_sans_add_zero_TCC1-1 nil 3811870405
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   nil
   (sorted_sans_add_zero subtype "standard_form_extras.i"
    "below[length[monomial](q)]")))
 (sorted_sans_add_zero 0
  (sorted_sans_add_zero-1 nil 3811870538
   ("" (induct "n")
    (("1" (skeep)
      (("1" (split 1)
        (("1" (flatten)
          (("1" (expand "every")
            (("1" (assert)
              (("1" (expand "sorted_sans_add")
                (("1" (expand "length")
                  (("1" (lift-if -2)
                    (("1" (split -2)
                      (("1" (assert)
                        (("1" (lift-if -2)
                          (("1" (split -2)
                            (("1" (assert)
                              (("1" (skeep :preds? T) nil nil)) nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (lift-if -2)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (expand
                                           "mv_standard_sans_cut?"
                                           -5)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "allnonzero?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst 1 "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "mv_standard_sans_cut?"
                                               -6)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "allnonzero?")
                                                  (("2"
                                                    (split -8)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "null?(p) AND null?(q)")
            (("1" (flatten)
              (("1" (expand "sorted_sans_add")
                (("1" (assert)
                  (("1" (expand "every") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "length" -)
              (("2" (lift-if -3)
                (("2" (split -3)
                  (("1" (assert) nil nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "cons?(p) AND cons?(q)")
          (("1" (flatten)
            (("1" (inst -3 "nn" "cdr(p)" "cdr(q)")
              (("1" (split -3)
                (("1" (expand "sorted_sans_add" +)
                  (("1" (assert)
                    (("1" (case "car(p)`alpha = car(q)`alpha")
                      (("1" (assert)
                        (("1" (expand "every" 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (expand "length" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (case "i=0")
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "nth" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "mult"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (expand "mult" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -2 "i-1")
                                                (("1"
                                                  (expand "nth" 2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "every" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "add_mono" -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split -5)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "every" -2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "add_mono" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "0")
                                            (("2"
                                              (expand "nth" -3)
                                              (("2"
                                                (expand "mult" -3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "length" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (inst -2 "i+1")
                                        (("1"
                                          (expand "nth" -2)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "mv_standard_sans_cut?" -8)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "allnonzero?" -10)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "0")
                                              (("2"
                                                (expand "nth" 1)
                                                (("2"
                                                  (expand "every" -2)
                                                  (("2"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "mv_standard_sans_cut?" -8)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "allnonzero?" -10)
                                      (("2"
                                        (split -10)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand "every" -1)
                                              (("1" (flatten) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (inst -2 "0")
                                (("2"
                                  (expand "nth" -2)
                                  (("2"
                                    (expand "mult" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -3) (("2" (assert) nil nil))
                  nil)
                 ("3" (lemma " mv_standard_sans_cdr")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
                 ("4" (lemma " mv_standard_sans_cdr")
                  (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide -1)
              (("2" (expand "length" -1)
                (("2" (lift-if -1)
                  (("2" (split -1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split 3)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (expand "sorted_sans_add" -1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "mv_standard_sans_cut?"
                                           -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "allnonzero?" -6)
                                              (("1"
                                                (split -6)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand "nth" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "sorted_sans_add" -1)
                                  (("2"
                                    (expand "every" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "mv_standard_sans_cut?"
                                         -4)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "allnonzero?" -6)
                                            (("2"
                                              (split -6)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst 1 "0")
                                                (("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (typepred "i") (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (PRED type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sorted_sans_nth 0
  (sorted_sans_nth-1 nil 3814440184
   (""
    (case "FORALL (A,n: nat, p: (mv_standard_sans_cut?(n)),
                     q: (mv_standard_sans_cut?(n))):
               length(p)+length(q) <= A IMPLIES( FORALL (i: below(length(sorted_sans_add(n, p, q)))):
                 (EXISTS (j: below(length(p))):
                    nth(sorted_sans_add(n, p, q), i)`alpha = nth(p, j)`alpha)
                  OR
                  (EXISTS (j: below(length(q))):
                     nth(sorted_sans_add(n, p, q), i)`alpha = nth(q, j)`alpha))")
    (("1" (skeep)
      (("1" (assert)
        (("1" (inst -1 "length(p) + length(q)" "n" "p" "q")
          (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(p) AND null?(q)")
            (("1" (skeep)
              (("1" (typepred "i")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (skeep)
              (("2" (typepred "i")
                (("2" (name "ssa" "sorted_sans_add(n,p,q)")
                  (("2" (replace -1)
                    (("2" (expand "sorted_sans_add" -1)
                      (("2" (case "null?(p)")
                        (("1" (assert)
                          (("1" (case "null?(q)")
                            (("1" (hide -5)
                              (("1"
                                (hide 2 3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst 3 "i")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case " null?(q)")
                            (("1" (assert)
                              (("1"
                                (inst 2 "i")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case "car(p)`alpha=car(q)`alpha")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "car(p)`C+car(q)`C = 0 ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -5 "n" "cdr(p)" "cdr(q)")
                                        (("1"
                                          (expand "length" -6)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3 3 rl)
                                              (("1"
                                                (replace -3 4 rl)
                                                (("1"
                                                  (inst -5 "i")
                                                  (("1"
                                                    (split -5)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 3 "j+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           3
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst 4 "j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             4
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (inst -4 "n" "cdr(p)" "cdr(q)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "i=0")
                                                (("1"
                                                  (replace -3 4 rl)
                                                  (("1"
                                                    (replace -3 5 rl)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       4
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         5
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "add_mono"
                                                             +)
                                                            (("1"
                                                              (inst
                                                               4
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -4 "i-1")
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 5 "j+1")
                                                        (("1"
                                                          (replace
                                                           -3
                                                           5
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             5)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst 6 "j+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           6)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               6
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (expand
                                                         "sorted_sans_add"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case "leq(car(p),car(q))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "i=0")
                                        (("1"
                                          (replace -3 4 rl)
                                          (("1"
                                            (inst 4 "0")
                                            (("1"
                                              (expand "nth" 4)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -4 "n" "cdr(p)" "q")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -5 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2 + rl)
                                                  (("2"
                                                    (inst -4 "i-1")
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       5
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         6
                                                         1)
                                                        (("1"
                                                          (split -4)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               5
                                                               "j+1")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 5
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace
                                                       -2
                                                       -3
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "i=0")
                                        (("1"
                                          (replace -2 + rl)
                                          (("1"
                                            (inst 6 "0")
                                            (("1"
                                              (expand "nth" 6)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 + rl)
                                          (("2"
                                            (replace -1 -2 rl)
                                            (("2"
                                              (inst
                                               -3
                                               "n"
                                               "p"
                                               "cdr(q)")
                                              (("2"
                                                (expand "length" -4 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "nth" 6 1)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       7
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -3
                                                           "i-1")
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 7
                                                                 "j+1")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   7
                                                                   2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq def-decl "bool" standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (sorted_sans_add_Unif 0
  (sorted_sans_add_Unif-1 nil 3814239508
   ("" (skeep)
    (("" (expand "Unif?" 1)
      (("" (typepred "p" "q")
        (("" (flatten)
          (("" (lemma "sorted_sans_nth")
            (("" (inst -1 "n" "p" "q" "_")
              (("" (skeep)
                (("" (inst-cp -1 "i")
                  (("" (inst -1 "j")
                    (("" (expand "mv_standard_sans_cut?" -)
                      (("" (case "null?(p)")
                        (("1" (assert)
                          (("1" (case "null?(q)")
                            (("1" (assert)
                              (("1"
                                (typepred "i")
                                (("1"
                                  (hide -4 -5 -6 -7 -8)
                                  (("1"
                                    (hide 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sorted_sans_add" 3)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "Unif?" -5)
                                    (("2" (inst -5 "i" "j") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "null?(q)")
                            (("1" (expand "sorted_sans_add")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "Unif?" -4)
                                    (("1" (inst -4 "i" "j") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -5 -6 -7 -10 -11 -12)
                                  (("2"
                                    (expand "Unif?")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (inst-cp -3 "j!1" "j_1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep*)
                                          (("2"
                                            (inst -5 "0" "j!1")
                                            (("2"
                                              (inst -3 "0" "j_1")
                                              (("2"
                                                (expand "nth" -3 1)
                                                (("2"
                                                  (expand "nth" -5 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -3 "0" "j!1")
                                              (("1"
                                                (inst -5 "0" "j_1")
                                                (("1"
                                                  (expand "nth" -3 1)
                                                  (("1"
                                                    (expand "nth" -5 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (inst -5 "j!1" "j_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Unif? const-decl "bool" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted_sans_nth formula-decl nil standard_form_extras nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   shostak))
 (sorted_sans_add_sort 0
  (sorted_sans_add_sort-1 nil 3814450703
   (""
    (case "FORALL (A, n: nat, p: (mv_standard_sans_cut?(n)),
              q: (mv_standard_sans_cut?(n))):
        length(p) + length(q) <= A IMPLIES is_sorted?(sorted_sans_add(n, p, q))")
    (("1" (skeep)
      (("1" (inst -1 "length(p) + length(q)" "n" "p" "q")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(p) AND null?(q)")
            (("1" (expand "sorted_sans_add" 1)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (typepred "q")
                      (("1" (expand "is_sorted?" 1)
                        (("1" (skeep) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "null?(p)")
              (("1" (expand "sorted_sans_add" 1)
                (("1" (assert)
                  (("1" (typepred "q")
                    (("1" (expand "mv_standard_sans_cut?" -1)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (expand "is_sorted?" 1)
                            (("1" (skeep) (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "null?(q)")
                (("1" (expand "sorted_sans_add" 2)
                  (("1" (assert)
                    (("1" (typepred "p")
                      (("1" (expand "mv_standard_sans_cut?" -1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "sorted_sans_add" 3)
                    (("2" (assert)
                      (("2" (split 3)
                        (("1" (flatten)
                          (("1" (inst -2 "n" "cdr(p)" "cdr(q)")
                            (("1" (expand "length" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1" (flatten) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "is_sorted?" 2 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (case "NOT k=0")
                                            (("1"
                                              (expand "is_sorted?" -3)
                                              (("1"
                                                (inst -3 "k-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "nth" 2 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "sorted_sans_nth")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "cdr(p)"
                                                       "cdr(q)"
                                                       "0")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "is_sorted_nth")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p")
                                                                    (("1"
                                                                      (typepred
                                                                       " p")
                                                                      (("1"
                                                                        (expand
                                                                         "mv_standard_sans_cut?"
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "0"
                                                                               "j!1+1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "constant_doesnt_matter")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "car(p)"
                                                                                     "add_mono(car(p),car(q))"
                                                                                     "nth(p,j!1+1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -7
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "add_mono")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "constant_doesnt_matter_last")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(# C := car(p)`C + car(q)`C, alpha := car(p)`alpha #)"
                                                                                                         "nth(cdr(p),j!1)"
                                                                                                         "car(sorted_sans_add(n,cdr(p),cdr(q)))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep -1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "is_sorted_nth")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "q")
                                                                      (("2"
                                                                        (typepred
                                                                         "q")
                                                                        (("2"
                                                                          (expand
                                                                           "mv_standard_sans_cut?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -6
                                                                                 "0"
                                                                                 "j!1+1")
                                                                                (("1"
                                                                                  (hide
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "constant_doesnt_matter_last")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "constant_doesnt_matter")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "car(q)"
                                                                                               "add_mono(car(p),car(q))"
                                                                                               "nth(cdr(q),j!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add_mono"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "add_mono(car(p),car(q))"
                                                                                                       "nth(cdr(q),j!1)"
                                                                                                       "car(sorted_sans_add(n,cdr(p),cdr(q)))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -8
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (reveal -)
                                    (("1"
                                      (lemma " mv_standard_sans_cdr")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma " mv_standard_sans_cdr")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma " mv_standard_sans_cdr")
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "is_sorted?" 1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "NOT k=0")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -3 "n" "cdr(p)" "q")
                                          (("1"
                                            (expand "length" -4 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "is_sorted?"
                                                 -3)
                                                (("1"
                                                  (inst -3 "k-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nth" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "sorted_sans_nth")
                                          (("2"
                                            (inst
                                             -1
                                             "n"
                                             "cdr(p)"
                                             "q"
                                             "k")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "is_sorted_nth")
                                                  (("1"
                                                    (inst -1 "p")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (typepred
                                                           " p")
                                                          (("1"
                                                            (expand
                                                             "mv_standard_sans_cut?"
                                                             -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "0"
                                                                   "j!1+1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -6)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "constant_doesnt_matter_last")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "car(p)"
                                                                             "nth(cdr(p),j!1)"
                                                                             "nth(sorted_sans_add(n,cdr(p),q),k)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma
                                                   "is_sorted_nth")
                                                  (("2"
                                                    (inst -1 "q")
                                                    (("2"
                                                      (typepred "q")
                                                      (("2"
                                                        (expand
                                                         "mv_standard_sans_cut?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "0"
                                                               "j!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "j!1=0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -8
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "constant_doesnt_matter_last")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "car(p)"
                                                                               "car(q)"
                                                                               "nth(sorted_sans_add(n,cdr(p),q),k)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       -6
                                                                       1)
                                                                      (("2"
                                                                        (lemma
                                                                         "constant_doesnt_matter_last")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "car(q)"
                                                                           "nth(q,j!1)"
                                                                           "nth(sorted_sans_add(n,cdr(p),q),k)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "leq_transitive")
                                                                              (("2"
                                                                                (expand
                                                                                 "transitive?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "car(p)"
                                                                                   "car(q)"
                                                                                   "nth(sorted_sans_add(n,cdr(p),q),k)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "is_sorted?" 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case "NOT k=0")
                                    (("1"
                                      (expand "nth" 3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -2 "n" "p" "cdr(q)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -3 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -1
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "is_sorted?"
                                                       -2)
                                                      (("1"
                                                        (inst -2 "k-1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nth" 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "sorted_sans_nth")
                                          (("2"
                                            (inst
                                             -1
                                             "n"
                                             "p"
                                             "cdr(q)"
                                             "k")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (expand
                                                     "mv_standard_sans_cut?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "is_sorted_nth")
                                                        (("1"
                                                          (inst -1 "p")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "j!1=0")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -8)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "constant_doesnt_matter_last")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "car(q)"
                                                                         "car(p)"
                                                                         " car(sorted_sans_add(n, p, cdr(q)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 3)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "almost_total_order")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "car(q)"
                                                                                     "car(p)")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "leq_dichotomous")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "dichotomous?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "car(q)"
                                                                                           "car(p)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -1
                                                                 "0"
                                                                 "j!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "constant_doesnt_matter_last")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "car(p)"
                                                                         "nth(p,j!1) "
                                                                         "nth(sorted_sans_add(n, p, cdr(q)), k)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "constant_doesnt_matter_last")
                                                                            (("2"
                                                                              (lemma
                                                                               "leq_dichotomous")
                                                                              (("2"
                                                                                (expand
                                                                                 "dichotomous?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "car(p)"
                                                                                   "car(q)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "leq_transitive")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "transitive?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "car(q)"
                                                                                           "car(p)"
                                                                                           "nth(p,j!1)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "constant_doesnt_matter_last")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "car(q)"
                                                                                                 "nth(p,j!1)"
                                                                                                 "nth(sorted_sans_add(n, p, cdr(q)), k)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma
                                                   "is_sorted_nth")
                                                  (("2"
                                                    (inst -1 "q")
                                                    (("2"
                                                      (typepred "q")
                                                      (("2"
                                                        (expand
                                                         "mv_standard_sans_cut?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "0"
                                                               "j!1+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -6)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "constant_doesnt_matter_last")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "car(q)"
                                                                         "nth(cdr(q),j!1)"
                                                                         " nth(sorted_sans_add(n, p, cdr(q)), k)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (almost_total_order formula-decl nil standard_form_mult_poly nil)
    (leq_dichotomous formula-decl nil standard_form_mult_poly nil)
    (dichotomous? const-decl "bool" orders nil)
    (leq_transitive formula-decl nil standard_form_mult_poly nil)
    (transitive? const-decl "bool" relations nil)
    (mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (is_sorted_nth formula-decl nil standard_form_mult_poly nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (sorted_sans_nth formula-decl nil standard_form_extras nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (sorted_add_sorted 0
  (sorted_add_sorted-1 nil 3814458230
   ("" (lemma "sorted_sans_add_sort")
    (("" (skeep)
      (("" (expand "sorted_add" 1) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_sans_add_sort formula-decl nil standard_form_extras nil))
   shostak))
 (sorted_sans_add_simp 0
  (sorted_sans_add_simp-1 nil 3814383300
   (""
    (case "FORALL(A:nat,n: nat, p: (mv_standard_sans_cut?(n)),
                     q: (mv_standard_sans_cut?(n))):
               length(p) + length(q) <= A IMPLIES simplified?(sorted_sans_add(n, p, q))")
    (("1" (skeep)
      (("1" (inst -1 "length(p) + length(q)" "n" "p" "q")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(p) AND null?(q)")
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sorted_sans_add" 1 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (typepred "q")
                    (("1" (expand "mv_standard_sans_cut?" -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (typepred "p")
                        (("1" (expand "mv_standard_sans_cut?" -1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (inst -3 "n" "cdr(p)" "cdr(q)")
                                (("1"
                                  (expand "length" -4)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -2 "n" "cdr(p)" "cdr(q)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" -3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "simplified?")
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (case
                                                 "sorted_sans_add(n, cdr(p), cdr(q)) = null")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (skeep 1)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (skeep 2)
                                                      (("1"
                                                        (typepred
                                                         "i"
                                                         "j!1")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "length "
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "i=0")
                                                                    (("1"
                                                                      (case
                                                                       "NOT j!1=1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "nth"
                                                                         -6)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "add_mono")
                                                                            (("2"
                                                                              (lemma
                                                                               "sorted_sans_nth")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "n"
                                                                                 "cdr(p)"
                                                                                 "cdr(q)"
                                                                                 "j!1-1")
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "p")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "mv_standard_sans_cut?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "simplified?"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (split
                                                                                               -5)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0"
                                                                                                     "j!2+1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "j!2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (typepred
                                                                                                       "p")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "q")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "mv_standard_sans_cut?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "simplified?"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "j!2+1"
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "j!1=0")
                                                                        (("1"
                                                                          (case
                                                                           "NOT i=1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sorted_sans_nth")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "n"
                                                                                     "cdr(p)"
                                                                                     "cdr(q)"
                                                                                     "_")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "i-1")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "p")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "mv_standard_sans_cut?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "simplified?"
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "j!2+1"
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "add_mono")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "q")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "mv_standard_sans_cut?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "simplified?"
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "0"
                                                                                                           "j!2+1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "add_mono")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "i/=0 AND j!1/=0")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i-1"
                                                               "j!1-1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (case
                                                                 "NOT i=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "j!1=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nth"
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "add_mono"
                                                                         -3)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           -3
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "sorted_sans_nth")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "n"
                                                                                 "cdr(p)"
                                                                                 "cdr(q)"
                                                                                 "j!1-1")
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "p")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "mv_standard_sans_cut?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "simplified?"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (split
                                                                                               -5)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0"
                                                                                                     "j!2+1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "q")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "mv_standard_sans_cut?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "simplified?"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "0"
                                                                                                       "j!2+1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "NOT j!1=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "i=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nth"
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "sorted_sans_nth")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "cdr(p)"
                                                                             "cdr(q)"
                                                                             "i-1")
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "p")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "mv_standard_sans_cut?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "simplified?"
                                                                                         -5)
                                                                                        (("1"
                                                                                          (split
                                                                                           -5)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "j!2+1"
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "add_mono")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "q")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "mv_standard_sans_cut?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "simplified?"
                                                                                           -5)
                                                                                          (("2"
                                                                                            (split
                                                                                             -5)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0"
                                                                                                   "j!2+1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "add_mono"
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "simplified?" 1)
                                (("1"
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (case "i=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "sorted_sans_nth")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "n"
                                                     "cdr(p)"
                                                     "q"
                                                     "_")
                                                    (("1"
                                                      (inst -1 "j!1-1")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "p")
                                                            (("1"
                                                              (expand
                                                               "mv_standard_sans_cut?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "simplified?"
                                                                   -5)
                                                                  (("1"
                                                                    (split
                                                                     -5)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "j!2+1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "length"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "q")
                                                            (("2"
                                                              (expand
                                                               "mv_standard_sans_cut?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "is_sorted?"
                                                                   -4)
                                                                  (("2"
                                                                    (replace
                                                                     -6
                                                                     -8)
                                                                    (("2"
                                                                      (lemma
                                                                       "constant_doesnt_matter")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "car(p)"
                                                                         "nth(q,j!2)"
                                                                         "car(q)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "almost_total_order")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "nth(q,j!2)"
                                                                               "car(q)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "q")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mv_standard_sans_cut?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "is_sorted_nth")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "q")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "0"
                                                                                             "j!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -10)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "j!1=0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "sorted_sans_nth")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "cdr(p)"
                                                         "q"
                                                         "i-1")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -3)
                                                              (("1"
                                                                (typepred
                                                                 "p")
                                                                (("1"
                                                                  (expand
                                                                   "mv_standard_sans_cut?"
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "simplified?"
                                                                       -5)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "j!2+1"
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -3)
                                                                (("2"
                                                                  (lemma
                                                                   "almost_total_order")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "nth(q,j!2)"
                                                                     "car(q)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "constant_doesnt_matter")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "car(p)"
                                                                           "nth(q,j!2)"
                                                                           "car(q)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "is_sorted_nth")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "q")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "q")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mv_standard_sans_cut?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -6
                                                                                           "0"
                                                                                           "j!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -6)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nth" -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "n"
                                                     "cdr(p)"
                                                     "q")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -4
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "simplified?"
                                                             -3)
                                                            (("2"
                                                              (split
                                                               -3)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (typepred
                                                                   "i")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "j!1")
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i-1"
                                                                     "j!1-1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "simplified?" 2)
                                (("2"
                                  (split 2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (case "i=0")
                                          (("1"
                                            (case "j!1=0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "nth" -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "sorted_sans_nth")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "n"
                                                     "p"
                                                     "cdr(q)"
                                                     "j!1-1")
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("1"
                                                            (lemma
                                                             "is_sorted_nth")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("1"
                                                                (typepred
                                                                 "p")
                                                                (("1"
                                                                  (expand
                                                                   "mv_standard_sans_cut?"
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "0"
                                                                         "j!2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "constant_doesnt_matter_last")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "car(p)"
                                                                                     "nth(p,j!2)"
                                                                                     "car(q)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "nth"
                                                                                 -9)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (typepred
                                                               "q")
                                                              (("2"
                                                                (expand
                                                                 "mv_standard_sans_cut?"
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "simplified?"
                                                                     -5)
                                                                    (("2"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "0"
                                                                             "j!2+1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "j!1=0")
                                              (("1"
                                                (expand "nth" -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "sorted_sans_nth")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "p"
                                                       "cdr(q)"
                                                       "i-1")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (lemma
                                                               "is_sorted_nth")
                                                              (("1"
                                                                (typepred
                                                                 "p")
                                                                (("1"
                                                                  (expand
                                                                   "mv_standard_sans_cut? "
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "p")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "0"
                                                                               "j!2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -6)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "constant_doesnt_matter_last")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "car(p)"
                                                                                             "nth(p,j!2)"
                                                                                             "car(q)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -9)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (typepred
                                                                 "q")
                                                                (("2"
                                                                  (expand
                                                                   "mv_standard_sans_cut? "
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "simplified?"
                                                                       -5)
                                                                      (("2"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "j!2+1"
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nth" -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "n"
                                                     "p"
                                                     "cdr(q)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "simplified?"
                                                             -2)
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   4)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     4)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i"
                                                                   "j!1")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i-1"
                                                                     "j!1-1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (is_sorted_nth formula-decl nil standard_form_mult_poly nil)
    (almost_total_order formula-decl nil standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sorted_sans_nth formula-decl nil standard_form_extras nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length_null formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (add_nonzero 0
  (add_nonzero-1 nil 3814382178
   ("" (skeep)
    (("" (expand "add" 1)
      (("" (expand "min_add" 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "sort_add" 1)
              (("1" (lemma "sorted_sans_add_nz")
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "sorted_add" 1)
                      (("1" (inst?) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (expand "sorted_add" 2)
                            (("1" (inst?) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "sorted_add" 2)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "sorted_add" 2)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "sorted_sans_add_nz")
              (("2" (lemma "lft_cut_allnonzero")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "sort_add" 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (expand "sorted_add" 1)
                            (("1" (inst?) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "sorted_add" 2)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "sorted_add" 2)
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "sorted_add" 2)
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (sorted_sans_add_nz formula-decl nil arithmetic_MultPoly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (lft_cut_allnonzero formula-decl nil standard_form_mult_poly nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (add_simplified 0
  (add_simplified-1 nil 3814449230
   ("" (skeep)
    (("" (expand "add" 1)
      (("" (expand "min_add")
        (("" (lemma "sorted_sans_add_simp")
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "sort_add" 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "sorted_add" 1)
                      (("1" (inst?) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (split 2)
                        (("1" (expand "sorted_add" 1)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "sorted_add" 2)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "sorted_add" 2)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (lemma "lft_cut_alpha_mv_cut")
                    (("2" (inst?)
                      (("2" (hide -1)
                        (("2" (lemma "sorted_sans_add_Unif")
                          (("2" (lemma "sorted_sans_add_simp")
                            (("2" (expand "sort_add" 1)
                              (("2"
                                (lift-if 1)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "sorted_add" 1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "lft_standard_is_sans")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil)
                                         ("4"
                                          (lemma
                                           "lft_standard_is_sans")
                                          (("4" (inst?) nil nil))
                                          nil)
                                         ("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "sorted_add" 2)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (lemma
                                                 "lft_standard_is_sans")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "standard_form_is_standard")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (assert) nil nil)
                                             ("4"
                                              (lemma
                                               "standard_form_is_standard")
                                              (("4"
                                                (lemma
                                                 "lft_standard_is_sans")
                                                (("4"
                                                  (inst? -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "sorted_add" 2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (lemma
                                                     "lft_standard_is_sans")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (lemma
                                                   "lft_standard_is_sans")
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lemma
                                                         "standard_form_is_standard")
                                                        (("4"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "sorted_add" 2)
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "lft_standard_is_sans")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "standard_form_is_standard")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (lemma
                                                   "standard_form_is_standard")
                                                  (("4"
                                                    (lemma
                                                     "lft_standard_is_sans")
                                                    (("4"
                                                      (inst? -1)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (inst -1 "p")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_sans_add_simp formula-decl nil standard_form_extras nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (sorted_sans_add_Unif formula-decl nil standard_form_extras nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (lft_standard_is_sans formula-decl nil arithmetic_MultPoly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (lft_cut_alpha_mv_cut formula-decl nil standard_form_mult_poly nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (add_minlength 0
  (add_minlength-1 nil 3814450025
   ("" (skeep)
    (("" (expand "add" 1)
      (("" (expand "min_add" 1)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lemma "lft_mv_cut")
                  (("2" (inst?)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (expand "minlength?" 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "MultPoly" arithmetic_MultPoly nil)
    (lft_mv_cut formula-decl nil standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (add_sorted 0
  (add_sorted-1 nil 3814450350
   ("" (lemma "sorted_sans_add_sort")
    (("" (skeep)
      (("" (expand "add" 1)
        (("" (expand "min_add" 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "sort_add" 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "sorted_add" 1)
                      (("1" (inst?) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (expand "sorted_add" 2)
                            (("1" (inst?) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (expand "sorted_add" 2)
                              (("1" (inst?) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "sorted_add" 2)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (lemma "sorted_mv_lift")
                  (("2" (lemma "sorted_sans_add_Unif")
                    (("2" (inst? -2)
                      (("2" (assert)
                        (("2" (hide 3)
                          (("2" (expand "sort_add" 1)
                            (("2" (lift-if 1)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "sorted_add")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1" (inst?) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "lft_standard_is_sans")
                                          (("2" (inst? -1) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil)
                                       ("4"
                                        (lemma "lft_standard_is_sans")
                                        (("4" (inst? -1) nil nil))
                                        nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "sorted_add" 2)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma
                                               "lft_standard_is_sans")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "standard_form_is_standard")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil)
                                           ("4"
                                            (hide 3)
                                            (("4"
                                              (lemma
                                               "lft_standard_is_sans")
                                              (("4" (inst?) nil nil))
                                              nil))
                                            nil)
                                           ("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "sorted_add" 2)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (lemma
                                                   "lft_standard_is_sans")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil)
                                               ("4"
                                                (hide 3)
                                                (("4"
                                                  (lemma
                                                   "lft_standard_is_sans")
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lemma
                                                         "standard_form_is_standard")
                                                        (("4"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "sorted_add" 2)
                                            (("2"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (lemma
                                                     "lft_standard_is_sans")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (lemma
                                                         "standard_form_is_standard")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (hide 2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 3)
                                                (("4"
                                                  (lemma
                                                   "lft_standard_is_sans")
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lemma
                                                         "standard_form_is_standard")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_mv_lift formula-decl nil standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lft_standard_is_sans formula-decl nil arithmetic_MultPoly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (sorted_sans_add_Unif formula-decl nil standard_form_extras nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sorted_sans_add_sort formula-decl nil standard_form_extras nil))
   shostak))
 (add_standard_form 0
  (add_standard_form-1 nil 3813934717
   ("" (lemma "add_nonzero")
    (("" (lemma "add_simplified")
      (("" (lemma "add_minlength")
        (("" (lemma "add_sorted")
          (("" (skeep)
            (("" (inst?)
              (("" (inst?)
                (("" (inst?)
                  (("" (inst?)
                    (("" (expand "mv_standard_form?" 1)
                      (("" (assert)
                        (("" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lemma "add_minlength")
                                    (("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_simplified formula-decl nil standard_form_extras nil)
    (add_sorted formula-decl nil standard_form_extras nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (add_minlength formula-decl nil standard_form_extras nil)
    (add_nonzero formula-decl nil standard_form_extras nil))
   shostak))
 (mult_standard_form 0
  (mult_standard_form-1 nil 3861966095
   ("" (skeep)
    (("" (expand "mp_mult")
      (("" (split)
        (("1" (flatten) (("1" (grind) nil nil)) nil)
         ("2" (flatten)
          (("2" (lemma "add_standard_form") (("2" (inst? -1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mp_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (add_standard_form formula-decl nil standard_form_extras nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil))
   shostak))
 (scal_full_eval_monom_TCC1 0
  (scal_full_eval_monom_TCC1-1 nil 3814171304
   ("" (subtype-tcc) nil nil)
   ((mult const-decl "monomial" arithmetic_MultPoly nil)) nil
   (scal_full_eval_monom subtype "standard_form_extras.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(arithmetic_MultPoly.mult(standard_form_extras.r, standard_form_extras.m)`alpha))}")))
 (scal_full_eval_monom 0
  (scal_full_eval_monom-1 nil 3814171428
   (""
    (case "FORALL (n:nat,r: real, m: monomial,
                     vals: list[real] | length(vals) >= length(m`alpha)):
               length(m`alpha)=n IMPLIES full_eval(mult(r, m))(vals) = r * full_eval(m)(vals)")
    (("1" (skeep)
      (("1" (inst -1 "length(m`alpha)" "r" "m" "vals") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n" 1)
        (("1" (skeep)
          (("1" (expand "length " -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "full_eval" 1 1)
                  (("1" (expand "mult" 1 1)
                    (("1" (lemma "alpha_null_eval")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (lemma "alpha_null_eval")
                              (("1"
                                (expand "full_eval" 1 1)
                                (("1"
                                  (inst
                                   -1
                                   "m"
                                   "vals"
                                   "list_length_n[nat](length(vals))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "list_length_n[nat]")
                                    (("2"
                                      (inst -1 "length(vals)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "list_length_n[nat]")
                          (("2" (inst -1 "length(vals)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "mult" 1 1)
              (("2" (lemma "eval_vals")
                (("2" (inst -1 "length(m`alpha)" "m" "vals")
                  (("1" (replace -1 1)
                    (("1" (lemma "eval_vals")
                      (("1"
                        (inst -1 "length(m`alpha)"
                         "(# C := m`C * r, alpha := m`alpha #)" "vals")
                        (("1" (replace -1 1)
                          (("1" (assert)
                            (("1" (expand "hat" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2 -1 -2)
                          (("2" (expand "length" 1)
                            (("2" (lift-if 1)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "length" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "length" 1)
                      (("2" (lift-if 1)
                        (("2" (split 1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (assert)
              (("3" (typepred "vals")
                (("3" (hide -1)
                  (("3" (lemma "mult_length_monom")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "mult_length_monom")
          (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_length_monom formula-decl nil standard_form_extras nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_vals formula-decl nil eval_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (alpha_null_eval formula-decl nil eval_properties nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (scale_full_eval_TCC1 0
  (scale_full_eval_TCC1-1 nil 3810892729
   ("" (skeep)
    (("" (lemma "mult_length")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "mult_max_length")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_length formula-decl nil standard_form_extras nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_max_length formula-decl nil standard_form_extras nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (scale_full_eval subtype "standard_form_extras.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.mult(standard_form_extras.r, standard_form_extras.p)))}")))
 (scale_full_eval 0
  (scale_full_eval-1 nil 3814005374
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "mult" 1 1)
        (("1" (assert)
          (("1" (expand "full_eval" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "mult" 1 1)
          (("2" (lemma "full_eval_recurs")
            (("2"
              (inst -1 "cons(mult(r, cons1_var), mult(r, cons2_var))"
               "vals")
              (("2" (assert)
                (("2" (replace -1 1)
                  (("2" (lemma "scal_full_eval_monom")
                    (("2" (inst?)
                      (("1" (replace -1 1)
                        (("1" (assert)
                          (("1" (inst -3 "r" "vals")
                            (("1" (replace -3 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "full_eval_recurs")
                                  (("1"
                                    (inst
                                     -1
                                     "cons(cons1_var,cons2_var)"
                                     "vals")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "vals")
                                (("2"
                                  (typepred "vals")
                                  (("2"
                                    (expand "max_length" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "vals")
                          (("2" (expand "max_length" -2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "mult_max_length")
          (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((mult_max_length formula-decl nil standard_form_extras nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_full_eval_monom formula-decl nil standard_form_extras nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (vals_pad_TCC1 0
  (vals_pad_TCC1-1 nil 3810892729
   ("" (skeep)
    (("" (lemma "length_append[real]")
      (("" (inst -1 "vals" " ^[real]((: 1 :), n)")
        (("" (replace -1)
          (("" (lemma "length_appendn[real]")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_append formula-decl nil list_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_appendn formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (vals_pad subtype
    "list_props[real].append(standard_form_extras.vals, more_list_props[real].^((: 1 :), standard_form_extras.n))"
    "{l: list_adt[real].list | list_props[real].length(l) = (number_fields.+)(standard_form_extras.n, list_props[real].length(standard_form_extras.vals))}")))
 (vals_pad_cdr_TCC1 0
  (vals_pad_cdr_TCC1-1 nil 3814175403
   ("" (skeep)
    (("" (assert)
      (("" (typepred "vals_pad(vals,n)")
        (("" (assert)
          (("" (hide -1)
            (("" (expand "length" -) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil))
   nil
   (vals_pad_cdr subtype
    "standard_form_extras.vals_pad(standard_form_extras.vals, standard_form_extras.n)"
    "(list_adt[real].cons?)")))
 (vals_pad_cdr 0
  (vals_pad_cdr-1 nil 3814175493
   ("" (skeep)
    (("" (expand "vals_pad" 1)
      (("" (expand "append" 1 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (vals_extend_monom_TCC1 0
  (vals_extend_monom_TCC1-1 nil 3814174758
   ("" (skeep)
    (("" (typepred "vals_pad(vals,n)")
      (("" (hide -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (vals_extend_monom subtype
    "standard_form_extras.vals_pad(standard_form_extras.vals, standard_form_extras.n)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_extras.m`alpha))}")))
 (vals_extend_monom 0
  (vals_extend_monom-1 nil 3814174850
   (""
    (case "FORALL (A:nat,m: monomial,
              (vals: list[real] | length(vals) >= length(m`alpha)),
              n: nat):
       length(m`alpha)=A IMPLIES( full_eval(m)(vals_pad(vals, n)) = full_eval(m)(vals))")
    (("1" (skeep)
      (("1" (inst -1 "length(m`alpha)" "m" "vals" "n") nil nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "A")
          (("1" (skeep)
            (("1" (expand "length" -1)
              (("1" (lift-if -1)
                (("1" (split -1)
                  (("1" (expand "full_eval" 1)
                    (("1" (lemma "alpha_null_eval")
                      (("1" (inst -1 "m" "_" "_")
                        (("1"
                          (inst -1 "vals"
                           " list_length_n[nat](length(vals))")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (lemma "alpha_null_eval")
                                (("1"
                                  (inst
                                   -1
                                   "m"
                                   "(vals_pad(vals, n))"
                                   " list_length_n[nat](length(vals_pad(vals, n)))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "list_length_n[nat]")
                                        (("2"
                                          (inst
                                           -1
                                           "length[real](vals_pad(vals, n))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "list_length_n[nat]")
                            (("2" (inst -1 "length(vals)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (lemma "eval_vals")
                (("2" (inst -1 "length(m`alpha)" "m" "vals")
                  (("1" (replace -1 1)
                    (("1" (lemma "eval_vals")
                      (("1"
                        (inst -1 "length(m`alpha)" "m"
                         "vals_pad(vals, n)")
                        (("1" (replace -1 1)
                          (("1" (assert)
                            (("1" (expand "vals_pad" 1 2)
                              (("1"
                                (expand "append" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -3 "hat(m)" "cdr(vals)" "n")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3 1 rl)
                                        (("1"
                                          (lemma "vals_pad_cdr")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "vals_pad(vals,n)")
                (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "vals_pad(vals,n)") (("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (alpha_null_eval formula-decl nil eval_properties nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vals_pad_cdr formula-decl nil standard_form_extras nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (eval_vals formula-decl nil eval_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil))
   shostak))
 (vals_extend_TCC1 0
  (vals_extend_TCC1-1 nil 3810892729
   ("" (skeep)
    (("" (typepred "vals_pad(vals,n)")
      (("" (hide -1)
        (("" (typepred "vals") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (vals_extend subtype
    "standard_form_extras.vals_pad(standard_form_extras.vals, standard_form_extras.n)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_extras.p))}")))
 (vals_extend 0
  (vals_extend-1 nil 3813943658
   (""
    (case "FORALL (m:nat,p: MultPoly,
                     (vals: list[real] | length(vals) >= max_length(p)), n: nat):
               length(p)=m IMPLIES( full_eval(p)(vals_pad(vals, n)) = full_eval(p)(vals))")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p" "vals" "n") nil nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep)
            (("1" (grind)
              (("1" (expand "length" -1)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (expand "full_eval" 1 1)
                      (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (lemma "full_eval_recurs")
                (("2" (inst-cp -1 "p" "vals")
                  (("2" (assert)
                    (("2" (split -2)
                      (("1" (assert)
                        (("1" (expand "length" -4)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (replace -1 1)
                        (("2" (inst -2 "p" "vals_pad(vals,n)")
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (expand "length" -4)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (replace -1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -3 "cdr(p)" "vals" "n")
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "vals_extend_monom")
                                            (("1" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "length" -3)
                                            (("2"
                                              (lift-if -3)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "vals_pad(vals,n)")
                (("3" (typepred "vals")
                  (("3" (hide -1 -3) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "vals_pad(vals,n)") (("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (vals_extend_monom formula-decl nil standard_form_extras nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil))
   shostak)))

