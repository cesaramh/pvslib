(standard_form_unique
 (monom_cut_eval_TCC1 0
  (monom_cut_eval_TCC2-1 nil 3810394385
   ("" (lemma "cutting_length")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil))
   nil
   (monom_cut_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_mult_poly.cutting(standard_form_unique.m`alpha)))}")))
 (monom_cut_eval 0
  (monom_cut_eval-1 nil 3810314101
   ("" (induct "n")
    (("1" (skeep)
      (("1" (lemma "eval_vals_0")
        (("1" (expand "cutting")
          (("1" (assert)
            (("1" (expand "length")
              (("1" (lift-if -2)
                (("1" (split -2)
                  (("1" (assert)
                    (("1" (assert)
                      (("1"
                        (case "NOT m = (# C := m`C, alpha := null #)")
                        (("1" (decompose-equality 1) nil nil)
                         ("2" (assert)
                          (("2" (replace -1 :dir rl)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "eval_vals")
          (("2" (inst -1 "j+1" "m" "vals")
            (("1" (replace -1)
              (("1" (inst -2 "hat(m)" "cdr(vals)")
                (("1" (expand "hat" -2 1)
                  (("1" (expand "length" -3)
                    (("1" (assert)
                      (("1" (lift-if -3)
                        (("1" (split -3)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (replace -3)
                                (("2"
                                  (case "cutting(m`alpha) = null")
                                  (("1"
                                    (lemma "cutting_null")
                                    (("1"
                                      (inst-cp -1 "m")
                                      (("1"
                                        (inst -1 "hat(m)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide (-1 -4))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "hat" -1)
                                                (("1"
                                                  (expand "every" -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "hat"
                                                         2)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -4)
                                                            (("1"
                                                              (rewrite
                                                               "eval_vals_0")
                                                              (("1"
                                                                (rewrite
                                                                 "eval_vals_0")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (swap-rel 3)
                                    (("2"
                                      (lemma "eval_vals")
                                      (("2"
                                        (case
                                         "cutting(m`alpha) = cons(car(m`alpha), cutting(cdr(m`alpha)))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (inst
                                             -2
                                             "length(cons(car(m`alpha), cutting(cdr(m`alpha))))"
                                             " (# C := m`C,
                    alpha := cons(car(m`alpha), cutting(cdr(m`alpha))) #)"
                                             "vals")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "hat" -2)
                                                (("1"
                                                  (expand "hat" 3)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "m`alpha")
                                              (("2"
                                                (expand "every" -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replaces -3)
                                                      (("2"
                                                        (replaces -3)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "length" 1)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "cutting_cons" 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "cutting_length")
        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cutting_length formula-decl nil standard_form_mult_poly nil)
    (eval_vals formula-decl nil eval_properties nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cutting_null formula-decl nil standard_form_extras nil)
    (cutting_cons formula-decl nil standard_form_extras nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (j skolem-const-decl "nat" standard_form_unique nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (m skolem-const-decl "monomial" standard_form_unique nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (eval_vals_0 formula-decl nil standard_form_extras nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil))
   shostak))
 (mv_cut_eval_TCC1 0
  (mv_cut_eval_TCC1-1 nil 3809686388
   ("" (lemma "max_length_cut")
    (("" (skeep) (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil))
   nil
   (mv_cut_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_unique.p)))}")))
 (mv_cut_eval 0
  (mv_cut_eval-1 nil 3809686394
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "full_eval")
        (("1" (expand "mv_cut") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2"
          (case "mv_cut(cons(cons1_var, cons2_var)) = cons((# C:= cons1_var`C, alpha := cutting(cons1_var`alpha) #), mv_cut(cons2_var))")
          (("1" (replace -1)
            (("1" (lemma "full_eval_recurs")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (lemma "full_eval_recurs")
                      (("1"
                        (inst -1 "cons((# C := cons1_var`C,
                               alpha := cutting(cons1_var`alpha) #),
                            mv_cut(cons2_var))" "vals")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (inst?)
                              (("1"
                                (replace -4)
                                (("1"
                                  (move-terms 1 l 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "monom_cut_eval")
                                      (("1"
                                        (inst
                                         -1
                                         "length(cons1_var`alpha)"
                                         "cons1_var"
                                         "vals")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide (-1 2))
            (("2" (expand "mv_cut" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split 1)
                        (("1" (expand "cutting" 2)
                          (("1" (assert) nil nil)) nil)
                         ("2"
                          (case "forall (m: nat, alph: list[nat]): (m = length(alph) and (NOT exists (n:posnat): member(n, alph))) implies cutting(alph) = (: :)")
                          (("1"
                            (inst -1 "length(cons1_var`alpha)"
                             "cons1_var`alpha")
                            (("1" (assert)
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (2 3))
                            (("2" (induct "m")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "cutting")
                                      (("1"
                                        (lift-if -1)
                                        (("1"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lift-if 2)
                                            (("2"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "cutting" 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if 2)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -2 "rdc(alph)")
                                              (("1"
                                                (expand "rdc" -2 1)
                                                (("1"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("1"
                                                    (copy -3)
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "n")
                                                              (("1"
                                                                (expand
                                                                 "rdc"
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "member_reverse"
                                                                   -3
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "member_reverse"
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "car_reverse[nat]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "alph")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split 3)
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse"
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "rdc"
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "member_reverse"
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (inst
                                                             3
                                                             "n")
                                                            (("2"
                                                              (rewrite
                                                               "member_reverse"
                                                               3)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_reverse"
                                                                   -3
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -3)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst 3 "last(alph)")
                                              (("1"
                                                (lemma
                                                 "structures@more_list_props[nat].nth_member")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "alph"
                                                   "last(alph)"
                                                   "length(alph)-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "forall (alp:{P:Polynomial | cons?(P)}): last(alp)  = nth(alp, length(alp) - 1)")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "alph")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (induct
                                                           "alp")
                                                          (("1"
                                                            (expand
                                                             "last")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (expand
                                                               "last"
                                                               1)
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("3"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (lift-if
                                                                       1)
                                                                      (("3"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep)
                                                            (("4"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep)
                                                        (("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "forall ( ll: (cons?[nat])): ( rational_pred(last(ll)) AND
                                integer_pred(last(ll)) AND last(ll) >= 0)")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "alph")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (induct "ll")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "alph")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -1
                                                           "alph")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "alph")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (hide -1)
                                                          (("5"
                                                            (skeep)
                                                            (("5"
                                                              (expand
                                                               "last"
                                                               1)
                                                              (("5"
                                                                (lift-if
                                                                 1)
                                                                (("5"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "forall ( ll: (cons?[nat])): ( rational_pred(last(ll)) AND
                              integer_pred(last(ll)) AND last(ll) >= 0)")
                                                (("1"
                                                  (inst -1 "alph")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (induct "ll")
                                                    (("1"
                                                      (inst -1 "alph")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -1 "alph")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst -1 "alph")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (inst -1 "alph")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("6"
                                                      (skeep)
                                                      (("6"
                                                        (expand
                                                         "last"
                                                         1)
                                                        (("6"
                                                          (lift-if 1)
                                                          (("6"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "max_length_cut")
      (("3" (skeep) (("3" (inst -1 "p") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((max_length_cut formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (monom_cut_eval formula-decl nil standard_form_unique nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_reverse formula-decl nil more_list_props structures)
    (car_reverse formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (last def-decl "real" standard_form_poly nil)
    (alph skolem-const-decl "list[nat]" standard_form_unique nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (nth_member formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (monom_lft_eval_TCC1 0
  (monom_lft_eval_TCC1-1 nil 3810394385 ("" (subtype-tcc) nil nil) nil
   nil
   (monom_lft_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_unique.m`alpha))}")))
 (monom_lft_eval_TCC2 0
  (monom_lft_eval_TCC2-1 nil 3810399392
   ("" (skeep)
    (("" (rewrite "length_append")
      (("" (rewrite "length_appendn") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_append formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (monom_lft_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(list_props[nat].append(standard_form_unique.m`alpha, more_list_props[nat].^((: 0 :), ((number_fields.-)(standard_form_unique.n, list_props[nat].length(standard_form_unique.m`alpha)))))))}")))
 (monom_lft_eval_TCC3 0
  (monom_lft_eval_TCC2-1 nil 3810394385
   ("" (skeep)
    (("" (expand "every")
      (("" (expand "every") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (monom_lft_eval subtype "(: 0 :)" "list[nat]")))
 (monom_lft_eval_TCC4 0
  (monom_lft_eval_TCC3-1 nil 3810394385 ("" (subtype-tcc) nil nil) nil
   nil
   (monom_lft_eval subtype
    "((number_fields.-)(standard_form_unique.n, list_props[nat].length(standard_form_unique.m`alpha)))"
    "nat")))
 (monom_lft_eval 0
  (monom_lft_eval-1 nil 3810397563
   (""
    (case "FORALL (M, n: nat, (m: monomial | n >= length(m`alpha)),
                     (vals: list[real] | length(vals) >= n)):
               M = length(m`alpha) implies full_eval(m)(vals) =
                full_eval((# C := m`C,
                             alpha
                               := append(m`alpha,
                                         (: 0 :) ^ (n - length(m`alpha))) #))
                         (vals)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst -1 "length(m`alpha)") nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "M")
        (("1" (induct "n")
          (("1" (skeep)
            (("1" (expand "^")
              (("1" (assert)
                (("1" (expand "append")
                  (("1" (assert)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (case "not m = (# C := m`C, alpha := (: :) #)")
                              (("1" (decompose-equality 1) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (case "m`alpha = null[nat]")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "^" 1)
                      (("1" (rewrite "append_null_left " 1)
                        (("1" (expand "append" 1)
                          (("1" (expand "append" 1)
                            (("1" (lemma "eval_vals")
                              (("1"
                                (inst
                                 -1
                                 "length(cons(0, ((: 0 :) ^ j)))"
                                 "(# C := m`C, alpha := cons(0, ((: 0 :) ^ j)) #)"
                                 "vals")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "hat" 1)
                                    (("1"
                                      (lemma "eval_vals_0")
                                      (("1"
                                        (inst -1 "m`C" "vals")
                                        (("1"
                                          (case
                                           "NOT (# C := m`C, alpha := null[nat] #) = m")
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst
                                                 -4
                                                 "(# C:=1, alpha:= null[nat] #)"
                                                 "cdr(vals)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     " append_null_left")
                                                    (("1"
                                                      (replace
                                                       -4
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "eval_vals_0")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "vals")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "forall (K:nat): every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                               AND integer_pred(x) AND (x >= 0))
                           ((^[real]((: 0 :), K)))")
                                  (("1" (inst -1 "j") nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (induct-and-simplify "K")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (expand "length" 1)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -2) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (rewrite "length_append")
              (("4" (rewrite "length_appendn") (("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (lemma "eval_vals")
              (("2" (inst -1 "j+1" "m" "vals")
                (("1" (replace -1)
                  (("1" (lemma "eval_vals")
                    (("1"
                      (inst -1 "n" "(# C := m`C,
                            alpha
                              := append(m`alpha,
                                        (: 0 :) ^ (n - length(m`alpha))) #)"
                       "vals")
                      (("1" (replaces -1)
                        (("1" (case "null?(m`alpha)")
                          (("1" (expand "length" -4)
                            (("1" (assert) nil nil)) nil)
                           ("2" (expand "append" 2)
                            (("2" (assert)
                              (("2"
                                (expand "hat" 2)
                                (("2"
                                  (expand "length" 2)
                                  (("2"
                                    (inst
                                     -2
                                     "n-1"
                                     "(# C := 1, alpha := cdr[nat](m`alpha) #)"
                                     "cdr(vals)")
                                    (("1"
                                      (copy -3)
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 :dir rl)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "m")
                                      (("2"
                                        (typepred "vals")
                                        (("2"
                                          (expand "length" -3)
                                          (("2"
                                            (expand "length" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "m")
                                      (("3"
                                        (expand "length" -1)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "length_append")
                        (("2" (rewrite " length_appendn")
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (typepred "m") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil)
         ("4" (skeep)
          (("4" (rewrite "length_append")
            (("4" (rewrite " length_appendn") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand " every")
        (("3" (expand " every") (("3" (propax) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (rewrite "length_append")
        (("4" (rewrite " length_appendn") (("4" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((vals skolem-const-decl "{vals: list[real] | length(vals) >= n}"
     standard_form_unique nil)
    (j skolem-const-decl "nat" standard_form_unique nil)
    (m skolem-const-decl "{m: monomial | n >= length(m`alpha)}"
     standard_form_unique nil)
    (n skolem-const-decl "nat" standard_form_unique nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (eval_vals formula-decl nil eval_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (eval_vals_0 formula-decl nil standard_form_extras nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (vals skolem-const-decl
     "{vals: list[real] | length(vals) >= 1 + j}" standard_form_unique
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (j skolem-const-decl "nat" standard_form_unique nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_null_left formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_appendn formula-decl nil more_list_props structures)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (lft_eval_TCC1 0
  (lft_eval_TCC1-1 nil 3809777030
   ("" (lemma " lft_max_length")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lft_max_length formula-decl nil standard_form_extras nil))
   nil
   (lft_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.lft(standard_form_unique.p)(standard_form_mult_poly.max_length(standard_form_unique.p))))}")))
 (lft_eval_TCC2 0
  (lft_eval_TCC2-1 nil 3809777030 ("" (subtype-tcc) nil nil) nil nil
   (lft_eval subtype
    "standard_form_mult_poly.max_length(standard_form_unique.p)"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_unique.p))}")))
 (lft_eval 0
  (lft_eval-1 nil 3810394391
   (""
    (case "FORALL (p: MultPoly, (n: nat | n>=max_length(p)),
                     vals: {l: list[real] | length(l) >= n}):
               full_eval(p)(vals) = full_eval(lft(p)(n))(vals)")
    (("1" (skeep) (("1" (inst -1 "p" "max_length(p)" "vals") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "p")
        (("1" (skeep)
          (("1" (expand "lft") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (lemma "Lft_length")
              (("2" (inst?)
                (("2" (expand "lft" 1)
                  (("2" (assert)
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (expand "length" -)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (lemma "full_eval_recurs")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (swap-rel 1)
                                        (("1"
                                          (lemma "full_eval_recurs")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "n"
                                                     "vals")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "monom_lft_eval")
                                                            (("1"
                                                              (swap-rel
                                                               1)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma "full_eval_recurs")
                                (("2"
                                  (inst
                                   -1
                                   "cons(cons1_var, cons2_var)"
                                   "vals")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (swap-rel 2)
                                        (("2"
                                          (lemma "full_eval_recurs")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "n"
                                                     "vals")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (case "null?(p)")
              (("1" (expand "lft" 1)
                (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (lemma "lft_ml_n")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep :preds? T)
        (("3" (assert)
          (("3" (case "null?(p)")
            (("1" (expand "lft" 1)
              (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (lemma "lft_ml_n")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lft_ml_n formula-decl nil standard_form_extras nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil)
    (monom_lft_eval formula-decl nil standard_form_unique nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (lft_eval_gen_TCC1 0
  (lft_eval_gen_TCC1-1 nil 3814229977 ("" (subtype-tcc) nil nil) nil
   nil
   (lft_eval_gen subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_unique.p))}")))
 (lft_eval_gen_TCC2 0
  (lft_eval_gen_TCC2-1 nil 3814229977
   ("" (skeep)
    (("" (lemma "lft_n_max_length")
      (("" (inst?)
        (("" (assert)
          (("" (expand "lft" 2)
            (("" (expand "length" 2 2)
              (("" (expand "max_length" 2 1) (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lft_n_max_length formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (lft_eval_gen subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.lft(standard_form_unique.p)(standard_form_unique.n)))}")))
 (lft_eval_gen 0
  (lft_eval_gen-1 nil 3814230054
   (""
    (case "FORALL (p: MultPoly, (n: nat | n>=max_length(p)),
                            vals: {l: list[real] | length(l) >= n}):
                      full_eval(p)(vals) = full_eval(lft(p)(n))(vals)")
    (("1" (propax) nil nil)
     ("2" (hide 2)
      (("2" (induct "p")
        (("1" (skeep)
          (("1" (expand "lft") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (lemma "Lft_length")
              (("2" (inst?)
                (("2" (expand "lft" 1)
                  (("2" (assert)
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (expand "length" -)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (lemma "full_eval_recurs")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (swap-rel 1)
                                        (("1"
                                          (lemma "full_eval_recurs")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "n"
                                                     "vals")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "monom_lft_eval")
                                                            (("1"
                                                              (swap-rel
                                                               1)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma "full_eval_recurs")
                                (("2"
                                  (inst
                                   -1
                                   "cons(cons1_var, cons2_var)"
                                   "vals")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (swap-rel 2)
                                        (("2"
                                          (lemma "full_eval_recurs")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "n"
                                                     "vals")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (case "null?(p)")
              (("1" (expand "lft" 1)
                (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (lemma "lft_ml_n")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep :preds? T)
        (("3" (assert)
          (("3" (case "null?(p)")
            (("1" (expand "lft" 1)
              (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (lemma "lft_ml_n")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lft_ml_n formula-decl nil standard_form_extras nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil)
    (monom_lft_eval formula-decl nil standard_form_unique nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (length_null formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (allnonzero_eval_TCC1 0
  (allnonzero_eval_TCC1-1 nil 3809777030
   ("" (lemma "allnonzero_max_length")
    (("" (skeep) (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (allnonzero_max_length formula-decl nil standard_form_mult_poly
     nil))
   nil
   (allnonzero_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.allnonzero(standard_form_unique.p)))}")))
 (allnonzero_eval 0
  (allnonzero_eval-2 nil 3811783384
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "full_eval")
        (("1" (expand "allnonzero") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "full_eval_recurs")
          (("2" (inst -1 "cons(cons1_var, cons2_var)" "vals")
            (("2" (assert)
              (("2" (replace -1)
                (("2" (expand "allnonzero" +)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (inst?)
                          (("1" (replace -3)
                            (("1" (assert)
                              (("1"
                                (expand "full_eval" +)
                                (("1"
                                  (lemma "eval_monom_const")
                                  (("1"
                                    (inst
                                     -1
                                     "cons1_var`C"
                                     "cons1_var`alpha"
                                     "list_length_n[nat](length(vals))"
                                     "vals")
                                    (("1"
                                      (rewrite
                                       "list_length_n[nat]"
                                       :dir
                                       rl)
                                      (("1"
                                        (case
                                         "NOT (# C := cons1_var`C, alpha := cons1_var`alpha #) = cons1_var")
                                        (("1"
                                          (decompose-equality 1)
                                          nil
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (replace -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "full_eval_recurs")
                          (("2" (swap-rel 2)
                            (("2" (hide -2)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "allnonzero_max_length")
        (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (allnonzero_max_length formula-decl nil standard_form_mult_poly
     nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_monom_const formula-decl nil eval_properties nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil))
   nil)
  (allnonzero_eval-1 nil 3810455454
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "full_eval")
        (("1" (expand "allnonzero") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "full_eval_recurs")
          (("2" (inst -1 "cons(cons1_var, cons2_var)" "vals")
            (("2" (assert)
              (("2" (replace -1)
                (("2" (expand "allnonzero" +)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (inst?)
                          (("1" (replace -3)
                            (("1" (assert)
                              (("1"
                                (expand "full_eval" +)
                                (("1"
                                  (lemma "eval_monom_const")
                                  (("1"
                                    (inst
                                     -1
                                     "cons1_var`C"
                                     "cons1_var`alpha"
                                     "list_length_n(length(vals))"
                                     "vals")
                                    (("1"
                                      (rewrite "list_length_n" :dir rl)
                                      (("1"
                                        (case
                                         "NOT (# C := cons1_var`C, alpha := cons1_var`alpha #) = cons1_var")
                                        (("1"
                                          (decompose-equality 1)
                                          nil
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (replace -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "full_eval_recurs")
                          (("2" (swap-rel 2)
                            (("2" (hide -2)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "allnonzero_max_length")
        (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (sorting_eval_TCC1 0
  (sorting_eval_TCC1-1 nil 3809777030
   ("" (skeep)
    (("" (lemma "mv_sort_max_length")
      (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mv_sort_max_length formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sorting_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.mv_sort(standard_form_unique.p)))}")))
 (sorting_eval 0
  (sorting_eval-2 nil 3811783463
   ("" (skeep)
    (("" (expand "mv_sort")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "full_eval") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "lft_eval")
              (("2" (inst?)
                (("2" (replace -1)
                  (("2" (lemma "bubblesort_works")
                    (("2" (inst?)
                      (("2" (flatten)
                        (("2" (hide -1)
                          (("2" (lemma "leq_total_preorder")
                            (("2"
                              (name-replace "Q"
                               "bubblesort(lft(p)(max_length(p)))")
                              (("2"
                                (name-replace
                                 "P"
                                 "lft(p)(max_length(p))")
                                (("2"
                                  (lemma
                                   "same_occurrences_same_length[monomial]")
                                  (("2"
                                    (inst -1 "P" "Q")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (expand "full_eval" 2)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "eval_is_map")
                                                      (("2"
                                                        (rewrite
                                                         "eval_is_map")
                                                        (("2"
                                                          (lemma
                                                           "map_of_perm[monomial,monomial]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Q")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "sum_C_perm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "list_length_n[nat]")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "list_length_n[nat]")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "permutations" -2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (lft_eval formula-decl nil standard_form_unique nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (bubblesort const-decl "list[T]" bubblesort sorting)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (same_occurrences_same_length formula-decl nil sorting_aux sorting)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (eval_is_map formula-decl nil standard_form_extras nil)
    (map_of_perm formula-decl nil map_perm nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum_C_perm formula-decl nil standard_form_extras nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (vals skolem-const-decl
     "{l: list[real] | length(l) >= max_length(p)}"
     standard_form_unique nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (permutations const-decl "bool" sorting_aux sorting)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (bubblesort_works formula-decl nil bubblesort sorting)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil)
  (sorting_eval-1 nil 3810544768
   ("" (skeep)
    (("" (expand "mv_sort")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "full_eval") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "lft_eval")
              (("2" (inst?)
                (("2" (replace -1)
                  (("2" (lemma "bubblesort_works")
                    (("2" (inst?)
                      (("2" (flatten)
                        (("2" (hide -1)
                          (("2" (lemma "leq_total_preorder")
                            (("2"
                              (name-replace "Q"
                               "bubblesort(lft(p)(max_length(p)))")
                              (("2"
                                (name-replace
                                 "P"
                                 "lft(p)(max_length(p))")
                                (("2"
                                  (lemma
                                   "same_occurrences_same_length[monomial]")
                                  (("2"
                                    (inst -1 "P" "Q")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (expand "full_eval" 2)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "eval_is_map")
                                                      (("2"
                                                        (rewrite
                                                         "eval_is_map")
                                                        (("2"
                                                          (lemma
                                                           "map_of_perm[monomial,monomial]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Q")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "sum_C_perm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "list_length_n")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "list_length_n")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "permutations" -2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (lft_eval formula-decl nil standard_form_unique nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (bubblesort const-decl "list[T]" bubblesort sorting)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (same_occurrences_same_length formula-decl nil sorting_aux sorting)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (eval_is_map formula-decl nil standard_form_extras nil)
    (map_of_perm formula-decl nil map_perm nil)
    (sum_C_perm formula-decl nil standard_form_extras nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (permutations const-decl "bool" sorting_aux sorting)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (bubblesort_works formula-decl nil bubblesort sorting)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (simplify_eval_TCC1 0
  (simplify_eval_TCC1-1 nil 3809777030
   ("" (skeep)
    (("" (lemma "simplify_max_length")
      (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((simplify_max_length formula-decl nil standard_form_extras nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (simplify_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.simplify(standard_form_unique.p)))}")))
 (simplify_eval 0
  (simplify_eval-2 nil 3811783510
   (""
    (case "FORALL (n:nat, p: MultPoly,
                            vals: {l: list[real] | length(l) >= max_length(p)}):
                      (n=length(p) and is_sorted?(p)) IMPLIES
                      full_eval(p)(vals) = full_eval(sortedsimplify(p))(vals)")
    (("1" (skeep)
      (("1" (expand "simplify")
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (inst?)
                (("1" (inst -2 "length(p)") (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (inst -1 "length(mv_sort(p))" "mv_sort(p)" "vals")
                (("1" (lemma "sorting_eval")
                  (("1" (inst?)
                    (("1" (lemma "mv_sort_is_sorted")
                      (("1" (inst?)
                        (("1" (expand "mv_is_sorted?")
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "mv_sort_max_length")
                  (("2" (inst -1 "p") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "sortedsimplify")
            (("1" (expand "length")
              (("1" (assert)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (assert) nil nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "NOT cons?(p)")
              (("1" (assert)
                (("1" (expand "length") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (lemma "simplify_cons")
                (("2" (inst -1 "p")
                  (("2" (assert)
                    (("2" (lemma "full_eval_recurs")
                      (("2" (inst -1 "p" "vals")
                        (("2" (assert)
                          (("2" (expand "sortedsimplify" 1)
                            (("2" (lift-if 1)
                              (("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst
                                         -5
                                         "cons(add_mono(car(p), car(cdr(p))),
                                                 cdr(cdr(p)))"
                                         "vals")
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (lemma
                                                 "full_eval_recurs")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "cdr(p)"
                                                   "vals")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (swap-rel 1)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "add_mono")
                                                                  (("1"
                                                                    (expand
                                                                     "full_eval")
                                                                    (("1"
                                                                      (lemma
                                                                       "list_length_n[nat]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (case
                                                                           "NOT (car(cdr(p)) = (# C:= car(cdr(p))`C, alpha:= car(p)`alpha #) AND car(p) = (# C:= car(p)`C, alpha:=car(p)`alpha  #))")
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (name-replace
                                                                               "CC"
                                                                               "eval((# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #),
                             list_length_n[nat](length(vals)))
                            (vals)`C")
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "CC")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "eval_monom_const"
                                                                                       1)
                                                                                      (("2"
                                                                                        (swap-rel
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "eval_monom_const"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (move-terms
                                                                                               1
                                                                                               l
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "eval_monom_const"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (expand "length" -5)
                                              (("2"
                                                (expand "length" -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "add_mono_sorted")
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (skeep :preds? T)
                                                (("1"
                                                  (expand "length" -)
                                                  (("1"
                                                    (expand "length" -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "cdr_of_sorted_is_sorted")
                                              (("2"
                                                (rewrite
                                                 "cdr_of_sorted_is_sorted")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "is_sorted?" -6)
                                              (("3"
                                                (inst -6 "1")
                                                (("1"
                                                  (expand " length" -)
                                                  (("1"
                                                    (expand
                                                     " length"
                                                     -)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         " length"
                                                         -)
                                                        (("1"
                                                          (lift-if -5)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "is_sorted?"
                                                                   2)
                                                                  (("1"
                                                                    (skeep
                                                                     :preds?
                                                                     T)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "add_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "constant_doesnt_matter")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "car(cdr(p))")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" -5)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "simplify_max_length")
                                          (("2"
                                            (inst -1 "p")
                                            (("2"
                                              (expand "simplify" -1)
                                              (("2"
                                                (expand
                                                 "sortedsimplify"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "simplify_max_length")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(add_mono(car(p), car(cdr(p))),
                                                    cdr(cdr(p)))")
                                                      (("2"
                                                        (expand
                                                         "simplify")
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 "NOT cons?(cdr(cdr(p)))")
                                                                (("1"
                                                                  (expand
                                                                   "is_sorted? "
                                                                   2)
                                                                  (("1"
                                                                    (skeep
                                                                     :preds?
                                                                     T)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "add_mono_sorted")
                                                                  (("1"
                                                                    (rewrite
                                                                     "cdr_of_sorted_is_sorted")
                                                                    (("1"
                                                                      (rewrite
                                                                       "cdr_of_sorted_is_sorted")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "is_sorted?"
                                                                     -9)
                                                                    (("2"
                                                                      (inst
                                                                       -9
                                                                       "1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -9)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -9)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "add_mono"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "constant_doesnt_matter")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "car(cdr(p))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         -8)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -8)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "full_eval_recurs")
                                          (("2"
                                            (inst
                                             -1
                                             "cons(car(p), sortedsimplify(cdr(p)))"
                                             "vals")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "cdr(p)"
                                                     "vals")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "cdr_of_sorted_is_sorted")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "simplify_max_length")
            (("3" (inst -1 "p")
              (("3" (expand "simplify") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "simplify_max_length")
        (("3" (inst -1 "p")
          (("3" (expand "simplify") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (simplify_max_length formula-decl nil standard_form_extras nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (eval_monom_const formula-decl nil eval_properties nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CC skolem-const-decl "real" standard_form_unique nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_mono_sorted formula-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vals skolem-const-decl
     "{l: list[real] | length(l) >= max_length(p)}"
     standard_form_unique nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (mv_sort_max_length formula-decl nil standard_form_mult_poly nil)
    (sorting_eval formula-decl nil standard_form_unique nil)
    (mv_sort_is_sorted formula-decl nil standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (vals skolem-const-decl
     "{l: list[real] | length(l) >= max_length(p)}"
     standard_form_unique nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (full_eval def-decl "real" eval_MultPoly nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   nil)
  (simplify_eval-1 nil 3810457805
   (""
    (case "FORALL (n:nat, p: MultPoly,
                     vals: {l: list[real] | length(l) >= max_length(p)}):
               (n=length(p) and is_sorted?(p)) IMPLIES
               full_eval(p)(vals) = full_eval(sortedsimplify(p))(vals)")
    (("1" (skeep)
      (("1" (expand "simplify")
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (inst?)
                (("1" (inst -2 "length(p)") (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (inst -1 "length(mv_sort(p))" "mv_sort(p)" "vals")
                (("1" (rewrite "mv_sort_is_sorted")
                  (("1" (replaces -1 :dir rl)
                    (("1" (lemma "sorting_eval")
                      (("1" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "mv_sort_max_length")
                  (("2" (inst -1 "p") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "sortedsimplify")
            (("1" (expand "length")
              (("1" (assert)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (assert) nil nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "NOT cons?(p)")
              (("1" (assert)
                (("1" (expand "length") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (lemma "simplify_cons")
                (("2" (inst -1 "p")
                  (("2" (assert)
                    (("2" (lemma "full_eval_recurs")
                      (("2" (inst -1 "p" "vals")
                        (("2" (assert)
                          (("2" (expand "sortedsimplify" 1)
                            (("2" (lift-if 1)
                              (("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst
                                         -5
                                         "cons(add_mono(car(p), car(cdr(p))),
                                     cdr(cdr(p)))"
                                         "vals")
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (lemma
                                                 "full_eval_recurs")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "cdr(p)"
                                                   "vals")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (swap-rel 1)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "add_mono")
                                                                  (("1"
                                                                    (expand
                                                                     "full_eval")
                                                                    (("1"
                                                                      (lemma
                                                                       "list_length_n")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (case
                                                                           "NOT (car(cdr(p)) = (# C:= car(cdr(p))`C, alpha:= car(p)`alpha #) AND car(p) = (# C:= car(p)`C, alpha:=car(p)`alpha  #))")
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (name-replace
                                                                               "CC"
                                                                               "eval((# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #),
           list_length_n(length(vals)))
          (vals)`C")
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "CC")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "eval_monom_const"
                                                                                       1)
                                                                                      (("2"
                                                                                        (swap-rel
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "eval_monom_const"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (move-terms
                                                                                               1
                                                                                               l
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "eval_monom_const"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (expand "length" -5)
                                              (("2"
                                                (expand "length" -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "add_mono_sorted")
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (skeep :preds? T)
                                                (("1"
                                                  (expand "length" -)
                                                  (("1"
                                                    (expand "length" -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "cdr_of_sorted_is_sorted")
                                              (("2"
                                                (rewrite
                                                 "cdr_of_sorted_is_sorted")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "is_sorted?" -6)
                                              (("3"
                                                (inst -6 "1")
                                                (("1"
                                                  (expand " length" -)
                                                  (("1"
                                                    (expand
                                                     " length"
                                                     -)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         " length"
                                                         -)
                                                        (("1"
                                                          (lift-if -5)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "is_sorted?"
                                                                   2)
                                                                  (("1"
                                                                    (skeep
                                                                     :preds?
                                                                     T)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "add_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "constant_doesnt_matter")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "car(cdr(p))")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" -5)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "simplify_max_length")
                                          (("2"
                                            (inst -1 "p")
                                            (("2"
                                              (expand "simplify" -1)
                                              (("2"
                                                (expand
                                                 "sortedsimplify"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "simplify_max_length")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(add_mono(car(p), car(cdr(p))),
                                      cdr(cdr(p)))")
                                                      (("2"
                                                        (expand
                                                         "simplify")
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 "NOT cons?(cdr(cdr(p)))")
                                                                (("1"
                                                                  (expand
                                                                   "is_sorted? "
                                                                   2)
                                                                  (("1"
                                                                    (skeep
                                                                     :preds?
                                                                     T)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "add_mono_sorted")
                                                                  (("1"
                                                                    (rewrite
                                                                     "cdr_of_sorted_is_sorted")
                                                                    (("1"
                                                                      (rewrite
                                                                       "cdr_of_sorted_is_sorted")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "is_sorted?"
                                                                     -9)
                                                                    (("2"
                                                                      (inst
                                                                       -9
                                                                       "1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -9)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -9)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "add_mono"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "constant_doesnt_matter")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "car(cdr(p))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         -8)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -8)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "full_eval_recurs")
                                          (("2"
                                            (inst
                                             -1
                                             "cons(car(p), sortedsimplify(cdr(p)))"
                                             "vals")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "cdr(p)"
                                                     "vals")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "cdr_of_sorted_is_sorted")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "simplify_max_length")
            (("3" (inst -1 "p")
              (("3" (expand "simplify") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "simplify_max_length")
        (("3" (inst -1 "p")
          (("3" (expand "simplify") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (simplify_max_length formula-decl nil standard_form_extras nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_mono_sorted formula-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (mv_sort_is_sorted formula-decl nil standard_form_mult_poly nil)
    (sorting_eval formula-decl nil standard_form_unique nil)
    (TRUE const-decl "bool" booleans nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (full_eval def-decl "real" eval_MultPoly nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (standard_form_full_eval_TCC1 0
  (standard_form_full_eval_TCC1-1 nil 3809775693
   ("" (skeep)
    (("" (lemma "mv_standard_form_max_length")
      (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mv_standard_form_max_length formula-decl nil standard_form_extras
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (standard_form_full_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.mv_standard_form(standard_form_unique.p)))}")))
 (standard_form_full_eval 0
  (standard_form_full_eval-1 nil 3810303308
   ("" (skeep)
    (("" (expand "mv_standard_form")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "mv_standard_form")
                  (("1" (lift-if 2)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (rewrite "sorting_eval" :dir rl) nil
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "mv_sort_is_sorted")
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "mv_standard_form" 2)
                                (("1"
                                  (lift-if 2)
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite
                                         "simplify_eval"
                                         :dir
                                         rl)
                                        (("1"
                                          (rewrite
                                           "sorting_eval"
                                           :dir
                                           rl)
                                          nil
                                          nil)
                                         ("2"
                                          (lemma "mv_sort_max_length")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "simplify" 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "mv_sort_is_sorted")
                                                  (("1"
                                                    (inst -1 "p")
                                                    (("1"
                                                      (lemma
                                                       "mv_sorted_simp_is_sorted")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "mv_sort(p)")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "mv_sort_is_sorted")
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (expand
                                                       "mv_is_sorted?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "simplify" 1)
                                                (("1"
                                                  (lemma
                                                   "mv_sort_is_sorted")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (expand
                                                       "mv_is_sorted?")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "simplified")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "mv_standard_form"
                                                     2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (rewrite
                                                             "allnonzero_eval"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "simplify_eval"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "sorting_eval"
                                                                 :dir
                                                                 rl)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "mv_sort_max_length")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "simplify_max_length"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 "mv_sort_max_length")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "p")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "allnonzero_sorted")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "allnonzero_simp")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "all_nonzero")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (rewrite
                                                                         "lft_eval"
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "mv_cut_eval"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "allnonzero_eval"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (rewrite
                                                                               "simplify_eval"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sorting_eval"
                                                                                 :dir
                                                                                 rl)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "mv_sort_max_length")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "simplify_max_length"
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (lemma
                                                                                 "mv_sort_max_length")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "allnonzero_max_length")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "simplify(mv_sort(p))")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "simplify_max_length"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "mv_sort_max_length")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "max_length_cut")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             " allnonzero(simplify(mv_sort(p)))")
                                                                            (("2"
                                                                              (lemma
                                                                               "allnonzero_max_length")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "simplify(mv_sort(p))")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "simplify_max_length"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "max_length_cut")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "mv_sort_max_length")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "p")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "mv_sort_max_length")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (lemma
                                                         "simplify_max_length")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "mv_sort(p)")
                                                          (("2"
                                                            (lemma
                                                             "max_length_cut")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "simplify(mv_sort(p))")
                                                              (("2"
                                                                (lemma
                                                                 "lft_max_length")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "mv_cut(simplify(mv_sort(p)))")
                                                                  (("2"
                                                                    (rewrite
                                                                     "lft_eval"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       "mv_cut_eval"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "simplify_eval"
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           "sorting_eval"
                                                                           :dir
                                                                           rl)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "mv_standard_form" 2)
                                    (("1"
                                      (lift-if 2)
                                      (("1"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma
                                             "mv_sort_max_length")
                                            (("1"
                                              (inst -1 "p")
                                              (("1"
                                                (lemma
                                                 "allnonzero_max_length")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "mv_sort(p)")
                                                  (("1"
                                                    (rewrite
                                                     "allnonzero_eval"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "sorting_eval"
                                                       :dir
                                                       rl)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "mv_sort_is_sorted")
                                                (("1"
                                                  (inst -1 "p")
                                                  (("1"
                                                    (rewrite
                                                     "allnonzero_sorted")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "allnonzero_simp")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "all_nonzero")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "mv_sort_max_length")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (lemma
                                                             "allnonzero_max_length")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "mv_sort(p)")
                                                              (("2"
                                                                (lemma
                                                                 "max_length_cut")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "allnonzero(mv_sort(p))")
                                                                  (("2"
                                                                    (lemma
                                                                     "lft_max_length")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "mv_cut(allnonzero(mv_sort(p)))")
                                                                      (("2"
                                                                        (rewrite
                                                                         "lft_eval"
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           "mv_cut_eval"
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "allnonzero_eval"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               "sorting_eval"
                                                                               :dir
                                                                               rl)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "mv_sort_max_length")
                                    (("2"
                                      (inst -1 "p")
                                      (("2"
                                        (lemma "max_length_cut")
                                        (("2"
                                          (inst -1 "mv_sort(p)")
                                          (("2"
                                            (lemma "lft_max_length")
                                            (("2"
                                              (inst
                                               -1
                                               "mv_cut(mv_sort(p))")
                                              (("2"
                                                (rewrite
                                                 "lft_eval"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite
                                                   "mv_cut_eval"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "sorting_eval"
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "mv_standard_form")
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (flatten)
                            (("1" (lemma "simplify_max_length")
                              (("1"
                                (inst -1 "p")
                                (("1"
                                  (rewrite "simplify_eval" :dir rl)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "simplify" 1)
                                  (("1"
                                    (copy -1)
                                    (("1"
                                      (expand "mv_is_sorted?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "mv_sorted_simp_is_sorted")
                                            (("1"
                                              (inst -1 "p")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "simplify" 1 1)
                                    (("2"
                                      (copy -2)
                                      (("2"
                                        (expand "mv_is_sorted?" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "simplified")
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "mv_standard_form"
                                                     2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "simplify_max_length")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("1"
                                                                (lemma
                                                                 "allnonzero_max_length")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "simplify(p)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "allnonzero_eval"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "simplify_eval"
                                                                       :dir
                                                                       rl)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "allnonzero_sorted")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "allnonzero_simp")
                                                                    (("1"
                                                                      (expand
                                                                       "simplify"
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "simplified")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "all_nonzero")
                                                                    (("2"
                                                                      (lemma
                                                                       "simplify_max_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (lemma
                                                                           "allnonzero_max_length")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "simplify (p)")
                                                                            (("2"
                                                                              (lemma
                                                                               "max_length_cut")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "allnonzero(simplify(p))")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "lft_max_length")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "mv_cut(allnonzero(simplify(p)))")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "lft_eval"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mv_cut_eval"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "allnonzero_eval"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "simplify_eval"
                                                                                             :dir
                                                                                             rl)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "simplify_max_length")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (lemma
                                                         "max_length_cut")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "simplify (p)")
                                                          (("2"
                                                            (lemma
                                                             "lft_max_length")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "mv_cut(simplify(p))")
                                                              (("2"
                                                                (rewrite
                                                                 "lft_eval"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "mv_cut_eval"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "simplify_eval"
                                                                     :dir
                                                                     rl)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (expand "mv_standard_form")
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "allnonzero_max_length")
                                  (("1"
                                    (inst -1 "p")
                                    (("1"
                                      (rewrite
                                       "allnonzero_eval"
                                       :dir
                                       rl)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite "allnonzero_sorted")
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "allnonzero_simp")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite "all_nonzero")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "allnonzero_max_length")
                                              (("2"
                                                (inst -1 "p")
                                                (("2"
                                                  (lemma
                                                   "max_length_cut")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     " allnonzero(p)")
                                                    (("2"
                                                      (lemma
                                                       "lft_max_length")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "mv_cut(allnonzero(p))")
                                                        (("2"
                                                          (rewrite
                                                           "lft_eval"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "mv_cut_eval"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "allnonzero_eval"
                                                               :dir
                                                               rl)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "max_length_cut")
                          (("2" (inst -1 "p")
                            (("2" (lemma "lft_max_length")
                              (("2"
                                (inst -1 "mv_cut(p)")
                                (("2"
                                  (rewrite "lft_eval" :dir rl)
                                  (("2"
                                    (rewrite "mv_cut_eval" :dir rl)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (sorting_eval formula-decl nil standard_form_unique nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_sort_is_sorted formula-decl nil standard_form_mult_poly nil)
    (lft_max_length formula-decl nil standard_form_extras nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (mv_cut_eval formula-decl nil standard_form_unique nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (allnonzero_max_length formula-decl nil standard_form_mult_poly
     nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (lft_eval formula-decl nil standard_form_unique nil)
    (all_nonzero formula-decl nil standard_form_mult_poly nil)
    (allnonzero_simp formula-decl nil standard_form_mult_poly nil)
    (allnonzero_sorted formula-decl nil standard_form_mult_poly nil)
    (simplify_max_length formula-decl nil standard_form_extras nil)
    (allnonzero_eval formula-decl nil standard_form_unique nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (simplified formula-decl nil standard_form_mult_poly nil)
    (mv_sorted_simp_is_sorted formula-decl nil standard_form_mult_poly
     nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (mv_sort_max_length formula-decl nil standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (simplify_eval formula-decl nil standard_form_unique nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (standard_impl_eval 0
  (standard_impl_eval-1 nil 3809775801
   ("" (skeep)
    (("" (rewrite "standard_form_full_eval" 1 :dir rl)
      (("" (replace -1)
        (("" (rewrite "standard_form_full_eval" 1) nil nil)) nil))
      nil))
    nil)
   ((standard_form_full_eval formula-decl nil standard_form_unique nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (add_mono_eval_TCC1 0
  (add_mono_eval_TCC1-1 nil 3814231845 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil))
   nil
   (add_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_mult_poly.add_mono(standard_form_unique.m1, standard_form_unique.m2)`alpha))}")))
 (add_mono_eval_TCC2 0
  (add_mono_eval_TCC2-1 nil 3814231845 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil))
   nil
   (add_mono_eval subtype "standard_form_unique.m2"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = standard_form_unique.m1`alpha}")))
 (add_mono_eval_TCC3 0
  (add_mono_eval_TCC3-1 nil 3814231845 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (add_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_unique.m1`alpha))}")))
 (add_mono_eval_TCC4 0
  (add_mono_eval_TCC4-1 nil 3814231845 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (add_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_unique.m2`alpha))}")))
 (add_mono_eval 0
  (add_mono_eval-1 nil 3814231879
   (""
    (case "FORALL (A:nat,m1, m2: monomial,
              vals: list[real]
                  | length(vals) >=
                     max(length(m1`alpha), length(m2`alpha))):
        length(m1`alpha) = A IMPLIES (m1`alpha = m2`alpha IMPLIES
         full_eval(add_mono(m1, m2))(vals) =
          full_eval(m1)(vals) + full_eval(m2)(vals))")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "m1" "m2" "vals")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "add_mono" 1)
                  (("1" (expand "full_eval" 1)
                    (("1" (assert)
                      (("1" (lemma "alpha_null_eval")
                        (("1"
                          (inst-cp -1 "m1" "vals"
                           "list_length_n[nat](length(vals))")
                          (("1"
                            (inst-cp -1 "m2" "vals"
                             "list_length_n[nat](length(vals))")
                            (("1"
                              (inst-cp -1
                               "(# C := m1`C + m2`C, alpha := m1`alpha #)"
                               "vals"
                               "list_length_n[nat](length(vals))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "list_length_n[nat]")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "list_length_n[nat]")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "list_length_n[nat]")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "add_mono" 1 1)
              (("2" (lemma "eval_vals")
                (("2" (inst-cp -1 "length(m1`alpha)" "m1" "vals")
                  (("1" (replace -2 1)
                    (("1" (inst-cp -1 "length(m2`alpha)" "m2" "vals")
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (inst-cp -1 "length(m2`alpha)"
                             "(# C := m1`C + m2`C, alpha := m1`alpha #)"
                             "vals")
                            (("1" (assert)
                              (("1"
                                (replace -2 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "hat" 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 -2 -1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2 -3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "vals") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (assert)
              (("4" (typepred "vals") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("5" (hide 2) (("5" (skeep) (("5" (assert) nil nil)) nil))
          nil)
         ("6" (hide 2)
          (("6" (skeep)
            (("6" (assert)
              (("6" (typepred "vals")
                (("6" (assert)
                  (("6" (expand "add_mono" 1 1)
                    (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "vals") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (typepred "vals") (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 2) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil)
     ("6" (hide 2)
      (("6" (skeep)
        (("6" (assert)
          (("6" (expand "add_mono" 1)
            (("6" (assert)
              (("6" (typepred "vals") (("6" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (m1 skolem-const-decl "monomial" standard_form_unique nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (m2 skolem-const-decl "monomial" standard_form_unique nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_vals formula-decl nil eval_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (m1 skolem-const-decl "monomial" standard_form_unique nil)
    (m2 skolem-const-decl "monomial" standard_form_unique nil)
    (vals skolem-const-decl
     "{vals: list[real] | length(vals) >= max(length(m1`alpha), length(m2`alpha))}"
     standard_form_unique nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (alpha_null_eval formula-decl nil eval_properties nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (sorted_sans_add_eval_TCC1 0
  (sorted_sans_add_eval_TCC1-1 nil 3814229215
   ("" (skeep)
    (("" (lemma "sorted_sans_add__max_length")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "vals")
            (("" (assert)
              (("" (expand "max" -4)
                (("" (lift-if -4)
                  (("" (split -4)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorted_sans_add__max_length formula-decl nil standard_form_extras
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sorted_sans_add_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.sorted_sans_add(standard_form_unique.n, standard_form_unique.p, standard_form_unique.q)))}")))
 (sorted_sans_add_eval 0
  (sorted_sans_add_eval-1 nil 3814229297
   (""
    (case " FORALL (A,n: nat, p: (mv_standard_sans_cut?(n)),
                            q: (mv_standard_sans_cut?(n)),
                            (vals: list[real]
                                 | length(vals) >= max_length(p) AND
                                    length(vals) >= max_length(q))):
                      length(p) + length(q) <= A IMPLIES full_eval(sorted_sans_add(n, p, q))(vals) =
                       full_eval(p)(vals) + full_eval(q)(vals)")
    (("1" (skeep)
      (("1" (inst -1 "length(p) + length(q)" "n" "p" "q" "vals")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(p) AND null?(q)")
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (lemma "full_eval_recurs")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "sorted_sans_add" -1)
                      (("1" (lift-if -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (expand "full_eval" 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sorted_sans_add" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "sorted_sans_add"
                                             3
                                             1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -4
                                                 "n"
                                                 "cdr(p)"
                                                 "cdr(q)"
                                                 "vals")
                                                (("1"
                                                  (expand "length" -5)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4 3)
                                                      (("1"
                                                        (lemma
                                                         "full_eval_recurs")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "p"
                                                           "vals")
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             "q"
                                                             "vals")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       " eval_canc_car")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "vals")
                                                                            (("2"
                                                                              (expand
                                                                               "max_length"
                                                                               -)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "max"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "vals")
                                                    (("2"
                                                      (expand
                                                       "max_length"
                                                       -)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (replace -1)
                        (("2" (expand "sorted_sans_add" 1)
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "full_eval" 1 3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "full_eval_recurs")
                                        (("1"
                                          (inst -1 "q" "vals")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "full_eval" 1 4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "full_eval_recurs")
                                          (("1"
                                            (inst -1 "p" "vals")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "full_eval_recurs")
                                              (("1"
                                                (inst-cp -1 "p" "vals")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "q"
                                                   "vals")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "n"
                                                             "cdr(p)"
                                                             "cdr(q)"
                                                             "vals")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       -)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "sorted_sans_add"
                                                                                 -5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -6
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "eval_canc_car")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "vals")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "max_length"
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (typepred
                                                                   "vals")
                                                                  (("2"
                                                                    (expand
                                                                     "max_length"
                                                                     -)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (lemma
                                                 "full_eval_recurs")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "q"
                                                   "vals")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "p"
                                                     "vals")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "add_mono_eval")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "car(p)"
                                                                 "car(q)"
                                                                 "vals")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "n"
                                                                         "cdr(p)"
                                                                         "cdr(q)"
                                                                         "vals")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -6)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vals")
                                                                                (("2"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   -2
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max_length"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -)
                                                                    (("2"
                                                                      (typepred
                                                                       "vals")
                                                                      (("2"
                                                                        (expand
                                                                         "max_length"
                                                                         -)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst
                                                 -3
                                                 "n"
                                                 "cdr(p)"
                                                 "q"
                                                 "vals")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "full_eval_recurs")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p"
                                                             "vals")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (typepred "vals")
                                                    (("2"
                                                      (expand
                                                       "max_length"
                                                       -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "n"
                                                 "p"
                                                 "cdr(q)"
                                                 "vals")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "full_eval_recurs")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "q"
                                                             "vals")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "vals")
                                                  (("2"
                                                    (expand
                                                     "max_length"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (assert)
              (("3" (typepred "vals")
                (("3" (lemma " sorted_sans_add__max_length")
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (expand "max" -1 1)
                        (("3" (lift-if -1)
                          (("3" (split -1)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma " sorted_sans_add__max_length")
            (("3" (inst?)
              (("3" (typepred "vals")
                (("3" (expand "max" -4 1)
                  (("3" (lift-if -4)
                    (("3" (split -4)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorted_sans_add__max_length formula-decl nil standard_form_extras
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (add_mono_eval formula-decl nil standard_form_unique nil)
    (eval_canc_car formula-decl nil eval_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >= max_length(p) AND length(vals) >= max_length(q)}"
     standard_form_unique nil)
    (q skolem-const-decl "(mv_standard_sans_cut?(n))"
     standard_form_unique nil)
    (p skolem-const-decl "(mv_standard_sans_cut?(n))"
     standard_form_unique nil)
    (n skolem-const-decl "nat" standard_form_unique nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (add_full_eval_TCC1 0
  (add_full_eval_TCC1-1 nil 3814228379
   ("" (skeep)
    (("" (lemma "add_max_length")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "vals")
            (("" (assert)
              (("" (hide -1)
                (("" (expand "max" -3)
                  (("" (lift-if -3)
                    (("" (split -3)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_max_length formula-decl nil standard_form_extras nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (add_full_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.add(standard_form_unique.p, standard_form_unique.q)))}")))
 (add_full_eval 0
  (add_full_eval-1 nil 3814228465
   ("" (skeep)
    (("" (expand "add" 1 1)
      (("" (expand "min_add" 1 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "sort_add" 1 1)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (expand "sorted_add" 1 1)
                        (("1" (lemma "sorted_sans_add_eval")
                          (("1" (inst?)
                            (("1" (replace -1 1)
                              (("1"
                                (lemma "lft_eval_gen")
                                (("1"
                                  (inst-cp
                                   -1
                                   "p"
                                   "max(max_length(p), max_length(q))"
                                   "vals")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "q"
                                     "max(max_length(p), max_length(q))"
                                     "vals")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (replace -3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (typepred "vals")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "max" 1 1)
                                                (("2"
                                                  (lift-if 1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (typepred "vals")
                                          (("2"
                                            (expand "max" 1 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "lft_n_max_length")
                                  (("2"
                                    (inst-cp
                                     -1
                                     "q"
                                     "max(max_length(p), max_length(q))")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "p"
                                       "max(max_length(p), max_length(q))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (typepred "vals")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         1)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (hide -2 -3 -4)
                                              (("2"
                                                (typepred "vals")
                                                (("2"
                                                  (hide -4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "null?(q)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "lft_n_max_length")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "q"
                                                             "max(max_length(p), max_length(q))")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "lft"
                                                                   3
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       3
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           3
                                                                           1)
                                                                          (("2"
                                                                            (lift-if
                                                                             3)
                                                                            (("2"
                                                                              (split
                                                                               3)
                                                                              (("1"
                                                                                (flatten)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "sorted_add" 2 1)
                              (("1"
                                (lemma "sorted_sans_add_eval")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "lft_eval_gen")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "mv_standard_form(q)"
                                             "(max(max_length(p), max_length(mv_standard_form(q))))"
                                             "vals")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "p"
                                               "(max(max_length(p), max_length(mv_standard_form(q))))"
                                               "vals")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3 2 rl)
                                                    (("1"
                                                      (lemma
                                                       "standard_form_full_eval")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred "vals")
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         1
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "mv_standard_form_max_length")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "q")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2 3)
                                                (("2"
                                                  (lemma
                                                   "mv_standard_form_max_length")
                                                  (("2"
                                                    (inst -1 "q")
                                                    (("2"
                                                      (expand
                                                       "max"
                                                       1
                                                       1)
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2 3)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "vals")
                                        (("2"
                                          (lemma "lft_n_max_length")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst-cp
                                               -1
                                               "p"
                                               "(max(max_length(p), max_length(mv_standard_form(q))))")
                                              (("2"
                                                (inst-cp
                                                 -1
                                                 "q"
                                                 "(max(max_length(p), max_length(mv_standard_form(q))))")
                                                (("1"
                                                  (case "null?(p)")
                                                  (("1"
                                                    (case "null?(q)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "lft"
                                                       2
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         2
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "max_length"
                                                             2
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "max"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   2)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "lft_n_max_length")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "mv_standard_form(q)"
                                                                             "max_length(mv_standard_form(q))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "mv_standard_form_max_length")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "q")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "lft"
                                                                                   2
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       2
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -4)
                                                                            (("2"
                                                                              (hide
                                                                               -4)
                                                                              (("2"
                                                                                (lemma
                                                                                 "lft_n_max_length")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "mv_standard_form(q)"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "lft"
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         3
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (typepred
                                                         "vals")
                                                        (("2"
                                                          (lemma
                                                           "mv_standard_form_max_length")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "q")
                                                            (("2"
                                                              (lemma
                                                               "lft_n_max_length")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "p"
                                                                 " (max(max_length(p), max_length(mv_standard_form(q))))")
                                                                (("2"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "mv_standard_form(q)"
                                                                       "(max(max_length(p), max_length(mv_standard_form(q))))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "max"
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     2)
                                                                                    (("1"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "max_length"
                                                                               3
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "max_length"
                                                                                   3
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lft"
                                                                                     3
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       3
                                                                                       3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max"
                                                                                           3
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "lft_n_max_length")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "mv_standard_form(q)"
                                                               "max(max_length(p), max_length(mv_standard_form(q)))")
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "lft"
                                                                     2
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "lft"
                                                           2
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               2
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max_length"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "mv_standard_form_max_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "q")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "lft_n_max_length")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "mv_standard_form(q)"
                                                                               "max(0, max_length(mv_standard_form(q)))")
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2
                                                                                   lr)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         2)
                                                                                        (("1"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lft"
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       3
                                                                                       2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max_length"
                                                                                         3)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "sorted_sans_add_eval")
                                  (("1"
                                    (expand "sorted_add" 2 1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma "lft_eval_gen")
                                              (("1"
                                                (inst-cp
                                                 -1
                                                 "mv_standard_form(p)"
                                                 "(max(max_length(mv_standard_form(p)), max_length(q)))"
                                                 "vals")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "q"
                                                   "(max(max_length(mv_standard_form(p)), max_length(q)))"
                                                   "vals")
                                                  (("1"
                                                    (replace -2 2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -3
                                                         2
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           " standard_form_full_eval")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 3)
                                                      (("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (typepred
                                                           "vals")
                                                          (("2"
                                                            (lemma
                                                             "mv_standard_form_max_length")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("2"
                                                                (expand
                                                                 "max"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "mv_standard_form_max_length")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (case "null?(q)")
                                          (("1"
                                            (case
                                             "null?(mv_standard_form(p))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "lft" 1 1)
                                                (("1"
                                                  (expand "length" 1 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "lft"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         1
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "lft_n_max_length")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "mv_standard_form(p)"
                                                   "(max(max_length(mv_standard_form(p)), max_length(q)))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2 lr)
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         2)
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "lft"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "lft"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "mv_standard_form_max_length")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "p")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (case
                                                 "null?(mv_standard_form(p))")
                                                (("1"
                                                  (expand "lft" 2 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     2
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "max_length"
                                                         2
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "lft_n_max_length")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "q"
                                                               "max(max_length(mv_standard_form(p)), max_length(q))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2
                                                                   lr)
                                                                  (("1"
                                                                    (lemma
                                                                     "mv_standard_form_max_length")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "p")
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         2
                                                                         1)
                                                                        (("1"
                                                                          (lift-if
                                                                           2)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "mv_standard_form_max_length")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (lemma
                                                         "lft_n_max_length")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "mv_standard_form(p)"
                                                           "max(max_length(mv_standard_form(p)), max_length(q))")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "q"
                                                             "(max(max_length(mv_standard_form(p)), max_length(q)))")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 3
                                                                 lr)
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   3
                                                                   lr)
                                                                  (("2"
                                                                    (expand
                                                                     "max"
                                                                     3)
                                                                    (("2"
                                                                      (lift-if
                                                                       3)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "sorted_add")
                                    (("2"
                                      (lemma "sorted_sans_add_eval")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "mv_standard_form_max_length")
                                                (("1"
                                                  (inst-cp -1 "p")
                                                  (("1"
                                                    (inst -1 "q")
                                                    (("1"
                                                      (lemma
                                                       "lft_eval_gen")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "mv_standard_form(p)"
                                                         " (max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))"
                                                         "vals")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "mv_standard_form(q)"
                                                           " (max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))"
                                                           "vals")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             2
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               2
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "standard_form_full_eval")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "p"
                                                                   "vals")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "q"
                                                                     "vals")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "max"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "max"
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "lft_n_max_length")
                                              (("2"
                                                (inst-cp
                                                 -1
                                                 "mv_standard_form(p)"
                                                 "(max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "mv_standard_form(q)"
                                                   "(max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               lr)
                                                              (("1"
                                                                (expand
                                                                 "max"
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "mv_standard_form_max_length")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "q")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "mv_standard_form_max_length")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "p")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "q")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "mv_standard_form_max_length")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "p")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "q")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         2)
                                                                        (("2"
                                                                          (lift-if
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "lft"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         1
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "lft"
                                                                                   2
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       2
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "lft"
                                                             2
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               2
                                                               2)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "mv_standard_form_max_length")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "p")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "q")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             2)
                                                                            (("1"
                                                                              (lift-if
                                                                               2)
                                                                              (("1"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "lft"
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     3
                                                                     3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "max_length"
                                                                           3)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (lemma "lft_n_max_length")
                  (("2" (lemma "lft_eval_gen")
                    (("2"
                      (inst -1 "mv_cut(sort_add(p,q))"
                       "(max_length(mv_cut(sort_add(p, q))))" "vals")
                      (("1" (replace -1 2 rl)
                        (("1" (lemma "mv_cut_eval")
                          (("1" (inst -1 "sort_add(p,q)" "vals")
                            (("1" (replace -1 2 rl)
                              (("1"
                                (expand "sort_add" 2 1)
                                (("1"
                                  (lift-if 2)
                                  (("1"
                                    (hide 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "sorted_add" 1 1)
                                          (("1"
                                            (lemma
                                             "sorted_sans_add_eval")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (lemma
                                                   "lft_eval_gen")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "p"
                                                     "max(max_length(p), max_length(q))"
                                                     "vals")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "q"
                                                       "max(max_length(p), max_length(q))"
                                                       "vals")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (typepred
                                                             "vals")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (lift-if
                                                                     1)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (typepred
                                                             "vals")
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "lft_n_max_length")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "q"
                                                       "max(max_length(p), max_length(q))")
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         "p"
                                                         "max(max_length(p), max_length(q))")
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (typepred
                                                                     "vals")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         1)
                                                                        (("1"
                                                                          (lift-if
                                                                           1)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (typepred
                                                                 "vals")
                                                                (("2"
                                                                  (hide
                                                                   -4)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "null?(q)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "lft_n_max_length")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "q"
                                                                             "max(max_length(p), max_length(q))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "lft"
                                                                                   3
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       3
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max"
                                                                                           3
                                                                                           1)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             3)
                                                                                            (("2"
                                                                                              (split
                                                                                               3)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "sorted_add"
                                                 2
                                                 1)
                                                (("1"
                                                  (lemma
                                                   "sorted_sans_add_eval")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "lft_eval_gen")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "mv_standard_form(q)"
                                                               "(max(max_length(p), max_length(mv_standard_form(q))))"
                                                               "vals")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "p"
                                                                 "(max(max_length(p), max_length(mv_standard_form(q))))"
                                                                 "vals")
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       2
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "standard_form_full_eval")
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "vals")
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (lift-if
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "mv_standard_form_max_length")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "q")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (lemma
                                                                     "mv_standard_form_max_length")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "q")
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (lift-if
                                                                           1)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "vals")
                                                          (("2"
                                                            (lemma
                                                             "lft_n_max_length")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "p"
                                                                 "(max(max_length(p), max_length(mv_standard_form(q))))")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "q"
                                                                   "(max(max_length(p), max_length(mv_standard_form(q))))")
                                                                  (("1"
                                                                    (case
                                                                     "null?(p)")
                                                                    (("1"
                                                                      (case
                                                                       "null?(q)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "lft"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           2
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "max_length"
                                                                               2
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "max"
                                                                                   2
                                                                                   1)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     2)
                                                                                    (("2"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "lft_n_max_length")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "mv_standard_form(q)"
                                                                                               "max_length(mv_standard_form(q))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "mv_standard_form_max_length")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "q")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "lft"
                                                                                                     2
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         2
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -4)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "lft_n_max_length")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "mv_standard_form(q)"
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lft"
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           3
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "vals")
                                                                          (("2"
                                                                            (lemma
                                                                             "mv_standard_form_max_length")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "q")
                                                                              (("2"
                                                                                (lemma
                                                                                 "lft_n_max_length")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "p"
                                                                                   " (max(max_length(p), max_length(mv_standard_form(q))))")
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "mv_standard_form(q)"
                                                                                         "(max(max_length(p), max_length(mv_standard_form(q))))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "max_length"
                                                                                                 3
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max_length"
                                                                                                     3
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lft"
                                                                                                       3
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         3
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "max"
                                                                                                             3
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       1)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_n_max_length")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "mv_standard_form(q)"
                                                                                 "max(max_length(p), max_length(mv_standard_form(q)))")
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     lr)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "lft"
                                                                                       2
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         2
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "lft"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 2
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max_length"
                                                                                     2
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "mv_standard_form_max_length")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "q")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "lft_n_max_length")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "mv_standard_form(q)"
                                                                                                 "max(0, max_length(mv_standard_form(q)))")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     2
                                                                                                     lr)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lft"
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         3
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max_length"
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "sorted_sans_add_eval")
                                                    (("1"
                                                      (expand
                                                       "sorted_add"
                                                       2
                                                       1)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "lft_eval_gen")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "mv_standard_form(p)"
                                                                   "(max(max_length(mv_standard_form(p)), max_length(q)))"
                                                                   "vals")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "q"
                                                                     "(max(max_length(mv_standard_form(p)), max_length(q)))"
                                                                     "vals")
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           2
                                                                           rl)
                                                                          (("1"
                                                                            (lemma
                                                                             " standard_form_full_eval")
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         3)
                                                                        (("2"
                                                                          (hide
                                                                           2
                                                                           3
                                                                           4)
                                                                          (("2"
                                                                            (typepred
                                                                             "vals")
                                                                            (("2"
                                                                              (lemma
                                                                               "mv_standard_form_max_length")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p")
                                                                                (("2"
                                                                                  (expand
                                                                                   "max"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "mv_standard_form_max_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (case
                                                             "null?(q)")
                                                            (("1"
                                                              (case
                                                               "null?(mv_standard_form(p))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "lft"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "lft"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "lft_n_max_length")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "mv_standard_form(p)"
                                                                     "(max(max_length(mv_standard_form(p)), max_length(q)))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         lr)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           2)
                                                                          (("2"
                                                                            (lift-if
                                                                             2)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "lft"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lft"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "mv_standard_form_max_length")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "p")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (case
                                                                   "null?(mv_standard_form(p))")
                                                                  (("1"
                                                                    (expand
                                                                     "lft"
                                                                     2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       2
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "max_length"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "lft_n_max_length")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "q"
                                                                                 "max(max_length(mv_standard_form(p)), max_length(q))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     2
                                                                                     lr)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "mv_standard_form_max_length")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "p")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             2)
                                                                                            (("1"
                                                                                              (split
                                                                                               2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "mv_standard_form_max_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (lemma
                                                                           "lft_n_max_length")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "mv_standard_form(p)"
                                                                             "max(max_length(mv_standard_form(p)), max_length(q))")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "q"
                                                                               "(max(max_length(mv_standard_form(p)), max_length(q)))")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   3
                                                                                   lr)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     3
                                                                                     lr)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       3)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         3)
                                                                                        (("2"
                                                                                          (split
                                                                                           3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "sorted_add")
                                                      (("2"
                                                        (lemma
                                                         "sorted_sans_add_eval")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "mv_standard_form_max_length")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "p")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "q")
                                                                      (("1"
                                                                        (lemma
                                                                         "lft_eval_gen")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "mv_standard_form(p)"
                                                                           " (max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))"
                                                                           "vals")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "mv_standard_form(q)"
                                                                             " (max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))"
                                                                             "vals")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               2
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 2
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "standard_form_full_eval")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "p"
                                                                                     "vals")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "q"
                                                                                       "vals")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "lft_n_max_length")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "mv_standard_form(p)"
                                                                   "(max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "mv_standard_form(q)"
                                                                     "(max(max_length(mv_standard_form(p)), max_length(mv_standard_form(q))))")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               lr)
                                                                              (("1"
                                                                                (expand
                                                                                 "max"
                                                                                 1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "mv_standard_form_max_length")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "p")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "q")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "mv_standard_form_max_length")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "p")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "q")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "mv_standard_form_max_length")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "p")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "q")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max"
                                                                                         2)
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           2)
                                                                                          (("2"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "lft"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "lft"
                                                                                                   2
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "lft"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               2)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "mv_standard_form_max_length")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "p")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "q")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             2)
                                                                                            (("1"
                                                                                              (lift-if
                                                                                               2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "lft"
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     3
                                                                                     3)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max_length"
                                                                                           3)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "lft_n_max_length")
                                (("2"
                                  (lemma "lft_eval_gen")
                                  (("2"
                                    (lemma "mv_cut_eval")
                                    (("2"
                                      (expand "sort_add" 2 1)
                                      (("2"
                                        (lemma "sort_add_max_length")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (typepred "vals")
                                              (("2"
                                                (lemma
                                                 "mv_standard_form_max_length")
                                                (("2"
                                                  (inst-cp -1 "p")
                                                  (("2"
                                                    (inst-cp -1 "q")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "mv_standard_form_max_length")
                                                          (("2"
                                                            (lemma
                                                             "sort_add_max_length")
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "p"
                                                               "q")
                                                              (("2"
                                                                (lemma
                                                                 "max_length_cut")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "sort_add(p,q)")
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -2)
                                                                        (("2"
                                                                          (lift-if
                                                                           -2)
                                                                          (("2"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma " min_add_max_length")
                          (("2" (inst?)
                            (("2" (lemma "mv_standard_form_max_length")
                              (("2"
                                (inst-cp -1 "q")
                                (("2"
                                  (inst-cp -1 "p")
                                  (("2"
                                    (expand "max" -4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "vals")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (lemma "max_length_cut")
                                            (("2"
                                              (inst -1 "sort_add(p,q)")
                                              (("2"
                                                (lemma
                                                 "sort_add_max_length")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -8)
                                                      (("2"
                                                        (hide -8)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "MultPoly" arithmetic_MultPoly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut_eval formula-decl nil standard_form_unique nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (sort_add_max_length formula-decl nil standard_form_extras nil)
    (min_add_max_length formula-decl nil standard_form_extras nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (standard_form_full_eval formula-decl nil standard_form_unique nil)
    (mv_standard_form_max_length formula-decl nil standard_form_extras
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (sorted_sans_add_eval formula-decl nil standard_form_unique nil)
    (lft_n_max_length formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lft_eval_gen formula-decl nil standard_form_unique nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (q skolem-const-decl "MultPoly" standard_form_unique nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >= max_length(p) AND length(vals) >= max_length(q)}"
     standard_form_unique nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (mp_mono_eval_TCC1 0
  (mp_mono_eval_TCC1-1 nil 3862047279
   ("" (skeep)
    (("" (typepred "vals")
      (("" (lemma "mp_mono_mult_max")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mp_mono_mult_max formula-decl nil arithmetic_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (mp_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.mp_mono_mult(standard_form_unique.m, standard_form_unique.q)))}")))
 (mp_mono_eval_TCC2 0
  (mp_mono_eval_TCC2-1 nil 3862047279 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mp_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_unique.q))}")))
 (mp_mono_eval_TCC3 0
  (mp_mono_eval_TCC3-1 nil 3862047279 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mp_mono_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(standard_form_unique.m`alpha))}")))
 (mp_mono_eval 0
  (mp_mono_eval-1 nil 3862047282
   ("" (induct "q")
    (("1" (skeep)
      (("1" (expand "mp_mono_mult") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "mp_mono_mult" 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "full_eval" 1 1)
                  (("1" (case "m`alpha=null")
                    (("1" (lemma "alpha_null_eval")
                      (("1" (expand "full_eval" 1 2)
                        (("1" (inst? -1)
                          (("1" (assert) nil nil)
                           ("2" (lemma "list_length_n[nat]")
                            (("2" (inst? -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "eval_vals")
                      (("2" (inst -1 "length(m`alpha)" "m" "vals")
                        (("1" (replace -1)
                          (("1" (replace -2) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lemma "full_eval_recurs")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (lemma "full_eval_recurs")
                          (("2"
                            (inst -1 "cons(cons1_var, cons2_var)"
                             "vals")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -3 "m" "vals")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1 -2 -3)
                                            (("1"
                                              (expand "mult_mono" 2)
                                              (("1"
                                                (case
                                                 "FORALL(a1,a2:nat, m1,m2:monomial, val:list[real]|length(val)>=max(length(m1`alpha),length(m2`alpha))): length(m1`alpha
)=a1 AND length(m2`alpha)=a2 IMPLIES full_eval((# C := m1`C * m2`C, alpha := add_lists[nat](m1`alpha, m2`alpha) #))
 (val) = full_eval(m2)(val) * full_eval(m1)(val)")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "length(m`alpha)"
                                                   "length(cons1_var`alpha)"
                                                   "m"
                                                   "cons1_var"
                                                   "vals")
                                                  (("1"
                                                    (typepred "vals")
                                                    (("1"
                                                      (expand
                                                       max_length
                                                       -2)
                                                      (("1"
                                                        (expand "max" 1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (induct "a1")
                                                    (("1"
                                                      (induct "a2")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (lemma
                                                           "add_list_length[nat]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (expand
                                                                   max
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     length)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (lemma
                                                                               "alpha_null_eval")
                                                                              (("1"
                                                                                (copy
                                                                                 -1)
                                                                                (("1"
                                                                                  (copy
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     full_eval)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "list_length_n[nat]")
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "list_length_n[nat]")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "list_length_n[nat]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             length
                                                             -2)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "alpha_null_eval")
                                                                  (("1"
                                                                    (expand
                                                                     full_eval
                                                                     1
                                                                     3)
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             add_lists
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "eval_vals")
                                                                              (("1"
                                                                                (copy
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "1+j"
                                                                                   "m2"
                                                                                   "val")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "1+j"
                                                                                       "(# C := m1`C * m2`C, alpha := m2`alpha #)"
                                                                                       "val")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             hat
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "list_length_n[nat]")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (typepred
                                                             val)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (skeep)
                                                        (("4"
                                                          (typepred
                                                           val)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (skeep)
                                                        (("5"
                                                          (lemma
                                                           "add_list_length[nat]")
                                                          (("5"
                                                            (inst? -1)
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case "a2=0")
                                                          (("1"
                                                            (expand
                                                             length
                                                             -4)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     add_lists
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "alpha_null_eval")
                                                                        (("1"
                                                                          (expand
                                                                           full_eval
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "eval_vals")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "1+j"
                                                                                       "m1"
                                                                                       "val")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "1+j"
                                                                                           "(# C := m1`C * m2`C, alpha := m1`alpha #)"
                                                                                           "val")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               hat
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "list_length_n[nat]")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "eval_vals")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "1+j"
                                                               "m1"
                                                               "val")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_vals")
                                                                  (("1"
                                                                    (copy
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "max(1+j,a2)"
                                                                       "(# C := m1`C * m2`C, alpha := add_lists[nat](m1`alpha, m2`alpha) #)"
                                                                       "val")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "a2"
                                                                           "m2"
                                                                           "val")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               hat
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -4
                                                                                   "a2-1"
                                                                                   "(# C := 1, alpha := cdr[nat](m1`alpha) #)"
                                                                                   "(# C := 1, alpha := cdr[nat](m2`alpha) #)"
                                                                                   "cdr(val)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       length
                                                                                       -5)
                                                                                      (("1"
                                                                                        (expand
                                                                                         length
                                                                                         -6)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "add_lists[nat]
                            (cdr[nat](m1`alpha), cdr[nat](m2`alpha)) = cdr[nat](add_lists[nat](m1`alpha, m2`alpha))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "car(val) ^ car[nat](add_lists[nat](m1`alpha, m2`alpha)) = car(val) ^ car[nat](m1`alpha)
        * car(val) ^ car[nat](m2`alpha)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       add_lists
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "expt_plus")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "car(val) = 0")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ^
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   expt
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "list_extensionality[nat]")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "add_list_length[nat]")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "add_list_length[nat]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m1`alpha"
                                                                                                             "m2`alpha")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               length
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lift-if
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     val)
                                                                                    (("2"
                                                                                      (expand
                                                                                       length
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         -2)
                                                                                        (("2"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               max
                                                                                               2)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "add_list_length[nat]")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -5)
                                                                            (("2"
                                                                              (replace
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "val")
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (typepred "val")
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (typepred "val")
                                                        (("5"
                                                          (lemma
                                                           "add_list_length[nat]")
                                                          (("5"
                                                            (inst? -1)
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "val")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred "val")
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (skeep)
                                                  (("5"
                                                    (lemma
                                                     "add_list_length[nat]")
                                                    (("5"
                                                      (inst? -1)
                                                      (("5"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "vals")
                                      (("2"
                                        (expand "max_length" -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (typepred "vals") (("3" (assert) nil nil)) nil))
      nil)
     ("4" (skeep) (("4" (typepred "vals") (("4" (assert) nil nil)) nil))
      nil)
     ("5" (induct "q")
      (("1" (skeep)
        (("1" (expand "mp_mono_mult" 1)
          (("1" (assert)
            (("1" (expand "max_length" 1) (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "mp_mono_mult" 1)
            (("2" (lift-if 1)
              (("2" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "max_length" 2)
                    (("2" (expand "mult_mono" 2)
                      (("2" (lemma "add_list_length[nat]")
                        (("2" (inst? -1)
                          (("2" (replace -1)
                            (("2" (inst -2 "m" "vals")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "max" 2 1)
                                  (("1"
                                    (lift-if 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (typepred "vals")
                                            (("2"
                                              (expand "max_length" -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "max" 2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "vals")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "max" 1)
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "max_length" -3)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "max_length" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m skolem-const-decl "monomial" standard_form_unique nil)
    (cons1_var skolem-const-decl "monomial" standard_form_unique nil)
    (cons2_var skolem-const-decl "list[monomial]" standard_form_unique
     nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >=
    max(length(m`alpha), max_length(cons(cons1_var, cons2_var)))}"
     standard_form_unique nil)
    (eval_vals formula-decl nil eval_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (alpha_null_eval formula-decl nil eval_properties nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (m skolem-const-decl "monomial" standard_form_unique nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_unique nil)
    (cons2_var skolem-const-decl "list[monomial]" standard_form_unique
     nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >=
    max(length(m`alpha), max_length(cons(cons1_var, cons2_var)))}"
     standard_form_unique nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (val skolem-const-decl
     "{val: list[real] | length(val) >= max(length(m1`alpha), length(m2`alpha))}"
     standard_form_unique nil)
    (m2 skolem-const-decl "monomial" standard_form_unique nil)
    (m1 skolem-const-decl "monomial" standard_form_unique nil)
    (j skolem-const-decl "nat" standard_form_unique nil)
    (a2 skolem-const-decl "nat" standard_form_unique nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (nth def-decl "T" list_props nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (add_list_length formula-decl nil list_lemmas nil)
    (m1 skolem-const-decl "monomial" standard_form_unique nil)
    (m2 skolem-const-decl "monomial" standard_form_unique nil)
    (val skolem-const-decl
     "{val: list[real] | length(val) >= max(length(m1`alpha), length(m2`alpha))}"
     standard_form_unique nil)
    (m1 skolem-const-decl "monomial" standard_form_unique nil)
    (m2 skolem-const-decl "monomial" standard_form_unique nil)
    (val skolem-const-decl
     "{val: list[real] | length(val) >= max(length(m1`alpha), length(m2`alpha))}"
     standard_form_unique nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add_lists def-decl "list[nat]" list_lemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (mult_mono const-decl "monomial" arithmetic_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (mult_full_eval_TCC1 0
  (mult_full_eval_TCC1-1 nil 3861969772
   ("" (lemma "add_full_eval_TCC1")
    (("" (induct "p")
      (("1" (skeep) (("1" (grind) nil nil)) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "mp_mult" 1 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2"
                      (inst -2 "mp_mono_mult(cons1_var,q)"
                       "mp_mult(cons2_var,q)" "vals")
                      (("2" (lemma "mp_mono_mult_max")
                        (("2" (inst -2 "q" "vals")
                          (("1" (inst -1 "cons1_var" "q")
                            (("1" (assert)
                              (("1"
                                (typepred "vals")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "max_length" -2 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "max" -4)
                                        (("1"
                                          (lift-if -4)
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "vals")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "max_length" -2 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mp_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >= max_length(cons(cons1_var, cons2_var)) AND
    length(vals) >= max_length(q)}" standard_form_unique nil)
    (q skolem-const-decl "MultPoly" standard_form_unique nil)
    (cons2_var skolem-const-decl "list[monomial]" standard_form_unique
     nil)
    (cons1_var skolem-const-decl "monomial" standard_form_unique nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mp_mono_mult_max formula-decl nil arithmetic_MultPoly nil)
    (add_full_eval_TCC1 subtype-tcc nil standard_form_unique nil))
   nil
   (mult_full_eval subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.mp_mult(standard_form_unique.p, standard_form_unique.q)))}")))
 (mult_full_eval 0
  (mult_full_eval-1 nil 3861969772
   ("" (induct "p")
    (("1" (skeep) (("1" (expand "mp_mult") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "mp_mult" 1)
          (("2" (lift-if 1)
            (("2" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (lemma "full_eval_recurs")
                  (("2" (inst -1 "cons(cons1_var, cons2_var)" "vals")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (assert)
                          (("2" (lemma "add_full_eval")
                            (("2" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst? -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "mp_mono_eval")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (typepred "vals")
                                              (("1"
                                                (expand "max_length" -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "vals")
                                    (("2"
                                      (expand "max_length" -2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "mp_mult_max_length")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "vals")
                                      (("2"
                                        (expand "max_length" -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (case
                                               "FORALL(m:monomial, q:MultPoly): max_length(mp_mono_mult(m, q)) <= max(length(m`alpha),max_length(q))")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide
                                                 -6
                                                 -5
                                                 -4
                                                 -3
                                                 -2
                                                 -1
                                                 2
                                                 3
                                                 4)
                                                (("2"
                                                  (induct "q")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       mp_mono_mult)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         mp_mono_mult
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   max_length
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     mult_mono
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "add_list_length[nat]")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "m")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "max" -4)
                                                (("2"
                                                  (lift-if -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "mp_mult_max_length")
        (("3" (inst? -1)
          (("3" (assert)
            (("3" (typepred "vals")
              (("3" (expand "max" -4)
                (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (full_eval_recurs formula-decl nil eval_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons1_var skolem-const-decl "monomial" standard_form_unique nil)
    (cons2_var skolem-const-decl "list[monomial]" standard_form_unique
     nil)
    (q skolem-const-decl "MultPoly" standard_form_unique nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) >= max_length(cons(cons1_var, cons2_var)) AND
    length(vals) >= max_length(q)}" standard_form_unique nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (mp_mono_eval formula-decl nil standard_form_unique nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add_list_length formula-decl nil list_lemmas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_mono const-decl "monomial" arithmetic_MultPoly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mp_mult_max_length formula-decl nil standard_form_extras nil)
    (add_full_eval formula-decl nil standard_form_unique nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mp_mult def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (standard_form_adds_id_TCC1 0
  (standard_form_adds_id_TCC1-1 nil 3814257866
   ("" (skeep)
    (("" (lemma "mv_standard_form_max_length")
      (("" (inst -1 "add(p,q)")
        (("" (assert)
          (("" (typepred "vals")
            (("" (assert)
              (("" (lemma "add_max_length")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "max" -1)
                      (("" (lift-if -1)
                        (("" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_form_max_length formula-decl nil standard_form_extras
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_max_length formula-decl nil standard_form_extras nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (standard_form_adds_id subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_mult_poly.mv_standard_form(arithmetic_MultPoly.add(standard_form_unique.p, standard_form_unique.q))))}")))
 (standard_form_adds_id 0
  (standard_form_adds_id-1 nil 3814257963
   ("" (skeep)
    (("" (lemma "standard_form_full_eval")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((standard_form_full_eval formula-decl nil standard_form_unique nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (equal_everywhere_add_TCC1 0
  (equal_everywhere_add_TCC1-1 nil 3810569401
   ("" (skeep)
    (("" (lemma "add_max_length")
      (("" (inst?)
        (("" (rewrite "mult_max_length")
          (("" (typepred "vals")
            (("" (expand "max")
              (("" (assert)
                (("" (lift-if -4)
                  (("" (split -4)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_max_length formula-decl nil standard_form_extras nil)
    (mult_max_length formula-decl nil standard_form_extras nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (equal_everywhere_add subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(arithmetic_MultPoly.add(standard_form_unique.p, arithmetic_MultPoly.mult((number_fields.-)(1), standard_form_unique.q))))}")))
 (equal_everywhere_add 0
  (equal_everywhere_add-1 nil 3810571736
   ("" (skeep)
    (("" (rewrite "add_full_eval" 1)
      (("1" (rewrite "scale_full_eval") (("1" (assert) nil nil)) nil)
       ("2" (rewrite "mult_max_length") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (add_full_eval formula-decl nil standard_form_unique nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scale_full_eval formula-decl nil standard_form_extras nil)
    (mult_max_length formula-decl nil standard_form_extras nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (standard_form_nonzero_TCC1 0
  (standard_form_nonzero_TCC1-1 nil 3810569401
   ("" (subtype-tcc) nil nil) nil nil
   (standard_form_nonzero subtype "standard_form_unique.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_unique.p))}")))
 (standard_form_nonzero 0
  (standard_form_nonzero-1 nil 3812728420
   (""
    (case "FORALL (n: nat, p: (mv_UNS?(n))):
               cons?(p) IMPLIES
                EXISTS ((vals: list[real] | length(vals) = n)):
                  full_eval(p)(vals) /= 0")
    (("1" (skeep)
      (("1" (inst -1 "max_length(p)" " p")
        (("1" (assert) nil nil)
         ("2" (lemma "standard_is_UNS") (("2" (inst?) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (typepred "p")
            (("1" (expand "mv_UNS?")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (case "NOT p = (: car(p) :)")
                    (("1" (expand "Unif?")
                      (("1" (expand "simplified?")
                        (("1" (assert)
                          (("1" (split -4)
                            (("1" (assert)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split -1)
                                (("1"
                                  (inst -1 "0" "1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -2 "0" "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" -2 1)
                                            (("1"
                                              (expand "nth" -1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("1"
                                                      (lift-if -3)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "length" +)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (expand "length" +)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "null[real]")
                      (("2" (replace -1)
                        (("2" (expand "full_eval" +)
                          (("2" (assert)
                            (("2" (expand "list_length_n")
                              (("2"
                                (expand "eval")
                                (("2"
                                  (expand "eval" -7 2)
                                  (("2"
                                    (expand "eval")
                                    (("2"
                                      (expand "sum_C")
                                      (("2"
                                        (expand "sum_C")
                                        (("2"
                                          (expand "allnonzero?")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -4)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst 1 "0")
                                                (("2"
                                                  (expand "nth")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep :preds? t)
            (("2" (name "PIP" "poly_in_polys(j+1, p)")
              (("2" (lemma "pip_cons_nth")
                (("2" (inst -1 "j+1" "p")
                  (("2" (assert)
                    (("2" (lemma "pip_length")
                      (("2" (inst?)
                        (("2" (move-terms -1 r 2)
                          (("2" (replace -1 :dir rl)
                            (("2"
                              (inst -5 "nth(poly_in_polys(1 + j, p),
                      length(poly_in_polys(1 + j, p)) - 1)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep -5)
                                  (("1"
                                    (typepred "vals")
                                    (("1"
                                      (name
                                       "UniP"
                                       "poly_in_polys_partial_eval(j+1, p, vals)")
                                      (("1"
                                        (name
                                         "lca"
                                         "largest_car_alpha(1 + j, p)")
                                        (("1"
                                          (case
                                           "NOT standard_form?(UniP)")
                                          (("1"
                                            (expand "standard_form?" 1)
                                            (("1"
                                              (typepred " UniP")
                                              (("1"
                                                (expand "length" -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide (-1 -2))
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (case
                                                         "forall (ll:(cons?[real])): last(ll) = nth(ll, length(ll) -1)")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "UniP")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "UniP")
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     -3
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "poly_in_polys_partial_eval"
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -10)
                                                                        (("1"
                                                                          (expand
                                                                           "partial_eval_pip"
                                                                           -3)
                                                                          (("1"
                                                                            (hide
                                                                             (-1
                                                                              -2))
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[(mv_UNS?(1 + j - 1)), real]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "max_length_UNSge")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (induct
                                                             "ll")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (case
                                                                   "null?(cons2_var)")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "last")
                                                                      (("1"
                                                                        (expand
                                                                         "length")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "length")
                                                                            (("1"
                                                                              (expand
                                                                               "nth")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "last"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           +)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   2)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             2)
                                                                                            (("2"
                                                                                              (split
                                                                                               2)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (assert)
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "length")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 1)
                                            (("2"
                                              (typepred "UniP")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma "eval_zero")
                                                  (("2"
                                                    (inst -1 "UniP")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (expand
                                                             "standard_form?")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (case
                                                                     "FORALL(n:posnat): last(zero_p(n)) = 0")
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (expand
                                                                                 "zero_p"
                                                                                 1
                                                                                 1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (case
                                                                                     "j!1=0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "zero_p"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "last"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "last"
                                                                                         2
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             2)
                                                                                            (("2"
                                                                                              (split
                                                                                               2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -)
                                                                      (("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "cons(x!1, vals)")
                                                              (("1"
                                                                (lemma
                                                                 "pip_to_full_eval")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "j+1"
                                                                   "p"
                                                                   "x!1"
                                                                   "vals")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "vals")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     +)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (skeep)
              (("3" (lemma "max_length_UNSge")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "max_length_UNSge")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pip_length formula-decl nil dimension_induction nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "nat" standard_form_unique nil)
    (p skolem-const-decl "(mv_UNS?(j + 1))" standard_form_unique nil)
    (below type-eq-decl nil nat_types nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (poly_in_polys_partial_eval const-decl
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     dimension_induction nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (partial_eval_pip const-decl
     "{p: Polynomial | length(p) = length(pip)}" dimension_induction
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_UNSge formula-decl nil dimension_induction nil)
    (vals skolem-const-decl "{vals: list[real] | length(vals) = j}"
     standard_form_unique nil)
    (TRUE const-decl "bool" booleans nil)
    (last def-decl "real" standard_form_poly nil)
    (eval_zero formula-decl nil arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (x!1 skolem-const-decl "real" standard_form_unique nil)
    (pip_to_full_eval formula-decl nil dimension_induction nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (pip_cons_nth formula-decl nil dimension_induction nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (length_singleton formula-decl nil more_list_props structures)
    (eval def-decl "monomial" eval_MultPoly nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (length_null formula-decl nil more_list_props structures)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (p skolem-const-decl "(mv_UNS?(0))" standard_form_unique nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (standard_is_UNS formula-decl nil dimension_induction nil)
    (p skolem-const-decl "(mv_standard_form?)" standard_form_unique
     nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil))
   shostak))
 (standard_form_add_null 0
  (standard_form_add_null-1 nil 3811866126
   ("" (skeep)
    (("" (case "add(p,mult(-1,q)) = allnonzero(add(p,mult(-1,q)))")
      (("1" (replace -1 -2)
        (("1" (hide -1)
          (("1" (rewrite "null_allnonzero")
            (("1" (expand "add")
              (("1" (expand "min_add")
                (("1"
                  (case "NOT every(LAMBDA (m: monomial): m`C = 0)(sort_add(p, mult(-1, q)))")
                  (("1" (split -1)
                    (("1" (flatten) nil nil)
                     ("2" (assert)
                      (("2" (flatten)
                        (("2" (rewrite "every_nth")
                          (("2" (rewrite "every_nth")
                            (("2" (skeep)
                              (("2"
                                (inst -1 "i")
                                (("1"
                                  (lemma "lft_constants")
                                  (("1"
                                    (inst
                                     -1
                                     "mv_cut(sort_add(p, mult(-1, q)))"
                                     "i"
                                     "max_length(mv_cut(sort_add(p, mult(-1, q))))")
                                    (("1"
                                      (replaces -1 :dir rl)
                                      (("1"
                                        (rewrite "mv_cut_is_alt")
                                        (("1"
                                          (expand "mv_cut_alt")
                                          (("1"
                                            (rewrite "map_nth_rw" -1)
                                            (("1"
                                              (expand "cut_monom")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite "mv_cut_length")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (lemma "Lft_length")
                                      (("2"
                                        (inst
                                         -1
                                         "mv_cut(sort_add(p, mult(-1, q)))"
                                         "max_length(mv_cut(sort_add(p, mult(-1, q))))")
                                        (("2"
                                          (rewrite
                                           "mv_cut_length"
                                           :dir
                                           rl)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "sort_add")
                      (("2" (lemma "mult_mv_standard")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (expand "sorted_add")
                              (("2"
                                (lemma " lft_standard_is_sans")
                                (("2"
                                  (inst-cp
                                   -1
                                   "p"
                                   "max(max_length(p), max_length(mult(-1, q)))")
                                  (("2"
                                    (inst-cp
                                     -1
                                     "mult(-1,q)"
                                     "max(max_length(p), max_length(mult(-1, q)))")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma "sorted_sans_add_zero")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst
                                             -1
                                             "length(lft(p)(max(max_length(p), max_length(mult(-1, q)))))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "list_extensionality[monomial]")
                                                  (("2"
                                                    (inst -1 "p" "q")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "Lft_length"
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "Lft_length"
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "mult_length")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "max_length_different_lft_nth")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "mult(-1, q)")
                                                              (("1"
                                                                (case
                                                                 "NOT length(p) = length(mult(-1, q))")
                                                                (("1"
                                                                  (rewrite
                                                                   "Lft_length"
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "Lft_length"
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (skeep
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "i")
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "mult"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -4
                                                                           "n")
                                                                          (("1"
                                                                            (lemma
                                                                             "lft_max_on_minlength")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "p")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "mult(-1,q)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "mult_map"
                                                                                             -6
                                                                                             :target-fnums
                                                                                             (-6))
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "map_nth_rw"
                                                                                               -6)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "mult"
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "q")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "mv_standard_form?"
                                                                                             -9)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "minlength?"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "p")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "mv_standard_form?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "minlength?"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "Lft_length"
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "q")
                                                                (("2"
                                                                  (lemma
                                                                   "mult_mv_standard")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (expand
                                                                       "mv_standard_form?"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "minlength?")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "p")
                                                                (("3"
                                                                  (expand
                                                                   "mv_standard_form?"
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "minlength?")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "allnonzero_id")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma " add_nonzero") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (sort_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (every_nth formula-decl nil list_props nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (lft_constants formula-decl nil standard_form_extras nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil)
    (mv_cut_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (mv_cut_is_alt formula-decl nil standard_form_mult_poly nil)
    (i skolem-const-decl
       "below(length[monomial](sort_add(p, mult(-1, q))))"
       standard_form_unique nil)
    (below type-eq-decl nil naturalnumbers nil)
    (q skolem-const-decl "(mv_standard_form?)" standard_form_unique
     nil)
    (p skolem-const-decl "(mv_standard_form?)" standard_form_unique
     nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (sorted_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (mult_length formula-decl nil standard_form_extras nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (n skolem-const-decl "below(length(p))" standard_form_unique nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (mult_map formula-decl nil standard_form_extras nil)
    (lft_max_on_minlength formula-decl nil standard_form_extras nil)
    (mult const-decl "monomial" arithmetic_MultPoly nil)
    (max_length_different_lft_nth formula-decl nil standard_form_extras
     nil)
    (sorted_sans_add_zero formula-decl nil standard_form_extras nil)
    (lft_standard_is_sans formula-decl nil arithmetic_MultPoly nil)
    (mult_mv_standard formula-decl nil standard_form_extras nil)
    (min_add const-decl "MultPoly" arithmetic_MultPoly nil)
    (null_allnonzero formula-decl nil standard_form_extras nil)
    (add_nonzero formula-decl nil standard_form_extras nil)
    (allnonzero_id formula-decl nil standard_form_mult_poly nil))
   shostak))
 (eval_impl_standard 0
  (eval_impl_standard-1 nil 3810569666
   ("" (skeep)
    (("" (lemma "standard_form_add_null")
      (("" (inst -1 "mv_standard_form(p) " " mv_standard_form(q)")
        (("1" (assert)
          (("1" (lemma "standard_form_nonzero")
            (("1"
              (inst -1
               "add(mv_standard_form(p), mult(-1, mv_standard_form(q)))")
              (("1" (split -1)
                (("1" (skeep)
                  (("1" (typepred "vals")
                    (("1"
                      (name "valsp"
                            "vals_pad(vals, max(max_length(p), max_length(q)))")
                      (("1" (lemma "standard_form_full_eval")
                        (("1" (inst -5 "valsp")
                          (("1" (lemma "equal_everywhere_add")
                            (("1" (inst -1 "p" "q" "valsp")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "vals_extend")
                                  (("1"
                                    (inst
                                     -1
                                     "add(mv_standard_form(p), mult(-1, mv_standard_form(q)))"
                                     "vals"
                                     "max(max_length(p), max_length(q))")
                                    (("1"
                                      (replaces -1 :dir rl)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (rewrite "add_full_eval" 1)
                                          (("1"
                                            (rewrite
                                             "scale_full_eval"
                                             1)
                                            (("1"
                                              (rewrite
                                               "standard_form_full_eval"
                                               1)
                                              (("1"
                                                (rewrite
                                                 "standard_form_full_eval"
                                                 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "mv_standard_form_max_length")
                                              (("2"
                                                (inst -1 "q")
                                                (("2"
                                                  (typepred "valsp")
                                                  (("2"
                                                    (replaces -2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "mult_max_length")
                                            (("2"
                                              (lemma
                                               "mv_standard_form_max_length")
                                              (("2"
                                                (inst-cp -1 "p")
                                                (("2"
                                                  (inst -1 "q")
                                                  (("2"
                                                    (typepred "valsp")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert)
                (("2" (lemma "add_standard_form")
                  (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "standard_form_is_standard") nil nil)
         ("3" (rewrite "standard_form_is_standard") nil nil))
        nil))
      nil))
    nil)
   ((standard_form_add_null formula-decl nil standard_form_unique nil)
    (standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (add const-decl "MultPoly" arithmetic_MultPoly nil)
    (mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vals_pad const-decl
     "{l: list[real] | length(l) = length(vals) + n}"
     standard_form_extras nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vals skolem-const-decl "{vals: list[real] |
   length(vals) =
    max_length(add(mv_standard_form(p), mult(-1, mv_standard_form(q))))}"
     standard_form_unique nil)
    (valsp skolem-const-decl "{l: list[real] |
   length(l) = length(vals) + max(max_length(p), max_length(q))}"
     standard_form_unique nil)
    (vals_extend formula-decl nil standard_form_extras nil)
    (TRUE const-decl "bool" booleans nil)
    (add_full_eval formula-decl nil standard_form_unique nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mv_standard_form_max_length formula-decl nil standard_form_extras
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scale_full_eval formula-decl nil standard_form_extras nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_max_length formula-decl nil standard_form_extras nil)
    (equal_everywhere_add formula-decl nil standard_form_unique nil)
    (standard_form_full_eval formula-decl nil standard_form_unique nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (add_standard_form formula-decl nil standard_form_extras nil)
    (standard_form_nonzero formula-decl nil standard_form_unique nil)
    (q skolem-const-decl "MultPoly" standard_form_unique nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil))
   shostak))
 (standard_form_is_unique_TCC1 0
  (standard_form_is_unique_TCC1-1 nil 3810653348
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (standard_form_is_unique subtype "standard_form_unique.x"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_unique.p))}")))
 (standard_form_is_unique_TCC2 0
  (standard_form_is_unique_TCC2-1 nil 3810653491
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (standard_form_is_unique subtype "standard_form_unique.x"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(standard_form_unique.q))}")))
 (standard_form_is_unique 0
  (standard_form_is_unique-1 nil 3810653348
   ("" (skeep)
    (("" (split 1)
      (("1" (lemma "standard_impl_eval")
        (("1" (flatten)
          (("1" (skeep)
            (("1" (inst?)
              (("1" (assert) nil nil)
               ("2" (typepred "x") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "eval_impl_standard")
        (("2" (inst?)
          (("2" (flatten)
            (("2" (split -1)
              (("1" (propax) nil nil)
               ("2" (skeep)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (typepred "vals")
                      (("2" (assert)
                        (("2" (expand "max")
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1" (flatten) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl
     "{x: list[real] | length(x) >= max(max_length(p), max_length(q))}"
     standard_form_unique nil)
    (q skolem-const-decl "MultPoly" standard_form_unique nil)
    (p skolem-const-decl "MultPoly" standard_form_unique nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (standard_impl_eval formula-decl nil standard_form_unique nil)
    (vals skolem-const-decl
     "{l: list[real] | length(l) >= max_length(p) AND length(l) >= max_length(q)}"
     standard_form_unique nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_impl_standard formula-decl nil standard_form_unique nil))
   shostak)))

