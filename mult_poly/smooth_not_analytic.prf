(smooth_not_analytic
 (Rolles_thrm_TCC1 0
  (Rolles_thrm_TCC1-1 nil 3808433019
   ("" (lemma "deriv_domain_open")
    (("" (skeep) (("" (inst -1 "a" "b") nil nil)) nil)) nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis))
   nil
   (Rolles_thrm assuming
    "analysis@derivatives[intervals_real[real].open_interval(smooth_not_analytic.a, smooth_not_analytic.b)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (Rolles_thrm_TCC2 0
  (Rolles_thrm_TCC2-1 nil 3808433019
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep)
        (("" (inst 1 "x+min(abs(x-a),abs(x-b))/2")
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "open_interval[real](a, b)"
     smooth_not_analytic nil)
    (open_interval type-eq-decl nil intervals_real reals)
    (b skolem-const-decl "{bb: real | bb > a}" smooth_not_analytic nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (Rolles_thrm assuming
    "analysis@derivatives[intervals_real[real].open_interval(smooth_not_analytic.a, smooth_not_analytic.b)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (Rolles_thrm_TCC3 0
  (Rolles_thrm_TCC3-1 nil 3808433019
   ("" (skeep)
    (("" (lemma "derivable_subtype_del[real,open_interval(a,b)]")
      (("1" (skeep)
        (("1"
          (inst -1 "f" "(restrict[real, open_interval(a,b), real](f))"
           "c")
          (("1" (assert)
            (("1" (split -1)
              (("1" (assert)
                (("1" (expand "derivable?" -1)
                  (("1" (inst -1 "c") nil nil)) nil))
                nil)
               ("2" (lemma "deriv_domain_open")
                (("2" (inst -1 "a" "b") nil nil)) nil)
               ("3" (lemma "Rolles_thrm_TCC2")
                (("3" (inst -1 "a" "b") nil nil)) nil)
               ("4" (decompose-equality 1)
                (("4" (expand "restrict" 1) (("4" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst 1 "min(abs(b-c),abs(a-c))/2")
              (("1" (skeep)
                (("1" (expand "extend" 1)
                  (("1" (assert)
                    (("1" (hide -2 -3)
                      (("1" (hide 2) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2)
                (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "not_one_element?" 1)
          (("2" (skeep)
            (("2" (inst 1 "x+1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((open_interval type-eq-decl nil intervals_real reals)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (b skolem-const-decl "{bb: real | bb > a}" smooth_not_analytic nil)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (Rolles_thrm_TCC2 assuming-tcc nil smooth_not_analytic nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (Rolles_thrm subtype "smooth_not_analytic.c"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (Rolles_thrm 0
  (Rolles_thrm-1 nil 3808433764
   ("" (skeep)
    (("" (lemma "max_in_interval[closed_interval[real](a, b)]")
      (("1"
        (inst -1 "a" "b"
         "restrict[real, closed_interval[real](a, b), real](f)")
        (("1" (assert)
          (("1" (skeep)
            (("1" (typepred "c")
              (("1" (case "a<c AND c<b")
                (("1" (flatten)
                  (("1"
                    (lemma "deriv_maximum[open_interval[real](a, b)]")
                    (("1"
                      (inst -1 "(a+c)/2" "(c+b)/2" "c"
                       "restrict[real, open_interval[real](a, b), real](f)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (inst 1 "c")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "deriv_subtype_del[real, open_interval[real](a, b)]")
                                (("1"
                                  (inst
                                   -1
                                   "f"
                                   "restrict[real, open_interval[real](a, b), real](f)"
                                   "c")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "deriv_domain_open")
                                      (("1"
                                        (inst -1 "a" "b")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Rolles_thrm_TCC2")
                                              (("1"
                                                (inst -1 "a" "b")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "restrict" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand
                                                   "derivable?"
                                                   -8)
                                                  (("3"
                                                    (inst -8 "c")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       1
                                       "min(abs(a-c),abs(b-c))/2")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "extend" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -6 -7 -8)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -6 -7 -8)
                                        (("2"
                                          (hide -1 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "not_one_element_real")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "deriv_domain_real")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "derivable?" -6)
                              (("2" (inst -6 "c") nil nil)) nil))
                            nil)
                           ("3" (skeep)
                            (("3" (expand "restrict" 1)
                              (("3"
                                (inst -7 "x")
                                (("3"
                                  (expand "restrict")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil)
                       ("4" (assert) nil nil))
                      nil)
                     ("2" (lemma "Rolles_thrm_TCC2")
                      (("2" (inst -1 "a" "b") nil nil)) nil)
                     ("3" (expand "connected?" 1)
                      (("3" (skeep) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (case "FORALL(x:closed_interval(a,b)): f(x)=f(a)")
                    (("1" (inst 2 "(a+b)/2")
                      (("1" (assert)
                        (("1"
                          (case "deriv[open_interval(a,b)](f) = LAMBDA(x:open_interval(a,b)): 0")
                          (("1" (assert)
                            (("1" (decompose-equality -1)
                              (("1"
                                (inst -1 "(a+b)/2")
                                (("1"
                                  (expand "restrict" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "deriv_subtype_del[real, open_interval[real](a, b)]")
                                      (("1"
                                        (inst
                                         -1
                                         "f"
                                         "(LAMBDA (s: open_interval[real](a, b)): f(s))"
                                         "(a+b)/2")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "deriv" -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "deriv_domain_open")
                                            (("2"
                                              (inst -1 "a" "b")
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "Rolles_thrm_TCC2")
                                            (("3"
                                              (inst -1 "a" "b")
                                              nil
                                              nil))
                                            nil)
                                           ("4"
                                            (expand "derivable?" -6)
                                            (("4"
                                              (inst -6 "(a+b)/2")
                                              (("4"
                                                (expand "restrict" -6)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 1 "abs((a+b)/2-b)")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "extend" 1)
                                                (("1"
                                                  (hide -6 -7 -8)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -5 -6 -7)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (hide 3)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "not_one_element?" 1 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "x+1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "deriv_domain?" 1 1)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst 1 "e/2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide -5 -6 -7)
                                                (("3"
                                                  (hide -2)
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "deriv_const_func[open_interval[real](a, b)]")
                              (("2"
                                (inst -1 "f(a)")
                                (("2"
                                  (expand "const_fun" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict" 1)
                                      (("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            (("1"
                                              (expand "deriv")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "(LAMBDA (x: open_interval[real](a, b)) -> real: f(a)) = (LAMBDA (s: open_interval[real](a, b)): f(s))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (inst -2 "x!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "restrict" -8)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "(LAMBDA (s: open_interval[real](a, b)): f(s)) =  (LAMBDA (x: open_interval[real](a, b)) -> real: f(b))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (inst -4 "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (case
                                             "(LAMBDA (s: open_interval[real](a, b)): f(s)) =  (LAMBDA (x: open_interval[real](a, b)) -> real: f(b))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (inst -4 "x!2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "restrict" -6)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2"
                        (lemma "min_in_interval[closed_interval(a,b)]")
                        (("2"
                          (inst -1 "a" "b"
                           "(restrict[real, closed_interval[real](a, b), real](f))")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (typepred "c!1")
                                (("2"
                                  (case "a<c!1 AND c!1<b")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "deriv_minimum[open_interval[real](a, b)]")
                                      (("1"
                                        (inst
                                         -1
                                         "(a+c!1)/2"
                                         "(c!1+b)/2"
                                         "c!1"
                                         "(restrict[real, open_interval[real](a, b), real](f))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst 3 "c!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_subtype_del[real, open_interval[real](a, b)]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "(restrict[real, open_interval[real](a, b), real](f))"
                                                         "c!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "deriv_domain_open")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "a"
                                                               "b")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "Rolles_thrm_TCC2")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "a"
                                                                     "b")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "restrict"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "derivable?"
                                                                           -12)
                                                                          (("2"
                                                                            (inst
                                                                             -12
                                                                             "c!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           1
                                                           "min(abs(b-c!1),abs(a-c!1))/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "extend"
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -7
                                                                   -11
                                                                   -12)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (expand
                                                                           "fullset"
                                                                           1)
                                                                          (("1"
                                                                            (typepred
                                                                             "y")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -9
                                                             -10
                                                             -11)
                                                            (("2"
                                                              (hide -6)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   4)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "not_one_element?"
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "x!1+1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "deriv_domain_real")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil)
                                             ("3" (assert) nil nil)
                                             ("4"
                                              (expand "derivable?" -8)
                                              (("4"
                                                (inst -8 "c!1")
                                                nil
                                                nil))
                                              nil)
                                             ("5"
                                              (assert)
                                              (("5"
                                                (skeep)
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (inst -7 "x!1")
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (expand
                                                         "restrict")
                                                        (("5"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "Rolles_thrm_TCC2")
                                        (("2"
                                          (inst -1 "a" "b")
                                          nil
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (hide -4 -7 -8 -9)
                                          (("3"
                                            (expand "connected?" 1)
                                            (("3"
                                              (skeep)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case "f(c!1)=f(a)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "x")
                                          (("1"
                                            (inst -7 "x")
                                            (("1"
                                              (expand "restrict")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((closed_interval type-eq-decl nil intervals_real reals)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_in_interval formula-decl nil continuous_functions_props
     analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv_minimum formula-decl nil derivative_props analysis)
    (c!1 skolem-const-decl "closed_interval[real](a, b)"
     smooth_not_analytic nil)
    (min_in_interval formula-decl nil continuous_functions_props
     analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_const_func formula-decl nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c skolem-const-decl "closed_interval[real](a, b)"
       smooth_not_analytic nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (Rolles_thrm_TCC2 assuming-tcc nil smooth_not_analytic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_subtype_del formula-decl nil derivatives_subtype analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (open_interval type-eq-decl nil intervals_real reals)
    (deriv_maximum formula-decl nil derivative_props analysis)
    (< const-decl "bool" reals nil)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (b skolem-const-decl "{bb: real | bb > a}" smooth_not_analytic nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (f skolem-const-decl "[real -> real]" smooth_not_analytic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (open_noe 0
  (open_noe-1 nil 3812192422
   ("" (skeep)
    (("" (expand "not_one_element?" 1 1)
      ((""
        (case "EXISTS(eps:posreal): FORALL(del:posreal): del<eps IMPLIES a< a + del AND a+del < b")
        (("1" (skeep)
          (("1" (skeep)
            (("1" (inst-cp -1 "eps/2")
              (("1" (inst -1 "eps/3")
                (("1" (assert)
                  (("1" (inst-cp 1 "eps/2+a")
                    (("1" (inst 1 "eps/3+a") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (inst 1 "(b-a)/2")
            (("1" (skeep) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (b skolem-const-decl "real" smooth_not_analytic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (open_interval type-eq-decl nil intervals_real reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (closed_cont 0
  (closed_cont-1 nil 3812197528
   ("" (skeep*)
    (("" (expand "continuous?")
      (("" (skeep)
        (("" (inst -1 "x0")
          (("" (expand "continuous?")
            (("" (skeep)
              (("" (inst -1 "epsilon")
                (("" (skeep)
                  (("" (inst 1 "delta")
                    (("" (skeep)
                      (("" (inst -1 "x") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuous_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (mean_value_gen_TCC1 0
  (mean_value_gen_TCC1-1 nil 3808436436
   ("" (skeep*)
    (("" (lemma "derivable_subtype_del[real,open_interval[real](a,b)]")
      ((""
        (inst -1 "f"
         "restrict[real, open_interval[real](a, b), real](f)" "c")
        (("1" (assert)
          (("1" (split -1)
            (("1" (expand "restrict")
              (("1" (assert)
                (("1" (expand "derivable?" -1)
                  (("1" (inst -1 "c") nil nil)) nil))
                nil))
              nil)
             ("2" (lemma "deriv_domain_open")
              (("2" (inst -1 "a" "b") nil nil)) nil)
             ("3" (expand "not_one_element?" 1)
              (("3" (skeep)
                (("3" (case "NOT x= (a+b)/2")
                  (("1" (inst 2 "(a+b)/2") (("1" (assert) nil nil))
                    nil)
                   ("2" (inst 1 "a/3+2*b/3") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "restrict" 1) (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (inst 1 "min(b-c,c-a)/2")
            (("1" (skeep)
              (("1" (assert)
                (("1" (expand "extend") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (split 1)
              (("1" (expand "min" 1 1)
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "min" 1)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open_interval type-eq-decl nil intervals_real reals)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (member const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (b skolem-const-decl "{bb: real | bb > a}" smooth_not_analytic nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (mean_value_gen subtype "smooth_not_analytic.c"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (mean_value_gen 0
  (mean_value_gen-1 nil 3808436712
   ("" (skeep)
    (("" (lemma "Rolles_thrm")
      ((""
        (inst -1 "LAMBDA(x:real): f(x) - (x-a)*(f(b)-f(a))/(b-a)" "a"
         "b")
        (("" (assert)
          (("" (split -1)
            (("1" (skeep)
              (("1" (assert)
                (("1"
                  (case "deriv(LAMBDA (x: real):
              f(x) -
               (x * f(b) - x * f(a) + (f(a) * a - f(b) * a)) / (b - a),
            c) = deriv(
              f,c) -
                (f(b) - f(a))/(b - a)")
                  (("1" (inst 1 "c") (("1" (assert) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "deriv_diff[real]")
                      (("2"
                        (inst -1 "f"
                         "LAMBDA(x:real):  (x-a)*(f(b)-f(a))/(b-a)"
                         "c")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (expand "-" -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "deriv_scal[real]")
                                    (("1"
                                      (inst
                                       -1
                                       "(f(b)-f(a))/(b-a)"
                                       "LAMBDA(x:real): (x-a)"
                                       "c")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (expand "*" -1)
                                            (("1"
                                              (replace -1 1 lr)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "deriv_diff[real]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "LAMBDA(x:real): x"
                                                     "LAMBDA(x:real): a"
                                                     "c")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand
                                                           "-"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             lr)
                                                            (("1"
                                                              (lemma
                                                               "deriv_const[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "c")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "const_fun"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "deriv_identity[real]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "c")
                                                                            (("1"
                                                                              (expand
                                                                               "I"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "identity_derivable[real]")
                                                          (("2"
                                                            (expand
                                                             "I"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "c")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "const_derivable[real]")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "a"
                                                             "c")
                                                            (("3"
                                                              (expand
                                                               "const_fun")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "diff_derivable[real]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "LAMBDA (x: real): x"
                                                 "LAMBDA (x: real): a"
                                                 "c")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "-" -1)
                                                    (("2"
                                                      (lemma
                                                       "const_derivable[real]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "c")
                                                        (("2"
                                                          (expand
                                                           "const_fun"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "identity_derivable[real]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "c")
                                                                (("2"
                                                                  (expand
                                                                   "I"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -5)
                                (("2"
                                  (lemma
                                   "derivable_subtype_del[real,open_interval[real](a, b)]")
                                  (("2"
                                    (inst
                                     -1
                                     "f"
                                     "restrict[real, open_interval[real](a, b), real](f)"
                                     "c")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "derivable?" -4)
                                            (("1"
                                              (inst -4 "c")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "deriv_domain_open")
                                            (("2"
                                              (inst -1 "a" "b")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "Rolles_thrm_TCC2")
                                          (("3"
                                            (inst -1 "a" "b")
                                            nil
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (decompose-equality 1)
                                            (("4"
                                              (expand "restrict" 1)
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       1
                                       "min(abs(c-a), abs(b-c))/2")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (hide 2 3)
                                          (("1"
                                            (hide -5 -4)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (hide -3 -4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (lemma "scal_derivable[real]")
                                (("3"
                                  (inst
                                   -1
                                   "(f(b)-f(a))/(b-a)"
                                   "LAMBDA(x:real): x-a"
                                   "c")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "*" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "diff_derivable[real]")
                                          (("2"
                                            (inst
                                             -1
                                             "LAMBDA (x: real): x"
                                             "LAMBDA (x: real):  a"
                                             "c")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand "-" -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "identity_derivable[real]")
                                                    (("2"
                                                      (inst -1 "c")
                                                      (("2"
                                                        (expand "I" -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   "const_derivable[real]")
                                                  (("3"
                                                    (inst -1 "a" "c")
                                                    (("3"
                                                      (expand
                                                       "const_fun"
                                                       -1)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (hide -5)
                      (("3" (hide 2)
                        (("3" (hide -3)
                          (("3"
                            (lemma
                             "derivable_subtype_del[real,open_interval[real](a, b)]")
                            (("1"
                              (inst -1 "f"
                               " (restrict[real, open_interval[real](a, b), real](f))"
                               "c")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "derivable?" -3)
                                    (("1" (inst -3 "c") nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "deriv_domain_open")
                                          (("2"
                                            (inst -1 "a" "b")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "Rolles_thrm_TCC2")
                                    (("3" (inst -1 "a" "b") nil nil))
                                    nil)
                                   ("4"
                                    (assert)
                                    (("4"
                                      (decompose-equality 1)
                                      (("4"
                                        (expand "restrict" 1)
                                        (("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "min(abs(a-c),abs(c-b))/2")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (hide 2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "not_one_element?" 1 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "x+1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "deriv_domain_real")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "not_one_element?" 1 1)
                    (("4" (skeep)
                      (("4" (inst 1 "x+1") (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (lemma "deriv_domain_real")
                    (("5" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "restrict" 1 1)
              (("2" (lemma "diff_derivable[open_interval[real](a, b)]")
                (("2" (expand "derivable?" 1)
                  (("2" (skeep)
                    (("2"
                      (inst -1
                       "(restrict[real, open_interval[real](a, b), real](f))"
                       "LAMBDA(s:open_interval(a,b)): (s * f(b) + f(a) * a - s * f(a) - f(b) * a) / (b - a)"
                       "x")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (expand "restrict")
                            (("1" (expand "-" -1)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "restrict")
                              (("2"
                                (expand "derivable?" -1)
                                (("2" (inst -1 "x") nil nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (lemma
                             "scal_derivable[open_interval(a, b)]")
                            (("3"
                              (inst -1 "(f(b)-f(a))/(b-a)"
                               "LAMBDA(s:open_interval(a,b)): s-a" "x")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "*" -1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma
                                       "diff_derivable[ open_interval[real](a, b)]")
                                      (("3"
                                        (inst
                                         -1
                                         "(LAMBDA (s: open_interval(a, b)): s)"
                                         "LAMBDA (s: open_interval(a, b)):  a"
                                         "x")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (split -1)
                                            (("1"
                                              (expand "-" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "identity_derivable[open_interval[real](a, b)]")
                                              (("2"
                                                (inst -1 "x")
                                                (("2"
                                                  (expand "I")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (lemma
                                                 "const_derivable[open_interval[real](a, b)]")
                                                (("3"
                                                  (inst -1 "a" "x")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "const_fun"
                                                       -1)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (hide 2)
                (("3" (expand "restrict" 1)
                  (("3" (expand "continuous?" 1)
                    (("3" (skeep)
                      (("3"
                        (lemma
                         "diff_continuous[closed_interval[real](a, b)]")
                        (("3"
                          (inst -1
                           "LAMBDA (s: closed_interval[real](a, b)):
                    f(s)"
                           "LAMBDA (s: closed_interval[real](a, b)):  (s * f(b) + f(a) * a - s * f(a) - f(b) * a) / (b - a)"
                           "x0")
                          (("3" (assert)
                            (("3" (split -1)
                              (("1"
                                (expand "-" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "restrict" -2)
                                (("2"
                                  (expand "continuous?" -2)
                                  (("2" (inst -2 "x0") nil nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (lemma
                                   "scal_continuous[closed_interval[real](a, b)]")
                                  (("3"
                                    (inst
                                     -1
                                     "LAMBDA(s: closed_interval[real](a, b)): s-a"
                                     "(f(b)-f(a))/(b-a)"
                                     "x0")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (split -1)
                                        (("1"
                                          (expand "*" -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "diff_continuous[closed_interval[real](a, b)]")
                                            (("2"
                                              (inst
                                               -1
                                               "LAMBDA (s: closed_interval[real](a, b)): s"
                                               "LAMBDA (s: closed_interval[real](a, b)): a"
                                               "x0")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "-")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "identity_continuous[closed_interval[real](a, b)]")
                                                    (("2"
                                                      (inst -1 "x0")
                                                      (("2"
                                                        (expand "I" -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "const_continuous[closed_interval[real](a, b)]")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "a"
                                                       "x0")
                                                      (("3"
                                                        (expand
                                                         "const_fun"
                                                         -1)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (case "NOT 0/(b-a)=0")
              (("1" (assert) nil nil)
               ("2" (replace -1)
                (("2" (assert)
                  (("2"
                    (case "NOT (f(a) * a - f(b) * a + (f(b) * b - f(a) * b)) = (f(b)-f(a))*(b-a)")
                    (("1" (assert) nil nil)
                     ("2" (replace -1 1)
                      (("2"
                        (case "NOT (f(b) - f(a)) * (b - a) / (b - a) = f(b)-f(a)")
                        (("1" (mult-by 1 "(b-a)") nil nil)
                         ("2" (replace -1 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Rolles_thrm formula-decl nil smooth_not_analytic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (scal_continuous formula-decl nil continuous_functions analysis)
    (identity_continuous formula-decl nil continuous_functions
     analysis)
    (const_continuous formula-decl nil continuous_functions analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (diff_continuous formula-decl nil continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_diff formula-decl nil derivatives_def analysis)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (open_interval type-eq-decl nil intervals_real reals)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Rolles_thrm_TCC2 assuming-tcc nil smooth_not_analytic nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (b skolem-const-decl "{bb: real | bb > a}" smooth_not_analytic nil)
    (a skolem-const-decl "real" smooth_not_analytic nil)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (const_derivable formula-decl nil derivatives_def analysis)
    (identity_derivable formula-decl nil derivatives_def analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" pi_def trig)
    (deriv_identity formula-decl nil derivatives_def analysis)
    (I const-decl "(bijective?[T, T])" identity nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (diff_derivable formula-decl nil derivatives_def analysis)
    (deriv_scal formula-decl nil derivatives_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_left_right_point_TCC1 0
  (deriv_left_right_point_TCC1-1 nil 3808426649
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep)
        (("" (typepred "x")
          (("" (typepred "x1")
            (("" (inst 1 "min(e!1,x-x1)/2")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x1 skolem-const-decl "(LAMBDA (r: real): r < x)"
     smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil))
   nil
   (deriv_left_right_point assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.<(r, smooth_not_analytic.x))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_left_right_point_TCC2 0
  (deriv_left_right_point_TCC2-1 nil 3808426649
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep) (("" (inst 1 "x1-1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (deriv_left_right_point assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.<(r, smooth_not_analytic.x))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_left_right_point_TCC3 0
  (deriv_left_right_point_TCC3-1 nil 3808426649
   ("" (skeep)
    (("" (hide -1)
      (("" (expand "deriv_domain?" 1)
        (("" (skeep)
          (("" (typepred "x1")
            (("" (inst 1 "min(e!1,x1-x)/2")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x1 skolem-const-decl "(LAMBDA (r: real): r > x)"
     smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_left_right_point assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, smooth_not_analytic.x))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_left_right_point_TCC4 0
  (deriv_left_right_point_TCC4-1 nil 3808426649
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep) (("" (inst 1 "x1+1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (deriv_left_right_point assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, smooth_not_analytic.x))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_left_right_point 0
  (deriv_left_right_point-1 nil 3808427006
   ("" (skeep*)
    ((""
      (with-tccs
       (name "lm" "lim(deriv[(LAMBDA (r: real): r < x)]
                      (restrict[real, (LAMBDA (r: real): r < x), real](f)),
                  x)"))
      (("" (replace -1)
        (("" (assert)
          (("" (expand "derivable?" 1)
            (("" (expand "convergent?" 1)
              (("" (inst 1 "lm")
                (("" (expand "convergence" 1)
                  ((""
                    (with-tccs
                     (lemma "lim_fun_lemma[(LAMBDA(r:real): r>x)]"))
                    (("" (inst?)
                      (("1" (replace -7 -1 rl)
                        (("1" (assert)
                          (("1"
                            (lemma
                             "lim_fun_lemma[(LAMBDA (r: real): r < x)]")
                            (("1" (inst?)
                              (("1"
                                (replace -3 -1)
                                (("1"
                                  (expand "convergence" -1)
                                  (("1"
                                    (expand "convergence" -2)
                                    (("1"
                                      (expand "convergence" -1)
                                      (("1"
                                        (expand "convergence" -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "convergence" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (expand "adh" 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 1 "e!1/2")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand "A" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -2 "epsilon")
                                                    (("2"
                                                      (inst
                                                       -4
                                                       "epsilon")
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "min(delta,delta!1)")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "NQ"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "mean_value_gen")
                                                                  (("2"
                                                                    (case
                                                                     "x2=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "x2>0")
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "f"
                                                                             "x"
                                                                             "x2+x")
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   2
                                                                                   rl)
                                                                                  (("1"
                                                                                    (case
                                                                                     "not (x2 + x) * deriv(f, c) - x * deriv(f, c) = x2*deriv(f,c)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1
                                                                                       2)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "c")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -11
                                                                                           "c")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -11)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "deriv"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "deriv(LAMBDA (s: (LAMBDA (r: real): r > x)): f(s), c) = deriv(f, c)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "not x2 * deriv(f, c) / x2  = deriv(f,c)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "deriv_subtype_del[real,(LAMBDA (r: real): r > x)]")
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -16
                                                                                                             -17
                                                                                                             -18)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "LAMBDA (s: (LAMBDA (r: real): r > x)): f(s)"
                                                                                                               "c")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "deriv_domain?"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (skeep)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "e!1/2")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "not_one_element?"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "x1+1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "derivable?"
                                                                                                                       -14)
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -14
                                                                                                                         "c")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "extend"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "(c-x)/2")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "fullset"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (expand
                                                                                                         "not_one_element?"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (skeep)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "x1+1")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (expand
                                                                                                         "deriv_domain?"
                                                                                                         1)
                                                                                                        (("4"
                                                                                                          (skeep)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "e!1/2")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "fullset"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "restrict"
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "derivable_subtype[(LAMBDA (r: real): r > x),open_interval[real](x, x2 + x)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "deriv_domain?"
                                                                                               1)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "x1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "min(e!1,abs(x2+x-x1))/2")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "x2"
                                                                                               "x")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "A"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "open_noe")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x"
                                                                                                     "x2+x")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "not_one_element?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "x1+1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "deriv_domain?"
                                                                                     1)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst
                                                                                         1
                                                                                         "e!1/2")
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "restrict"
                                                                                 1)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "closed_cont")
                                                                                  (("3"
                                                                                    (hide
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     -14)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "x"
                                                                                       "x2+x"
                                                                                       "f")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "x2<0")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f"
                                                                               "x2+x"
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "c")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -8)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "deriv"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT -1 * (deriv(f, c) * x2) - deriv(f, c) * x + x * deriv(f, c) = -deriv(f,c)*x2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "abs_diff_commute")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "f(x2+x)"
                                                                                                       "f(x)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5
                                                                                                           -1
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "restrict"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "(deriv(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s), c)) = deriv(f, c)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -13
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16
                                                                                                                   -17
                                                                                                                   -18)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -12)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -10
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           -2
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lift-if
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "(f(x2 + x) - f(x)) = deriv(f, c) * x2")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "not deriv(f, c) * x2 / x2 = deriv(f,c)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     4)
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       4)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         4
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           4)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             4)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "-(-deriv(f, c) * x2) / x2  = deriv(f,c)")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "abs "
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (case
                                                                                                                                                     "f(x)-f(x2+x)=0")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "NOT f(x)= f(x2+x)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -3
                                                                                                                                                               2
                                                                                                                                                               rl)
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "x2")
                                                                                                                                                                (("2"
                                                                                                                                                                  (div-by
                                                                                                                                                                   -5
                                                                                                                                                                   "x2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "deriv_subtype_del[real,(LAMBDA (r: real): r < x)]")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -13)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -15
                                                                                                                     -16)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))"
                                                                                                                       "c")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "deriv_domain?"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "-e!1/2")
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "not_one_element?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "x1-1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (flatten)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "derivable?"
                                                                                                                                 -12)
                                                                                                                                (("3"
                                                                                                                                  (inst
                                                                                                                                   -12
                                                                                                                                   "c")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "extend"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "(x-c)/2")
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "fullset"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (expand
                                                                                                                 "not_one_element?"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "x1-1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (expand
                                                                                                                 "deriv_domain?"
                                                                                                                 1)
                                                                                                                (("4"
                                                                                                                  (skeep)
                                                                                                                  (("4"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "-e!1/2")
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "fullset"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "restrict"
                                                                                     1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "derivable_subtype[(LAMBDA (r: real): r < x), open_interval[real](x2 + x, x)]")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "deriv_domain_open")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x2+x"
                                                                                                   "x")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "open_noe")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x2+x"
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "not_one_element?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "x1-1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "deriv_domain?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "-e!1/2")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     "closed_cont")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "x2+x"
                                                                                       "x"
                                                                                       "f")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "restrict"
                                                                                           1)
                                                                                          (("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "not_one_element?" 1)
                        (("2" (skeep)
                          (("2" (inst 1 "x1+1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (expand "deriv_domain?" 1)
                        (("3" (skeep)
                          (("3" (inst 1 "e!1/2")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives analysis)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (mean_value_gen formula-decl nil smooth_not_analytic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (deriv_subtype_del formula-decl nil derivatives_subtype analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (open_interval type-eq-decl nil intervals_real reals)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (open_noe formula-decl nil smooth_not_analytic nil)
    (x1 skolem-const-decl "open_interval[real](x, x2 + x)"
     smooth_not_analytic nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (closed_cont formula-decl nil smooth_not_analytic nil)
    (x2 skolem-const-decl "(A(x))" smooth_not_analytic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lim_fun_lemma formula-decl nil lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_left_right_point_deriv_TCC1 0
  (deriv_left_right_point_deriv_TCC1-1 nil 3812994887
   ("" (skeep)
    (("" (lemma "deriv_left_right_point")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((deriv_left_right_point formula-decl nil smooth_not_analytic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_left_right_point_deriv subtype "smooth_not_analytic.x"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (deriv_left_right_point_deriv 0
  (deriv_left_right_point_deriv-1 nil 3812995322
   ("" (skeep)
    (("" (lemma "deriv_def[real]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            ((""
              (with-tccs
               (name "lm" "lim(deriv[(LAMBDA (r: real): r < x)]
                              (restrict[real, (LAMBDA (r: real): r < x), real](f)),
                          x)"))
              (("" (replace -1)
                (("" (assert)
                  (("" (expand "convergence" 1)
                    ((""
                      (with-tccs
                       (lemma "lim_fun_lemma[(LAMBDA(r:real): r>x)]"))
                      (("" (inst?)
                        (("1" (replace -7 -1 rl)
                          (("1" (assert)
                            (("1"
                              (lemma
                               "lim_fun_lemma[(LAMBDA (r: real): r < x)]")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (expand "convergence" -1)
                                    (("1"
                                      (expand "convergence" -2)
                                      (("1"
                                        (expand "convergence" -1)
                                        (("1"
                                          (expand "convergence" -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "convergence" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (expand "adh" 1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "e!1/2")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "epsilon")
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "epsilon")
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "min(delta,delta!1)")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "NQ"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "mean_value_gen")
                                                                    (("2"
                                                                      (case
                                                                       "x2=0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "x2>0")
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f"
                                                                               "x"
                                                                               "x2+x")
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     2
                                                                                     rl)
                                                                                    (("1"
                                                                                      (case
                                                                                       "not (x2 + x) * deriv(f, c) - x * deriv(f, c) = x2*deriv(f,c)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "c")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -11
                                                                                             "c")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -11)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "restrict")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "deriv"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "deriv(LAMBDA (s: (LAMBDA (r: real): r > x)): f(s), c) = deriv(f, c)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "not x2 * deriv(f, c) / x2  = deriv(f,c)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "deriv_subtype_del[real,(LAMBDA (r: real): r > x)]")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -16
                                                                                                               -17
                                                                                                               -18)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "LAMBDA (s: (LAMBDA (r: real): r > x)): f(s)"
                                                                                                                 "c")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "deriv_domain?"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (skeep)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "e!1/2")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "not_one_element?"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "x1+1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "derivable?"
                                                                                                                         -14)
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -14
                                                                                                                           "c")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "extend"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "(c-x)/2")
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "fullset"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "not_one_element?"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (skeep)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "x1+1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (expand
                                                                                                           "deriv_domain?"
                                                                                                           1)
                                                                                                          (("4"
                                                                                                            (skeep)
                                                                                                            (("4"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "e!1/2")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "fullset"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "derivable_subtype[(LAMBDA (r: real): r > x),open_interval[real](x, x2 + x)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "f")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "restrict"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "deriv_domain?"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "x1")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "min(e!1,abs(x2+x-x1))/2")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x2"
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "A"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "open_noe")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x"
                                                                                                       "x2+x")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "not_one_element?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "x1+1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "deriv_domain?"
                                                                                       1)
                                                                                      (("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (inst
                                                                                           1
                                                                                           "e!1/2")
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "closed_cont")
                                                                                    (("3"
                                                                                      (hide
                                                                                       -8
                                                                                       -9
                                                                                       -10
                                                                                       -11
                                                                                       -12
                                                                                       -13
                                                                                       -14)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "x"
                                                                                         "x2+x"
                                                                                         "f")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "x2<0")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "f"
                                                                                 "x2+x"
                                                                                 "x")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -8
                                                                                         "c")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "deriv"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT -1 * (deriv(f, c) * x2) - deriv(f, c) * x + x * deriv(f, c) = -deriv(f,c)*x2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "abs_diff_commute")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "f(x2+x)"
                                                                                                         "f(x)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -5
                                                                                                             -1
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "restrict"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "(deriv(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s), c)) = deriv(f, c)")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     -15
                                                                                                                     -16
                                                                                                                     -17
                                                                                                                     -18)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -12)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -10
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lift-if
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "abs"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "(f(x2 + x) - f(x)) = deriv(f, c) * x2")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "not deriv(f, c) * x2 / x2 = deriv(f,c)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       4)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         4)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           4
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if
                                                                                                                                             4)
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "-(-deriv(f, c) * x2) / x2  = deriv(f,c)")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "abs "
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "f(x)-f(x2+x)=0")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "NOT f(x)= f(x2+x)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -3
                                                                                                                                                                 2
                                                                                                                                                                 rl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "x2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (div-by
                                                                                                                                                                     -5
                                                                                                                                                                     "x2")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "deriv_subtype_del[real,(LAMBDA (r: real): r < x)]")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -13)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -15
                                                                                                                       -16)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "f"
                                                                                                                         "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))"
                                                                                                                         "c")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "deriv_domain?"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "-e!1/2")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "not_one_element?"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "x1-1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (flatten)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "derivable?"
                                                                                                                                   -12)
                                                                                                                                  (("3"
                                                                                                                                    (inst
                                                                                                                                     -12
                                                                                                                                     "c")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "extend"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "(x-c)/2")
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "fullset"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (expand
                                                                                                                   "not_one_element?"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (skeep)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "x1-1")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (expand
                                                                                                                   "deriv_domain?"
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (skeep)
                                                                                                                    (("4"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "-e!1/2")
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        (("4"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "fullset"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "restrict"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "derivable_subtype[(LAMBDA (r: real): r < x), open_interval[real](x2 + x, x)]")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "restrict"
                                                                                           -)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deriv_domain_open")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x2+x"
                                                                                                     "x")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "open_noe")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x2+x"
                                                                                                       "x")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "not_one_element?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "x1-1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "deriv_domain?"
                                                                                           1)
                                                                                          (("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (inst
                                                                                               1
                                                                                               "-e!1/2")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "closed_cont")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "x2+x"
                                                                                         "x"
                                                                                         "f")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "restrict"
                                                                                             1)
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "not_one_element?" 1)
                          (("2" (skeep)
                            (("2" (inst 1 "x1+1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain?" 1)
                          (("3" (skeep)
                            (("3" (inst 1 "e!1/2")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lim_fun_lemma formula-decl nil lim_of_functions analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x2 skolem-const-decl "(A(x))" smooth_not_analytic nil)
    (closed_cont formula-decl nil smooth_not_analytic nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (e!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (x1 skolem-const-decl "open_interval[real](x, x2 + x)"
     smooth_not_analytic nil)
    (open_noe formula-decl nil smooth_not_analytic nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (open_interval type-eq-decl nil intervals_real reals)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_subtype_del formula-decl nil derivatives_subtype analysis)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mean_value_gen formula-decl nil smooth_not_analytic nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (restrict const-decl "R" restrict nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (sm_TCC1 0
  (sm_TCC1-1 nil 3808442270 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil (sm subtype "smooth_not_analytic.x" "nznum")))
 (sm_derivable_init_le0_TCC1 0
  (sm_derivable_init_le0_TCC1-1 nil 3812202572
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep) (("" (inst 1 "-e!1/2") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (sm_derivable_init_le0 assuming
    "analysis@nth_derivatives[(LAMBDA (r: reals.real): reals.<(r, 0))].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (sm_derivable_init_le0_TCC2 0
  (sm_derivable_init_le0_TCC2-1 nil 3812202572
   ("" (expand "not_one_element?" 1)
    (("" (skeep)
      (("" (assert) (("" (inst 1 "x-1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (sm_derivable_init_le0 assuming
    "analysis@nth_derivatives[(LAMBDA (r: reals.real): reals.<(r, 0))].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (sm_derivable_init_le0 0
  (sm_derivable_init_le0-1 nil 3812203502
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (decompose-equality 1)
      (("2" (expand "nderiv" 1)
        (("2" (expand "restrict" 1)
          (("2" (assert)
            (("2" (typepred "x!1") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (lemma "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
        (("3" (inst?)
          (("3" (assert)
            (("3" (expand "restrict")
              (("3" (assert)
                (("3" (flatten)
                  (("3" (split -2)
                    (("1"
                      (case "NOT (derivable_n_times?[(LAMBDA (r: real): r < 0)]
           (LAMBDA (s: (LAMBDA (r: real): r < 0)): sm(s), 1 + j))")
                      (("1" (propax) nil nil)
                       ("2" (assert)
                        (("2"
                          (lemma
                           " nderiv_derivable_aux[(LAMBDA (r: real): r < 0)]")
                          (("2" (inst -1 "sm" "j")
                            (("2" (assert)
                              (("2"
                                (expand "restrict")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -6)
                                      (("2"
                                        (lemma
                                         "deriv_const[(LAMBDA (r: real): r < 0)]")
                                        (("1"
                                          (inst -1 "0" "_")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (expand "const_fun" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "deriv" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "not_one_element?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "x-1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               " deriv_domain?"
                                               1
                                               1)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (inst 1 "-e!1/2")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "not_one_element?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 1 "x-1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand " deriv_domain?" 1 1)
                                          (("3"
                                            (skeep*)
                                            (("3"
                                              (inst 1 "-e!1/2")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma
                       "derivable_const[(LAMBDA (r: real): r < 0)]")
                      (("1" (inst -1 "0")
                        (("1" (expand "const_fun" -1)
                          (("1" (replace -4 1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "not_one_element?")
                        (("2" (skeep)
                          (("2" (inst 1 "x-1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand " deriv_domain?" 1 1)
                        (("3" (skeep*)
                          (("3" (inst 1 "-e!1/2")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (nderiv_derivable_aux formula-decl nil nth_derivatives analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (restrict const-decl "R" restrict nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (chop_poly 0
  (chop_poly-1 nil 3812889431
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "polynomial")
        (("" (lemma "sigma_split")
          ((""
            (inst -1 " LAMBDA (i: nat):
               chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
             "m" "0" "n")
            (("" (assert)
              (("" (replace -1 1)
                (("" (lemma "sigma_const_restrict_eq_0[nat]")
                  ((""
                    (inst -1 "LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                     "m" "1+n" "1")
                    (("" (assert)
                      ((""
                        (case "NOT 1 *
        sigma(1 + n, m,
              LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)) =
        sigma(1 + n, m,
              LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF))")
                        (("1" (assert) nil nil)
                         ("2" (replace -1)
                          (("2" (split -2)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "sigma_eq[nat]")
                                  (("1"
                                    (inst
                                     -1
                                     "  LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                                     " LAMBDA (i: nat):
               chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                                     "n"
                                     "0")
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "chop" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "chop" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (chop const-decl "sequence[real]" smooth_not_analytic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_const_restrict_eq_0 formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (chop_poly_add 0
  (chop_poly_add-1 nil 3812892080
   ("" (skeep)
    (("" (lemma "chop_poly")
      (("" (inst -1 "a" "n1" "max(n1,n2)")
        (("" (lemma "chop_poly")
          (("" (inst -1 "b" "n2" "max(n1,n2)")
            (("" (assert)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (lemma "sum_polynomial_eq_degree")
                    (("" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((chop_poly formula-decl nil smooth_not_analytic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (chop const-decl "sequence[real]" smooth_not_analytic nil)
    (sum_polynomial_eq_degree formula-decl nil polynomials reals)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   shostak))
 (poly_restrict_derivable_TCC1 0
  (poly_restrict_derivable_TCC1-1 nil 3812722029
   ("" (expand "deriv_domain?" 1)
    (("" (skeep) (("" (inst 1 "e!1/2") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_restrict_derivable assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, 0))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (poly_restrict_derivable_TCC2 0
  (poly_restrict_derivable_TCC2-1 nil 3812722029
   ("" (expand "not_one_element?" 1)
    (("" (skeep) (("" (inst 1 "x+1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (poly_restrict_derivable assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, 0))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (poly_restrict_derivable 0
  (poly_restrict_derivable-1 nil 3812722699
   ("" (skeep*)
    (("" (expand "restrict" 1)
      (("" (lemma "derivable_polynomial")
        (("" (inst?)
          ((""
            (lemma "derivable_subtype[real,(LAMBDA (r: real): r > 0)]")
            (("" (inst?)
              (("" (assert)
                (("" (expand "restrict")
                  (("" (split 1)
                    (("1" (expand "deriv_domain?" 1)
                      (("1" (skeep)
                        (("1" (inst 1 "e!1/2")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "not_one_element?" 1)
                      (("2" (skeep)
                        (("2" (inst 1 "x+1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (> const-decl "bool" reals nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (derivable_polynomial formula-decl nil polynomial_deriv analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_p_old_def_TCC1 0
  (deriv_p_old_def_TCC1-1 nil 3812894589 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (deriv_p_old_def subtype
    "(number_fields.-)(smooth_not_analytic.n, 1)" "nat")))
 (deriv_p_old_def_TCC2 0
  (deriv_p_old_def_TCC2-1 nil 3812894589 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (deriv_p_old_def subtype
    "real_defs.max((number_fields.-)(smooth_not_analytic.n, 1), 0)"
    "nat")))
 (deriv_p_old_def 0
  (deriv_p_old_def-1 nil 3812894982
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (case "n=0")
        (("1" (assert)
          (("1" (expand "max" 1)
            (("1" (expand "deriv_p" 1)
              (("1" (expand "polynomial") (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "deriv_p" 2)
            (("2" (expand "max" 2) (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (n skolem-const-decl "nat" smooth_not_analytic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (poly_restrict_deriv_TCC1 0
  (poly_restrict_deriv_TCC1-1 nil 3812722029
   ("" (lemma "poly_restrict_derivable") (("" (propax) nil nil)) nil)
   ((poly_restrict_derivable formula-decl nil smooth_not_analytic nil))
   nil
   (poly_restrict_deriv subtype
    "restrict[real, (LAMBDA (r: reals.real): reals.>(r, 0)), real].restrict(polynomials.polynomial(smooth_not_analytic.a, smooth_not_analytic.n))"
    "deriv_fun[(LAMBDA (r: real): r > 0)]")))
 (poly_restrict_deriv_TCC2 0
  (poly_restrict_deriv_TCC2-1 nil 3812722029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (poly_restrict_deriv subtype
    "real_defs.max(0, (number_fields.-)(smooth_not_analytic.n, 1))"
    "nat")))
 (poly_restrict_deriv 0
  (poly_restrict_deriv-1 nil 3812723365
   ("" (skeep*)
    (("" (lemma "deriv_subtype[real,(Lambda(r:real): r>0)]")
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (lemma "deriv_polynomial")
              (("1" (inst?)
                (("1" (replace -1)
                  (("1" (decompose-equality 1)
                    (("1" (assert)
                      (("1" (case "n=0")
                        (("1" (assert)
                          (("1" (expand "restrict" 1 1)
                            (("1" (decompose-equality -3)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -1 "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "restrict" 1)
                                      (("1"
                                        (typepred "x!1")
                                        (("1"
                                          (expand "deriv_p" 1 1)
                                          (("1"
                                            (expand "polynomial" 1 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "sigma_const_restrict_eq_0[nat]")
                                                (("1"
                                                  (expand "max" 1)
                                                  (("1"
                                                    (expand "sigma" 1)
                                                    (("1"
                                                      (expand
                                                       "sigma"
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "restrict"
                                                           -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "restrict")
                            (("2" (decompose-equality -2)
                              (("1"
                                (inst -1 "x!1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "deriv_p" 2 1)
                                    (("1"
                                      (expand "max" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (split 2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "derivable_polynomial")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (lemma
                                     "derivable_subtype[real,(Lambda(r:real): r>0)]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "restrict")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "deriv_domain?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "e!1/2")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "not_one_element?"
                                             1)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst 1 "x+1")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "derivable_polynomial")
                (("2" (inst?) nil nil)) nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "del_neigh_all?" 1)
                (("3" (skeep)
                  (("3" (typepred "a!1")
                    (("3" (inst 1 "a!1/2") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_one_element?" 1)
              (("4" (skeep)
                (("4" (inst 1 "x+1") (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_polynomial formula-decl nil polynomial_deriv analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (derivable_polynomial formula-decl nil polynomial_deriv analysis)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma reals)
    (sigma_const_restrict_eq_0 formula-decl nil sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (restrict const-decl "R" restrict nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (derivable_trig_exp_poly_div_TCC1 0
  (derivable_trig_exp_poly_div_TCC1-1 nil 3812702230
   ("" (subtype-tcc) nil nil) nil nil
   (derivable_trig_exp_poly_div subtype "smooth_not_analytic.x"
    "nznum")))
 (derivable_trig_exp_poly_div_TCC2 0
  (derivable_trig_exp_poly_div_TCC2-1 nil 3812702230
   ("" (induct "k")
    (("1" (skeep) (("1" (assert) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "x")
          (("2" (expand "^")
            (("2" (expand "expt" -1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_trig_exp_poly_div subtype
    "exponentiation.^(smooth_not_analytic.x, smooth_not_analytic.k)"
    "nznum")))
 (derivable_trig_exp_poly_div 0
  (derivable_trig_exp_poly_div-1 nil 3812702394
   ("" (skeep*)
    ((""
      (case "derivable?[(LAMBDA (r: real): r > 0)](polynomial(a,n1))")
      (("1"
        (case "derivable?[(LAMBDA (r: real): r > 0)](polynomial(b,n2))")
        (("1"
          (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): 1/x)")
          (("1"
            (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): -1/x)")
            (("1"
              (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): x^k)")
              (("1"
                (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): sin(1/x))")
                (("1"
                  (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): cos(1/x))")
                  (("1"
                    (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): sin(1/x)*polynomial(a,n1)(x))")
                    (("1"
                      (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): cos(1/x)*polynomial(b,n2)(x))")
                      (("1"
                        (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0):(sin(1 / x) * polynomial(a, n1)(x) + cos(1/x)*polynomial(b,n2)(x)))")
                        (("1"
                          (case "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): exp(-1 / x) * (sin(1 / x) * polynomial(a, n1)(x) + cos(1/x)*polynomial(b,n2)(x)))")
                          (("1" (lemma "poly_restrict_derivable_TCC1")
                            (("1"
                              (lemma "poly_restrict_derivable_TCC2")
                              (("1"
                                (lemma
                                 "div_derivable[(LAMBDA (r: real): r > 0)]")
                                (("1"
                                  (inst
                                   -1
                                   "(LAMBDA (x: real | x > 0):
                                                             (exp(-1 / x) *
                                                               (sin(1 / x) * polynomial(a, n1)(x) +
                                                                 cos(1 / x) * polynomial(b, n2)(x))))"
                                   "(LAMBDA(x:real |x>0):  x ^ k)"
                                   "_")
                                  (("1"
                                    (expand "derivable?" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "x_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "/" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -3)
                                                  (("1"
                                                    (inst -3 "x_1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "derivable?"
                                                         -9)
                                                        (("1"
                                                          (inst
                                                           -9
                                                           "x_1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma
                                       "derivable_trig_exp_poly_div_TCC2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -1 "k" "x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2"
                              (lemma
                               "prod_derivable[(LAMBDA (r: real): r > 0)]")
                              (("2"
                                (expand "derivable?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     -1
                                     "LAMBDA (x: real | x > 0):
                                         exp(-1 / x)"
                                     "(LAMBDA (x: real | x > 0):
                                     (sin(1 / x) * polynomial(a, n1)(x) +
                                       cos(1 / x) * polynomial(b, n2)(x)))"
                                     "x_1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "*" -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "derivable?" -1)
                                            (("2"
                                              (inst -1 "x_1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "Lambda(x:real|x>0): -1/x"
                                                     "Lambda(x:real): exp(x)"
                                                     "x_1")
                                                    (("1"
                                                      (expand "o")
                                                      (("1"
                                                        (lemma
                                                         "scal_derivable[(Lambda(r:real): r >0)]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "-1"
                                                           "Lambda(x: real | x>0): 1/x"
                                                           "x_1")
                                                          (("1"
                                                            (expand
                                                             "derivable?"
                                                             -9)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "x_1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "*"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "exp_deriv")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "derivable?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "-1/x_1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "exp = LAMBDA (x: real): exp(x)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "not_one_element?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst 1 "x+1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "deriv_domain?"
                                                     1)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "e!1/2")
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma
                           "sum_derivable[(Lambda(r:real): r>0)]")
                          (("2"
                            (inst -1
                             " (LAMBDA (x: real | x > 0): cos(1 / x) * polynomial(b, n2)(x))"
                             " (LAMBDA (x: real | x > 0): sin(1 / x) * polynomial(a, n1)(x))"
                             "_")
                            (("2" (expand "derivable?" 1 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "x_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "+")
                                      (("2"
                                        (expand "derivable?" -1)
                                        (("2"
                                          (expand "derivable?" -2)
                                          (("2"
                                            (inst -1 "x_1")
                                            (("2"
                                              (inst -2 "x_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (lemma "prod_derivable[(Lambda(r:real): r>0)]")
                        (("2" (expand "derivable?" 1 1)
                          (("2" (skeep)
                            (("2"
                              (inst -1 "LAMBDA (x: real | x > 0):
                                       cos(1 / x)"
                               " LAMBDA (x: real | x > 0): polynomial(b, n2)(x)"
                               "x_1")
                              (("2"
                                (expand "*")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "derivable?" -7)
                                    (("2"
                                      (inst -7 "x_1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "derivable?" -2)
                                              (("2"
                                                (inst -2 "x_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2"
                        (lemma "prod_derivable[(Lambda(r:real): r>0)]")
                        (("2" (expand "derivable?" 1 1)
                          (("2" (skeep)
                            (("2"
                              (inst -1 "LAMBDA (x: real | x > 0):
                                     sin(1 / x)"
                               "(LAMBDA (x: real | x > 0):
                                      polynomial(a, n1)(x))" "x_1")
                              (("2"
                                (expand "*")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "derivable?" -2)
                                    (("2"
                                      (inst -2 "x_1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "derivable?" -7)
                                          (("2"
                                            (inst -7 "x_1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "derivable?"
                                                 -6)
                                                (("2"
                                                  (inst -6 "x_1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "restrict")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lemma "derivable_cos")
                      (("2"
                        (lemma
                         "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                        (("1"
                          (inst -1 "Lambda(x: real | x>0): 1/x" "cos"
                           "_")
                          (("1" (expand "derivable?" 1)
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x_1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "o")
                                    (("1"
                                      (expand "derivable?" -1)
                                      (("1"
                                        (inst -1 "1/x_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "derivable?" -5)
                                            (("1"
                                              (inst -5 "x_1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "not_one_element?" 1)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "x+1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain?" 1)
                          (("3" (skeep)
                            (("3" (inst 1 "e!1/2")
                              (("3"
                                (assert)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma
                   "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                  (("1" (lemma "derivable_sin")
                    (("1" (expand "derivable?" 1)
                      (("1" (skeep)
                        (("1"
                          (inst -2 "Lambda(x: real | x>0): 1/x" "sin"
                           "_")
                          (("1" (assert)
                            (("1" (inst -2 "x_1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o")
                                  (("1"
                                    (expand "derivable?" -1)
                                    (("1"
                                      (inst -1 "1/x_1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "derivable?" -4)
                                          (("1"
                                            (inst -4 "x_1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?" 1)
                      (("2" (skeep)
                        (("2" (inst 1 "1+x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "deriv_domain?" 1)
                    (("3" (skeep)
                      (("3" (inst 1 "e!1/2") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "deriv_x_n[(Lambda(r:real): r>0)]")
                (("2" (inst -1 "Lambda(x:real| x>0): x^k" "k")
                  (("2" (assert)
                    (("2" (case "NOT k=0")
                      (("1" (assert) nil nil)
                       ("2" (replace -1)
                        (("2" (expand "^" 2)
                          (("2" (expand "expt" 2)
                            (("2"
                              (lemma
                               "derivable_const[(LAMBDA (r: real): r > 0)]")
                              (("2"
                                (inst -1 "1")
                                (("2"
                                  (expand "const_fun" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "derivable_scal[(LAMBDA (r: real): r > 0)]")
              (("2" (inst -1 "-1" "Lambda(x:real | x>0): 1/x")
                (("2" (assert)
                  (("2" (expand "*") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "derivable_div[(Lambda(r:real): r>0)]")
            (("2"
              (inst -1 "Lambda(x:real| x>0): 1"
               "Lambda(x:real| x>0): x")
              (("1" (expand "/" -1) (("1" (propax) nil nil)) nil)
               ("2" (lemma "derivable_id[(Lambda(r:real): r>0)]")
                (("2" (expand "I" -1) (("2" (propax) nil nil)) nil))
                nil)
               ("3"
                (lemma "derivable_const[(LAMBDA (r: real): r > 0)]")
                (("3" (inst -1 "1")
                  (("3" (assert)
                    (("3" (expand "const_fun" -1)
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "poly_restrict_derivable")
            (("2" (inst?) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "poly_restrict_derivable") (("2" (inst?) nil nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives analysis)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_restrict_derivable formula-decl nil smooth_not_analytic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (derivable_scal judgement-tcc nil derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (derivable_sin formula-decl nil sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (poly_restrict_derivable_TCC2 assuming-tcc nil smooth_not_analytic
     nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (derivable_trig_exp_poly_div_TCC2 subtype-tcc nil
     smooth_not_analytic nil)
    (div_derivable formula-decl nil derivatives_def analysis)
    (poly_restrict_derivable_TCC1 assuming-tcc nil smooth_not_analytic
     nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (composition_derivable formula-decl nil chain_rule analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (O const-decl "T3" function_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (exp_deriv formula-decl nil ln_exp lnexp)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_cos formula-decl nil sincos_def trig)
    (sin const-decl "real" sincos_def trig)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (expt def-decl "real" exponentiation nil)
    (deriv_x_n formula-decl nil derivatives analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (I const-decl "(bijective?[T, T])" identity nil)
    (derivable_id judgement-tcc nil derivatives analysis)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (derivable_const application-judgement "deriv_fun" pi_def trig)
    (constant_seq2 application-judgement "(convergent_nz?)"
     convergence_ops analysis)
    (derivable_div judgement-tcc nil derivatives analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_sin1x_TCC1 0
  (deriv_sin1x_TCC1-1 nil 3812728403
   ("" (flatten)
    (("" (skeep)
      (("" (assert)
        (("" (hide -1)
          (("" (typepred "x")
            (("" (grind)
              (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil
   (deriv_sin1x subtype "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (deriv_sin1x 0
  (deriv_sin1x-1 nil 3812728497
   ("" (lemma "deriv_composition[(LAMBDA (r: real): r > 0),real]")
    (("1" (lemma "derivable_id[(LAMBDA (r: real): r > 0)]")
      (("1" (lemma "derivable_div[(LAMBDA (r: real): r > 0)]")
        (("1" (lemma "derivable_sin")
          (("1"
            (inst -2 "Lambda(x:real|x>0): 1" "Lambda(x:real| x>0): x")
            (("1" (expand "/" -2)
              (("1"
                (lemma
                 "composition_derivable_fun[(LAMBDA (r: real): r > 0),real]")
                (("1" (inst -1 "Lambda(x:real| x>0): 1/x" "sin")
                  (("1" (assert)
                    (("1" (expand "o" -1)
                      (("1" (assert)
                        (("1" (decompose-equality 1)
                          (("1"
                            (inst -5 "Lambda(x:real| x>0): 1/x" "sin"
                             "x!1")
                            (("1" (expand "o")
                              (("1"
                                (split -5)
                                (("1"
                                  (expand "deriv" 1 1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "deriv_sin")
                                      (("1"
                                        (inst -1 "1/x!1")
                                        (("1"
                                          (expand "deriv" -1)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (lemma
                                               "deriv_div[(Lambda(x:real): x>0)]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "Lambda(x:real|x>0): 1"
                                                 "Lambda(x:real| x>0): x"
                                                 "x!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand "/" -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "deriv_const[(Lambda(x:real): x>0)]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "1"
                                                                 "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "const_fun"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_I_fun[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (expand
                                                                           "I"
                                                                           -1)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "deriv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "expt"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "expt"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "derivable_id[(Lambda(x:real): x>0)]")
                                                                                (("2"
                                                                                  (expand
                                                                                   "I")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivable_const[(Lambda(x:real): x>0)]")
                                                      (("2"
                                                        (inst -1 "1")
                                                        (("2"
                                                          (expand
                                                           "const_fun"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "derivable?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "derivable_id[(Lambda(x:real): x>0)]")
                                                      (("3"
                                                        (expand "I" -1)
                                                        (("3"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "derivable?" -3)
                                  (("2" (inst -3 "x!1") nil nil))
                                  nil)
                                 ("3"
                                  (expand "derivable?" -2)
                                  (("3" (inst -2 "1/x!1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (expand "^" -1)
                                (("2"
                                  (expand "expt" -1)
                                  (("2"
                                    (expand "expt" -1)
                                    (("2"
                                      (expand "expt" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (div-by -1 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "derivable_id[(Lambda(x:real): x>0)]")
                (("2" (expand "I" -1) (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (lemma "derivable_const[(Lambda(x:real): x>0)]")
                (("3" (inst -1 "1")
                  (("3" (expand "const_fun") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (expand "not_one_element?" 1)
          (("2" (skeep)
            (("2" (inst 1 "x+1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "deriv_domain?")
        (("3" (skeep)
          (("3" (inst 1 "e!1/2") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_id judgement-tcc nil derivatives analysis)
    (derivable_sin formula-decl nil sincos_def trig)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin const-decl "real" sincos_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (O const-decl "T3" function_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (cos const-decl "real" sincos_def trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_sin formula-decl nil sincos_def trig)
    (deriv_div formula-decl nil derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (I const-decl "(bijective?[T, T])" identity nil)
    (expt def-decl "real" exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_I_fun formula-decl nil derivatives analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (derivable_id name-judgement "deriv_fun" derivatives_subtype
     analysis)
    (derivable_id name-judgement "deriv_fun" derivatives analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_functions analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     lim_of_composition analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     indefinite_integral analysis)
    (id_fun_continuous name-judgement "continuous_fun" unif_cont_fun
     analysis)
    (id_fun_continuous name-judgement "continuous_fun" integral_step
     analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     integral_split_scaf analysis)
    (id_fun_continuous name-judgement "continuous_fun" integral
     analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_ball_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (composition_derivable_fun formula-decl nil chain_rule analysis)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_div judgement-tcc nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_composition formula-decl nil chain_rule analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   shostak))
 (deriv_cos1x_TCC1 0
  (deriv_cos1x_TCC1-1 nil 3812728403
   ("" (flatten)
    (("" (skeep)
      (("" (expand "^")
        (("" (expand "expt" -2)
          (("" (expand "expt" -2)
            (("" (expand "expt" -2)
              (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt def-decl "real" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (deriv_cos1x subtype "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (deriv_cos1x 0
  (deriv_cos1x-1 nil 3812747053
   ("" (lemma "deriv_composition[(LAMBDA (r: real): r > 0),real]")
    (("1" (lemma "derivable_id[(LAMBDA (r: real): r > 0)]")
      (("1" (lemma "derivable_div[(LAMBDA (r: real): r > 0)]")
        (("1" (lemma "derivable_cos")
          (("1"
            (inst -2 "Lambda(x:real|x>0): 1" "Lambda(x:real| x>0): x")
            (("1" (expand "/" -2)
              (("1"
                (lemma
                 "composition_derivable_fun[(LAMBDA (r: real): r > 0),real]")
                (("1" (inst -1 "Lambda(x:real| x>0): 1/x" "cos")
                  (("1" (assert)
                    (("1" (expand "o" -1)
                      (("1" (assert)
                        (("1" (decompose-equality 1)
                          (("1"
                            (inst -5 "Lambda(x:real| x>0): 1/x" "cos"
                             "x!1")
                            (("1" (expand "o")
                              (("1"
                                (split -5)
                                (("1"
                                  (expand "deriv" 1 1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "deriv_cos")
                                      (("1"
                                        (inst -1 "1/x!1")
                                        (("1"
                                          (expand "deriv" -1)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (lemma
                                               "deriv_div[(Lambda(x:real): x>0)]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "Lambda(x:real|x>0): 1"
                                                 "Lambda(x:real| x>0): x"
                                                 "x!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand "/" -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "deriv_const[(Lambda(x:real): x>0)]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "1"
                                                                 "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "const_fun"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_I_fun[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (expand
                                                                           "I"
                                                                           -1)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "deriv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "expt"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "expt"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "derivable_id[(Lambda(x:real): x>0)]")
                                                                                (("2"
                                                                                  (expand
                                                                                   "I")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivable_const[(Lambda(x:real): x>0)]")
                                                      (("2"
                                                        (inst -1 "1")
                                                        (("2"
                                                          (expand
                                                           "const_fun"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "derivable?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "derivable_id[(Lambda(x:real): x>0)]")
                                                      (("3"
                                                        (expand "I" -1)
                                                        (("3"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "derivable?" -3)
                                  (("2" (inst -3 "x!1") nil nil))
                                  nil)
                                 ("3"
                                  (expand "derivable?" -2)
                                  (("3" (inst -2 "1/x!1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (expand "^" -1)
                                (("2"
                                  (expand "expt" -1)
                                  (("2"
                                    (expand "expt" -1)
                                    (("2"
                                      (expand "expt" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (div-by -1 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "derivable_id[(Lambda(x:real): x>0)]")
                (("2" (expand "I" -1) (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (lemma "derivable_const[(Lambda(x:real): x>0)]")
                (("3" (inst -1 "1")
                  (("3" (expand "const_fun") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (expand "not_one_element?" 1)
          (("2" (skeep)
            (("2" (inst 1 "x+1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "deriv_domain?")
        (("3" (skeep)
          (("3" (inst 1 "e!1/2") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_id judgement-tcc nil derivatives analysis)
    (derivable_cos formula-decl nil sincos_def trig)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos const-decl "real" sincos_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (O const-decl "T3" function_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (sin const-decl "real" sincos_def trig)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_cos formula-decl nil sincos_def trig)
    (deriv_div formula-decl nil derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (I const-decl "(bijective?[T, T])" identity nil)
    (expt def-decl "real" exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_I_fun formula-decl nil derivatives analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (derivable_id name-judgement "deriv_fun" derivatives_subtype
     analysis)
    (derivable_id name-judgement "deriv_fun" derivatives analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_functions analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     lim_of_composition analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     indefinite_integral analysis)
    (id_fun_continuous name-judgement "continuous_fun" unif_cont_fun
     analysis)
    (id_fun_continuous name-judgement "continuous_fun" integral_step
     analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     integral_split_scaf analysis)
    (id_fun_continuous name-judgement "continuous_fun" integral
     analysis)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_ball_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (composition_derivable_fun formula-decl nil chain_rule analysis)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_div judgement-tcc nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_composition formula-decl nil chain_rule analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   shostak))
 (deriv_sin1x_poly_TCC1 0
  (deriv_sin1x_poly_TCC1-1 nil 3812750102
   ("" (skeep*)
    (("" (expand "^")
      (("" (expand "expt")
        (("" (expand "expt")
          (("" (expand "expt" -2)
            (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (deriv_sin1x_poly subtype
    "exponentiation.^(smooth_not_analytic.x, 2)" "nznum")))
 (deriv_sin1x_poly 0
  (deriv_sin1x_poly-1 nil 3812750255
   ("" (skeep)
    (("" (lemma "prod_derivable[(Lambda(r:real): r>0)]")
      (("" (lemma "deriv_prod[(LAMBDA(r:real): r>0)]")
        (("" (lemma "poly_restrict_derivable")
          (("" (lemma "poly_restrict_deriv")
            (("" (inst -1 "a" "n1")
              (("" (inst -2 "a" "n1")
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (assert)
                      ((""
                        (inst -4 "Lambda(x:real|x>0): sin(1/x)"
                         "Lambda(x:real|x>0): polynomial(a, n1)(x)"
                         "_")
                        ((""
                          (case "NOT derivable?[(LAMBDA (r: real): r > 0)]
                 (LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))")
                          (("1" (expand "derivable?" 1)
                            (("1" (skeep)
                              (("1"
                                (inst -4 "x_1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "*")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (lemma "deriv_sin1x")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "derivable?" -1)
                                              (("1"
                                                (inst -1 "x_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "derivable?"
                                                     -4)
                                                    (("1"
                                                      (inst -4 "x_1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (assert)
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (inst
                                   -4
                                   "Lambda(x:real|x>0): sin(1/x)"
                                   "Lambda(x:real|x>0): polynomial(a, n1)(x)"
                                   "_")
                                  (("1"
                                    (inst -4 "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (expand "*" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "deriv" 1 1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (case "n1=0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "polynomial"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "derivable_const[(Lambda(x:real): x>0)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "a(0)")
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_const[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "a(0)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (expand
                                                                             "const_fun"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin1x")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "deriv"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "deriv_p"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "^"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (div-by
                                                                                                 -3
                                                                                                 "x1!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "max"
                                                                                         1)
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (decompose-equality
                                                       -3)
                                                      (("2"
                                                        (inst -1 "x!1")
                                                        (("2"
                                                          (expand
                                                           "deriv"
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_sin1x")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "deriv"
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "scal_polynomial2")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "a"
                                                                                 "-1"
                                                                                 "n1"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "-"
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (expand
                                                                           "expt")
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             -3)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (div-by
                                                                                 -3
                                                                                 "x1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "deriv_sin1x")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "derivable?"
                                                   -1)
                                                  (("2"
                                                    (inst -1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (lemma
                                             "poly_restrict_derivable")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "restrict")
                                                  (("3"
                                                    (expand
                                                     "derivable?"
                                                     -1)
                                                    (("3"
                                                      (inst -1 "x!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" -1)
                                      (("2"
                                        (expand "expt" -1)
                                        (("2"
                                          (expand "expt" -1)
                                          (("2"
                                            (div-by -1 "x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (poly_restrict_derivable formula-decl nil smooth_not_analytic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_sin1x formula-decl nil smooth_not_analytic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma def-decl "real" sigma reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (derivable_const application-judgement "deriv_fun" pi_def trig)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_const formula-decl nil derivatives_def analysis)
    (derivable_const judgement-tcc nil derivatives analysis)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sin const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (restrict const-decl "R" restrict nil)
    (poly_restrict_deriv formula-decl nil smooth_not_analytic nil)
    (deriv_prod formula-decl nil derivatives_def analysis))
   shostak))
 (deriv_cos1x_poly_TCC1 0
  (deriv_cos1x_poly_TCC1-1 nil 3812751409
   ("" (skeep*)
    (("" (expand "^")
      (("" (expand "expt" -2)
        (("" (expand "expt" -2)
          (("" (expand "expt" -2)
            (("" (assert)
              (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (deriv_cos1x_poly subtype
    "exponentiation.^(smooth_not_analytic.x, 2)" "nznum")))
 (deriv_cos1x_poly 0
  (deriv_cos1x_poly-1 nil 3812751520
   ("" (skeep)
    (("" (lemma "prod_derivable[(Lambda(r:real): r>0)]")
      (("" (lemma "deriv_prod[(LAMBDA(r:real): r>0)]")
        (("" (lemma "poly_restrict_derivable")
          (("" (lemma "poly_restrict_deriv")
            (("" (inst -1 "b" "n2")
              (("" (inst -2 "b" "n2")
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (assert)
                      ((""
                        (inst -4 "Lambda(x:real|x>0): cos(1/x)"
                         "Lambda(x:real|x>0): polynomial(b, n2)(x)"
                         "_")
                        ((""
                          (case "NOT derivable?[(LAMBDA (r: real): r > 0)]
                        (LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                          (("1" (expand "derivable?" 1)
                            (("1" (skeep)
                              (("1"
                                (inst -4 "x_1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "*")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (lemma "deriv_cos1x")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "derivable?" -1)
                                              (("1"
                                                (inst -1 "x_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "derivable?"
                                                     -4)
                                                    (("1"
                                                      (inst -4 "x_1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (assert)
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (inst
                                   -4
                                   "Lambda(x:real|x>0): cos(1/x)"
                                   "Lambda(x:real|x>0): polynomial(b, n2)(x)"
                                   "_")
                                  (("1"
                                    (inst -4 "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (expand "*" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "deriv" 1 1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (case "n2=0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "polynomial"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "max")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "derivable_const[(Lambda(x:real): x>0)]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "b(0)")
                                                                    (("1"
                                                                      (lemma
                                                                       "deriv_const[(Lambda(x:real): x>0)]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "b(0)"
                                                                         "x!1")
                                                                        (("1"
                                                                          (expand
                                                                           "const_fun"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "deriv_cos1x")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "deriv"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "deriv_p"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (div-by
                                                                                               -3
                                                                                               "x1!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (decompose-equality
                                                       -3)
                                                      (("2"
                                                        (inst -1 "x!1")
                                                        (("2"
                                                          (expand
                                                           "deriv"
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_cos1x")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "deriv"
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "scal_polynomial2")
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_cos1x")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -8)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "deriv"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -9
                                                                                         -10
                                                                                         -12
                                                                                         -13
                                                                                         -14)
                                                                                        (("2"
                                                                                          (div-by
                                                                                           -3
                                                                                           "x1!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "deriv_cos1x")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "derivable?"
                                                   -1)
                                                  (("2"
                                                    (inst -1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (lemma
                                             "poly_restrict_derivable")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "restrict")
                                                  (("3"
                                                    (expand
                                                     "derivable?"
                                                     -1)
                                                    (("3"
                                                      (inst -1 "x!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" -1)
                                      (("2"
                                        (expand "expt" -1)
                                        (("2"
                                          (expand "expt" -1)
                                          (("2"
                                            (div-by -1 "x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (poly_restrict_derivable formula-decl nil smooth_not_analytic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_cos1x formula-decl nil smooth_not_analytic nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (derivable_const judgement-tcc nil derivatives analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" pi_def trig)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def trig)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (restrict const-decl "R" restrict nil)
    (poly_restrict_deriv formula-decl nil smooth_not_analytic nil)
    (deriv_prod formula-decl nil derivatives_def analysis))
   shostak))
 (poly_pull_div_xk 0
  (poly_pull_div_xk-1 nil 3812899656
   ("" (skeep)
    (("" (lemma "power_linear_polynomial")
      (("" (lemma "polynomial_prod_def")
        (("" (decompose-equality 1)
          (("1" (inst -2 "0" "k" "1" "x!1" "k")
            (("1" (assert)
              (("1" (case "1*x!1=x!1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1"
                      (inst -2 "a" " power_linear(0, 1, k)" "k" "n"
                       "x!1")
                      (("1" (assert)
                        (("1" (replace -3)
                          (("1" (replace -3 -2 rl)
                            (("1" (replace -2 1 rl)
                              (("1"
                                (replace -3 1)
                                (("1"
                                  (replace -3 1 rl)
                                  (("1" (mult-by 1 "x!1^k") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (hide -1 -2)
              (("2" (lemma "derivable_trig_exp_poly_div_TCC2")
                (("2" (skeep)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((power_linear_polynomial formula-decl nil polynomials reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (polynomial_prod const-decl "real" polynomials reals)
    (power_linear const-decl "real" polynomials reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable_trig_exp_poly_div_TCC2 subtype-tcc nil
     smooth_not_analytic nil)
    (polynomial_prod_def formula-decl nil polynomials reals))
   shostak))
 (deriv_sin1x_polyx2 0
  (deriv_sin1x_polyx2-1 nil 3812923068
   ("" (lemma "deriv_sin1x_poly")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (replace -2)
                (("" (lemma "poly_pull_div_xk")
                  (("" (inst -1 "deriv_p(a, n1)" "max(0, n1 - 1)" "2")
                    (("1" (decompose-equality 1)
                      (("1" (decompose-equality -3)
                        (("1" (inst -1 "x!1")
                          (("1" (decompose-equality -2)
                            (("1" (inst -1 "x!1")
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (div-by -3 "x1!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (assert)
                                  (("2"
                                    (div-by -3 "x1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (hide -) (("2" (grind) nil nil)) nil))
                        nil)
                       ("3" (skeep)
                        (("3" (hide -2 -3 -4)
                          (("3" (expand "^")
                            (("3" (expand "expt")
                              (("3"
                                (expand "expt")
                                (("3"
                                  (expand "expt")
                                  (("3"
                                    (div-by -1 "x")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_pull_div_xk formula-decl nil smooth_not_analytic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (power_linear const-decl "real" polynomials reals)
    (polynomial_prod const-decl "real" polynomials reals)
    (sin const-decl "real" sincos_def trig)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (n1 skolem-const-decl "nat" smooth_not_analytic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_sin1x_poly formula-decl nil smooth_not_analytic nil))
   shostak))
 (deriv_cos1x_polyx2 0
  (deriv_cos1x_polyx2-1 nil 3812923449
   ("" (skeep)
    (("" (lemma "deriv_cos1x_poly")
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (decompose-equality 1)
                (("1" (decompose-equality -2)
                  (("1" (inst -1 "x!1")
                    (("1" (replace -1)
                      (("1" (lemma "poly_pull_div_xk")
                        (("1"
                          (inst -1 "deriv_p(b, n2)" "max(0, n2 - 1)"
                           "2")
                          (("1" (decompose-equality -1)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (div-by -3 "x1!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "^")
                    (("2" (expand "expt")
                      (("2" (expand "expt")
                        (("2" (expand "expt")
                          (("2" (div-by -3 "x1!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "^")
                    (("2" (expand "expt")
                      (("2" (expand "expt")
                        (("2" (expand "expt")
                          (("2" (div-by -1 "x")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (hide -) (("3" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_cos1x_poly formula-decl nil smooth_not_analytic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (poly_pull_div_xk formula-decl nil smooth_not_analytic nil)
    (> const-decl "bool" reals nil)
    (sin const-decl "real" sincos_def trig)
    (power_linear const-decl "real" polynomials reals)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial_prod const-decl "real" polynomials reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (n2 skolem-const-decl "nat" smooth_not_analytic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (deriv_sin_cos1x_TCC1 0
  (deriv_sin_cos1x_TCC1-1 nil 3812924365 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (deriv_sin_cos1x subtype
    "real_defs.max(0, (number_fields.-)(smooth_not_analytic.n2, 1))"
    "nat")))
 (deriv_sin_cos1x_TCC2 0
  (deriv_sin_cos1x_TCC1-1 nil 3812747625
   ("" (skeep*)
    (("" (expand "^")
      (("" (expand "expt" -2)
        (("" (expand "expt" -2)
          (("" (expand "expt" -2)
            (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (deriv_sin_cos1x subtype
    "exponentiation.^(smooth_not_analytic.x, 2)" "nznum")))
 (deriv_sin_cos1x 0
  (deriv_sin_cos1x-1 nil 3812749552
   ("" (skeep)
    (("" (lemma "deriv_sin1x_polyx2")
      (("" (lemma "deriv_cos1x_polyx2")
        (("" (inst -2 "a" "n1")
          (("" (inst -1 "b" "n2")
            (("" (flatten)
              ((""
                (lemma "sum_derivable_fun[(LAMBDA (r: real): r > 0)]")
                ((""
                  (inst -1
                   "(LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))"
                   "(LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                  (("" (assert)
                    (("" (expand "+" -1)
                      (("" (assert)
                        ((""
                          (lemma
                           "deriv_sum_fun[(LAMBDA (r: real): r > 0)]")
                          ((""
                            (inst -1
                             "(LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))"
                             "(LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                            (("" (expand "+" -1)
                              ((""
                                (replace -6)
                                ((""
                                  (replace -4)
                                  ((""
                                    (replace -1)
                                    ((""
                                      (decompose-equality 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "chop_poly_add")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "-a"
                                             "(polynomial_prod(deriv_p(b, n2),
                                    max(0, n2 - 1),
                                    power_linear(0, 1, 2),
                                    2))"
                                             "n1"
                                             " 2 + max(0, n2 - 1)")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "b"
                                               "polynomial_prod(deriv_p(a, n1),
                                    max(0, n1 - 1),
                                    power_linear(0, 1, 2),
                                    2)"
                                               "n2"
                                               " 2 + max(0, n1 - 1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8)
                                                  (("1"
                                                    (decompose-equality
                                                     -2)
                                                    (("1"
                                                      (decompose-equality
                                                       -2)
                                                      (("1"
                                                        (inst -2 "x!1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             1
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "+"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (hide -2 -3 -4 -5 -6 -7)
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand "expt" -1)
                                                (("2"
                                                  (expand "expt" -1)
                                                  (("2"
                                                    (expand "expt" -1)
                                                    (("2"
                                                      (div-by -1 "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (hide -)
                                          (("3"
                                            (skeep)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (hide -)
                                          (("4"
                                            (skeep)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide -)
                                        (("5"
                                          (hide 2)
                                          (("5"
                                            (skeep)
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (hide -)
                                        (("6"
                                          (hide 2)
                                          (("6"
                                            (skeep)
                                            (("6"
                                              (expand "^")
                                              (("6"
                                                (expand "expt")
                                                (("6"
                                                  (expand "expt")
                                                  (("6"
                                                    (expand "expt")
                                                    (("6"
                                                      (div-by -2 "x")
                                                      (("6"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("7"
                                        (hide 2)
                                        (("7"
                                          (hide -)
                                          (("7"
                                            (skeep)
                                            (("7" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_sin1x_polyx2 formula-decl nil smooth_not_analytic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (cos const-decl "real" sincos_def trig)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_sum_fun formula-decl nil derivatives analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n2 skolem-const-decl "nat" smooth_not_analytic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (n1 skolem-const-decl "nat" smooth_not_analytic nil)
    (chop const-decl "sequence[real]" smooth_not_analytic nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (power_linear const-decl "real" polynomials reals)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial_prod const-decl "real" polynomials reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (chop_poly_add formula-decl nil smooth_not_analytic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (sum_derivable_fun formula-decl nil derivatives analysis)
    (deriv_cos1x_polyx2 formula-decl nil smooth_not_analytic nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil))
   shostak))
 (deriv_e1x_TCC1 0
  (deriv_e1x_TCC1-1 nil 3812879053
   ("" (flatten)
    (("" (expand "^")
      (("" (expand "expt")
        (("" (expand "expt")
          (("" (expand "expt")
            (("" (skeep)
              (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil))
   nil
   (deriv_e1x subtype "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (deriv_e1x 0
  (deriv_e1x-1 nil 3812880450
   ("" (lemma "derivable_exp")
    (("" (lemma "exp_deriv")
      (("" (hide -2)
        (("" (flatten)
          ((""
            (lemma
             "derivable_subtype[real, (LAMBDA (r: real): r > 0)]")
            (("" (inst -1 "exp")
              (("" (assert)
                (("" (expand "restrict")
                  (("" (split -1)
                    (("1" (assert)
                      (("1"
                        (lemma
                         "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                        (("1"
                          (lemma
                           "deriv_composition[(LAMBDA (r: real): r > 0),real]")
                          (("1"
                            (inst -2 "Lambda(x:real |x>0): -1/x" "exp"
                             "_")
                            (("1"
                              (inst -1 "Lambda(x:real |x>0): -1/x"
                               "exp" "_")
                              (("1"
                                (case
                                 "NOT     derivable?[(LAMBDA (r: real): r > 0)]
          (LAMBDA (x: real | x > 0): exp(-1 / x))
")
                                (("1"
                                  (expand "derivable?" 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "x_1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (lemma
                                                 "div_derivable[(LAMBDA (r: real): r > 0)]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Lambda(x:real|x>0): -1"
                                                   "Lambda(x:real |x>0): x"
                                                   "_")
                                                  (("1"
                                                    (inst -1 "x_1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "/" -1)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "derivable?"
                                                               -4)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "-1/x_1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "const_derivable[(LAMBDA (r: real): r > 0)]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "-1"
                                                                 "x_1")
                                                                (("2"
                                                                  (expand
                                                                   "const_fun"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "x_1")
                                                              (("3"
                                                                (expand
                                                                 "I"
                                                                 -1)
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "deriv" 1)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1"
                                        (inst -2 "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (decompose-equality
                                                   -6)
                                                  (("1"
                                                    (inst -1 "-1/x!1")
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "deriv_div[(LAMBDA (r: real): r > 0)]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "LAMBDA (x: real | x > 0): -1"
                                                               "LAMBDA (x: real | x > 0): x"
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "/"
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "deriv_const[(LAMBDA (r: real): r > 0)]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "-1"
                                                                             "x!1")
                                                                            (("1"
                                                                              (expand
                                                                               "const_fun"
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "deriv_identity[(LAMBDA (r: real): r > 0)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "I")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "expt"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "-1")
                                                                        (("2"
                                                                          (expand
                                                                           "const_fun"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "derivable?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("3"
                                                                        (expand
                                                                         "I"
                                                                         -1)
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "div_derivable[(LAMBDA (r: real): r > 0)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "LAMBDA (x: real | x > 0): -1"
                                                 "LAMBDA (x: real | x > 0): x"
                                                 "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (expand "/" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                      (("2"
                                                        (inst -1 "-1")
                                                        (("2"
                                                          (expand
                                                           "const_fun"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "derivable?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("3"
                                                            (expand
                                                             "I"
                                                             -1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "derivable?" -4)
                                              (("3"
                                                (inst -4 "-1/x!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt" -1)
                                            (("2"
                                              (expand "expt" -1)
                                              (("2"
                                                (expand "expt" -1)
                                                (("2"
                                                  (div-by -1 "x")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst -3 "x_1")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "o")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide 1)
                                                    (("3"
                                                      (expand
                                                       "derivable?"
                                                       -4)
                                                      (("3"
                                                        (inst
                                                         -4
                                                         "-1/x_1")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "div_derivable[(LAMBDA (r: real): r > 0)]")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "Lambda(x:real|x>0): -1"
                                                               "Lambda(x:real |x>0): x"
                                                               "_")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "x_1")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     "/"
                                                                     -1)
                                                                    (("3"
                                                                      (expand
                                                                       "derivable?"
                                                                       -4)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (lemma
                                                                           "const_derivable[(LAMBDA (r: real): r > 0)]")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "-1"
                                                                             "x_1")
                                                                            (("3"
                                                                              (expand
                                                                               "const_fun"
                                                                               -1)
                                                                              (("3"
                                                                                (lemma
                                                                                 "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_1")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "I"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "not_one_element?" 1)
                          (("2" (skeep)
                            (("2" (inst 1 "x+1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain?" 1)
                          (("3" (skeep)
                            (("3" (inst 1 "e!1/2")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "deriv_domain?" 1 1)
                      (("2" (skeep)
                        (("2" (inst 1 "e!1/2") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "not_one_element?" 1 1)
                      (("3" (skeep)
                        (("3" (inst 1 "x+1") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_deriv formula-decl nil ln_exp lnexp)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (restrict const-decl "R" restrict nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_composition formula-decl nil chain_rule analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_const formula-decl nil derivatives_def analysis)
    (expt def-decl "real" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (deriv_identity formula-decl nil derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_div formula-decl nil derivatives_def analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (O const-decl "T3" function_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (const_derivable formula-decl nil derivatives_def analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable formula-decl nil derivatives_def analysis)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (div_derivable formula-decl nil derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (composition_derivable formula-decl nil chain_rule analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (derivable_exp formula-decl nil ln_exp lnexp))
   shostak))
 (deriv_e_sin_cos1x_TCC1 0
  (deriv_e_sin_cos1x_TCC1-1 nil 3812925618
   ("" (skeep)
    (("" (skeep)
      (("" (expand "^")
        (("" (expand "expt")
          (("" (expand "expt")
            (("" (expand "expt")
              (("" (div-by -2 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt def-decl "real" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (deriv_e_sin_cos1x subtype
    "exponentiation.^(smooth_not_analytic.x, 2)" "nznum")))
 (deriv_e_sin_cos1x 0
  (deriv_e_sin_cos1x-1 nil 3812925816
   ("" (skeep)
    (("" (lemma "derivable_prod[(LAMBDA (r: real): r > 0)]")
      (("" (lemma "deriv_e1x")
        (("" (flatten)
          (("" (lemma "deriv_sin_cos1x")
            ((""
              (inst -4 "LAMBDA (x: real | x > 0): exp(-1 / x)"
               "(LAMBDA (x: real | x > 0):
                 (sin(1 / x) * polynomial(a, n1)(x) +
                   cos(1 / x) * polynomial(b, n2)(x)))")
              (("1" (expand "*" -4)
                (("1" (assert)
                  (("1" (inst -1 "a" "b" "n1" "n2")
                    (("1" (flatten)
                      (("1"
                        (lemma
                         "deriv_prod_fun[(LAMBDA (r: real): r > 0)]")
                        (("1"
                          (inst -1
                           "LAMBDA (x: real | x > 0): exp(-1 / x)"
                           "(LAMBDA (x: real | x > 0):
                   (sin(1 / x) * polynomial(a, n1)(x) +
                     cos(1 / x) * polynomial(b, n2)(x)))")
                          (("1" (expand "*" -1)
                            (("1" (replace -1)
                              (("1"
                                (expand "+" 1)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -)
                                          (("1"
                                            (lemma "chop_poly_add")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "chop(-a, n1) +
                             chop(polynomial_prod(deriv_p(b, n2),
                                                  max(0, n2 - 1),
                                                  power_linear(0, 1, 2),
                                                  2),
                                  2 + max(0, n2 - 1))"
                                               "b"
                                               "max(n1, 2 + max(0, n2 - 1))"
                                               "n2")
                                              (("1"
                                                (inst-cp
                                                 -1
                                                 "chop(b, n2) +
                               chop(polynomial_prod(deriv_p(a, n1),
                                                    max(0, n1 - 1),
                                                    power_linear(0, 1, 2),
                                                    2),
                                    2 + max(0, n1 - 1))"
                                                 "a"
                                                 "max(n2, 2 + max(0, n1 - 1))"
                                                 "n1")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "chop(chop(b, n2) +
                        chop(polynomial_prod(deriv_p(a, n1),
                                             max(0, n1 - 1),
                                             power_linear(0, 1, 2),
                                             2),
                             2 + max(0, n1 - 1)),
                       max(n2, 2 + max(0, n1 - 1)))
                   + chop(a, n1)"
                                                     "chop(chop(-a, n1) +
                        chop(polynomial_prod(deriv_p(b, n2),
                                             max(0, n2 - 1),
                                             power_linear(0, 1, 2),
                                             2),
                             2 + max(0, n2 - 1)),
                       max(n1, 2 + max(0, n2 - 1)))
                   + chop(b, n2)"
                                                     "max(max(n2, 2 + max(0, n1 - 1)), n1)"
                                                     "max(max(n1, 2 + max(0, n2 - 1)), n2)")
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (decompose-equality
                                                         -2)
                                                        (("1"
                                                          (decompose-equality
                                                           -2)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x!1")
                                                              (("1"
                                                                (expand
                                                                 "+")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "expt")
                                                                (("2"
                                                                  (expand
                                                                   "expt")
                                                                  (("2"
                                                                    (expand
                                                                     "expt")
                                                                    (("2"
                                                                      (div-by
                                                                       -1
                                                                       "x_1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst -1 "a" "b" "n1" "n2")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_prod judgement-tcc nil derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (n1 skolem-const-decl "nat" smooth_not_analytic nil)
    (a skolem-const-decl "sequence[real]" smooth_not_analytic nil)
    (sin const-decl "real" sincos_def trig)
    (n2 skolem-const-decl "nat" smooth_not_analytic nil)
    (b skolem-const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (power_linear const-decl "real" polynomials reals)
    (deriv_p const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial_prod const-decl "real" polynomials reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (chop const-decl "sequence[real]" smooth_not_analytic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (chop_poly_add formula-decl nil smooth_not_analytic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_prod_fun formula-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_sin_cos1x formula-decl nil smooth_not_analytic nil)
    (deriv_e1x formula-decl nil smooth_not_analytic nil))
   shostak))
 (deriv_e_sin_cos1xk_TCC1 0
  (deriv_e_sin_cos1xk_TCC1-1 nil 3812927247
   ("" (skeep)
    (("" (lemma "expt_pos_aux")
      (("" (hide -2)
        (("" (skeep)
          (("" (inst -1 "k+2" "x")
            (("" (expand "^" -2) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_pos_aux formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (deriv_e_sin_cos1xk subtype
    "exponentiation.^(smooth_not_analytic.x, ((number_fields.+)(smooth_not_analytic.k, 2)))"
    "nznum")))
 (deriv_e_sin_cos1xk 0
  (deriv_e_sin_cos1xk-1 nil 3812927456
   ("" (skeep)
    (("" (lemma "deriv_e_sin_cos1x")
      (("" (inst -1 "a" "b" "n1" "n2")
        (("" (assert)
          (("" (lemma "derivable_div[(LAMBDA (r: real): r > 0)]")
            ((""
              (inst -1 "(LAMBDA (x: real | x > 0):
                 polynomial(a, n1)(x) * exp(-1 / x) * sin(1 / x) +
                  polynomial(b, n2)(x) * cos(1 / x) * exp(-1 / x))"
               "(LAMBDA (x: real | x > 0): x^k)")
              (("1" (expand "/" -1)
                (("1" (assert)
                  (("1"
                    (lemma "deriv_div_fun[(LAMBDA (r: real): r > 0)]")
                    (("1"
                      (inst -1 "(LAMBDA (x: real | x > 0):
                     polynomial(a, n1)(x) * exp(-1 / x) * sin(1 / x) +
                      polynomial(b, n2)(x) * cos(1 / x) * exp(-1 / x))"
                       "(LAMBDA (x: real | x > 0): x^k)")
                      (("1" (expand "/" -1)
                        (("1" (replace -1)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1"
                                (inst
                                 1
                                 "chop(polynomial_prod(power_linear(0, 1, 1),
                                             1,
                                             -1 * (k * a),
                                             n1),
                             1 + n1)
                         + chop(c, n3)"
                                 "chop(polynomial_prod(power_linear(0, 1, 1),
                                             1,
                                             -1 * (k * b),
                                             n2),
                             1 + n2)
                         + chop(d, n4)"
                                 "max(1 + n1, n3)"
                                 "max(1 + n2, n4)")
                                (("1"
                                  (replace -4 1)
                                  (("1"
                                    (decompose-equality 1)
                                    (("1"
                                      (expand "*" 1)
                                      (("1"
                                        (expand "-" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "k=0")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "deriv[(LAMBDA(r:real): r>0)]((LAMBDA (x: real | x > 0): 1))(x!1) = 0")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (expand
                                                           "power_linear"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "power_linear"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "polynomial_prod"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "chop(LAMBDA (i_1: nat) -> real:
                                           sigma(max(i_1 - n1, 0), 1, LAMBDA (k: nat): 0),
                                         1 + n1)
                                     + chop(c, n3) = chop(c,n3)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "chop(LAMBDA (i_1: nat) -> real:
                                              sigma(max(i_1 - n2, 0), 1, LAMBDA (k: nat): 0),
                                            1 + n2)
                                        + chop(d, n4) = chop(d,n4)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "chop_poly")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "c"
                                                                               "n3"
                                                                               " max(1 + n1, n3)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "d"
                                                                                           "n4"
                                                                                           "max(1 + n2, n4)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "+"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "chop"
                                                                                 1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sigma_zero[nat]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "+"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "chop"
                                                                           1)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sigma_zero[nat]")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "deriv_const_fun[(LAMBDA(r:real): r>0)]")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (hide -)
                                                      (("3"
                                                        (lemma
                                                         "derivable_const[(LAMBDA(r:real): r>0)]")
                                                        (("3"
                                                          (inst -1 "1")
                                                          (("3"
                                                            (expand
                                                             "const_fun"
                                                             -1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "deriv[(Lambda(r:real):r>0)]((LAMBDA (x: real | x > 0): x ^ k))(x!1) = k * x!1^(k-1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -)
                                                      (("1"
                                                        (lemma
                                                         "scal_polynomial2")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "a"
                                                           "k"
                                                           "n1"
                                                           "x!1")
                                                          (("1"
                                                            (case
                                                             "NOT (polynomial(a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                            x!1 ^ (k - 1)
                                            * k) = (k * polynomial(a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                            x!1 ^ (k - 1))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 2
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "b"
                                                                   "k"
                                                                   "n2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (case
                                                                     "NOT polynomial(b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                               x!1 ^ (k - 1)
                                               * k = k * polynomial(b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                               x!1 ^ (k - 1)
                                               ")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         2
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "NOT (-1 *
                                                  (polynomial(k * a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                    x!1 ^ (k - 1)))
                                                  -
                                                  polynomial(k * b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                   x!1 ^ (k - 1) =
                                                  (-1*polynomial(k * a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                    x!1 ^ (k - 1))
                                                  +
                                                  -1*polynomial(k * b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                   x!1 ^ (k - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "scal_polynomial2")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "k*a"
                                                                                     "-1"
                                                                                     "n1"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "k*b"
                                                                                       "-1"
                                                                                       "n2"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2
                                                                                         2
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -3
                                                                                           2
                                                                                           rl)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                       polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                      / x!1 ^ 2
                                                      * x!1 ^ k = (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                       polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                      * x!1 ^ (k - 2)")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "expt_div")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "k"
                                                                                                       "2"
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                          polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                         / x!1 ^ 2
                                                         * x!1 ^ k = (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                          polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                         * ( x!1 ^ k / x!1 ^ 2)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "expt_plus")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "k"
                                                                                                     "k"
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         2
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "NOT (polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                           x!1 ^ (k - 1)) = x!1^(k-2) * (x!1*polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1))")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "expt_plus")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "k-2"
                                                                                                                 "1"
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "NOT polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                               x!1 ^ (k - 1) = x!1^(k-2) * (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1))")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "expt_plus")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "k-2"
                                                                                                                         "1"
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT  (x!1 ^ (k - 2) *
                                                                  (x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                    sin(1 / x!1))
                                                                  +
                                                                  x!1 ^ (k - 2) *
                                                                   (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                     exp(-1 / x!1))
                                                                  +
                                                                  polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                                   x!1 ^ (k - 2)
                                                                  +
                                                                  polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                                   x!1 ^ (k - 2)) =  x!1 ^ (k - 2) * (
                                                                  (x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                    sin(1 / x!1))
                                                                  +
                                                                   (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                     exp(-1 / x!1))
                                                                  +
                                                                  polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                  +
                                                                  polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT x!1 ^ (k - 2) *
                                                                     ((x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                        sin(1 / x!1))
                                                                       +
                                                                       (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                         exp(-1 / x!1))
                                                                       + polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                       + polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                                     / x!1 ^ (2 * k) =
                                                                     ((x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                        sin(1 / x!1))
                                                                       +
                                                                       (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                         exp(-1 / x!1))
                                                                       + polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                       + polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                                     / x!1 ^ (k+2)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "expt_div")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "k-2"
                                                                                                                                 "2*k"
                                                                                                                                 "x!1")
                                                                                                                                (("1"
                                                                                                                                  (assert
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "expt_inverse")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "k+2"
                                                                                                                                       "x!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "power_linear_polynomial")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "0"
                                                                                                                                 "1"
                                                                                                                                 "1"
                                                                                                                                 "x!1"
                                                                                                                                 "1")
                                                                                                                                (("2"
                                                                                                                                  (assert
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "NOT 1*x!1=x!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "polynomial_prod_def")
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           "power_linear(0, 1, 1)"
                                                                                                                                           "-1 * (k * a)"
                                                                                                                                           "n1"
                                                                                                                                           "1"
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "NOT x!1 *
                                                                             polynomial(-1 * (k * a), n1)(x!1)
                                                                             =
                                                                             polynomial(polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * a),
                                                                                                        n1),
                                                                                        1 + n1)
                                                                                       (x!1)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -3
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst-cp
                                                                                                                                                   -1
                                                                                                                                                   "power_linear(0, 1, 1)"
                                                                                                                                                   "-1 * (k * b)"
                                                                                                                                                   "n2"
                                                                                                                                                   "1"
                                                                                                                                                   "x!1")
                                                                                                                                                  (("2"
                                                                                                                                                    (case
                                                                                                                                                     "NOT x!1 *
                                                                       polynomial(-1 * (k * b), n2)(x!1)
                                                                       =
                                                                       polynomial(polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * b),
                                                                                                  n2),
                                                                                  1 + n2)
                                                                                 (x!1)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "chop_poly_add")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst-cp
                                                                                                                                                           -1
                                                                                                                                                           "polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * a),
                                                                                                       n1)"
                                                                                                                                                           "c"
                                                                                                                                                           "1 + n1"
                                                                                                                                                           "n3")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * b),n2)"
                                                                                                                                                             "d"
                                                                                                                                                             "1 + n2"
                                                                                                                                                             "n4")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (decompose-equality
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (decompose-equality
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         -4
                                                                                                                                                                         -5)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -4
                                                                                                                                                                           -5)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT (LAMBDA (x_1: nat) -> real:  -1 * (k * a(x_1))) =   -1 * (k * a)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (decompose-equality
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "*"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "NOT (LAMBDA(x_1: nat) -> real:  -1 * (k * b(x_1))) =   -1 * (k * b)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (decompose-equality
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "*")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1
                                                                                                                                                                                     2
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1
                                                                                                                                                                                       2
                                                                                                                                                                                       lr)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -3
                                                                                                                                                                                           2
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -4
                                                                                                                                                                                             2
                                                                                                                                                                                             rl)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "+"
                                                                                                                                                                                               2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide-all-but
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "expt_pos_aux")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "^"
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (inst?)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (lemma
                                                       "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst -1 "k")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (decompose-equality
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 3)
                                                  (("3"
                                                    (hide -)
                                                    (("3"
                                                      (lemma
                                                       "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst -1 "k")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -)
                                      (("2"
                                        (lemma "expt_pos_aux")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -1 "2+k" "x")
                                            (("2"
                                              (expand "^")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide -)
                                      (("3"
                                        (expand "*" 1)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (lemma "expt_pos_aux")
                                            (("3"
                                              (expand "^")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (div-by
                                                   -2
                                                   "expt(x_1,k)")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide -)
                                      (("4"
                                        (case "k=0")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma
                                                 "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                (("1"
                                                  (inst -1 "1")
                                                  (("1"
                                                    (expand
                                                     "const_fun"
                                                     -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (lemma
                                             "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -1 "k")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (skeep)
                                      (("5"
                                        (hide -2 -3 -4 -5)
                                        (("5"
                                          (expand "^")
                                          (("5"
                                            (expand "expt")
                                            (("5"
                                              (expand "expt")
                                              (("5"
                                                (expand "expt")
                                                (("5"
                                                  (div-by -1 "x")
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -)
                          (("2" (case "k=0")
                            (("1"
                              (lemma
                               "derivable_const[(LAMBDA (r: real): r > 0)]")
                              (("1"
                                (inst -1 "1")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "const_fun" -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma
                               "deriv_x_n[(LAMBDA(r:real): r>0)]")
                              (("2"
                                (inst?)
                                (("2"
                                  (inst -1 "k")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3" (skeep)
                            (("3" (lemma "expt_pos_aux")
                              (("3"
                                (expand "^")
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -)
                  (("2" (case "k=0")
                    (("1" (replace -1)
                      (("1"
                        (lemma
                         "derivable_const[(LAMBDA (r: real): r > 0)]")
                        (("1" (assert)
                          (("1" (inst -1 "1")
                            (("1" (expand "const_fun")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "deriv_x_n[(LAMBDA(r:real): r>0)]")
                        (("2" (inst?)
                          (("2" (inst -1 "k") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (hide -)
                  (("3" (skeep)
                    (("3" (lemma "expt_pos_aux")
                      (("3" (expand "^")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_e_sin_cos1x formula-decl nil smooth_not_analytic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos const-decl "real" sincos_def trig)
    (n2 skolem-const-decl "nat" smooth_not_analytic nil)
    (b skolem-const-decl "sequence[real]" smooth_not_analytic nil)
    (sin const-decl "real" sincos_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (n1 skolem-const-decl "nat" smooth_not_analytic nil)
    (a skolem-const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (x_1 skolem-const-decl "(LAMBDA (r: real): r > 0)"
     smooth_not_analytic nil)
    (expt def-decl "real" exponentiation nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_x_n formula-decl nil derivatives analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (expt_div formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (power_linear_polynomial formula-decl nil polynomials reals)
    (chop_poly_add formula-decl nil smooth_not_analytic nil)
    (polynomial_prod_def formula-decl nil polynomials reals)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (chop_poly formula-decl nil smooth_not_analytic nil)
    (sigma_zero formula-decl nil sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (deriv_const_fun formula-decl nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const judgement-tcc nil derivatives analysis)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (chop const-decl "sequence[real]" smooth_not_analytic nil)
    (polynomial_prod const-decl "real" polynomials reals)
    (power_linear const-decl "real" polynomials reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (derivable_const application-judgement "deriv_fun" pi_def trig)
    (constant_seq2 application-judgement "(convergent_nz?)"
     convergence_ops analysis)
    (deriv_div_fun formula-decl nil derivatives analysis)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (> const-decl "bool" reals nil)
    (derivable_div judgement-tcc nil derivatives analysis)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (init_deriv_n 0
  (init_deriv_n-1 nil 3812932679
   ("" (induct "n")
    (("1" (flatten)
      (("1" (assert)
        (("1" (expand "restrict" -1)
          (("1" (expand "nderiv" 1)
            (("1" (expand "restrict" 1)
              (("1" (expand "sm" 1)
                (("1"
                  (inst 1 "Lambda(i:nat): IF i=0 THEN 1 ELSE 0 ENDIF"
                   "Lambda(i:nat): 0" "0" "0" "0")
                  (("1" (decompose-equality 1)
                    (("1" (expand "polynomial" 1)
                      (("1" (expand "sigma" 1)
                        (("1" (expand "sigma" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (lemma " nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
        (("2" (inst -1 "sm" "j")
          (("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "restrict")
                  (("2" (assert)
                    (("2" (hide -3)
                      (("2" (skeep)
                        (("2"
                          (lemma
                           "nderiv_derivable_aux[(LAMBDA (r: real): r > 0)]")
                          (("2" (inst -1 "sm" "j")
                            (("2" (assert)
                              (("2"
                                (expand "restrict")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -4 1)
                                    (("2"
                                      (lemma "deriv_e_sin_cos1xk")
                                      (("2"
                                        (inst -1 "c" "d" "n3" "n4" "k")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst
                                               1
                                               "c_1"
                                               "d_1"
                                               "n3_1"
                                               "n4_1"
                                               "k+2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "expt_pos_aux")
            (("3" (expand "^")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nderiv_derivable_aux formula-decl nil nth_derivatives analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_e_sin_cos1xk formula-decl nil smooth_not_analytic nil)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma reals)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cos const-decl "real" sincos_def trig)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sin const-decl "real" sincos_def trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (deriv_sm_n 0
  (deriv_sm_n-1 nil 3812933463
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (lemma "init_deriv_n")
      (("2" (inst -1 "0")
        (("2" (assert)
          (("2" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3"
          (case "NOT (derivable_n_times?[(LAMBDA (r: real): r > 0)]
           (restrict[real, (LAMBDA (r: real): r > 0), real](sm), j + 1))")
          (("1" (hide 2)
            (("1"
              (lemma "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
              (("1" (inst?)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (replace -3)
                      (("1" (lemma "deriv_e_sin_cos1xk")
                        (("1" (inst -1 "c" "d" "n3" "n4" "k")
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "init_deriv_n")
              (("2" (inst -1 "1+j") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 1)
      (("4" (skeep)
        (("4" (hide -1)
          (("4" (skeep)
            (("4" (lemma "expt_pos_aux")
              (("4" (expand "^")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 1)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (lemma "expt_pos_aux")
            (("5" (expand "^" -3)
              (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_pos_aux formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (deriv_e_sin_cos1xk formula-decl nil smooth_not_analytic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (init_deriv_n formula-decl nil smooth_not_analytic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cos const-decl "real" sincos_def trig)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sin const-decl "real" sincos_def trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (abs_between 0
  (abs_between-1 nil 3813014718 ("" (skeep) (("" (grind) nil nil)) nil)
   ((nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (bound_sin_p_cos_p_TCC1 0
  (bound_sin_p_cos_p_TCC1-1 nil 3812934451 ("" (subtype-tcc) nil nil)
   nil nil
   (bound_sin_p_cos_p subtype "smooth_not_analytic.x" "nznum")))
 (bound_sin_p_cos_p 0
  (bound_sin_p_cos_p-1 nil 3812995497
   ("" (skeep)
    (("" (lemma "poly_attains_maximum")
      (("" (lemma " poly_attains_minimum")
        (("" (inst-cp -2 "a" "n1" "0" "1")
          (("" (inst -2 "b" "n2" "0" "1")
            (("" (inst-cp -1 "a" "n1" "0" "1")
              (("" (inst -1 "b" "n2" "0" "1")
                (("" (assert)
                  (("" (skeep*)
                    (("" (assert)
                      ((""
                        (inst 1
                         "max(abs(polynomial(a, n1)(c!1)),abs(polynomial(a, n1)(c!3)))+ max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2))) + 1")
                        (("" (skeep)
                          ((""
                            (case " abs(cos(1 / x) * polynomial(b, n2)(x) +
                  sin(1 / x) * polynomial(a, n1)(x))
              <=
              max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
               max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (inst -3 "x")
                                (("2"
                                  (inst -6 "x")
                                  (("2"
                                    (inst -9 "x")
                                    (("2"
                                      (inst -12 "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "triangle")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (case
                                               " abs(cos(1 / x) * polynomial(b, n2)(x)) +
        abs(sin(1 / x) * polynomial(a, n1)(x)) <= max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
        max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (inst-cp
                                                     -1
                                                     "cos(1 / x)"
                                                     "polynomial(b, n2)(x)")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "sin(1 / x)"
                                                       " polynomial(a, n1)(x)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (case
                                                             "abs(cos(1 / x)) <=1")
                                                            (("1"
                                                              (case
                                                               " abs(sin(1 / x))<=1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "abs_between")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       " (abs(polynomial(b, n2)(x)) +
        abs(polynomial(a, n1)(x))) <= max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
        max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (mult-by
                                                                           -3
                                                                           " abs(polynomial(a, n1)(x))")
                                                                          (("1"
                                                                            (mult-by
                                                                             -4
                                                                             " abs(polynomial(b, n2)(x))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             " polynomial(a, n1)(c!1)"
                                                                             "(polynomial(a, n1)(x))"
                                                                             "polynomial(a, n1)(c!3)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 " polynomial(b, n2)(c)"
                                                                                 "polynomial(b, n2)(x)"
                                                                                 "polynomial(b, n2)(c!2)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "sin_range")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "1/x")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "abs"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (hide
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         -14
                                                                         -15
                                                                         -16
                                                                         -17
                                                                         -18)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "cos_range")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "1/x")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_attains_maximum formula-decl nil polynomials reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (triangle formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cos_range judgement-tcc nil sincos trig)
    (abs_between formula-decl nil smooth_not_analytic nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_range judgement-tcc nil sincos trig)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (sin const-decl "real" sincos_def trig)
    (< const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (poly_attains_minimum formula-decl nil polynomials reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (lnx_derivable_TCC1 0
  (lnx_derivable_TCC1-1 nil 3813047370 ("" (subtype-tcc) nil nil) nil
   nil (lnx_derivable subtype "smooth_not_analytic.x" "posreal")))
 (lnx_derivable_TCC2 0
  (lnx_derivable_TCC2-1 nil 3813047370
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep) (("" (inst 1 "e!1/2") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (lnx_derivable assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>=(r, smooth_not_analytic.c))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lnx_derivable_TCC3 0
  (lnx_derivable_TCC3-1 nil 3813047370
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep) (("" (inst 1 "x+1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (lnx_derivable assuming
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>=(r, smooth_not_analytic.c))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (lnx_derivable_TCC4 0
  (lnx_derivable_TCC4-1 nil 3813047370
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (lnx_derivable subtype "smooth_not_analytic.x" "nznum")))
 (lnx_derivable 0
  (lnx_derivable-1 nil 3813047695
   ("" (lemma "ln_derivable")
    (("" (skeep)
      ((""
        (case "NOT derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): -x + k * ln(x))")
        (("1" (hide 2)
          (("1"
            (case "derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): -x)")
            (("1"
              (case "derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): k * ln(x))")
              (("1" (lemma "derivable_sum[(LAMBDA (r: real): r >= c)]")
                (("1"
                  (inst -1 " (LAMBDA (x: real | x >= c): -x) "
                   "LAMBDA (x: real | x >= c): k * ln(x)")
                  (("1" (expand "+") (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (lemma "scal_derivable[(LAMBDA (r: real): r >= c)]")
                  (("2" (expand "derivable?" 1)
                    (("2" (skeep)
                      (("2"
                        (inst -1 "k"
                         "(LAMBDA (x: real | x >= c): ln(x))" "x_1")
                        (("2" (assert)
                          (("2" (expand "*")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma
                                   "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                  (("2"
                                    (inst -1 "ln")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "restrict")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "derivable?" -1)
                                              (("1"
                                                (inst -1 "x_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "deriv_domain?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "e!1/2")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "not_one_element?" 1)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst 1 "x+1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (lemma
                 "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                (("2" (inst -1 "-1" "LAMBDA (x: real | x >= c): x")
                  (("2" (assert)
                    (("2" (expand "*")
                      (("2" (hide 2)
                        (("2"
                          (lemma
                           "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "deriv_sum_fun[(LAMBDA (r: real): r >= c)]")
            (("2"
              (inst -1 " (LAMBDA (x: real | x >= c): -x)"
               " (LAMBDA (x: real | x >= c): k * ln(x))")
              (("1" (expand "+" -1)
                (("1" (replace -1 1)
                  (("1" (decompose-equality 1)
                    (("1"
                      (lemma
                       "deriv_scal_fun[(LAMBDA (r: real): r >= c)]")
                      (("1"
                        (inst-cp -1 "-1"
                         "LAMBDA (x: real | x >= c): x")
                        (("1" (expand "*" -2)
                          (("1" (replace -2)
                            (("1"
                              (inst -1 "k"
                               "(LAMBDA (x: real | x >= c): ln(x))")
                              (("1"
                                (expand "*" -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "deriv_subtype_dd[posreal,(LAMBDA (r: real): r >= c)]")
                                      (("1"
                                        (inst -1 "ln")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (decompose-equality
                                                   -7)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "deriv_id_fun[(LAMBDA (r: real): r >= c)]")
                                                              (("1"
                                                                (decompose-equality
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide -)
                                                (("2"
                                                  (expand
                                                   "deriv_domain?"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "e!1/2")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide -)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (expand
                                                   "not_one_element?"
                                                   1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst 1 "x+1")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma
                                   "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                  (("2"
                                    (inst -1 "ln")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "restrict")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "deriv_domain?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "e!1/2")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "not_one_element?" 1)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst 1 "x+1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2"
                            (lemma
                             "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2"
                        (lemma
                         "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                        (("2"
                          (inst -1 "k"
                           "(LAMBDA (x: real | x >= c):  ln(x))")
                          (("2" (assert)
                            (("2" (expand "*")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma
                                     "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                    (("2"
                                      (inst -1 "ln")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "restrict")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (expand "deriv_domain?" 1)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst 1 "e!1/2")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "not_one_element?" 1)
                                          (("4"
                                            (skeep)
                                            (("4"
                                              (inst 1 "x+1")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3"
                        (lemma
                         "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                        (("3"
                          (inst -1 "-1"
                           "(LAMBDA (x: real | x >= c): x)")
                          (("3" (assert)
                            (("3" (expand "*")
                              (("3"
                                (assert)
                                (("3"
                                  (lemma
                                   "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (lemma
                 "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                (("2"
                  (inst -1 "k" "(LAMBDA (x: real | x >= c):  ln(x))")
                  (("2" (assert)
                    (("2" (expand "*")
                      (("2" (assert)
                        (("2"
                          (lemma
                           "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                          (("2" (inst -1 "ln")
                            (("2" (split -1)
                              (("1"
                                (expand "restrict")
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (expand "deriv_domain?" 1)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst 1 "e!1/2")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand "not_one_element?" 1)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (inst 1 "x+1")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3"
                  (lemma
                   "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                  (("3" (inst -1 "-1" "(LAMBDA (x: real | x >= c): x)")
                    (("3" (expand "*")
                      (("3" (assert)
                        (("3"
                          (lemma
                           "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (deriv_scal_fun formula-decl nil derivatives analysis)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (not_one_element_posreal formula-decl nil deriv_domain analysis)
    (deriv_domain_posreal formula-decl nil deriv_domain analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (deriv_id_fun formula-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_sum_fun formula-decl nil derivatives analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c skolem-const-decl "posreal" smooth_not_analytic nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_sum judgement-tcc nil derivatives analysis)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (derivable? const-decl "bool" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ln const-decl "real" ln_exp lnexp)
    (ln_derivable formula-decl nil ln_exp lnexp))
   shostak))
 (lnx_le 0
  (lnx_le-1 nil 3813049631
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "derivs_funs_leq[(LAMBDA(r:real): r>=2*k)]")
        (("1"
          (inst -1 "2*k" "2*k+1"
           "LAMBDA(x:real |x>=2*k): -x + k * ln(x)"
           "LAMBDA(x:real |x>=2*k):(-1/2)*x + -2*k + k* ln(2*k) + k")
          (("1" (assert)
            (("1" (split -1)
              (("1" (inst -1 "2*k") (("1" (inst -1 "x") nil nil)) nil)
               ("2" (skeep)
                (("2" (lemma "lnx_derivable")
                  (("2" (inst?)
                    (("2" (flatten)
                      (("2" (replace -2 1)
                        (("2" (assert)
                          (("2" (typepred "x_1")
                            (("2"
                              (lemma
                               "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                              (("1"
                                (lemma
                                 "scal_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("1"
                                  (inst
                                   -1
                                   "-1/2"
                                   "LAMBDA (x: real | x >= 2 * k):
                         x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (lemma
                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                        (("1"
                                          (inst -1 "k + k * ln(2 * k)")
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (lemma
                                               "deriv_diff_fun[(LAMBDA (r: real): r >= 2 * k)]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "(LAMBDA (x: real | x >= 2 * k):
                             (-1 / 2) * x)"
                                                 "(LAMBDA (x: real | x >= 2 * k):
                             k - k * ln(2 * k))")
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  (("1"
                                                    (inst -1 "x_1")
                                                    (("1"
                                                      (expand "-")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "deriv_scal_fun[(LAMBDA (r: real): r >= 2 * k)]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "-1/2"
                                                               "(LAMBDA (x: real | x >= 2 * k):  x)")
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x_1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "deriv_id_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "x_1")
                                                                                      (("1"
                                                                                        (div-by
                                                                                         -1
                                                                                         "x_1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (div-by
                                                                                             -1
                                                                                             "2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT 2 * k / x_1 / 2 = k/x_1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "deriv_const[(LAMBDA (r: real): r >= 2*k)]")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "k - k * ln(2 * k)"
                                                                                                       "x_1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "const_fun"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "deriv"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (expand
                                                                           "not_one_element?"
                                                                           1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "x!2+1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -)
                                                                      (("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (expand
                                                                           "deriv_domain?")
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (inst
                                                                               1
                                                                               "e!1/2")
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       -)
                                                                      (("4"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (expand
                                                                           "not_one_element?"
                                                                           1)
                                                                          (("4"
                                                                            (skeep)
                                                                            (("4"
                                                                              (inst
                                                                               1
                                                                               "x!1+1")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide
                                                                       -)
                                                                      (("5"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("5"
                                                                          (expand
                                                                           "deriv_domain?"
                                                                           1)
                                                                          (("5"
                                                                            (skeep)
                                                                            (("5"
                                                                              (inst
                                                                               1
                                                                               "e!1/2")
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4)
                                                      (("2"
                                                        (lemma
                                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           " k - k * ln(2 * k)")
                                                          (("2"
                                                            (expand
                                                             "const_fun")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("3"
                                                      (expand
                                                       "not_one_element?"
                                                       1)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst
                                                           1
                                                           "x!1+1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide -)
                                                    (("4"
                                                      (hide 2 3)
                                                      (("4"
                                                        (expand
                                                         "deriv_domain?"
                                                         1)
                                                        (("4"
                                                          (skeep)
                                                          (("4"
                                                            (inst
                                                             1
                                                             "e!1/2")
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (lemma
                                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           " k - k * ln(2 * k)")
                                                          (("2"
                                                            (expand
                                                             "const_fun")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -)
                                                  (("3"
                                                    (lemma
                                                     "scal_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "-1/2"
                                                       "LAMBDA (x: real | x >= 2 * k):
                         x")
                                                      (("3"
                                                        (hide 2 3)
                                                        (("3"
                                                          (split -1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("1"
                                  (hide -)
                                  (("1"
                                    (hide 2 3)
                                    (("1"
                                      (expand "deriv_domain?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "e!1/2")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (hide 2 3)
                                    (("2"
                                      (expand "deriv_domain?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "e!1/2")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (lemma "sum_derivable_fun[(LAMBDA (r: real): r >= 2 * k)]")
            (("1"
              (inst -1 " (LAMBDA (x: real | x >= 2 * k): -1/2 * x)"
               "  (LAMBDA (x: real | x >= 2 * k): -1 * k  + k * ln(2 * k))")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (expand "+") (("1" (assert) nil nil)) nil)
                   ("2" (hide 2 3)
                    (("2"
                      (lemma
                       "scal_derivable_fun[(LAMBDA (r: real): r >= 2 * k)]")
                      (("2"
                        (inst -1 "-1/2"
                         "(LAMBDA (x: real | x >= 2 * k):  x)")
                        (("2" (expand "*" -1)
                          (("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (lemma
                                 "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2 3)
                    (("3"
                      (lemma
                       "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                      (("3" (inst -1 "k * ln(2 * k)-k")
                        (("3" (expand "const_fun")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2 3)
              (("2" (expand "deriv_domain?")
                (("2" (skeep)
                  (("2" (inst 1 "e!1/2") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -)
            (("3" (lemma "lnx_derivable")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (expand "not_one_element?" 1)
          (("2" (skeep)
            (("2" (inst 1 "x!1+1") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (expand "connected?" 1)
          (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (k skolem-const-decl "posnat" smooth_not_analytic nil)
    (derivable? const-decl "bool" derivatives analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (lnx_derivable formula-decl nil smooth_not_analytic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_diff_fun formula-decl nil derivatives analysis)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (deriv_id_fun formula-decl nil derivatives analysis)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (deriv_const formula-decl nil derivatives_def analysis)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal_fun formula-decl nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const judgement-tcc nil derivatives analysis)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (sum_derivable_fun formula-decl nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (derivs_funs_leq formula-decl nil derivative_props analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (lnx_neg_large 0
  (lnx_neg_large-1 nil 3813017199
   ("" (skeep)
    (("" (lemma "lnx_le")
      (("" (inst -1 "k" "_")
        (("1" (assert)
          (("1" (inst 1 "max(2*k+1, 2* ( -k + k * ln(2 * k)) + 2*M1)")
            (("1" (skeep)
              (("1" (inst -1 "x")
                (("1" (split -1)
                  (("1"
                    (case "NOT x >= 2 * (-k + k * ln(2 * k)) + 2 * M1")
                    (("1" (assert) nil nil)
                     ("2" (hide -3)
                      (("2"
                        (case "NOT  (-1 / 2) * x <= (-1 / 2) * (2 * (-k + k * ln(2 * k)) + 2 * M1)")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (grind) nil nil)) nil)
             ("3" (assert)
              (("3" (typepred "k") (("3" (postpone) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((lnx_le formula-decl nil smooth_not_analytic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Integral const-decl "real" integral_def analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (ln const-decl "real" ln_exp lnexp)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (M1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (k skolem-const-decl "posnat" smooth_not_analytic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (exp_xk_small_TCC1 0
  (exp_xk_small_TCC1-1 nil 3812935398 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (exp_xk_small subtype "smooth_not_analytic.k"
    "{i: integers.int | booleans.OR(smooth_not_analytic.x /= 0, reals.>=(i, 0))}")))
 (exp_xk_small 0
  (exp_xk_small-1 nil 3813016805
   ("" (skeep)
    (("" (case "k>0")
      (("1" (lemma "lnx_neg_large")
        (("1"
          (lemma "exp_bij
")
          (("1" (expand "bijective?" -1)
            (("1" (flatten)
              (("1" (expand "surjective?" -2)
                (("1" (inst -2 "epsilon/2")
                  (("1" (skeep)
                    (("1" (typepred "x")
                      (("1" (hide -1)
                        (("1" (inst -3 "abs(x)+1" "k")
                          (("1" (skeep)
                            (("1" (inst 1 "M2")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -3 "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "exp_ln")
                                      (("1"
                                        (inst -1 "x!1^k")
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (lemma "exp_sum")
                                            (("1"
                                              (inst
                                               -1
                                               "-x!1"
                                               "ln(x!1 ^ k)")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (case
                                                   "not -(1+abs(x)) <= x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "exp_increasing")
                                                    (("2"
                                                      (expand
                                                       "increasing?"
                                                       -1)
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         " -(1 + abs(x))"
                                                         "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "ln(x!1 ^ k) + -x!1"
                                                             " -(1 + abs(x))")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "ln_expt")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "k"
                                                                   "x!1")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "expt_pos")
                                                (("2"
                                                  (inst -1 "k" "x!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "expt_pos")
                                            (("2"
                                              (inst -1 "k" "x!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "expt_pos")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (case " NOT k=0")
          (("1" (assert) nil nil)
           ("2" (replace -1)
            (("2" (assert)
              (("2" (lemma "small_exp")
                (("2" (inst -1 "epsilon/2")
                  (("2" (skeep)
                    (("2" (inst 2 "abs(x)+1")
                      (("2" (skeep)
                        (("2" (lemma "exp_increasing")
                          (("2" (expand "increasing?" -1)
                            (("2" (case "NOT -(1+abs(x)) <= x")
                              (("1" (assert) nil nil)
                               ("2"
                                (case "NOT -x_1 <= -(1+abs(x))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst-cp -3 "-x_1" "-(1+abs(x))")
                                  (("2"
                                    (inst -3 "-(1+abs(x))" "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_bij formula-decl nil ln_exp lnexp)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "real" smooth_not_analytic nil)
    (exp_ln formula-decl nil ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ln_expt formula-decl nil ln_exp lnexp)
    (exp_increasing formula-decl nil ln_exp lnexp)
    (expt_pos formula-decl nil exponentiation nil)
    (exp_sum formula-decl nil ln_exp lnexp)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (lnx_neg_large formula-decl nil smooth_not_analytic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (small_exp formula-decl nil ln_exp lnexp))
   shostak))
 (exp_conv 0
  (exp_conv-1 nil 3808442504
   ("" (skeep)
    (("" (lemma "exp_xk_small")
      (("" (expand "convergent?" 1)
        (("" (inst 1 "0")
          (("" (inst -1 "k" "_")
            (("" (expand "convergence" 1 1)
              (("" (expand "convergence" 1 1)
                (("" (expand "adh" 1)
                  (("" (split 1)
                    (("1" (skeep)
                      (("1" (inst 1 "e!1/2") (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -1 "epsilon")
                        (("2" (skeep)
                          (("2" (inst 1 "1/M")
                            (("2" (skeep)
                              (("2"
                                (expand "abs" -2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -3 "1/x_1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -3)
                                        (("1"
                                          (hide -2 -3)
                                          (("1"
                                            (expand "abs" 1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "div_expt")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "k"
                                                   "1"
                                                   "x_1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "x_1")
                                          (("2"
                                            (mult-by -2 "M")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_xk_small formula-decl nil smooth_not_analytic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (exp_sin_p_cos_p_conv 0
  (exp_sin_p_cos_p_conv-1 nil 3812936117
   ("" (lemma "exp_xk_small")
    (("" (lemma "bound_sin_p_cos_p")
      (("" (skeep)
        (("" (inst -1 "a" "b" "n1" "n2")
          (("" (skeep)
            (("" (expand "convergent?" 1)
              (("" (inst 1 "0")
                (("" (expand "convergence" 1 1)
                  (("" (expand "convergence" 1 1)
                    (("" (split 1)
                      (("1" (expand "adh" 1)
                        (("1" (skeep)
                          (("1" (inst 1 "e!1/2")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -2 "k" "epsilon/C")
                          (("2" (skeep)
                            (("2" (inst 1 "min(1,1/M)")
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "abs_mult")
                                  (("2"
                                    (inst
                                     -1
                                     " exp(-1 / x_1)/x_1 ^ k"
                                     "(polynomial(a, n1)(x_1) * sin(1 / x_1) +
                    polynomial(b, n2)(x_1) * cos(1 / x_1))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (inst -4 "x_1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT abs(exp(-1 / x_1) / x_1 ^ k) *
                             abs((polynomial(a, n1)(x_1) * sin(1 / x_1) +
                                   polynomial(b, n2)(x_1) * cos(1 / x_1))) < abs(exp(-1 / x_1) / x_1 ^ k) * C")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (div-by
                                                   1
                                                   "abs(exp(-1 / x_1) / x_1 ^ k)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 " abs(exp(-1 / x_1) / x_1 ^ k) * C < epsilon")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst -6 "1/x_1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -6)
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "C")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "div_expt")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "k"
                                                                 "1"
                                                                 "x_1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "x_1")
                                                                                    (("1"
                                                                                      (case
                                                                                       " x_1 ^ k>0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -3
                                                                                           "x_1 ^ k")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "expt_pos_aux")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "k"
                                                                                             "x_1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-by
                                                           1
                                                           "x_1")
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             -4)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "min"
                                                                   -2)
                                                                  (("2"
                                                                    (lift-if
                                                                     -2)
                                                                    (("2"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (mult-by
                                                                           -2
                                                                           "M")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (mult-by
                                                                             1
                                                                             "M")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flip-ineq
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  (("1"
                                                                                    (div-by
                                                                                     1
                                                                                     "M")
                                                                                    (("1"
                                                                                      (div-by
                                                                                       -1
                                                                                       "M")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (div-by
                                                                                     1
                                                                                     "M")
                                                                                    (("2"
                                                                                      (div-by
                                                                                       -1
                                                                                       "M")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bound_sin_p_cos_p formula-decl nil smooth_not_analytic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (exp_xk_small formula-decl nil smooth_not_analytic nil))
   shostak))
 (exp_lim_TCC1 0
  (exp_lim_TCC2-1 nil 3808442326
   ("" (lemma "exp_sin_p_cos_p_conv") (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_sin_p_cos_p_conv formula-decl nil smooth_not_analytic nil))
   nil
   (exp_lim subtype "0"
    "{a_1 | lim_of_functions[{x: reals.real | reals.>(x, 0)}].convergent?(LAMBDA (x: reals.real | reals.>(x, 0)): number_fields./((number_fields.+)(number_fields.*(number_fields.*(polynomials.polynomial(smooth_not_analytic.a, smooth_not_analytic.n1)(x), ln_exp.exp(number_fields./((number_fields.-)(1), x))), sincos_def.sin(number_fields./(1, x))), number_fields.*(number_fields.*(polynomials.polynomial(smooth_not_analytic.b, smooth_not_analytic.n2)(x), sincos_def.cos(number_fields./(1, x))), ln_exp.exp(number_fields./((number_fields.-)(1), x)))), exponentiation.^(x, (smooth_not_analytic.k))), a_1)}")))
 (exp_lim 0
  (exp_lim-1 nil 3808442332
   ("" (lemma " lim_fun_def[(LAMBDA( r:real): r>0)]")
    (("" (skeep)
      ((""
        (inst -1 "LAMBDA (x: real | x > 0):
              exp(-1 / x) *
               (sin(1 / x) * polynomial(a, n1)(x) +
                 cos(1 / x) * polynomial(b, n2)(x))
               / x ^ (k)" "0" "0")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (lemma "exp_xk_small")
              (("1" (lemma "bound_sin_p_cos_p")
                (("1" (inst -1 "a" "b" "n1" "n2")
                  (("1" (skeep)
                    (("1" (expand "convergence" 1 1)
                      (("1" (expand "convergence" 1 1)
                        (("1" (split 1)
                          (("1" (expand "adh" 1)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "e!1/2")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -2 "k" "epsilon/C")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "min(1,1/M)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma "abs_mult")
                                      (("2"
                                        (inst
                                         -1
                                         " exp(-1 / x_1)/x_1 ^ k"
                                         "(polynomial(a, n1)(x_1) * sin(1 / x_1) +
                        polynomial(b, n2)(x_1) * cos(1 / x_1))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (inst -4 "x_1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "NOT abs(exp(-1 / x_1) / x_1 ^ k) *
                                      abs((polynomial(a, n1)(x_1) * sin(1 / x_1) +
                                            polynomial(b, n2)(x_1) * cos(1 / x_1))) < abs(exp(-1 / x_1) / x_1 ^ k) * C")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (div-by
                                                       1
                                                       "abs(exp(-1 / x_1) / x_1 ^ k)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     " abs(exp(-1 / x_1) / x_1 ^ k) * C < epsilon")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "1/x_1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -6)
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "C")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "div_expt")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "k"
                                                                     "1"
                                                                     "x_1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "abs"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "x_1")
                                                                                        (("1"
                                                                                          (case
                                                                                           " x_1 ^ k>0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (mult-by
                                                                                               -3
                                                                                               "x_1 ^ k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "expt_pos_aux")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "k"
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (mult-by
                                                               1
                                                               "x_1")
                                                              (("2"
                                                                (expand
                                                                 "abs"
                                                                 -4)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "min"
                                                                       -2)
                                                                      (("2"
                                                                        (lift-if
                                                                         -2)
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "M")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (mult-by
                                                                                 1
                                                                                 "M")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flip-ineq
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (div-by
                                                                                         1
                                                                                         "M")
                                                                                        (("1"
                                                                                          (div-by
                                                                                           -1
                                                                                           "M")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (div-by
                                                                                         1
                                                                                         "M")
                                                                                        (("2"
                                                                                          (div-by
                                                                                           -1
                                                                                           "M")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (lemma "expt_pos_aux")
              (("2" (inst -1 "k" "x")
                (("2" (expand "^") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (exp_xk_small formula-decl nil smooth_not_analytic nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bound_sin_p_cos_p formula-decl nil smooth_not_analytic nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (cos const-decl "real" sincos_def trig)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (sin const-decl "real" sincos_def trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   shostak))
 (derivable_nth_split_TCC1 0
  (derivable_nth_split_TCC1-1 nil 3812988560
   ("" (skeep) (("" (assert) (("" (postpone) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (derivable_nth_split subtype
    "(number_fields.-)(smooth_not_analytic.n, 1)" "nat")))
 (derivable_nth_split 0
  (derivable_nth_split-1 nil 3812989238
   ("" (skeep)
    (("" (lemma "nderiv_derivable_eqv")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "derivable?" 1)
              (("" (skeep)
                (("" (case "x=0")
                  (("1" (assert) nil nil)
                   ("2" (expand "restrict")
                    (("2"
                      (lemma
                       "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
                      (("2"
                        (lemma
                         "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
                        (("2" (inst?)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1 -3)
                                    (("2"
                                      (case "x>0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "nderiv_subtype[real,(LAMBDA (r: real): r > 0)]")
                                          (("1"
                                            (inst -1 "n-1" "f")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (lemma
                                                   "derivable_subtype_del[real, (LAMBDA (r: real): r > 0)]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "nderiv(n - 1, f)"
                                                     "nderiv(n - 1, f)"
                                                     "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "derivable?"
                                                               -3)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "deriv_domain?"
                                                           1
                                                           1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "e!1/2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "not_one_element?"
                                                           1)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (inst
                                                               1
                                                               "x!1+1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (decompose-equality
                                                           1)
                                                          (("4"
                                                            (decompose-equality
                                                             -1)
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (expand
                                                                   "restrict")
                                                                  (("4"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "x/2")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "extend"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "fullset"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "deriv_domain?"
                                                   1
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "e!1/2")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "not_one_element?"
                                                   1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst 1 "x!1+1")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "x<0")
                                        (("1"
                                          (lemma
                                           "derivable_subtype_del[real, (LAMBDA (r: real): r < 0)]")
                                          (("1"
                                            (lemma
                                             "nderiv_subtype[real,(LAMBDA (r: real): r < 0)]")
                                            (("1"
                                              (inst -1 "n-1" "f")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "nderiv(n-1,f)"
                                                   "nderiv(n-1,f)"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (expand
                                                           "derivable?"
                                                           -4)
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "deriv_domain?"
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "-e!1/2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "not_one_element?"
                                                         1)
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (inst
                                                             1
                                                             "x!1-1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (decompose-equality
                                                         1)
                                                        (("4"
                                                          (decompose-equality
                                                           -1)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            (("4"
                                                              (expand
                                                               "restrict")
                                                              (("4"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (inst 1 "-x/2")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "extend"
                                                           1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "fullset")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (expand
                                                   "deriv_domain?"
                                                   1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst 1 "-e!1/2")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand
                                                   "not_one_element?"
                                                   1)
                                                  (("4"
                                                    (skeep)
                                                    (("4"
                                                      (inst 1 "x!1-1")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nderiv_subtype formula-decl nil nth_derivative_subtype nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (member const-decl "bool" sets nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (restrict const-decl "R" restrict nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sm_n_derivable_TCC1 0
  (sm_n_derivable_TCC1-1 nil 3812997575
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "expt_pos")
        (("" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_pos formula-decl nil exponentiation nil))
   nil
   (sm_n_derivable subtype
    "exponentiation.^(smooth_not_analytic.x, (smooth_not_analytic.k))"
    "nznum")))
 (sm_n_derivable 0
  (sm_n_derivable-1 nil 3812980640
   ("" (induct "n")
    (("1" (assert) (("1" (grind) nil nil)) nil)
     ("2"
      (inst 1 "Lambda(i:nat): IF i=0 THEN 1 ELSE 0 ENDIF"
       "LAMBDA(i:nat): 0" "0" "0" "0")
      (("2" (expand "nderiv" 1)
        (("2" (decompose-equality 1)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (expand "sm" 1)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "polynomial")
                    (("2" (expand "sm")
                      (("2" (expand "sigma")
                        (("2" (expand "sigma") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (case "NOT (derivable_n_times?(sm, j + 1))")
        (("1" (hide 2)
          (("1" (lemma "derivable_nth_split")
            (("1" (inst -1 "sm" "j+1")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (lemma "deriv_sm_n")
                    (("1" (lemma " sm_derivable_init_le0")
                      (("1" (inst -2 "1+j")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (inst -1 "1+j")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "restrict" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "restrict" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "deriv_left_right_point")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -1
                                                 "0"
                                                 "nderiv(j, sm)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (lemma
                                                         "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
                                                        (("1"
                                                          (lemma
                                                           "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "sm"
                                                             "j")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "sm"
                                                               "j")
                                                              (("1"
                                                                (expand
                                                                 "restrict")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "nderiv_subtype[real,(LAMBDA (r: real): r < 0)]")
                                                                            (("1"
                                                                              (lemma
                                                                               "nderiv_subtype[real,(LAMBDA (r: real): r > 0)]")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "j"
                                                                                 "sm")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "j"
                                                                                     "sm")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nderiv_derivable_aux[(LAMBDA (r: real): r > 0)]")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nderiv_derivable_aux[(LAMBDA (r: real): r < 0)]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "sm"
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "sm"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "restrict")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -10)
                                                                                                                  (("1"
                                                                                                                    (skeep
                                                                                                                     -14)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -14
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             " (LAMBDA (s: (LAMBDA (r: real): r < 0)):
                  (LAMBDA (x: real):
                     IF x <= 0 THEN 0
                     ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k
                     ENDIF)
                      (s)) = Lambda(s:real | s<0): 0")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "convergent?"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "convergence"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "convergence"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "-e!1/2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     "1")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "not_one_element?"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "x-1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "deriv_domain?"
                                                                                                                                       1)
                                                                                                                                      (("3"
                                                                                                                                        (skeep)
                                                                                                                                        (("3"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "-e!1/2")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            (("3"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (decompose-equality
                                                                                                                                 1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("3"
                                                                                                                                  (skeep)
                                                                                                                                  (("3"
                                                                                                                                    (lemma
                                                                                                                                     "expt_pos")
                                                                                                                                    (("3"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "k"
                                                                                                                                       "x")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("4"
                                                                                                                                (skeep)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "NOT (LAMBDA (s: (LAMBDA (r: real): r > 0)):
                  (LAMBDA (x: real):
                     IF x <= 0 THEN 0
                     ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k
                     ENDIF)
                      (s)) = Lambda(x:real | x>0): (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (decompose-equality
                                                                                                                               1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "deriv_e_sin_cos1xk")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "c"
                                                                                                                                   "d"
                                                                                                                                   "n3"
                                                                                                                                   "n4"
                                                                                                                                   "k")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -2
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "exp_sin_p_cos_p_conv")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "c_1"
                                                                                                                                             "d_1"
                                                                                                                                             "n3_1"
                                                                                                                                             "n4_1"
                                                                                                                                             "k+2")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("3"
                                                                                                                              (hide
                                                                                                                               -)
                                                                                                                              (("3"
                                                                                                                                (skeep)
                                                                                                                                (("3"
                                                                                                                                  (lemma
                                                                                                                                   "expt_pos")
                                                                                                                                  (("3"
                                                                                                                                    (inst?)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("4"
                                                                                                                              (hide
                                                                                                                               -)
                                                                                                                              (("4"
                                                                                                                                (skeep)
                                                                                                                                (("4"
                                                                                                                                  (lemma
                                                                                                                                   "expt_pos")
                                                                                                                                  (("4"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("5"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("5"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("5"
                                                                                                                                (skeep)
                                                                                                                                (("5"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide
                                                                                                                           -)
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "exp_lim")
                                                                                                                            (("3"
                                                                                                                              (case
                                                                                                                               "NOT ( (LAMBDA (s: (LAMBDA (r: real): r > 0)):
                  (LAMBDA (x: real):
                     IF x <= 0 THEN 0
                     ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k
                     ENDIF)
                      (s))) = (LAMBDA (x: real | x > 0):
              exp(-1 / x) *
               (sin(1 / x) * polynomial(c, n3)(x) +
                 cos(1 / x) * polynomial(d, n4)(x))
               / x ^ (k))")
                                                                                                                              (("1"
                                                                                                                                (decompose-equality
                                                                                                                                 1)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "deriv_e_sin_cos1xk")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "c"
                                                                                                                                         "d"
                                                                                                                                         "n3"
                                                                                                                                         "n4"
                                                                                                                                         "k")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (skeep)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -4
                                                                                                                                                 "c_1"
                                                                                                                                                 "d_1"
                                                                                                                                                 "n3_1"
                                                                                                                                                 "n4_1"
                                                                                                                                                 "k+2")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -4)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "convergence_equiv[(Lambda(r:real): r<0)]")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "0"
                                                                                                                                                                 "(LAMBDA (x: (LAMBDA (r: real): r < 0)): 0)"
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "convergence"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "convergence"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "adh"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (skeep)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 1
                                                                                                                                                                                 "-e!1/2")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               1
                                                                                                                                                                               "1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "not_one_element?"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "x-1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "deriv_domain?"
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "-e!1/2")
                                                                                                                                                                (("3"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("3"
                                                                                                                                  (hide
                                                                                                                                   -)
                                                                                                                                  (("3"
                                                                                                                                    (skeep)
                                                                                                                                    (("3"
                                                                                                                                      (lemma
                                                                                                                                       "expt_pos")
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("4"
                                                                                                                                  (hide
                                                                                                                                   -)
                                                                                                                                  (("4"
                                                                                                                                    (skeep)
                                                                                                                                    (("4"
                                                                                                                                      (assert)
                                                                                                                                      (("4"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos")
                                                                                                                                        (("4"
                                                                                                                                          (inst?)
                                                                                                                                          (("4"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("5"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("5"
                                                                                                                                  (skeep)
                                                                                                                                  (("5"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (hide
                                                                                                                           -)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "continuous?"
                                                                                                                             1)
                                                                                                                            (("4"
                                                                                                                              (skeep)
                                                                                                                              (("4"
                                                                                                                                (case
                                                                                                                                 "x0<0")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "continuous?"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "abs(x0)/2")
                                                                                                                                      (("1"
                                                                                                                                        (skeep)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "deriv_e_sin_cos1xk")
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "derivable_continuous[(LAMBDA (r: real): r > 0)]")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "c"
                                                                                                                                       "d"
                                                                                                                                       "n3"
                                                                                                                                       "n4"
                                                                                                                                       "k")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "x0>0")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -2
                                                                                                                                             " (LAMBDA (x: real | x > 0):
             (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x) +
               polynomial(d, n4)(x) * cos(1 / x) * exp(-1 / x))
              / x ^ k)"
                                                                                                                                             "x0")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "derivable?"
                                                                                                                                                 -3)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -3
                                                                                                                                                   "x0")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -3
                                                                                                                                                       -4)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "continuous?")
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -2
                                                                                                                                                             "epsilon")
                                                                                                                                                            (("1"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 2
                                                                                                                                                                 "min(delta,x0)/2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "x_1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "x0=0")
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "exp_lim")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "c"
                                                                                                                                                   "d"
                                                                                                                                                   "n3"
                                                                                                                                                   "n4"
                                                                                                                                                   "k")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "lim_fun_def[ (LAMBDA (r: real): r > 0)]")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -2
                                                                                                                                                               -4
                                                                                                                                                               -5
                                                                                                                                                               -6)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "convergence"
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "continuous?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "convergence"
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (skeep)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -2
                                                                                                                                                                           "epsilon")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               3
                                                                                                                                                                               "delta")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "x_1<=0")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -2
                                                                                                                                                                                       "x_1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "fullset"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         4)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           -)
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "expt_pos")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "deriv_domain?"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "e!1/2")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2)
                                                                                            (("3"
                                                                                              (hide
                                                                                               -)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "not_one_element?"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (skeep)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "x+1")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "deriv_domain?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "-e!1/2")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           -)
                                                                                          (("3"
                                                                                            (hide
                                                                                             2)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "not_one_element?"
                                                                                               1)
                                                                                              (("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "x-1")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "deriv_sm_n")
            (("2" (inst -1 "1+j")
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (expand "restrict")
                    (("2" (inst 1 "c" "d" "n3" "n4" "k")
                      (("2"
                        (lemma
                         "nderiv_subtype[real,(Lambda(r:real): r>0)]")
                        (("2"
                          (lemma
                           "nderiv_subtype[real,(Lambda(r:real): r<0)]")
                          (("2" (inst -1 "1+j" "sm")
                            (("2" (assert)
                              (("2"
                                (inst -2 "1+j" "sm")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "deriv_domain?[(LAMBDA (r: real): r < 0)] AND
       not_one_element?[(LAMBDA (r: real): r < 0)]")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (case "x!1>0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -5)
                                                (("1"
                                                  (decompose-equality
                                                   -5)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (decompose-equality
                                                       -2)
                                                      (("1"
                                                        (inst -1 "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (decompose-equality
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "deriv_domain?"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "e!1/2")
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -)
                                                  (("3"
                                                    (expand
                                                     "not_one_element?"
                                                     1)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst 1 "x+1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "x!1<0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   -4)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (replace -1 2 rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (lemma
                                                             "sm_derivable_init_le0")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1+j")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "NOT x!1=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (lemma
                                                   "deriv_left_right_point_deriv")
                                                  (("2"
                                                    (lemma
                                                     "nderiv_derivable_aux")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "sm"
                                                       "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (decompose-equality
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "0"
                                                                 "nderiv(j, sm)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "deriv"
                                                                           3)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "restrict")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -12
                                                                                     3)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT  (LAMBDA (s: (LAMBDA (r: real): r < 0)):
                 (LAMBDA (x: real):
                    IF x <= 0 THEN 0
                    ELSE (polynomial(c!1, n3!1)(x) * exp(-1 / x) *
                           sin(1 / x)
                           +
                           polynomial(d!1, n4!1)(x) * cos(1 / x) *
                            exp(-1 / x))
                          / x ^ k!1
                    ENDIF)
                     (s)) = Lambda(x:real | x<0): 0")
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "0")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "lim_fun_def[ (LAMBDA (r: real): r < 0)]")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "convergence"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "convergence"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "adh"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "-e!1/2")
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "1")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         -)
                                                                                        (("3"
                                                                                          (hide
                                                                                           4)
                                                                                          (("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "expt_pos")
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide
                                                                                         -)
                                                                                        (("4"
                                                                                          (hide
                                                                                           4)
                                                                                          (("4"
                                                                                            (skeep)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "nderiv_derivable[(LAMBDA (r: real): r < 0)]")
                                                                        (("2"
                                                                          (lemma
                                                                           "sm_derivable_init_le0")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "1+j")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lemma
                                                                                 "nderiv_derivable[(LAMBDA (r: real): r < 0)]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "sm"
                                                                                   "j"
                                                                                   "j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "restrict")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "nderiv(j, LAMBDA (s: (LAMBDA (r: real): r < 0)): sm(s)) =  LAMBDA (s: (LAMBDA (r: real): r < 0)): nderiv(j, sm)(s)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "nderiv_subtype[real,(Lambda(r:real): r<0)]")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "j"
                                                                                               "sm")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "sm_derivable_init_le0")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "j")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "restrict")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep
                                                                         -11)
                                                                        (("3"
                                                                          (replace
                                                                           -11)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (hide
                                                                               4)
                                                                              (("3"
                                                                                (hide
                                                                                 -)
                                                                                (("3"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "deriv_e_sin_cos1xk")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "c!1"
                                                                                       "d!1"
                                                                                       "n3!1"
                                                                                       "n4!1"
                                                                                       "k!1")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (replace
                                                                           -11)
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (hide
                                                                               4)
                                                                              (("4"
                                                                                (hide
                                                                                 -)
                                                                                (("4"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (lemma
                                                                                       "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                      (("4"
                                                                                        (inst?)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "convergent?"
                                                                                               1)
                                                                                              (("4"
                                                                                                (inst
                                                                                                 1
                                                                                                 "0")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "convergence"
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "convergence"
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "adh"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "-e!1/2")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "1")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (replace
                                                                           -11)
                                                                          (("5"
                                                                            (hide
                                                                             -)
                                                                            (("5"
                                                                              (hide
                                                                               4)
                                                                              (("5"
                                                                                (expand
                                                                                 "restrict")
                                                                                (("5"
                                                                                  (assert)
                                                                                  (("5"
                                                                                    (lemma
                                                                                     "deriv_e_sin_cos1xk")
                                                                                    (("5"
                                                                                      (inst
                                                                                       -1
                                                                                       "c!1"
                                                                                       "d!1"
                                                                                       "n3!1"
                                                                                       "n4!1"
                                                                                       "k!1")
                                                                                      (("5"
                                                                                        (flatten)
                                                                                        (("5"
                                                                                          (skeep)
                                                                                          (("5"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("5"
                                                                                              (lemma
                                                                                               "exp_sin_p_cos_p_conv")
                                                                                              (("5"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "c!2"
                                                                                                 "d!2"
                                                                                                 "n3!2"
                                                                                                 "n4!2"
                                                                                                 "k!1+2")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (replace
                                                                           -11)
                                                                          (("6"
                                                                            (hide
                                                                             -)
                                                                            (("6"
                                                                              (assert)
                                                                              (("6"
                                                                                (hide
                                                                                 4)
                                                                                (("6"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("6"
                                                                                    (assert)
                                                                                    (("6"
                                                                                      (lemma
                                                                                       "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                      (("6"
                                                                                        (inst?)
                                                                                        (("6"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("6"
                                                                                            (lemma
                                                                                             "lim_fun_def[ (LAMBDA (r: real): r < 0)]")
                                                                                            (("6"
                                                                                              (inst
                                                                                               -1
                                                                                               "(LAMBDA (x: (LAMBDA (r: real): r < 0)): 0)"
                                                                                               "0"
                                                                                               "0")
                                                                                              (("6"
                                                                                                (assert)
                                                                                                (("6"
                                                                                                  (flatten)
                                                                                                  (("6"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "deriv_e_sin_cos1xk")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "c!1"
                                                                                                           "d!1"
                                                                                                           "n3!1"
                                                                                                           "n4!1"
                                                                                                           "k!1")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "exp_lim")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "c!2"
                                                                                                                     "d!2"
                                                                                                                     "n3!2"
                                                                                                                     "n4!2"
                                                                                                                     "k!1+2")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "convergence")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "convergence"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "adh"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "-e!1/2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "1")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         -8)
                                                                        (("7"
                                                                          (lemma
                                                                           "nderiv_derivable_aux")
                                                                          (("7"
                                                                            (lemma
                                                                             "nderiv_derivable")
                                                                            (("7"
                                                                              (inst
                                                                               -1
                                                                               "sm"
                                                                               "j"
                                                                               "j")
                                                                              (("7"
                                                                                (assert)
                                                                                (("7"
                                                                                  (lemma
                                                                                   "derivable_continuous[real]")
                                                                                  (("7"
                                                                                    (expand
                                                                                     "continuous?"
                                                                                     1)
                                                                                    (("7"
                                                                                      (expand
                                                                                       "derivable?"
                                                                                       -2)
                                                                                      (("7"
                                                                                        (skeep)
                                                                                        (("7"
                                                                                          (inst
                                                                                           -2
                                                                                           "x0")
                                                                                          (("7"
                                                                                            (inst
                                                                                             -1
                                                                                             "nderiv(j,sm)"
                                                                                             "x0")
                                                                                            (("7"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma "expt_pos")
                                              (("2"
                                                (inst?)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (expand "deriv_domain?" 1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "-e!1/2")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "not_one_element?"
                                             1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "x-1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (skeep)
          (("4" (lemma "expt_pos")
            (("4" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep 2)
      (("5" (hide 1)
        (("5" (skeep)
          (("5" (lemma "expt_pos")
            (("5" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep) (("6" (skeep) (("6" (assert) nil nil)) nil)) nil)
     ("7" (skeep*) (("7" (assert) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (deriv_left_right_point_deriv formula-decl nil smooth_not_analytic
     nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (k!1 skolem-const-decl "nat" smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (nderiv_derivable formula-decl nil nth_derivatives analysis)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sm_derivable_init_le0 formula-decl nil smooth_not_analytic nil)
    (restrict const-decl "R" restrict nil)
    (nderiv_derivable_aux formula-decl nil nth_derivatives analysis)
    (x_1 skolem-const-decl "real" smooth_not_analytic nil)
    (delta skolem-const-decl "posreal" smooth_not_analytic nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (derivable? const-decl "bool" derivatives analysis)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x0 skolem-const-decl "real" smooth_not_analytic nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (convergence_equiv formula-decl nil lim_of_functions analysis)
    (exp_lim formula-decl nil smooth_not_analytic nil)
    (exp_sin_p_cos_p_conv formula-decl nil smooth_not_analytic nil)
    (deriv_e_sin_cos1xk formula-decl nil smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (x skolem-const-decl "real" smooth_not_analytic nil)
    (expt_pos formula-decl nil exponentiation nil)
    (k skolem-const-decl "nat" smooth_not_analytic nil)
    (deriv_const_fun formula-decl nil derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (nderiv_subtype formula-decl nil nth_derivative_subtype nil)
    (< const-decl "bool" reals nil)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (deriv_left_right_point formula-decl nil smooth_not_analytic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (deriv_sm_n formula-decl nil smooth_not_analytic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (derivable_nth_split formula-decl nil smooth_not_analytic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cos const-decl "real" sincos_def trig)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sin const-decl "real" sincos_def trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (sm const-decl "real" smooth_not_analytic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (smooth_not_analytic 0
  (smooth_not_analytic-1 nil 3813015720
   ("" (case "NOT smooth?(sm)")
    (("1" (assert)
      (("1" (hide 2)
        (("1" (expand "smooth?" 1)
          (("1" (lemma "sm_n_derivable")
            (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "sm_n_derivable")
      (("2" (assert)
        (("2" (hide -2)
          (("2" (expand "analytic?" -2)
            (("2" (skeep)
              (("2" (expand "analytic_parts?" -2)
                (("2" (case "EXISTS(x:real | abs(x) < M): sm(x) /= 0")
                  (("1" (skeep)
                    (("1" (inst -2 "x")
                      (("1" (flatten)
                        (("1" (expand "inf_sum" -3)
                          (("1" (expand "powerseq" -3)
                            (("1" (lemma "analytic_term")
                              (("1"
                                (inst -1 "sm" "0" "M" "a")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (lemma "zero_series_limit")
                                      (("1"
                                        (case
                                         "(LAMBDA (k: nat) -> real: a(k) * x ^ k) = (LAMBDA(n:nat): 0)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (inst -2 "x!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "restrict"
                                                   -2)
                                                  (("2"
                                                    (inst -3 "x!1")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (decompose-equality
                                                           -4)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "nderiv_subtype[real, (ball(0, M))]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1"
                                                                   "sm")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "ball_dd")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "M"
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "ball_noe")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "M"
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -3)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             -6)
                                                                                            (("1"
                                                                                              (div-by
                                                                                               -6
                                                                                               "factorial(x!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (lemma
                                                               "expt_pos_aux")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "k"
                                                                 "x1!1")
                                                                (("2"
                                                                  (expand
                                                                   "^")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "analytic_parts?" 1)
                                      (("2"
                                        (reveal -)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand "sm" 1)
                      (("2" (lemma "sin_pi2 ")
                        (("2" (lemma "sin_period")
                          (("2" (typepred "M")
                            (("2"
                              (case "(EXISTS(a:posreal):  1/a > 1/M AND sin(1/a) = 1)")
                              (("1"
                                (skeep)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 1 "a!1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "abs" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (mult-by -1 "a!1")
                                          (("2"
                                            (mult-by -1 "M")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "sin_k_pi2")
                                  (("2"
                                    (case
                                     "FORALL(C:posreal): EXISTS( c:real): c> C AND sin(c)=1")
                                    (("1"
                                      (inst -1 "1/M")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "1/c")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "FORALL(x:real): x>0 IMPLIES 1/x>0")
                                              (("1"
                                                (inst -1 "c")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (mult-by 1 "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "C <= ceiling(C)")
                                          (("1"
                                            (inst
                                             -5
                                             "pi/2"
                                             "ceiling(C)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "pi / 2 + 2 * (ceiling(C) * pi)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT ceiling(C)<=2 * (ceiling(C) * pi)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "pi_bound")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "pi_lb_new")
                                                              (("1"
                                                                (case
                                                                 "NOT pi>=1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "NOT ceiling(C) <= 2* ceiling(C)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "NOT 2 * ceiling(C) <=2 * (ceiling(C) * pi)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "FORALL(a:posreal,b:real): b>=1 IMPLIES a <= a*b")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "2*ceiling(C)"
                                                                             "pi")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (div-by
                                                                               1
                                                                               "a!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (inf_sum const-decl "real" series series)
    (analytic_term formula-decl nil analytic_def nil)
    (zero_series_limit formula-decl nil series series)
    (restrict const-decl "R" restrict nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def trig)
    (sin const-decl "real" sincos_def trig)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball_dd formula-decl nil analytic_def nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (ball_noe formula-decl nil analytic_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (ball const-decl "bool" analytic_def nil)
    (nderiv_subtype formula-decl nil nth_derivative_subtype nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sin_period formula-decl nil sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (M skolem-const-decl "posreal" smooth_not_analytic nil)
    (a!1 skolem-const-decl "posreal" smooth_not_analytic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (sin_k_pi2 formula-decl nil sincos trig)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (pi_lb_new const-decl "posreal" pi_def trig)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (pi_bound judgement-tcc nil pi_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (c skolem-const-decl "real" smooth_not_analytic nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sin_pi2 formula-decl nil sincos trig)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sm_n_derivable formula-decl nil smooth_not_analytic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (smooth? const-decl "bool" smooth_not_analytic nil)
    (sm const-decl "real" smooth_not_analytic nil))
   shostak))
 (psmxn_TCC1 0
  (psmxn_TCC1-1 nil 3813310680
   ("" (assert)
    ((""
      (inst 1
       "Lambda(i:nat): choose[real]({r:real | r>0 AND sm(r)>0 AND r< 1/(1+i)})")
      (("1" (skeep)
        (("1"
          (name "ch"
                "choose[real]({r: real | r > 0 AND sm(r) > 0 AND r < 1 / (1 + i)})")
          (("1" (typepred "ch") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?" 1)
              (("2" (expand "empty?" -1)
                (("2" (expand "sm" -1 1)
                  (("2" (assert)
                    (("2" (lemma "sin_k_pi2")
                      (("2" (typepred "pi")
                        (("2" (assert)
                          (("2" (inst -8 "2*(i+1)")
                            (("2"
                              (case "FORALL(k:nat): (-1)^(2*k) = 1")
                              (("1"
                                (inst -1 "i+1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -10
                                       "1/ (pi / 2 + 2 * ((1+i) * pi))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (mult-by
                                             1
                                             "pi / 2 + 2 * ((1+i) * pi)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (case
                                             "(pi / 2 + 2 * ((1+i) * pi)) > (1+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (mult-by 1 "(1+i)")
                                                (("1"
                                                  (mult-by
                                                   1
                                                   "(pi / 2 + 2 * ((i+1) * pi))")
                                                  (("1"
                                                    (case
                                                     "NOT 1 / (pi / 2 + 2 * ((i+1) * pi)) * (1 + i) * (pi / 2 + 2 * ((i+1) * pi)) = (1+i)")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (case
                                                         "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           " (pi / 2 + 2 * ((i+1) * pi))"
                                                           "(1+i)")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "pi / 2>1")
                                                  (("1"
                                                    (case
                                                     "2 * ((i+1) * pi) > i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (case
                                                         "NOT i+1 > i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT 2*pi*(i) >= i ")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "i=0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (div-by
                                                                 2
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "2*pi*(i +1) > 2*pi* i")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (induct "k")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (lemma "expt_plus")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "2*j" "2" "-1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2 -1)
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "nonempty?" 1)
          (("2" (expand "empty?" -1)
            (("2" (expand "sm" -1 1)
              (("2" (assert)
                (("2" (lemma "sin_k_pi2")
                  (("2" (typepred "pi")
                    (("2" (assert)
                      (("2" (inst -8 "2*(i+1)")
                        (("2" (case "FORALL(k:nat): (-1)^(2*k) = 1")
                          (("1" (inst -1 "i+1")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -10
                                   "1/ (pi / 2 + 2 * ((1+i) * pi))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (mult-by
                                         1
                                         "pi / 2 + 2 * ((1+i) * pi)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (case
                                         "(pi / 2 + 2 * ((1+i) * pi)) > (1+i)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by 1 "(1+i)")
                                            (("1"
                                              (mult-by
                                               1
                                               "(pi / 2 + 2 * ((i+1) * pi))")
                                              (("1"
                                                (case
                                                 "NOT 1 / (pi / 2 + 2 * ((i+1) * pi)) * (1 + i) * (pi / 2 + 2 * ((i+1) * pi)) = (1+i)")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (case
                                                     "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       " (pi / 2 + 2 * ((i+1) * pi))"
                                                       "(1+i)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "pi / 2>1")
                                              (("1"
                                                (case
                                                 "2 * ((i+1) * pi) > i")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "NOT i+1 > i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT 2*pi*(i) >= i ")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case "i=0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (div-by
                                                             2
                                                             "i")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "2*pi*(i +1) > 2*pi* i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -)
                            (("2" (induct "k")
                              (("1" (assert) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "2*j" "2" "-1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2 -1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (hide -)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_k_pi2 formula-decl nil sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pi_ub_new const-decl "posreal" pi_def trig)
    (pi_lb_new const-decl "posreal" pi_def trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (psmxn existence ""
    "[i: naturalnumbers.nat -> {r: real_types.posreal | booleans.AND(reals.>(smooth_not_analytic.sm(r), 0), reals.<(r, number_fields./(1, (number_fields.+)(1, i))))}]")))
 (nsmxn_TCC1 0
  (nsmxn_TCC1-1 nil 3813310680
   ("" (assert)
    ((""
      (inst 1
       "Lambda(i:nat): choose[real]({r:real | r>0 AND sm(r) < 0 AND r< 1/(1+i)})")
      (("1" (skeep)
        (("1"
          (name "ch"
                "choose[real]({r: real | r > 0 AND sm(r) < 0 AND r < 1 / (1 + i)})")
          (("1" (typepred "ch") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?" 1)
              (("2" (expand "empty?" -1)
                (("2" (expand "sm" -1 1)
                  (("2" (assert)
                    (("2" (lemma "sin_k_pi2")
                      (("2" (typepred "pi")
                        (("2" (assert)
                          (("2" (inst -8 "2*(i+1)+1")
                            (("2"
                              (case "FORALL(k:nat): (-1)^(2*k+1) = -1")
                              (("1"
                                (inst -1 "i+1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -10
                                       "1/ (pi / 2 + 2 * (i * pi) + 3 * pi)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (mult-by
                                             1
                                             "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (case
                                             " (pi / 2 + 2 * (i * pi) + 3 * pi) > (1+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (mult-by 1 "(1+i)")
                                                (("1"
                                                  (mult-by
                                                   1
                                                   "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                                  (("1"
                                                    (case
                                                     "NOT 1 / (pi / 2 + 2 * (i * pi) + 3 * pi) * (1 + i) * (pi / 2 + 2 * (i * pi) + 3 * pi) = (1+i)")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (case
                                                         "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(pi / 2 + 2 * (i * pi) + 3 * pi)"
                                                           "(1+i)")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "pi / 2>1")
                                                  (("1"
                                                    (case
                                                     "2 * (i * pi) >= i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (case "i=0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (div-by
                                                           2
                                                           "i")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (induct "k")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (lemma "expt_plus")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "1+2*j" "2" "-1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2 -1)
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "nonempty?" 1)
          (("2" (expand "empty?" -1)
            (("2" (expand "sm" -1 1)
              (("2" (assert)
                (("2" (lemma "sin_k_pi2")
                  (("2" (typepred "pi")
                    (("2" (assert)
                      (("2" (inst -8 "2*(i+1)+1")
                        (("2" (case "FORALL(k:nat): (-1)^(2*k+1) = -1")
                          (("1" (inst -1 "i+1")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -10
                                   "1/ (pi / 2 + 2 * (i * pi) + 3 * pi)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (mult-by
                                         1
                                         "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (case
                                         " (pi / 2 + 2 * (i * pi) + 3 * pi) > (1+i)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by 1 "(1+i)")
                                            (("1"
                                              (mult-by
                                               1
                                               "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                              (("1"
                                                (case
                                                 "NOT 1 / (pi / 2 + 2 * (i * pi) + 3 * pi) * (1 + i) * (pi / 2 + 2 * (i * pi) + 3 * pi) = (1+i)")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (case
                                                     "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(pi / 2 + 2 * (i * pi) + 3 * pi)"
                                                       "(1+i)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "pi / 2>1")
                                              (("1"
                                                (case
                                                 "2 * (i * pi) >= i")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case "i=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (div-by 2 "i")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -)
                            (("2" (induct "k")
                              (("1" (assert) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "1+2*j" "2" "-1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2 -1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (hide -)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_k_pi2 formula-decl nil sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pi_ub_new const-decl "posreal" pi_def trig)
    (pi_lb_new const-decl "posreal" pi_def trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nsmxn existence ""
    "[i: naturalnumbers.nat -> {r: real_types.posreal | booleans.AND(reals.<(smooth_not_analytic.sm(r), 0), reals.<(r, number_fields./(1, (number_fields.+)(1, i))))}]")))
 (nsmxn_conv_0 0
  (nsmxn_conv_0-1 nil 3813316626
   ("" (expand "convergence" 1 1)
    (("" (skeep)
      ((""
        (case "FORALL(epsilon:posreal): EXISTS(i:nat): 1/(i+1) < epsilon")
        (("1" (inst -1 "epsilon")
          (("1" (skeep)
            (("1" (inst 1 "i")
              (("1" (skeep)
                (("1" (typepred "nsmxn(i_1)")
                  (("1" (assert)
                    (("1" (expand "abs")
                      (("1" (case "1/(1+i) >= 1 / (1+i_1)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (mult-by 1 "(1+i_1)")
                            (("2" (mult-by 1 "(1+i)")
                              (("2"
                                (case
                                 "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                (("1"
                                  (inst -1 "(1+i)" "(1+i_1)")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (case "NOT epsilon!1 <= max(ceiling(epsilon!1),ceiling(1/epsilon!1))")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2"
                  (inst 1
                   "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                  (("2" (assert)
                    (("2"
                      (name "m"
                            "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                      (("2" (replace -1)
                        (("2" (case "NOT  1/epsilon!1 < 1+m")
                          (("1" (assert) nil nil)
                           ("2" (mult-by -1 "epsilon!1")
                            (("2" (div-by -1 "(1+m)") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nsmxn const-decl "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (psmxn_conv_0 0
  (psmxn_conv_0-1 nil 3813317118
   ("" (expand "convergence" 1 1)
    (("" (skeep)
      ((""
        (case "FORALL(epsilon:posreal): EXISTS(i:nat): 1/(i+1) < epsilon")
        (("1" (inst -1 "epsilon")
          (("1" (skeep)
            (("1" (inst 1 "i")
              (("1" (skeep)
                (("1" (typepred "psmxn(i_1)")
                  (("1" (assert)
                    (("1" (expand "abs")
                      (("1" (case "1/(1+i) >= 1 / (1+i_1)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (mult-by 1 "(1+i_1)")
                            (("2" (mult-by 1 "(1+i)")
                              (("2"
                                (case
                                 "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                (("1"
                                  (inst -1 "(1+i)" "(1+i_1)")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (case "NOT epsilon!1 <= max(ceiling(epsilon!1),ceiling(1/epsilon!1))")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2"
                  (inst 1
                   "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                  (("2" (assert)
                    (("2"
                      (name "m"
                            "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                      (("2" (replace -1)
                        (("2" (case "NOT  1/epsilon!1 < 1+m")
                          (("1" (assert) nil nil)
                           ("2" (mult-by -1 "epsilon!1")
                            (("2" (div-by -1 "(1+m)") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (psmxn const-decl "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (p1_TCC1 0
  (p1_TCC1-1 nil 3809689113
   ("" (expand "mv_standard_form?" 1 1)
    (("" (split 1)
      (("1" (propax) nil nil)
       ("2" (expand "minlength?" 1 1)
        (("2" (split 1)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (split 1)
                  (("1" (expand "Unif?" 1)
                    (("1" (skeep)
                      (("1" (typepred "i" "j")
                        (("1" (expand "length" -)
                          (("1" (expand "length" -)
                            (("1" (expand "nth")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 "0")
                    (("2" (expand "nth") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "allnonzero?" 1 1)
            (("3" (split 1)
              (("1" (skeep)
                (("1" (expand "nth" -1)
                  (("1" (grind)
                    (("1" (typepred "i")
                      (("1" (expand "length" -1)
                        (("1" (expand "length" -1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("4" (expand "is_sorted?" 1)
            (("4" (skeep)
              (("4" (expand "length" -1)
                (("4" (expand "length" -1) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand "simplified?" 1)
            (("5" (split 1)
              (("1" (propax) nil nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last def-decl "real" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil))
   nil
   (p1 subtype "(: (# C := 1, alpha := (: 1 :) #) :)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (SA_TCC1 0
  (SA_TCC1-1 nil 3809689113
   ("" (expand "meet_max" 1) (("" (grind) nil nil)) nil)
   ((p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (atom_max def-decl "nat" semi_algebraic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (meet_max def-decl "nat" semi_algebraic nil))
   nil
   (SA subtype "1"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: (: smooth_not_analytic.atom1 :) :)))}")))
 (non_empt_bound_sm_TCC1 0
  (non_empt_bound_sm_TCC1-1 nil 3813313818 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (non_empt_bound_sm subtype
    "(: smooth_not_analytic.sm(smooth_not_analytic.xx) :)"
    "matrices.VectorN(1)")))
 (non_empt_bound_sm 0
  (non_empt_bound_sm-1 nil 3813313939
   ("" (split 1)
    (("1" (expand "nonempty?" 1)
      (("1" (expand "empty?" -1)
        (("1" (inst -1 "psmxn(0)")
          (("1" (typepred "psmxn(0)")
            (("1" (expand "member" 1)
              (("1" (expand "SA" -5)
                (("1" (expand "semi_alg" -5)
                  (("1" (expand "atom1")
                    (("1" (expand "join" -5)
                      (("1" (expand "join" -5)
                        (("1" (expand "meet" -5)
                          (("1" (expand "meet" -5)
                            (("1" (expand "atom_eval" -5)
                              (("1"
                                (expand "full_eval" -5)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "p1")
                                    (("1"
                                      (expand "eval" -5)
                                      (("1"
                                        (expand "eval" -5)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "bounded_below?" 1)
      (("2" (inst 1 "-1")
        (("2" (expand "lower_bound?" 1)
          (("2" (skeep)
            (("2" (grind)
              (("2" (typepred "s") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (set type-eq-decl nil sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (psmxn const-decl "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (member const-decl "bool" sets nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (join def-decl "bool" semi_algebraic nil)
    (meet def-decl "bool" semi_algebraic nil)
    (atom_eval const-decl "bool" semi_algebraic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (add_lists def-decl "list[nat]" list_lemmas nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (SA const-decl "set[VectorN(1)]" smooth_not_analytic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (inf_0_sm_TCC1 0
  (inf_0_sm_TCC1-1 nil 3813314165
   ("" (lemma "non_empt_bound_sm") (("" (propax) nil nil)) nil)
   ((non_empt_bound_sm formula-decl nil smooth_not_analytic nil)) nil
   (inf_0_sm subtype
    "{xx: reals.real | (booleans.NOT)(smooth_not_analytic.SA((: smooth_not_analytic.sm(xx) :)))}"
    "{S: sets[real].set | booleans.AND(sets[real].nonempty?(S), bounded_real_defs.bounded_below?(S))}")))
 (inf_0_sm 0
  (inf_0_sm-1 nil 3813314362
   ("" (expand "inf" 1)
    (("" (lemma "glb_lem")
      (("" (inst -1 "{xx: real | NOT SA((: sm(xx) :))}" "0")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "greatest_lower_bound?" 1)
              (("1" (split 1)
                (("1" (expand "lower_bound?" 1)
                  (("1" (skeep)
                    (("1" (typepred "s") (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "lower_bound?" -1)
                    (("2" (case "NOT EXISTS(i:posnat): (1/i) < y")
                      (("1" (inst 1 "ceiling(1/y)+1")
                        (("1" (assert)
                          (("1" (mult-by 1 "ceiling(1/y)+1")
                            (("1" (assert)
                              (("1"
                                (case "NOT 1/y <= ceiling(1/y)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (mult-by -1 "y")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred " ceiling(1/y)")
                              (("2"
                                (assert)
                                (("2"
                                  (case "NOT y>0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (case "1/y >0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (mult-by 1 "y")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred " ceiling(1/y)")
                            (("2" (case "NOT y>0")
                              (("1"
                                (case "NOT y>0")
                                (("1" (assert) nil nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (case "1/y >0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (mult-by 1 "y")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil)
                       ("2" (case "NOT y>0")
                        (("1" (assert) nil nil)
                         ("2" (skeep)
                          (("2" (inst -3 "psmxn(i)")
                            (("1" (assert)
                              (("1"
                                (typepred " nsmxn(i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "1/(1+i) < 1/i")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (mult-by 1 "i")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (mult-by 1 "1+i")
                                            (("2"
                                              (case
                                               " 1 / (1 + i) * i * (1 + i) = i")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                                  (("1"
                                                    (inst -1 "1+i" "i")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "psmxn(i)")
                                (("2"
                                  (expand "SA" -5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "non_empt_bound_sm") (("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((glb_lem formula-decl nil bounded_real_defs nil)
    (non_empt_bound_sm formula-decl nil smooth_not_analytic nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "real" smooth_not_analytic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nsmxn const-decl "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (i skolem-const-decl "posnat" smooth_not_analytic nil)
    (psmxn const-decl "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (join def-decl "bool" semi_algebraic nil)
    (meet def-decl "bool" semi_algebraic nil)
    (atom_eval const-decl "bool" semi_algebraic nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (add_lists def-decl "list[nat]" list_lemmas nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (^ def-decl "list[T]" more_list_props structures)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (SA const-decl "set[VectorN(1)]" smooth_not_analytic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (inf const-decl "real" smooth_not_analytic nil))
   shostak))
 (not_clean_break_TCC1 0
  (not_clean_break_TCC2-1 nil 3809689113 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (convergence const-decl "bool" convergence_sequences analysis)
    (inf const-decl "real" smooth_not_analytic nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (SA const-decl "set[VectorN(1)]" smooth_not_analytic nil)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil))
   nil
   (not_clean_break subtype
    "(: smooth_not_analytic.sm(smooth_not_analytic.xn(smooth_not_analytic.i)) :)"
    "matrices.VectorN(1)")))
 (not_clean_break_TCC2 0
  (not_clean_break_TCC3-1 nil 3813310680 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (convergence const-decl "bool" convergence_sequences analysis)
    (inf const-decl "real" smooth_not_analytic nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (SA const-decl "set[VectorN(1)]" smooth_not_analytic nil)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil))
   nil
   (not_clean_break subtype
    "(: smooth_not_analytic.sm(smooth_not_analytic.yn(smooth_not_analytic.i)) :)"
    "matrices.VectorN(1)")))
 (not_clean_break 0
  (not_clean_break-1 nil 3813314104
   ("" (lemma "nsmxn_conv_0")
    (("" (lemma "psmxn_conv_0")
      (("" (lemma "inf_0_sm")
        (("" (assert)
          (("" (inst 1 "nsmxn" "psmxn")
            (("" (assert)
              (("" (skeep)
                (("" (assert)
                  (("" (typepred "nsmxn(i)")
                    (("" (assert)
                      (("" (typepred "psmxn(i)")
                        (("" (assert) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((psmxn_conv_0 formula-decl nil smooth_not_analytic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (p1 const-decl "(mv_standard_form?)" smooth_not_analytic nil)
    (atom1 const-decl "atomic_poly" smooth_not_analytic nil)
    (SA const-decl "set[VectorN(1)]" smooth_not_analytic nil)
    (length def-decl "nat" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (add_lists def-decl "list[nat]" list_lemmas nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (eval def-decl "MultPoly" eval_MultPoly nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (atom_eval const-decl "bool" semi_algebraic nil)
    (meet def-decl "bool" semi_algebraic nil)
    (join def-decl "bool" semi_algebraic nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (inf const-decl "real" smooth_not_analytic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (psmxn const-decl "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (nsmxn const-decl "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     smooth_not_analytic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sm const-decl "real" smooth_not_analytic nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_0_sm formula-decl nil smooth_not_analytic nil)
    (nsmxn_conv_0 formula-decl nil smooth_not_analytic nil))
   shostak)))

