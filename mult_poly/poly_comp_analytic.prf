(poly_comp_analytic
 (e_mon_TCC1 0
  (e_mon_TCC1-1 nil 3809679803
   ("" (skeep)
    (("" (assert) (("" (typepred "vals") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (e_mon subtype "poly_comp_analytic.vals" "(list_adt[real].cons?)")))
 (e_mon_TCC2 0
  (e_mon_TCC2-1 nil 3809679803 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil))
   nil
   (e_mon subtype "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (e_mon_TCC3 0
  (e_mon_TCC3-1 nil 3810304434 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (e_mon subtype "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.vals) /= 0, reals.>=(i, 0))}")))
 (e_mon_TCC4 0
  (e_mon_TCC4-1 nil 3809679803
   ("" (skeep)
    (("" (typepred "vals")
      (("" (expand "length" -2)
        (("" (assert)
          (("" (lift-if -2)
            (("" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (e_mon subtype "list_adt[real].cdr(poly_comp_analytic.vals)"
    "{l: list_adt[real].list | list_props[real].length(l) = list_props[nat].length(list_adt[nat].cdr(poly_comp_analytic.m`alpha))}")))
 (e_mon_TCC5 0
  (e_mon_TCC5-1 nil 3809679803 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (e_mon termination
    "poly_comp_analytic.e_mon((# C := poly_comp_analytic.m`C, alpha := list_adt[nat].cdr(poly_comp_analytic.m`alpha) #))"
    "nil")))
 (increasing?_TCC1 0
  (increasing?_TCC1-1 nil 3809684466 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increasing? subtype "poly_comp_analytic.l"
    "(list_adt[nat].cons?)")))
 (increasing?_TCC2 0
  (increasing?_TCC2-1 nil 3809684466
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (increasing? subtype "list_adt[nat].cdr(poly_comp_analytic.l)"
    "(list_adt[nat].cons?)")))
 (increasing?_TCC3 0
  (increasing?_TCC3-1 nil 3809684466 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increasing? termination
    "poly_comp_analytic.increasing?(list_adt[nat].cdr(poly_comp_analytic.l))"
    "nil")))
 (increase_nth 0
  (increase_nth-1 nil 3809693100
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "increasing?" -2)
          (("2" (split -2)
            (("1" (typepred "i" "j")
              (("1" (expand "length" -3 1)
                (("1" (expand "length" -1)
                  (("1" (expand "length" -2) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (case "i=0")
                  (("1" (expand "nth" 2 1)
                    (("1" (assert)
                      (("1" (case "j=0")
                        (("1" (expand "nth" 2 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "nth" 3 1)
                          (("2" (assert)
                            (("2" (case "j-1=0")
                              (("1"
                                (expand "nth" 3 1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst -4 "0" "j-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" -4 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (case
                                             "NOT cons1_var <= car[nat](cons2_var)")
                                            (("1" (propax) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "length" 1 1)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "j")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -3 "i-1" "j-1")
                      (("1" (assert)
                        (("1" (expand "nth" 3) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "j")
                          (("2" (expand "length" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (typepred "i")
                        (("3" (expand "length" -1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons2_var skolem-const-decl "list[nat]" poly_comp_analytic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons1_var skolem-const-decl "nat" poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (j skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     poly_comp_analytic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (increasing? def-decl "bool" poly_comp_analytic nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (index_great_increase_TCC1 0
  (index_great_increase_TCC1-1 nil 3809684671
   ("" (skeep) (("" (typepred "vals") (("" (grind) nil nil)) nil)) nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (index_great_increase subtype "poly_comp_analytic.l"
    "(list_adt[nat].cons?)")))
 (index_great_increase_TCC2 0
  (index_great_increase_TCC2-1 nil 3809684671
   ("" (skeep)
    (("" (typepred "index")
      (("" (typepred "vals") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (bov? def-decl "bool" eval_properties nil)
    (increasing? def-decl "bool" poly_comp_analytic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (index_great_increase subtype "poly_comp_analytic.index"
    "(list_adt[nat].cons?)")))
 (index_great_increase_TCC3 0
  (index_great_increase_TCC1-1 nil 3809684466
   ("" (skeep)
    (("" (typepred "vals")
      (("" (typepred "index") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (increasing? def-decl "bool" poly_comp_analytic nil)
    (bov? def-decl "bool" eval_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (index_great_increase subtype "poly_comp_analytic.vals"
    "{vals: list_adt[real].list | list_props[real].length(vals) = list_props[nat].length(poly_comp_analytic.index)}")))
 (index_great_increase 0
  (index_great_increase-1 nil 3809684925
   (""
    (case "FORALL (n:nat, m: {mm: monomial | cons?(mm`alpha)},
                            vals: {l: list[real] | cons?(l)},
                            index:
                              {l: list[nat] |
                                 (length(l) = length(vals) AND increasing?(l)) AND
                                  bov?(0)(cdr(l))}):
                      length(vals) = n IMPLIES car[nat](index) >= length(m`alpha) IMPLIES eval(m, index)(vals)`C = m`C")
    (("1" (skeep)
      (("1" (inst -1 "length(vals)" "m" "vals" "index")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "eval" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (assert)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (inst -2 "m" "cdr(vals)" "cdr(index)")
                          (("1" (assert)
                            (("1" (expand "length" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (case "j=0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (typepred "index")
                                        (("1"
                                          (case "cdr(index)=null")
                                          (("1"
                                            (case "cdr(vals)=null")
                                            (("1" (grind) nil nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (typepred "index")
                                          (("2"
                                            (expand "increasing?" -3)
                                            (("2"
                                              (split -3)
                                              (("1" (grind) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "index")
                              (("2"
                                (expand "length" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "bov?" -4)
                                    (("2"
                                      (split -4)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "increasing?" -5)
                                            (("2"
                                              (split -5)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "vals")
                            (("3" (case "j=0")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "vals")
                                  (("1"
                                    (hide -1 -4)
                                    (("1"
                                      (expand "eval" 2 1)
                                      (("1"
                                        (typepred "index")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (reveal -)
                                  (("2"
                                    (hide -2 -3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "l" "vals") (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "index" "vals") (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((vals skolem-const-decl "{l: list[real] | cons?(l)}"
     poly_comp_analytic nil)
    (index skolem-const-decl "{l: list[nat] |
   (length(l) = length(vals) AND increasing?(l)) AND bov?(0)(cdr(l))}"
           poly_comp_analytic nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nth def-decl "T" list_props nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (increasing? def-decl "bool" poly_comp_analytic nil)
    (bov? def-decl "bool" eval_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (eval def-decl "monomial" eval_MultPoly nil))
   shostak))
 (cdr_replace_TCC1 0
  (cdr_replace_TCC1-1 nil 3810285734
   ("" (skeep) (("" (expand "replace" 1) (("" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cdr_replace subtype
    "eval_MultPoly.replace(poly_comp_analytic.m`alpha, list_adt[nat].car(poly_comp_analytic.index))(0)"
    "(list_adt[nat].cons?)")))
 (cdr_replace_TCC2 0
  (cdr_replace_TCC2-1 nil 3810285734 ("" (subtype-tcc) nil nil) nil nil
   (cdr_replace subtype "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (cdr_replace_TCC3 0
  (cdr_replace_TCC3-1 nil 3810285734
   ("" (skeep) (("" (rewrite "member_0_bov") nil nil)) nil)
   ((member_0_bov formula-decl nil eval_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cdr_replace subtype "poly_comp_analytic.index"
    "{ll: list_adt[nat].list | eval_properties.bov?(0)(ll)}")))
 (cdr_replace_TCC4 0
  (cdr_replace_TCC4-1 nil 3810285734
   ("" (skeep) (("" (expand "sub1") (("" (propax) nil nil)) nil)) nil)
   ((sub1 def-decl "{ll: list[nat] |
   length(ll) = length(l) AND
    FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     eval_properties nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cdr_replace subtype
    "eval_properties.sub1(poly_comp_analytic.index)"
    "(list_adt[nat].cons?)")))
 (cdr_replace_TCC5 0
  (cdr_replace_TCC5-1 nil 3810285734
   ("" (skeep)
    (("" (expand "sub1" 2 1)
      (("" (assert)
        (("" (expand "length" -1 1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sub1 def-decl "{ll: list[nat] |
   length(ll) = length(l) AND
    FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     eval_properties nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cdr_replace subtype
    "list_adt[nat].car(eval_properties.sub1(poly_comp_analytic.index))"
    "naturalnumbers.below(list_props[nat].length(list_adt[nat].cdr(poly_comp_analytic.m`alpha)))")))
 (cdr_replace 0
  (cdr_replace-1 nil 3810286853
   (""
    (case "FORALL (n:nat, m: monomial | cons?(m`alpha),
                     index: list[nat] | cons?(index)):
                length(m`alpha)=n IMPLIES ( (car[nat](index) < length(m`alpha) AND NOT member[nat](0, index))
                IMPLIES
                cdr[nat](replace(m`alpha, car[nat](index))(0)) =
                 replace(cdr[nat](m`alpha), car[nat](sub1(index)))(0))")
    (("1" (skeep)
      (("1" (inst -1 "length(m`alpha)" "m" "index")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "replace" 2 1)
              (("2" (assert)
                (("2" (expand "member" 1)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "sub1" 3 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (hide 2)
            (("3" (skeep)
              (("3" (expand "sub1" 2)
                (("3" (expand "length" -1)
                  (("3" (assert)
                    (("3" (expand "length" -2) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (expand "sub1" 2 1) (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep) (("5" (rewrite "member_0_bov") nil nil)) nil))
          nil)
         ("6" (hide 2) (("6" (skeep) (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (expand "sub1" 2 1)
          (("3" (expand "length" -1)
            (("3" (assert)
              (("3" (expand "length" -2) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep) (("4" (grind) nil nil)) nil)) nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (rewrite "member_0_bov") nil nil)) nil)) nil)
     ("6" (hide 2) (("6" (skeep) (("6" (grind) nil nil)) nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (member_0_bov formula-decl nil eval_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (bov? def-decl "bool" eval_properties nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sub1 def-decl "{ll: list[nat] |
   length(ll) = length(l) AND
    FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     eval_properties nil))
   shostak))
 (eval0_fconst 0
  (eval0_fconst-1 nil 3810361688
   ("" (induct "v")
    (("1" (skeep)
      (("1" (case "ind=null")
        (("1" (replace -1) (("1" (grind) nil nil)) nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "eval" 1 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (replace -2)
                  (("2" (assert)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (inst -2 "m" "cdr(ind)")
                            (("1" (assert)
                              (("1"
                                (expand "length" -3)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (typepred "ind")
                            (("2" (expand "every" -1)
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fulleval0_fconst_TCC1 0
  (fulleval0_fconst_TCC1-1 nil 3810362249 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (fulleval0_fconst subtype "poly_comp_analytic.v"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (fulleval0_fconst 0
  (fulleval0_fconst-1 nil 3810362340
   ("" (skeep)
    (("" (lemma "eval0_fconst")
      (("" (expand "full_eval" 1 1)
        (("" (inst?)
          (("" (assert)
            (("" (lemma "list_length_n[nat]") (("" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval0_fconst formula-decl nil poly_comp_analytic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (length def-decl "nat" list_props nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (eval_hat_equiv_TCC1 0
  (eval_hat_equiv_TCC1-1 nil 3809437473 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (eval_hat_equiv subtype "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (eval_hat_equiv_TCC2 0
  (eval_hat_equiv_TCC4-1 nil 3809437473
   ("" (skeep)
    (("" (assert)
      (("" (typepred "f(x)")
        (("" (typepred "n") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices))
   nil
   (eval_hat_equiv subtype "poly_comp_analytic.f(poly_comp_analytic.x)"
    "(list_adt[real].cons?)")))
 (eval_hat_equiv_TCC3 0
  (eval_hat_equiv_TCC2-1 nil 3809437473 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval_hat_equiv subtype "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (eval_hat_equiv_TCC4 0
  (eval_hat_equiv_TCC3-1 nil 3810304434 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (eval_hat_equiv subtype
    "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.f(poly_comp_analytic.x)) /= 0, reals.>=(i, 0))}")))
 (eval_hat_equiv_TCC5 0
  (eval_hat_equiv_TCC5-1 nil 3813941823
   ("" (skeep)
    (("" (expand "hat" 1)
      (("" (typepred "m")
        (("" (typepred "f(x)")
          (("" (expand "length" -) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (eval_hat_equiv subtype
    "eval_properties.hat(poly_comp_analytic.n)(poly_comp_analytic.f)(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(eval_properties.hat(poly_comp_analytic.m)`alpha))}")))
 (eval_hat_equiv 0
  (eval_hat_equiv-1 nil 3809437782
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (lemma "eval_vals")
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand "hat" 1 2) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "hat" 1 1)
            (("2" (assert)
              (("2" (typepred "f(x)")
                (("2" (expand "length" -2) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (assert)
            (("4" (typepred "f(x)")
              (("4" (typepred "n") (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("5" (hide 2) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = n}"
     poly_comp_analytic nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (f skolem-const-decl "[real -> VectorN(n)]" poly_comp_analytic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n skolem-const-decl "posnat" poly_comp_analytic nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_vals formula-decl nil eval_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (eval_hat_equiv_ge_TCC1 0
  (eval_hat_equiv_ge_TCC1-1 nil 3810364520 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (eval_hat_equiv_ge subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (eval_hat_equiv_ge_TCC2 0
  (eval_hat_equiv_ge_TCC2-1 nil 3810364520 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (eval_hat_equiv_ge subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "(list_adt[real].cons?)")))
 (eval_hat_equiv_ge_TCC3 0
  (eval_hat_equiv_ge_TCC3-1 nil 3810364520 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (eval_hat_equiv_ge subtype "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (eval_hat_equiv_ge_TCC4 0
  (eval_hat_equiv_ge_TCC4-1 nil 3810364520 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (eval_hat_equiv_ge subtype
    "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.f(poly_comp_analytic.x)) /= 0, reals.>=(i, 0))}")))
 (eval_hat_equiv_ge_TCC5 0
  (eval_hat_equiv_ge_TCC5-1 nil 3810364520
   ("" (skeep)
    (("" (skeep)
      (("" (expand "hat" 1)
        (("" (assert)
          (("" (typepred "m")
            (("" (typepred "f(x)")
              (("" (expand "length" -2)
                (("" (expand "length" -3) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil))
   nil
   (eval_hat_equiv_ge subtype
    "eval_properties.hat(poly_comp_analytic.n2)(poly_comp_analytic.f)(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(eval_properties.hat(poly_comp_analytic.m)`alpha))}")))
 (eval_hat_equiv_ge 0
  (eval_hat_equiv_ge-1 nil 3810364588
   ("" (skeep)
    (("" (lemma "eval_vals")
      (("" (inst?)
        (("" (assert)
          (("" (decompose-equality 1)
            (("1" (inst -1 "f(x!1)")
              (("1" (assert)
                (("1" (expand "hat" 1 2) (("1" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil)
             ("3" (skeep) (("3" (assert) (("3" (assert) nil nil)) nil))
              nil)
             ("4" (skeep) (("4" (assert) nil nil)) nil)
             ("5" (skeep) (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_vals formula-decl nil eval_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (n2 skolem-const-decl "posnat" poly_comp_analytic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (f skolem-const-decl "[real -> VectorN(n2)]" poly_comp_analytic
     nil)
    (n skolem-const-decl "posnat" poly_comp_analytic nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = n}"
     poly_comp_analytic nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (analytic_hat_TCC1 0
  (analytic_hat_TCC1-1 nil 3813941823 ("" (subtype-tcc) nil nil)
   ((powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (analytic_hat subtype "(number_fields.-)(poly_comp_analytic.m, 1)"
    "nat")))
 (analytic_hat 0
  (analytic_hat-1 nil 3810357815
   ("" (skeep)
    (("" (expand "analytic?")
      (("" (skeep)
        (("" (expand "hat" 1)
          (("" (inst -1 "i+1")
            (("" (expand "nth" -1) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (mono_comp_analytic_0_TCC1 0
  (mono_comp_analytic_0_TCC1-1 nil 3810356637
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (mono_comp_analytic_0 subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (mono_comp_analytic_0 0
  (mono_comp_analytic_0-1 nil 3810356696
   ("" (skeep)
    (("" (expand "analytic?" 1 1)
      (("" (inst 1 "1" "LAMBDA(i:nat): IF i=0 THEN m`C ELSE 0 ENDIF")
        (("" (expand "analytic_parts?" 1 1)
          (("" (skeep)
            ((""
              (case "convergence(powerseries(LAMBDA (i: nat):
                                IF i = 0 THEN m`C ELSE 0 ENDIF)
                             (x_1 - alpha), m`C)")
              (("1" (split 1)
                (("1" (expand "convergent?" 1 1)
                  (("1" (inst 1 "m`C") nil nil)) nil)
                 ("2" (expand "full_eval" 1 1)
                  (("2" (lemma "limit_def")
                    (("2" (inst?)
                      (("1" (assert)
                        (("1" (typepred "f(x_1)")
                          (("1" (replace -2)
                            (("1" (expand "list_length_n" 1 1)
                              (("1"
                                (expand "eval" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inf_sum" 1 1)
                                    (("1"
                                      (expand "powerseries" -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "convergent?" 1)
                          (("2" (inst 1 "m`C") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "convergence" 1 1)
                  (("2" (skeep)
                    (("2" (inst 1 "2")
                      (("2" (skeep)
                        (("2" (expand "powerseries" 1 1)
                          (("2" (expand "powerseq" 1 1)
                            (("2" (assert)
                              (("2"
                                (lemma "sigma_first")
                                (("2"
                                  (expand "series" 1 1)
                                  (("2"
                                    (inst
                                     -1
                                     " LAMBDA (k: nat) -> real:
                  IF k = 0 THEN m`C ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                     "i_1"
                                     "0")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "sigma_zero")
                                            (("2"
                                              (lemma "sigma_shift")
                                              (("2"
                                                (inst
                                                 -1
                                                 " LAMBDA (k: nat) -> real:
                  IF k = 0 THEN m`C ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                                 "i_1-1"
                                                 "0"
                                                 "1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (case
                                                       " (LAMBDA (n: nat): 0 * (x_1 - alpha) ^ (1 + n)) = (LAMBDA(i:nat): 0)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "i_1-1"
                                                           "0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (full_eval const-decl "real" eval_MultPoly nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = 0}"
     poly_comp_analytic nil)
    (alpha skolem-const-decl "real" poly_comp_analytic nil)
    (x_1 skolem-const-decl "{xx: real | abs(xx - alpha) < 1}"
     poly_comp_analytic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (inf_sum const-decl "real" series series)
    (eval def-decl "monomial" eval_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (series const-decl "sequence[real]" series series)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_shift formula-decl nil sigma_nat reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_zero formula-decl nil sigma reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_first formula-decl nil sigma reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mono_comp_analytic_TCC1 0
  (mono_comp_analytic_TCC1-1 nil 3810356637 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (mono_comp_analytic subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (mono_comp_analytic 0
  (mono_comp_analytic-1 nil 3810307623
   ("" (induct "n")
    (("1" (lemma "mono_comp_analytic_0") (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (lemma "eval_hat_equiv")
            (("2" (inst?)
              (("2" (replace -1 1)
                (("2" (lemma "analytic_prod_fun")
                  (("2" (lemma "analytic_scal_fun")
                    (("2"
                      (inst -2 "alpha" "(LAMBDA (x: real):
                  m`C * car(f(x)) ^ car[nat](m`alpha))"
                       " (LAMBDA (x: real):full_eval(hat(m))(hat(1 + j)(f)(x)))")
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (expand "*" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (hide 2)
                            (("2"
                              (inst -1 "alpha"
                               "((LAMBDA (x: real):car(f(x)) ^ car[nat](m`alpha)))"
                               "m`C")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "*" -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "analytic_pow_fun")
                                    (("2"
                                      (inst
                                       -1
                                       "alpha"
                                       "(LAMBDA (x: real): car(f(x)))"
                                       "car[nat](m`alpha)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "^" -1 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "f")
                                            (("2"
                                              (expand "analytic?" -1)
                                              (("2"
                                                (inst -1 "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "nth" -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "m")
                                        (("2"
                                          (expand "length" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (typepred "f(x)")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (typepred "m")
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (skeep)
                                (("4"
                                  (typepred "f(x)")
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "analytic_hat")
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3"
                                  (inst -1 "alpha")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst
                                       -4
                                       "alpha"
                                       "hat(m)"
                                       "hat(1+j)(f)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "m")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep) (("2" (assert) nil nil)) nil)
                       ("3" (skeep) (("3" (assert) nil nil)) nil)
                       ("4" (typepred "m") (("4" (grind) nil nil)) nil)
                       ("5" (skeep)
                        (("5" (typepred "f(x)") (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (analytic_prod_fun formula-decl nil analytic_def nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (j skolem-const-decl "nat" poly_comp_analytic nil)
    (alpha skolem-const-decl "real" poly_comp_analytic nil)
    (f skolem-const-decl "(analytic?(j + 1, alpha))" poly_comp_analytic
     nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = 1 + j}"
     poly_comp_analytic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (analytic_pow_fun formula-decl nil analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (analytic_hat formula-decl nil poly_comp_analytic nil)
    (analytic_scal_fun formula-decl nil analytic_def nil)
    (eval_hat_equiv formula-decl nil poly_comp_analytic nil)
    (mono_comp_analytic_0 formula-decl nil poly_comp_analytic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (analytic? const-decl "bool" analytic_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil))
   shostak))
 (mono_comp_analytic_ge_TCC1 0
  (mono_comp_analytic_ge_TCC1-1 nil 3810361246
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic? const-decl "bool" analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (inf_sum const-decl "real" series series)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseries const-decl "sequence[real]" power_series series))
   nil
   (mono_comp_analytic_ge subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (mono_comp_analytic_ge 0
  (mono_comp_analytic_ge-1 nil 3810361353
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1"
          (case "NOT (LAMBDA (x: real): full_eval(m)(f(x))) = (Lambda(x:real): m`C)")
          (("1" (decompose-equality 1)
            (("1" (lemma "fulleval0_fconst")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil))
            nil)
           ("2" (replace -1)
            (("2" (lemma "analytic_const") (("2" (inst?) nil nil))
              nil))
            nil)
           ("3" (skeep) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma " eval_hat_equiv_ge")
          (("2" (inst?)
            (("2" (inst -1 "n2" "f")
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (lemma "analytic_prod_fun")
                    (("1" (lemma "analytic_scal_fun")
                      (("1"
                        (inst -2 "alpha" "(LAMBDA (x: real):
                                  m`C * car(f(x)) ^ car[nat](m`alpha))"
                         " (LAMBDA (x: real):full_eval(hat(m))(hat(n2)(f)(x)))")
                        (("1" (assert)
                          (("1" (split -2)
                            (("1" (expand "*" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (inst
                                 -1
                                 "alpha"
                                 "((LAMBDA (x: real):car(f(x)) ^ car[nat](m`alpha)))"
                                 "m`C")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "*" -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "analytic_pow_fun")
                                      (("2"
                                        (inst
                                         -1
                                         "alpha"
                                         "(LAMBDA (x: real): car(f(x)))"
                                         "car[nat](m`alpha)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "f")
                                              (("2"
                                                (expand "analytic?" -1)
                                                (("2"
                                                  (inst -1 "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "nth" -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "m")
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (typepred "f(x)")
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "m")
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (typepred "f(x)")
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3"
                              (inst -3 "alpha" "n2-1" "hat(m)"
                               "hat(n2)(f)")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "hat" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "f")
                                    (("2"
                                      (expand "analytic?" 1)
                                      (("2"
                                        (expand "analytic?" -1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -1 "i+1")
                                            (("2"
                                              (expand "nth" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil)
                               ("4"
                                (assert)
                                (("4"
                                  (typepred "m")
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil)
                         ("3" (skeep) (("3" (assert) nil nil)) nil)
                         ("4" (typepred "m")
                          (("4" (hide -1 -2 -4)
                            (("4" (hide 2) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (skeep)
                            (("5" (assert)
                              (("5"
                                (typepred "f(x)")
                                (("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (eval_hat_equiv_ge formula-decl nil poly_comp_analytic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n2 skolem-const-decl "nat" poly_comp_analytic nil)
    (analytic_scal_fun formula-decl nil analytic_def nil)
    (expt def-decl "real" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (analytic_pow_fun formula-decl nil analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     eval_properties nil)
    (hat const-decl "[real -> VectorN(n - 1)]" eval_properties nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = 1 + j}"
     poly_comp_analytic nil)
    (j skolem-const-decl "nat" poly_comp_analytic nil)
    (f skolem-const-decl "(analytic?(n2, alpha))" poly_comp_analytic
     nil)
    (alpha skolem-const-decl "real" poly_comp_analytic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (analytic_prod_fun formula-decl nil analytic_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fulleval0_fconst formula-decl nil poly_comp_analytic nil)
    (m skolem-const-decl "{mm: monomial | length(mm`alpha) = 0}"
     poly_comp_analytic nil)
    (f skolem-const-decl "(analytic?(n2, alpha))" poly_comp_analytic
     nil)
    (alpha skolem-const-decl "real" poly_comp_analytic nil)
    (n2 skolem-const-decl "nat" poly_comp_analytic nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (analytic_const formula-decl nil analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (analytic? const-decl "bool" analytic_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (poly_comp_analytic_TCC1 0
  (poly_comp_analytic_TCC1-1 nil 3810361246 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_comp_analytic subtype
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(poly_comp_analytic.p))}")))
 (poly_comp_analytic 0
  (poly_comp_analytic-1 nil 3810364848
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "full_eval" 1 1)
        (("1" (lemma "analytic_const") (("1" (inst?) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "full_eval_recurs")
          (("2" (inst -1 "cons(cons1_var,cons2_var)" "_")
            (("2" (assert)
              (("2"
                (case "(LAMBDA (x: real):
                  full_eval(cons(cons1_var, cons2_var))(f(x))) = (LAMBDA (x: real):
                  full_eval(cons2_var)(f(x)) + full_eval(cons1_var)(f(x)))")
                (("1" (replace -1)
                  (("1" (lemma "analytic_sum_fun")
                    (("1"
                      (inst -1 "alpha" "(LAMBDA (x: real):
                   full_eval(cons2_var)(f(x)))" "(LAMBDA (x: real):
                   full_eval(cons1_var)(f(x)))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "+" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (inst -3 "n" "alpha" "f")
                            (("2" (assert)
                              (("2"
                                (expand "max_length" -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "mono_comp_analytic_ge")
                            (("3"
                              (inst -1 "alpha"
                               "length(cons1_var`alpha)" "n"
                               "cons1_var" "f")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "max_length" -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (assert)
                          (("2" (expand "max_length" -4 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (assert)
                          (("3" (expand "max_length" -4)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality 1)
                  (("1" (inst -1 "f(x!1)") nil nil)
                   ("2" (skeep)
                    (("2" (expand "max_length" -3)
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (skeep)
                    (("3" (assert)
                      (("3" (typepred "f(x)")
                        (("3" (expand "max_length" -5)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skeep) (("4" (assert) nil nil)) nil))
                  nil)
                 ("3" (skeep)
                  (("3" (expand "max_length" -3)
                    (("3" (assert) nil nil)) nil))
                  nil)
                 ("4" (skeep)
                  (("4" (expand "max_length" -3)
                    (("4" (assert) nil nil)) nil))
                  nil)
                 ("5" (skeep) (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((full_eval_recurs formula-decl nil eval_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n skolem-const-decl "nat" poly_comp_analytic nil)
    (alpha skolem-const-decl "real" poly_comp_analytic nil)
    (f skolem-const-decl "(analytic?(n, alpha))" poly_comp_analytic
     nil)
    (cons2_var skolem-const-decl "list[monomial]" poly_comp_analytic
     nil)
    (cons1_var skolem-const-decl "monomial" poly_comp_analytic nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mono_comp_analytic_ge formula-decl nil poly_comp_analytic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (analytic_sum_fun formula-decl nil analytic_def nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (analytic_const formula-decl nil analytic_def nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (analytic? const-decl "bool" analytic_def nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly nil))
   shostak))
 (meeting_analytic_TCC1 0
  (meeting_analytic_TCC1-1 nil 3810472024
   ("" (skeep)
    (("" (typepred "n")
      (("" (expand "meet_max" 1 1)
        (("" (assert)
          (("" (expand "meet_max" 1)
            (("" (expand "max" 1) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((atom_max def-decl "nat" semi_algebraic nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (meet_max def-decl "nat" semi_algebraic nil))
   nil
   (meeting_analytic subtype "poly_comp_analytic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: poly_comp_analytic.m :)))}")))
 (meeting_analytic_TCC2 0
  (meeting_analytic_TCC2-1 nil 3810472024
   ("" (skeep)
    (("" (skeep) (("" (hide 1) (("" (grind) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (meet_max def-decl "nat" semi_algebraic nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (meeting_analytic subtype "poly_comp_analytic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: poly_comp_analytic.m :)))}")))
 (meeting_analytic 0
  (meeting_analytic-1 nil 3810472201
   ("" (induct "m")
    (("1" (skeep)
      (("1" (expand "semi_alg")
        (("1" (expand "join" 1 1)
          (("1" (expand "meet" 1) (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "f")
          (("2" (inst -2 "x0" "n" "f")
            (("1" (assert)
              (("1" (split -2)
                (("1" (skeep)
                  (("1" (lemma "poly_comp_analytic")
                    (("1" (assert)
                      (("1" (inst -1 "n" "x0" "cons1_var`poly" "f")
                        (("1" (assert)
                          (("1" (typepred "n")
                            (("1" (split -2)
                              (("1"
                                (case
                                 "full_eval(cons1_var`poly)(f(x0))>0")
                                (("1"
                                  (lemma "analytic_pos_ball")
                                  (("1"
                                    (inst
                                     -1
                                     "x0"
                                     "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst
                                           1
                                           "min(epsilon,delta)/2")
                                          (("1"
                                            (inst
                                             2
                                             "min(epsilon,delta)/2")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "semi_alg" +)
                                                  (("1"
                                                    (expand
                                                     "semi_alg"
                                                     -7)
                                                    (("1"
                                                      (expand
                                                       "join"
                                                       -7)
                                                      (("1"
                                                        (expand
                                                         "join"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "join"
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "join"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "meet"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "meet"
                                                                   -7)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "t")
                                                                          (("1"
                                                                            (expand
                                                                             "semi_alg"
                                                                             -5)
                                                                            (("1"
                                                                              (expand
                                                                               "join"
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "join"
                                                                                 -5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "atom_eval")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "t!1+x0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "t!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9
                                                                                           -10
                                                                                           -11
                                                                                           2)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             -)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "t+x0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "t")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "abs"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -2
                                                                                               "t!1+x0")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "t!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "abs"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("4"
                                                                                            (inst
                                                                                             -2
                                                                                             "t+x0")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 1
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (typepred
                                                                                                     "t")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "t")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred "f(x)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (expand "atom_max" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "full_eval(cons1_var`poly)(f(x0)) < 0 ")
                                  (("1"
                                    (lemma "analytic_neg_ball")
                                    (("1"
                                      (inst
                                       -1
                                       "x0"
                                       "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             2
                                             "min(epsilon,delta)/2")
                                            (("1"
                                              (inst
                                               3
                                               "min(epsilon,delta)/2")
                                              (("1"
                                                (skeep*)
                                                (("1"
                                                  (expand "semi_alg")
                                                  (("1"
                                                    (expand "join")
                                                    (("1"
                                                      (expand "join")
                                                      (("1"
                                                        (expand
                                                         "meet"
                                                         -7)
                                                        (("1"
                                                          (expand
                                                           "meet"
                                                           2)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "t")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "atom_eval")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (typepred
                                                                     "cons1_var`ineq")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -2
                                                                       "t+x0")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "t!1+x0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "abs"
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "t!1"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "t")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "f(x)")
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (expand "atom_max" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "NOT full_eval(cons1_var`poly)(f(x0))=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (lemma "analytic_zero_right")
                                      (("2"
                                        (inst
                                         -1
                                         "x0"
                                         "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst
                                                 3
                                                 "min(delta,epsilon)/2")
                                                (("1"
                                                  (inst
                                                   4
                                                   "min(epsilon,delta)/2")
                                                  (("1"
                                                    (skeep*)
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "t!1")
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "t"
                                                             "t!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "semi_alg"
                                                                 -14)
                                                                (("1"
                                                                  (expand
                                                                   "semi_alg"
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "join"
                                                                     -14)
                                                                    (("1"
                                                                      (expand
                                                                       "join"
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "meet"
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "meet"
                                                                           -14)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "join"
                                                                                 -14)
                                                                                (("1"
                                                                                  (expand
                                                                                   "join"
                                                                                   4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -12
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "semi_alg"
                                                                                             -12)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "join"
                                                                                               -12)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "atom_eval")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "cons1_var`ineq")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst
                                                   3
                                                   "min(delta,epsilon)/2")
                                                  (("2"
                                                    (inst
                                                     4
                                                     "min(epsilon,delta)/2")
                                                    (("2"
                                                      (skeep*)
                                                      (("2"
                                                        (expand
                                                         "semi_alg"
                                                         -7)
                                                        (("2"
                                                          (expand
                                                           "semi_alg"
                                                           3)
                                                          (("2"
                                                            (expand
                                                             "join"
                                                             3)
                                                            (("2"
                                                              (expand
                                                               "join"
                                                               -7)
                                                              (("2"
                                                                (expand
                                                                 "meet"
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "join"
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "join"
                                                                     -7)
                                                                    (("2"
                                                                      (expand
                                                                       "meet"
                                                                       -7)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "t")
                                                                          (("1"
                                                                            (expand
                                                                             "semi_alg"
                                                                             -5)
                                                                            (("1"
                                                                              (expand
                                                                               "join"
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "join"
                                                                                 -5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "atom_eval")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -2
                                                                                         "t")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -2
                                                                                           "t!1")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "t!1"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "t")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst
                                                 3
                                                 "min(delta,epsilon)/2")
                                                (("3"
                                                  (inst
                                                   4
                                                   "min(epsilon,delta)/2")
                                                  (("3"
                                                    (skeep*)
                                                    (("3"
                                                      (inst -5 "t")
                                                      (("1"
                                                        (expand
                                                         "semi_alg")
                                                        (("1"
                                                          (expand
                                                           "join")
                                                          (("1"
                                                            (expand
                                                             "join"
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "join"
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "join"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "meet"
                                                                   -7)
                                                                  (("1"
                                                                    (expand
                                                                     "meet"
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "t")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "t!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "t!1")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "atom_eval")
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "t")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3 4 5)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "f(x)" "n")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "atom_max"
                                                   -3)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "f(x0)")
                                  (("3"
                                    (typepred "n")
                                    (("3"
                                      (expand "atom_max" -1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "atom_max" -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst 2 "epsilon")
                    (("2" (skeep)
                      (("2" (inst -1 "t")
                        (("2" (expand "semi_alg")
                          (("2" (expand "join")
                            (("2" (expand "join")
                              (("2"
                                (expand "meet" -2)
                                (("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "n")
              (("2" (assert)
                (("2" (expand "atom_max" -1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (typepred "n") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (t skolem-const-decl "{t: posreal | t < min(epsilon, delta) / 2}"
     poly_comp_analytic nil)
    (delta skolem-const-decl "posreal" poly_comp_analytic nil)
    (TRUE const-decl "bool" booleans nil)
    (analytic_neg_ball formula-decl nil analytic_def nil)
    (analytic_zero_right formula-decl nil analytic_def nil)
    (delta skolem-const-decl "posreal" poly_comp_analytic nil)
    (t skolem-const-decl "{t: posreal | t < min(delta, epsilon) / 2}"
     poly_comp_analytic nil)
    (delta skolem-const-decl "posreal" poly_comp_analytic nil)
    (t skolem-const-decl "{t: posreal | t < min(delta, epsilon) / 2}"
     poly_comp_analytic nil)
    (analytic_pos_ball formula-decl nil analytic_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (epsilon skolem-const-decl "posreal" poly_comp_analytic nil)
    (delta skolem-const-decl "posreal" poly_comp_analytic nil)
    (t skolem-const-decl "{t: posreal | t < min(epsilon, delta) / 2}"
     poly_comp_analytic nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (atom_eval const-decl "bool" semi_algebraic nil)
    (f skolem-const-decl "(analytic?(n, x0))" poly_comp_analytic nil)
    (x0 skolem-const-decl "real" poly_comp_analytic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (poly_comp_analytic formula-decl nil poly_comp_analytic nil)
    (n skolem-const-decl
     "{n: nat | n >= atom_max(cons(cons1_var, cons2_var))}"
     poly_comp_analytic nil)
    (cons2_var skolem-const-decl "list[atomic_poly]" poly_comp_analytic
     nil)
    (cons1_var skolem-const-decl "atomic_poly" poly_comp_analytic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (join def-decl "bool" semi_algebraic nil)
    (meet def-decl "bool" semi_algebraic nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atom_max def-decl "nat" semi_algebraic nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (joining type-eq-decl nil semi_algebraic nil)
    (meet_max def-decl "nat" semi_algebraic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (joining_analytic 0
  (joining_analytic-1 nil 3810552051
   ("" (induct "j")
    (("1" (skeep)
      (("1" (expand "semi_alg")
        (("1" (expand "join") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "semi_alg" +)
          (("2" (case "cons2_var=null")
            (("1" (replace -1)
              (("1" (expand "join" +)
                (("1" (lemma "meeting_analytic")
                  (("1" (inst -1 "x0" "cons1_var" "n" "f")
                    (("1" (expand "semi_alg" -1)
                      (("1" (expand "join" -1)
                        (("1" (expand "join" -1)
                          (("1" (expand "join" +)
                            (("1" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "n")
                        (("2" (assert)
                          (("2" (expand "meet_max" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 "x0" "n" "f")
              (("1" (assert)
                (("1" (expand "join" +)
                  (("1" (expand "semi_alg" -)
                    (("1" (split -1)
                      (("1" (skeep)
                        (("1" (inst 2 "epsilon")
                          (("1" (assert)
                            (("1" (skeep) (("1" (inst -1 "t") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (skeep)
                          (("2" (lemma "meeting_analytic")
                            (("2" (inst -1 "x0" "cons1_var" "n" "f")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "semi_alg" -1)
                                      (("1"
                                        (expand "join" -1)
                                        (("1"
                                          (expand "join" -1)
                                          (("1"
                                            (inst 2 "epsilon!1")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "t")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         3
                                         "min(epsilon,epsilon!1)")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -1 "t")
                                            (("1"
                                              (inst -1 "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "semi_alg" 1)
                                                  (("1"
                                                    (expand "join" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "semi_alg"
                                                   2
                                                   1)
                                                  (("2"
                                                    (expand "join" 2)
                                                    (("2"
                                                      (expand "join" 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "t")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " t")
                                              (("2"
                                                (typepred "t")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "n")
                                (("2"
                                  (expand "meet_max" -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "n" 1)
                (("2" (assert)
                  (("2" (expand "meet_max" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t skolem-const-decl "{t: posreal | t <= min(epsilon, epsilon!1)}"
     poly_comp_analytic nil)
    (epsilon!1 skolem-const-decl "posreal" poly_comp_analytic nil)
    (epsilon skolem-const-decl "posreal" poly_comp_analytic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (odd? const-decl "bool" integers nil)
    (meeting_analytic formula-decl nil poly_comp_analytic nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (atom_max def-decl "nat" semi_algebraic nil)
    (n skolem-const-decl
     "{n: nat | n >= meet_max(cons(cons1_var, cons2_var))}"
     poly_comp_analytic nil)
    (cons2_var skolem-const-decl "list[meeting]" poly_comp_analytic
     nil)
    (cons1_var skolem-const-decl "meeting" poly_comp_analytic nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (join def-decl "bool" semi_algebraic nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (analytic? const-decl "bool" analytic_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (meet_max def-decl "nat" semi_algebraic nil)
    (joining type-eq-decl nil semi_algebraic nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atom_max_nth 0
  (atom_max_nth-1 nil 3813321764
   ("" (induct "m")
    (("1" (skeep)
      (("1" (grind) (("1" (typepred "i") (("1" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (expand "atom_max" 1 1)
            (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (expand "atom_max" 2)
            (("2" (expand "nth" 2)
              (("2" (assert)
                (("2" (inst -1 "i-1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (atom_max def-decl "nat" semi_algebraic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (meeting type-eq-decl nil semi_algebraic nil))
   shostak))
 (min_eps_TCC1 0
  (min_eps_TCC1-1 nil 3809437473
   ("" (lemma "atom_max_nth")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (atom_max_nth formula-decl nil poly_comp_analytic nil))
   nil
   (min_eps subtype "poly_comp_analytic.f(poly_comp_analytic.t)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(list_props[atomic_poly].nth(poly_comp_analytic.m, poly_comp_analytic.i)`poly))}")))
 (min_eps_TCC2 0
  (min_eps_TCC2-1 nil 3813325566
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "atom_max_nth")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (atom_max_nth formula-decl nil poly_comp_analytic nil))
   nil
   (min_eps subtype "poly_comp_analytic.f(poly_comp_analytic.t)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(list_props[atomic_poly].nth(poly_comp_analytic.m, poly_comp_analytic.i)`poly))}")))
 (min_eps 0
  (min_eps-1 nil 3813321862
   ("" (induct "m")
    (("1" (skeep)
      (("1" (inst 1 "1")
        (("1" (skeep)
          (("1" (typepred "i") (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "f")
          (("2" (inst -2 "x0" "n" "f")
            (("1" (lemma "analytic_zero_right")
              (("1" (lemma "poly_comp_analytic")
                (("1"
                  (inst -1 "n" "x0"
                   "nth(cons(cons1_var, cons2_var), 0)`poly" "f")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1"
                        (inst -2 "x0" " (LAMBDA (x: real):
                          full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                        (("1" (assert)
                          (("1"
                            (case "full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x0)) = 0")
                            (("1" (assert)
                              (("1"
                                (split -3)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "min(eps_min, delta)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i=0")
                                          (("1"
                                            (skeep 2)
                                            (("1"
                                              (inst -2 "t-x0")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -5 "i-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -5)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (expand "nth" -8)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep 3)
                                                    (("2"
                                                      (inst -1 "t")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           3
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "min(delta,eps_min)")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "i=0")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -2 "t-x0")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (inst -5 "i-1")
                                              (("1"
                                                (split -5)
                                                (("1"
                                                  (skeep 2)
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -8
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep 3)
                                                    (("2"
                                                      (inst -1 "t")
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep -1)
                                  (("3"
                                    (skeep -5)
                                    (("3"
                                      (inst 1 "min(eps_min,delta)")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (case "i=0")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -2 "t-x0")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -5 "i-1")
                                            (("1"
                                              (split -5)
                                              (("1"
                                                (skeep 2)
                                                (("1"
                                                  (inst -1 "t")
                                                  (("1"
                                                    (expand "nth" -8)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 3)
                                                (("2"
                                                  (inst -1 "t")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       3
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (split -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 2 "min(eps_min,delta)")
                                        (("1"
                                          (skeep 2)
                                          (("1"
                                            (case "i=0")
                                            (("1"
                                              (skeep 3)
                                              (("1"
                                                (expand "nth" 3 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -2 "t-x0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (inst -4 " i-1")
                                                (("1"
                                                  (split -4)
                                                  (("1"
                                                    (skeep 3)
                                                    (("1"
                                                      (inst -1 "t")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep 4)
                                                      (("2"
                                                        (inst -1 "t")
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 2 "min(eps_min,delta)")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "i=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep 2)
                                              (("1"
                                                (inst -2 "t-x0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -4 "i-1")
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (skeep 3)
                                                (("1"
                                                  (inst -1 "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -7)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 4)
                                                (("2"
                                                  (inst -1 "t")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "nth" 4)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (skeep -)
                                    (("3"
                                      (skeep -)
                                      (("3"
                                        (inst 2 "min(eps_min,delta)")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (case "i=0")
                                            (("1"
                                              (skeep 2)
                                              (("1"
                                                (inst -2 "t-x0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -4 "i-1")
                                              (("1"
                                                (split -4)
                                                (("1"
                                                  (skeep 3)
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -7)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep 4)
                                                    (("2"
                                                      (inst -1 "t")
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         +)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "nth" 1 1)
                                  (("4"
                                    (lemma "analytic_pos_ball")
                                    (("4"
                                      (inst
                                       -1
                                       "x0"
                                       " (LAMBDA (x: real):
                  full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (skeep -4)
                                              (("1"
                                                (inst
                                                 2
                                                 "min(eps_min,delta)")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (case "i=0")
                                                    (("1"
                                                      (skeep 2)
                                                      (("1"
                                                        (inst -2 "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             "7-"
                                                             2
                                                             3)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -4 "i-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep 3)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (skeep 3)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       3
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep -3)
                                            (("2"
                                              (lemma
                                               "analytic_neg_ball")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x0"
                                                 " (LAMBDA (x: real):
                  full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep -1)
                                                    (("1"
                                                      (inst
                                                       3
                                                       "min(eps_min,delta)")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case "i=0")
                                                          (("1"
                                                            (skeep 3)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "t")
                                                              (("1"
                                                                (hide
                                                                 -3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -4
                                                             "i-1")
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (skeep
                                                                 4)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "t")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep
                                                                   5)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     5)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "t")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3 4)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "f(x)")
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (typepred
                                                           "n")
                                                          (("2"
                                                            (lemma
                                                             "atom_max_nth")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (skeep 1)
                                        (("3"
                                          (lemma "atom_max_nth")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "length" 1)
                              (("3" (assert) nil nil)) nil)
                             ("4" (hide -)
                              (("4"
                                (lemma "atom_max_nth")
                                (("4"
                                  (inst?)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil)
                         ("3" (skeep)
                          (("3" (lemma "atom_max_nth")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "n")
                        (("2" (expand "nth" 1 1)
                          (("2" (expand "atom_max" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "n")
                (("2" (hide 2)
                  (("2" (expand "atom_max" -1)
                    (("2" (expand "max" -1)
                      (("2" (lift-if -1)
                        (("2" (split -1)
                          (("1" (flatten) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (hide 1)
          (("3" (skeep)
            (("3" (typepred "f(t)")
              (("3" (typepred "n")
                (("3" (hide -2)
                  (("3" (lemma "atom_max_nth")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "atom_max_nth")
          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (analytic_zero_right formula-decl nil analytic_def nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (analytic_neg_ball formula-decl nil analytic_def nil)
    (atom_max_nth formula-decl nil poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (analytic_pos_ball formula-decl nil analytic_def nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       poly_comp_analytic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (f skolem-const-decl "(analytic?(n, x0))" poly_comp_analytic nil)
    (x0 skolem-const-decl "real" poly_comp_analytic nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (poly_comp_analytic formula-decl nil poly_comp_analytic nil)
    (n skolem-const-decl
     "{n: nat | n >= atom_max(cons(cons1_var, cons2_var))}"
     poly_comp_analytic nil)
    (cons2_var skolem-const-decl "list[atomic_poly]" poly_comp_analytic
     nil)
    (cons1_var skolem-const-decl "atomic_poly" poly_comp_analytic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atom_max def-decl "nat" semi_algebraic nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (clean_exit_TCC1 0
  (clean_exit_TCC1-1 nil 3809437473 ("" (subtype-tcc) nil nil) nil nil
   (clean_exit subtype "semi_algebraic.meet_max(poly_comp_analytic.j)"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max(poly_comp_analytic.j))}")))
 (clean_exit_TCC2 0
  (clean_exit_TCC2-1 nil 3810555379
   ("" (skeep)
    (("" (skeep)
      (("" (split 2)
        (("1" (expand "nonempty?" 1)
          (("1" (expand "empty?" -1)
            (("1" (inst -1 "x")
              (("1" (expand "member" 1) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "bounded_below?" 1)
          (("2" (inst 1 "x0")
            (("2" (expand "lower_bound?" 1) (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil
   (clean_exit subtype
    "{xx: reals.real | booleans.AND(reals.<=(poly_comp_analytic.x0, xx), (booleans.NOT)(semi_algebraic.semi_alg(poly_comp_analytic.j)(semi_algebraic.meet_max(poly_comp_analytic.j))(poly_comp_analytic.f(xx))))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (clean_exit 0
  (clean_exit-1 nil 3810568778
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "joining_analytic")
        ((""
          (with-tccs
           (name "ch" " inf({xx: real |
                 x0 <= xx AND NOT semi_alg(j)(meet_max(j))(f(xx))})"))
          (("" (inst -2 "ch" "j" "meet_max(j)" "f")
            (("1" (split -2)
              (("1" (skeep)
                (("1" (inst 2 "epsilon")
                  (("1" (inst 3 "epsilon")
                    (("1" (skeep*)
                      (("1" (assert)
                        (("1" (inst-cp -1 "t-ch")
                          (("1" (inst -1 "t!1-ch")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst 2 "epsilon")
                  (("2" (inst 3 "epsilon")
                    (("2" (skeep*)
                      (("2" (inst-cp -1 "t-ch")
                        (("1" (inst -1 "t!1-ch")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "f")
              (("2" (expand "Analytic?" -1)
                (("2" (inst -1 "ch")
                  (("2" (assert)
                    (("2" (typepred "ch")
                      (("2" (expand "inf" -2)
                        (("2"
                          (with-tccs
                           (typepred
                            "glb({xx: real | x0 <= xx AND NOT semi_alg(j)(meet_max(j))(f(xx))})"))
                          (("2" (expand "greatest_lower_bound?" -1)
                            (("2" (flatten)
                              (("2"
                                (inst -2 "x0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "lower_bound?" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((meet_max def-decl "nat" semi_algebraic nil)
    (joining type-eq-decl nil semi_algebraic nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (Analytic? const-decl "bool" poly_comp_analytic nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (inf const-decl "real" poly_comp_analytic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t!1 skolem-const-decl "real" poly_comp_analytic nil)
    (epsilon skolem-const-decl "posreal" poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f skolem-const-decl "(Analytic?(meet_max(j), x0))"
     poly_comp_analytic nil)
    (x0 skolem-const-decl "real" poly_comp_analytic nil)
    (ch skolem-const-decl "real" poly_comp_analytic nil)
    (j skolem-const-decl "joining" poly_comp_analytic nil)
    (analytic? const-decl "bool" analytic_def nil)
    (joining_analytic formula-decl nil poly_comp_analytic nil))
   shostak))
 (clean_enter_TCC1 0
  (clean_enter_TCC1-1 nil 3810896826
   ("" (skeep*)
    (("" (split 2)
      (("1" (expand "nonempty?" 1)
        (("1" (expand "empty?" -1)
          (("1" (inst -1 "x")
            (("1" (expand "member" 1) (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "bounded_below?" 1)
        (("2" (inst 1 "x0")
          (("2" (expand "lower_bound?" 1) (("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (clean_enter subtype
    "{xx: reals.real | booleans.AND(reals.<=(poly_comp_analytic.x0, xx), semi_algebraic.semi_alg(poly_comp_analytic.j)(semi_algebraic.meet_max(poly_comp_analytic.j))(poly_comp_analytic.f(xx)))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (clean_enter 0
  (clean_enter-1 nil 3810897120
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "joining_analytic")
        ((""
          (with-tccs
           (name "ch" " inf({xx: real |
                         x0 <= xx AND semi_alg(j)(meet_max(j))(f(xx))})"))
          (("" (inst -2 "ch" "j" "meet_max(j)" "f")
            (("1" (split -2)
              (("1" (skeep)
                (("1" (inst 2 "epsilon")
                  (("1" (inst 3 "epsilon")
                    (("1" (skeep*)
                      (("1" (assert)
                        (("1" (inst-cp -1 "t-ch")
                          (("1" (inst -1 "t!1-ch")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst 2 "epsilon")
                  (("2" (inst 3 "epsilon")
                    (("2" (skeep*)
                      (("2" (inst-cp -1 "t-ch")
                        (("1" (inst -1 "t!1-ch")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "f")
              (("2" (expand "Analytic?" -1)
                (("2" (inst -1 "ch")
                  (("2" (assert)
                    (("2" (typepred "ch")
                      (("2" (expand "inf" -2)
                        (("2"
                          (with-tccs
                           (typepred
                            "glb({xx: real | x0 <= xx AND semi_alg(j)(meet_max(j))(f(xx))})"))
                          (("2" (expand "greatest_lower_bound?" -1)
                            (("2" (flatten)
                              (("2"
                                (inst -2 "x0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "lower_bound?" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((meet_max def-decl "nat" semi_algebraic nil)
    (joining type-eq-decl nil semi_algebraic nil)
    (meeting type-eq-decl nil semi_algebraic nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (semi_alg const-decl "set[VectorN(n)]" semi_algebraic nil)
    (Analytic? const-decl "bool" poly_comp_analytic nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (inf const-decl "real" poly_comp_analytic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t!1 skolem-const-decl "real" poly_comp_analytic nil)
    (epsilon skolem-const-decl "posreal" poly_comp_analytic nil)
    (t skolem-const-decl "real" poly_comp_analytic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f skolem-const-decl "(Analytic?(meet_max(j), x0))"
     poly_comp_analytic nil)
    (x0 skolem-const-decl "real" poly_comp_analytic nil)
    (ch skolem-const-decl "real" poly_comp_analytic nil)
    (j skolem-const-decl "joining" poly_comp_analytic nil)
    (analytic? const-decl "bool" analytic_def nil)
    (joining_analytic formula-decl nil poly_comp_analytic nil))
   shostak))
 (finite_support_series 0
  (finite_support_series-1 nil 3813325247
   ("" (skeep)
    (("" (skeep)
      (("" (expand "series" 1)
        (("" (expand "convergent?" 1)
          (("" (inst 1 "sigma(0,N,a)")
            (("" (expand "convergence" 1)
              (("" (skeep)
                (("" (inst 1 "N")
                  (("" (skeep)
                    (("" (lemma "sigma_split[nat]")
                      (("" (inst -1 "a" "i" "0" "N")
                        (("" (assert)
                          (("" (replace -1 1)
                            (("" (assert)
                              ((""
                                (lemma "sigma_restrict_eq_0[nat]")
                                ((""
                                  (inst -1 "a" "i" "1+N")
                                  ((""
                                    (split -1)
                                    (("1"
                                      (replace -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 "i_1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" convergence_sequences analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (sequence type-eq-decl nil sequences nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (series const-decl "sequence[real]" series series))
   shostak))
 (analytic_mono 0
  (analytic_mono-1 nil 3808526373
   ("" (lemma "mono_comp_analytic_ge")
    (("" (skeep)
      (("" (typepred "f")
        (("" (inst -2 "alpha" "m" "m" "mon" "f")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (analytic? const-decl "bool" analytic_def nil)
    (mono_comp_analytic_ge formula-decl nil poly_comp_analytic nil))
   shostak)))

