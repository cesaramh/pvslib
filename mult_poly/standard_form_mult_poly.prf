(standard_form_mult_poly
 (Unif_cons 0
  (Unif_cons-1 nil 3810977422
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (expand "Unif?" 1)
          (("4" (skeep)
            (("4" (case "i=0")
              (("1" (expand "nth" 1)
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (expand "nth" 2)
                          (("2" (lift-if 2)
                            (("2" (split 2)
                              (("1" (flatten) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "Unif?" -3)
                                  (("2"
                                    (inst -3 "0" "j-1")
                                    (("1"
                                      (expand "nth" -3)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "length" 1)
                                        (("2"
                                          (typepred "j")
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "length" 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2)
                (("2" (assert)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "nth" 1)
                          (("1" (lift-if 1)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "Unif?" -3)
                                  (("2"
                                    (inst -3 "0" "i-1")
                                    (("1"
                                      (expand "nth" -3)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "length" 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "Unif?" -2)
                          (("2" (inst -2 "i-1" "j-1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl
     "below(length(cons(m, cons(cons1_var, cons2_var))))"
     standard_form_mult_poly nil)
    (m skolem-const-decl "monomial" standard_form_mult_poly nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl
       "below(length(cons(m, cons(cons1_var, cons2_var))))"
       standard_form_mult_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (caretzero_every 0
  (caretzero_every-1 nil 3810977425
   ("" (induct "n")
    (("1" (expand "^") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (expand "^" 1)
        (("2" (lemma "every_append[nat]")
          (("2"
            (inst -1
             "(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0))"
             "(: 0 :)" "(: 0 :)^j")
            (("1" (typepred "(: 0 :)")
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_append formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (restrict const-decl "R" restrict nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sum_TCC1 0
  (sum_TCC1-1 nil 3810975173 ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sum subtype "standard_form_mult_poly.l" "(list_adt[real].cons?)")))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3810975173 ("" (skeep) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sum termination
        "standard_form_mult_poly.sum(list_adt[nat].cdr(standard_form_mult_poly.l))"
        "nil")))
 (last_last_nth_TCC1 0
  (last_last_nth_TCC1-1 nil 3813568747
   ("" (induct "l")
    (("1" (assert) nil nil)
     ("2" (skeep)
      (("2" (assert)
        (("2" (expand "length" 1 1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (last_last_nth subtype
    "(number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), 1)"
    "below[length[nat](l)]")))
 (last_last_nth 0
  (last_last_nth-1 nil 3813568896
   ("" (induct "l")
    (("1" (assert) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var=null")
        (("1" (assert)
          (("1" (expand "last" 1 1)
            (("1" (expand "length" 1 1)
              (("1" (expand "length" 1 1)
                (("1" (assert)
                  (("1" (expand "length" 1 1)
                    (("1" (expand "nth" 1 1) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "last" 2 1)
            (("2" (expand "length" 2 1)
              (("2" (assert)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "nth" 1 1)
                          (("1" (lift-if 1)
                            (("1" (split 1)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "nth" 2)
                          (("2" (lift-if 2)
                            (("2" (split 2)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (last def-decl "real" standard_form_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (sum_nat 0
  (sum_nat-1 nil 3810977428
   ("" (induct "l")
    (("1" (lemma "rationals.closed_plus")
      (("1" (expand "sum") (("1" (propax) nil nil)) nil)) nil)
     ("2" (expand "sum") (("2" (propax) nil nil)) nil)
     ("3" (expand "sum") (("3" (assert) nil nil)) nil)
     ("4" (skeep)
      (("4" (split 1)
        (("1" (expand "sum" 1)
          (("1" (typepred "cons1_var")
            (("1" (lemma "rationals.closed_plus") (("1" (inst?) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "sum" 1)
          (("2" (lemma "integers.closed_plus")
            (("2" (typepred "cons1_var")
              (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (expand "sum" 1) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (closed_plus formula-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons2_var skolem-const-decl "list[nat]" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_plus formula-decl nil rationals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum def-decl "real" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_append 0
  (sum_append-1 nil 3810977430
   ("" (induct "l1")
    (("1" (skeep)
      (("1" (expand "sum" 1 1)
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (lemma "append_null_left[nat]")
                (("1" (inst? -1)
                  (("1" (replace -1)
                    (("1" (expand "sum" 1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "append_null_left[nat]")
                (("2" (inst? -1)
                  (("2" (replace -1)
                    (("2" (expand "sum" 2 3)
                      (("2" (expand "sum" 2 2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "sum" 1 1)
          (("2" (assert)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (lemma "length_append[nat]")
                    (("1" (inst? -1)
                      (("1" (expand "length" -1 1)
                        (("1" (assert)
                          (("1" (expand "length" -1 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "car_append[nat]")
                    (("2" (inst? -1)
                      (("2" (replace -1)
                        (("2" (assert)
                          (("2" (lemma "cdr_append[nat]")
                            (("2" (inst? -1)
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "sum" 2 2)
                                    (("2"
                                      (inst? -3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (length_append formula-decl nil list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (append_null_left formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (sum def-decl "real" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_0_TCC1 0
  (sum_0_TCC1-1 nil 3813659027 ("" (grind) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil (sum_0 subtype "(: 0 :)" "list[nat]")))
 (sum_0 0
        (sum_0-1 nil 3813659181
         ("" (induct "n")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (expand "^" 1)
              (("2" (expand "append" 1 1)
                (("2" (expand "sum" 1 1)
                  (("2" (expand "append" 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil)
         ((real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (append def-decl "list[T]" list_props nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (^ def-decl "list[T]" more_list_props structures)
          (sum def-decl "real" standard_form_mult_poly nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (pred type-eq-decl nil defined_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (number nonempty-type-decl nil numbers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (>= const-decl "bool" reals nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt
                nil)
          (listn_0 name-judgement "listn[nat](0)"
           standard_form_mult_poly nil))
         shostak))
 (sum_append_0 0
  (sum_append_0-1 nil 3813659207
   ("" (skeep)
    (("" (lemma "sum_append")
      (("" (lemma "sum_0")
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sum_append formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (sum_0 formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (sum_0_con 0
  (sum_0_con-1 nil 3813924819
   ("" (induct "l")
    (("1" (flatten) (("1" (inst 1 "0") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (case "cons2_var=null")
        (("1" (assert)
          (("1" (inst 1 "1")
            (("1" (expand "^" 1)
              (("1" (expand "sum" -3 1)
                (("1" (assert)
                  (("1" (expand "sum" -3 1) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "sum" -2)
            (("2" (assert)
              (("2" (lemma "sum_nat")
                (("2" (inst-cp -1 "cons2_var")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 2 "n+1")
                            (("2" (expand "^")
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "append" 2 1)
                                  (("2"
                                    (decompose-equality 2)
                                    (("1"
                                      (expand "^" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "caretzero_every")
                                      (("2"
                                        (inst -1 "n+1")
                                        (("2"
                                          (expand "^" -1)
                                          (("2"
                                            (expand "append" -1)
                                            (("2"
                                              (expand "append" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((caretzero_every formula-decl nil standard_form_mult_poly nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (n skolem-const-decl "nat" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_nat formula-decl nil standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (sum def-decl "real" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (add_mono_commutative_TCC1 0
  (add_mono_commutative_TCC1-1 nil 3810975173
   ("" (skeep) (("" (typepred "m2") (("" (assert) nil nil)) nil)) nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (add_mono_commutative subtype "standard_form_mult_poly.m1"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = standard_form_mult_poly.m2`alpha}")))
 (add_mono_commutative 0
  (add_mono_commutative-1 nil 3810977433
   ("" (skeep) (("" (expand "add_mono") (("" (propax) nil nil)) nil))
    nil)
   ((add_mono const-decl "monomial" standard_form_mult_poly nil))
   shostak))
 (term_deg_TCC1 0
  (term_deg_TCC1-1 nil 3810975173
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (term_deg subtype "standard_form_mult_poly.p"
             "(list_adt[monomial].cons?)")))
 (term_deg_TCC2 0
  (term_deg_TCC2-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "sum_nat")
      (("" (inst?) (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sum_nat formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (term_deg subtype
             "standard_form_mult_poly.sum(list_adt[monomial].car(standard_form_mult_poly.p)`alpha)"
             "nat")))
 (term_deg_TCC3 0
  (term_deg_TCC3-1 nil 3810975173
   ("" (skeep) (("" (expand "length") (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (term_deg termination
             "standard_form_mult_poly.term_deg(list_adt[monomial].cdr(standard_form_mult_poly.p))"
             "nil")))
 (term_deg_example 0
  (term_deg_example-1 nil 3810977435 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (homogen?_TCC1 0
  (homogen?_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (skeep) (("" (typepred "j") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (term_deg def-decl "list[nat]" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (homogen? subtype "standard_form_mult_poly.j"
    "below[length[nat](term_deg(p))]")))
 (homogen?_TCC2 0
  (homogen?_TCC2-1 nil 3810975173
   ("" (skeep)
    (("" (skeep) (("" (typepred "j") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (term_deg def-decl "list[nat]" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (homogen? subtype "(number_fields.+)(standard_form_mult_poly.j, 1)"
    "below[length[nat](term_deg(p))]")))
 (max_deg_TCC1 0
  (max_deg_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (assert) (("" (expand "term_deg") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term_deg def-decl "list[nat]" standard_form_mult_poly nil))
   nil
   (max_deg subtype
    "standard_form_mult_poly.term_deg(standard_form_mult_poly.p)"
    "(list_adt[real].cons?)")))
 (max_deg_TCC2 0
  (max_deg_TCC2-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil) nil nil
   (max_deg subtype "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (max_deg_TCC3 0
  (max_deg_TCC3-1 nil 3810975173
   ("" (skeep) (("" (expand "length") (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (max_deg termination
    "standard_form_mult_poly.max_deg(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "nil")))
 (max_deg_TCC4 0
  (max_deg_TCC4-1 nil 3810975173
   ("" (skeep)
    (("" (split)
      (("1" (typepred "v(cdr[monomial](p))")
        (("1" (typepred "term_deg(p)") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (grind)
        (("2" (lemma "sum_nat")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (typepred "term_deg(p)") (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((term_deg def-decl "list[nat]" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (sum_nat formula-decl nil standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil
   (max_deg subtype
    "real_defs.max(list_adt[real].car(standard_form_mult_poly.term_deg(standard_form_mult_poly.p)), standard_form_mult_poly.max_deg(list_adt[monomial].cdr(standard_form_mult_poly.p)))"
    "nat")))
 (max_length_TCC1 0
  (max_length_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil) nil nil
   (max_length subtype "standard_form_mult_poly.p"
               "(list_adt[monomial].cons?)")))
 (max_length_TCC2 0
  (max_length_TCC2-1 nil 3810975173
   ("" (induct "p")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep) (("2" (expand "length" 4) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (max_length termination
               "standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p))"
               "nil")))
 (max_length_ex1 0
  (max_length_ex1-1 nil 3810977437 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (max_length_ex2 0
  (max_length_ex2-1 nil 3810977438 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (max_length_is_max 0
  (max_length_is_max-1 nil 3810977440
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "cons?(cons2_var) = FALSE")
        (("1" (skeep)
          (("1" (typepred "j")
            (("1" (expand "length" -1)
              (("1" (expand "length" -1)
                (("1" (assert)
                  (("1" (expand "nth" 2)
                    (("1" (expand "max_length" 2)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (expand "nth" 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (expand "max_length" 1)
                    (("1" (assert)
                      (("1" (flatten 1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten 1)
                    (("2" (assert)
                      (("2" (inst -2 "j-1")
                        (("2" (expand "max_length" 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (max_length_is_nth 0
  (max_length_is_nth-1 nil 3810977443
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "cons2_var=null")
        (("1" (assert)
          (("1" (hide -2)
            (("1" (inst 1 "0")
              (("1" (expand "nth" 1) (("1" (grind) nil nil)) nil)
               ("2" (expand "length" 1 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "max_length" 2 1)
            (("2" (expand "max" 2 1)
              (("2" (assert)
                (("2"
                  (case "length(cons1_var`alpha) < max_length(cons2_var)")
                  (("1" (skeep)
                    (("1" (inst 2 "j+1")
                      (("1" (assert)
                        (("1" (expand "nth" 2 1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "length" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst 3 "0")
                      (("1" (expand "nth" 3 1) (("1" (propax) nil nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "length" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (max_length_Unif 0
  (max_length_Unif-1 nil 3810977446
   ("" (skeep)
    (("" (lemma "max_length_is_nth")
      (("" (inst?)
        (("" (skeep)
          (("" (typepred "p")
            (("" (inst -1 "j!1" "j") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (UnifInd type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (max_length_Unif_cdr 0
  (max_length_Unif_cdr-1 nil 3810977448
   ("" (skeep)
    (("" (typepred "p")
      (("" (lemma "max_length_is_nth")
        (("" (inst-cp -1 "p")
          (("" (inst -1 "cdr(p)")
            (("" (skeep)
              (("" (skeep)
                (("" (inst -3 "j+1" "j!1")
                  (("1" (expand "nth" -3 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "length" 1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (UnifInd type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p skolem-const-decl "{q: UnifInd | cons?(q) AND cons?(cdr(q))}"
     standard_form_mult_poly nil)
    (j skolem-const-decl "below(length(cdr(p)))"
     standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil))
   shostak))
 (max_length_a 0
  (max_length_a-1 nil 3810977450
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "length" 1 1)
        (("2" (expand "max_length" 1)
          (("2" (expand "length_a" 1)
            (("2" (expand "max" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "max" 1 1) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "max" 2 1)
                      (("2" (assert)
                        (("2" (assert)
                          (("2" (flip-ineq 1)
                            (("2" (mult-by -1 "length(cons2_var)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length_a def-decl "nat" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (lft_TCC1 0
  (lft_TCC1-1 nil 3810975173
   ("" (lemma "max_length_a")
    (("" (skeep)
      (("" (inst -1 "p")
        (("" (typepred "n")
          (("" (assert)
            (("" (mult-by -1 "length(p)") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_length_a formula-decl nil standard_form_mult_poly nil))
   nil
   (lft subtype
        "(number_fields.-)((number_fields.+)(list_props[monomial].length(standard_form_mult_poly.p), number_fields.*(standard_form_mult_poly.n, list_props[monomial].length(standard_form_mult_poly.p))), standard_form_mult_poly.length_a(standard_form_mult_poly.p))"
        "naturalnumber")))
 (lft_TCC2 0
  (lft_TCC3-1 nil 3810975173 ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (lft subtype
        "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(list_adt[monomial].car(standard_form_mult_poly.p)`alpha)))"
        "nat")))
 (lft_TCC3 0
  (lft_TCC4-1 nil 3810975173
   ("" (skeep)
    (("" (typepred "n")
      (("" (expand "max_length" -1)
        (("" (assert)
          (("" (expand "length" 1)
            (("" (lift-if -1)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (lift-if 1) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "max" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil))
   nil
   (lft subtype "standard_form_mult_poly.n"
        "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p)))}")))
 (lft_TCC4 0
  (lft_TCC5-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length_a" 2 2)
      (("" (assert)
        (("" (case "p=null")
          (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (expand "length" 3 3)
              (("2" (assert)
                (("2" (expand "length" 3 5) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_a def-decl "nat" standard_form_mult_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (lft termination
        "standard_form_mult_poly.lft(list_adt[monomial].cdr(standard_form_mult_poly.p))(standard_form_mult_poly.n)"
        "nil")))
 (lft_TCC5 0
  (lft_TCC6-1 nil 3810975173
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "max_length_is_nth")
        (("" (inst -1 "cdr(p)")
          (("1" (skeep)
            (("1" (lemma "max_length_is_max")
              (("1" (inst -1 "p" "j+1")
                (("1" (expand "nth" -1) (("1" (assert) nil nil)) nil)
                 ("2" (expand "length" 1)
                  (("2" (assert)
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "max_length" 4) (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "below(length(cdr(p)))"
     standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil))
   nil
   (lft subtype "standard_form_mult_poly.n"
        "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p)))}")))
 (lft_TCC6 0
  (lft_TCC7-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" 3 3)
      (("" (assert)
        (("" (expand "length" 1)
          (("" (assert)
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "length" 4 4)
                      (("2" (expand "length_a" 4 2)
                        (("2" (assert)
                          (("2" (move-terms 4 l 1)
                            (("2" (assert)
                              (("2"
                                (move-terms 4 l 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "NOT length[monomial](cdr(p)) * n =  n * length[monomial](cdr[monomial](p))")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (move-terms 4 l 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT length_a(cdr[monomial](p)) = length_a(cdr(p))")
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (case
                                                   "NOT 1 - length(car(p)`alpha) - length_a(cdr(p)) - -length_a(cdr(p)) + n = 1 - length(car(p)`alpha) + n")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (typepred "n")
                                                      (("2"
                                                        (move-terms
                                                         4
                                                         r
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "max_length_is_max")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "0")
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_a def-decl "nat" standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (lft termination
        "standard_form_mult_poly.lft(list_adt[monomial].cdr(standard_form_mult_poly.p))(standard_form_mult_poly.n)"
        "nil")))
 (lft_one_TCC1 0
  (lft_one_TCC2-1 nil 3811599960 ("" (subtype-tcc) nil nil) nil nil
   (lft_one subtype
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(standard_form_mult_poly.m`alpha)))"
    "nat")))
 (lft_one_length_TCC1 0
  (lft_one_length_TCC1-1 nil 3813922449 ("" (subtype-tcc) nil nil) nil
   nil
   (lft_one_length subtype "standard_form_mult_poly.m"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (lft_one_length 0
  (lft_one_length-1 nil 3813922651
   ("" (skeep)
    (("" (expand "lft_one" 1)
      (("" (lemma "length_append[nat]")
        (("" (inst?)
          (("" (assert)
            (("" (replace -1)
              (("" (lemma "length_appendn[nat]")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lft_one const-decl "monomial" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_appendn formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (lft_alt_TCC1 0
  (lft_alt_TCC1-1 nil 3811599960
   ("" (skeep :preds? T)
    (("" (rewrite "every_nth")
      (("" (skeep)
        (("" (lemma "max_length_is_max")
          (("" (inst?)
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (typepred "i")
                (("2" (expand "length") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (lft_alt subtype "standard_form_mult_poly.p"
    "list[{m: monomial | n >= length[nat](m`alpha)}]")))
 (lft_is_alt 0
  (lft_is_alt-1 nil 3811600316
   ("" (induct "p")
    (("1" (expand "lft")
      (("1" (assert)
        (("1" (expand "lft_alt")
          (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "lft_alt" 1)
          (("2" (expand "map" 1)
            (("2" (expand "lft" 1)
              (("2" (assert)
                (("2" (expand "length" 1 1)
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (inst?)
                          (("1" (expand "lft_alt" -1)
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (expand "lft_one")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "lft_one")
                                      (("2"
                                        (decompose-equality 2)
                                        (("1"
                                          (typepred "n")
                                          (("1"
                                            (case
                                             "n = length(cons1_var`alpha)")
                                            (("1"
                                              (expand "max_length")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flip-ineq 2)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "append_null_right")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "max_length")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "n")
                                          (("2"
                                            (expand "max_length")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "n")
                            (("2" (expand "max_length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (n skolem-const-decl
     "{n: nat | n >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_null_right formula-decl nil more_list_props structures)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_example1_TCC1 0
  (lft_example1_TCC1-1 nil 3810975173
   ("" (skeep) (("" (replace -1) (("" (eval-formula 1) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lft_example1 subtype "3"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mp))}")))
 (lft_example1 0
  (lft_example1-1 nil 3810977453 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Lft_length 0
  (Lft_length-1 nil 3810977454
   ("" (induct "p")
    (("1" (skeep) (("1" (expand "lft") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "length" 1 1)
          (("2" (expand "lft" 1)
            (("2" (lift-if 1)
              (("2" (assert)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "length" -1) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "length" 1 2)
                          (("1" (inst?) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "length" 2 2)
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (max_length_lft 0
  (max_length_lft-1 nil 3810977457
   ("" (induct "p")
    (("1" (skeep)
      (("1" (lemma "Lft_length")
        (("1" (inst?)
          (("1" (expand "max_length" 1)
            (("1" (expand "length" -1)
              (("1" (assert)
                (("1" (expand "lft") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "lft" 1)
          (("2" (lift-if 1)
            (("2" (assert)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "max_length" 1 2)
                        (("1" (lemma "length_append[nat]")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (lemma "length_appendn[nat]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "length" 1 2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "max_length" 2 2)
                        (("2" (typepred "n") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (length_append formula-decl nil list_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (^ def-decl "list[T]" more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (n skolem-const-decl
     "{nn: nat | nn >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (<= const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_length_nth_TCC1 0
  (lft_length_nth_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (typepred "j")
      (("" (lemma "Lft_length")
        (("" (inst?) (("" (replace -1) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil))
   nil
   (lft_length_nth subtype "standard_form_mult_poly.j"
    "below[length[monomial](lft(p)(n))]")))
 (lft_length_nth 0
  (lft_length_nth-1 nil 3810977461
   ("" (induct "p")
    (("1" (assert) nil nil)
     ("2" (expand "lft") (("2" (propax) nil nil)) nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (case "cons2_var = null")
            (("1" (replace -1)
              (("1" (skeep)
                (("1" (typepred "j")
                  (("1" (expand "length" -1)
                    (("1" (expand "length" -1)
                      (("1" (assert)
                        (("1" (expand "nth" 1)
                          (("1" (expand "lft" 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "length_append[nat]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "length_appendn[nat]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "length" 1 2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (replace -5)
                                                  (("2"
                                                    (expand
                                                     max_length
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       max_length
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "n")
                                        (("2"
                                          (expand "max_length" -1)
                                          (("2"
                                            (expand "max_length" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (expand "max_length" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (expand "lft" 2)
                  (("2" (lift-if)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (case "j=0")
                          (("1" (replace -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (typepred "n")
                                (("1"
                                  (expand "max_length" -1)
                                  (("1"
                                    (lemma "length_append[nat]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "length_appendn[nat]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2"
                                (inst -3 "n")
                                (("2"
                                  (inst -3 "j-1")
                                  (("2"
                                    (typepred "j")
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (case "j=0")
                          (("1" (expand "nth" 2)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "n")
                                  (("1"
                                    (expand "max_length" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 3)
                            (("2" (assert)
                              (("2"
                                (inst -1 "n")
                                (("2"
                                  (inst -1 "j-1")
                                  (("2"
                                    (typepred "j")
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "j")
            (("4" (lemma "Lft_length")
              (("4" (inst?)
                (("4" (replace -1) (("4" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (j skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (n skolem-const-decl
     "{nn: nat | nn >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (length_appendn formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (lft_nth_C_TCC1 0
  (lft_nth_C_TCC1-1 nil 3813581540
   ("" (skeep)
    (("" (lemma "Lft_length")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (lft_nth_C subtype "standard_form_mult_poly.i"
    "below[length[monomial](lft(p)(n))]")))
 (lft_nth_C 0
  (lft_nth_C-1 nil 3813582353
   ("" (induct "p")
    (("1" (skeep) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (expand "nth" 1)
            (("1" (assert)
              (("1" (expand "lft" 1 1) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "nth" 2 1)
            (("2" (assert)
              (("2" (expand "nth" 2 2)
                (("2" (assert)
                  (("2" (expand "lft" 2 1)
                    (("2" (assert) (("2" (inst -1 "n" "i-1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (lemma "Lft_length")
        (("3" (hide 2)
          (("3" (skeep) (("3" (inst?) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (lft_nth_alpha_TCC1 0
  (lft_nth_alpha_TCC2-1 nil 3813656195
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "max_length_is_max")
        (("" (inst?)
          (("1" (assert) nil nil)
           ("2" (typepred "i") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil))
   nil
   (lft_nth_alpha subtype
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.i)`alpha)))"
    "nat")))
 (lft_nth_alpha 0
  (lft_nth_alpha-1 nil 3813656446
   ("" (induct "p")
    (("1" (skeep) (("1" (typepred "i") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (lemma "lft_is_alt")
            (("1" (inst?)
              (("1" (replace -1 1)
                (("1" (expand "lft_alt" 1)
                  (("1" (expand "map" 1 1)
                    (("1" (expand "nth" 1)
                      (("1" (assert)
                        (("1" (expand "lft_one" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (expand "lft" 2)
                (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "max_length_is_max")
          (("3" (inst?)
            (("1" (assert) nil nil)
             ("2" (typepred "i") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep) (("4" (grind) nil nil)) nil)) nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "i")
          (("5" (lemma "Lft_length")
            (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (lft_Unif_TCC1 0
  (lft_Unif_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (lft_Unif subtype
    "standard_form_mult_poly.max_length(standard_form_mult_poly.p)"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.p))}")))
 (lft_Unif 0
  (lft_Unif-1 nil 3810977466
   ("" (skeep)
    (("" (case "p = null")
      (("1" (replace -1)
        (("1" (expand "lft")
          (("1" (assert)
            (("1" (expand "Unif?") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "Unif?")
        (("2" (case "lft(p)(max_length(p)) = null")
          (("1" (assert) nil nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (lemma "lft_length_nth")
                (("2" (inst?)
                  (("1" (replace -1)
                    (("1" (lemma "lft_length_nth")
                      (("1" (inst -1 "p" "max_length(p)" "j")
                        (("1" (replace -1) (("1" (propax) nil nil))
                          nil)
                         ("2" (typepred "j")
                          (("2" (lemma "Lft_length")
                            (("2" (inst?)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (lemma "Lft_length")
                      (("2" (inst?)
                        (("2" (replace -1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (length_null formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(lft(p)(max_length(p))))"
       standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (j skolem-const-decl "below(length(lft(p)(max_length(p))))"
     standard_form_mult_poly nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_n_last_TCC1 0
  (lft_n_last_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" -1)
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (lft_n_last subtype
    "list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (lft_n_last_TCC2 0
  (lft_n_last_TCC3-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "lft_length_nth")
      (("" (inst?)
        (("1" (expand "length" -1)
          (("1" (lift-if -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert)
          (("2" (typepred "j")
            (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil))
   nil
   (lft_n_last subtype
    "list_props[monomial].nth(standard_form_mult_poly.lft(standard_form_mult_poly.p)(standard_form_mult_poly.n), standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (lft_n_last 0
  (lft_n_last-1 nil 3810977468
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "j=0")
          (("1" (replace -1)
            (("1" (expand "nth" -3)
              (("1" (hide 1)
                (("1" (expand "lft" 1)
                  (("1" (assert)
                    (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 3)
            (("2" (assert)
              (("2" (expand "lft" 3)
                (("2" (assert)
                  (("2" (expand "nth" -2)
                    (("2" (inst -1 "n" "j-1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "lft_length_nth")
        (("3" (inst? -1)
          (("1" (expand "length" -1)
            (("1" (lift-if -1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (typepred "n")
                (("2" (expand "max_length") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (typepred "j")
          (("4" (lemma "Lft_length")
            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (expand "length" -1)
        (("5" (lift-if -1) (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (last def-decl "real" standard_form_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (lft_n_max_length 0
  (lft_n_max_length-1 nil 3814224639
   ("" (skeep)
    (("" (lemma "max_length_is_nth")
      (("" (inst?)
        (("1" (assert)
          (("1" (skeep)
            (("1" (lemma "lft_length_nth")
              (("1" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "j")
                  (("2" (lemma "Lft_length")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "Lft_length")
          (("2" (inst?)
            (("2" (expand "length" -1)
              (("2" (lift-if -1)
                (("2" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "below(length(lft(p)(n)))"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (n skolem-const-decl "{nn: nat | nn >= max_length(p)}"
     standard_form_mult_poly nil))
   shostak))
 (leq_TCC1 0
  (leq_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" 5 2)
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (leq termination
        "standard_form_mult_poly.leq((# C := standard_form_mult_poly.l1`C, alpha := list_adt[nat].cdr(standard_form_mult_poly.l1`alpha) #), (# C := standard_form_mult_poly.l2`C, alpha := list_adt[nat].cdr(standard_form_mult_poly.l2`alpha) #))"
        "nil")))
 (leq_reflexive 0
  (leq_reflexive-1 nil 3810977472
   ("" (expand "reflexive?")
    (("" (expand "leq")
      ((""
        (case " FORALL (m:nat, x: monomial): length(x`alpha)=m IMPLIES ((null?(x`alpha) AND null?(x`alpha)) OR cons?(x`alpha) AND cons?(x`alpha) AND leq((# C := x`C, alpha := cdr(x`alpha) #), (# C := x`C, alpha := cdr(x`alpha) #)))")
        (("1" (skeep)
          (("1" (inst -1 "length(x`alpha)" "x")
            (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (induct "m")
          (("1" (skeep)
            (("1" (hide 3)
              (("1" (expand "length" -1)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (assert) nil nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (skeep)
                (("2" (expand "length" -2)
                  (("2" (lift-if -2)
                    (("2" (split -2)
                      (("1" (flatten -1)
                        (("1" (typepred "j") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (flatten -1)
                        (("2" (simplify -1)
                          (("2"
                            (inst -2
                             "(# C := x`C, alpha := cdr(x`alpha) #)")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "leq" 3)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq def-decl "bool" standard_form_mult_poly nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (leq_transitive 0
  (leq_transitive-1 nil 3810977475
   ("" (expand "transitive?" 1)
    ((""
      (case "FORALL (n:nat, x: monomial), (y: monomial), (z: monomial): length(x`alpha)=n IMPLIES ( leq(x, y) & leq(y, z) => leq(x, z))")
      (("1" (skeep)
        (("1" (inst -1 "length(x`alpha)" "x" "y" "z")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (case "length(x`alpha) = length(y`alpha)")
              (("1" (case "length(z`alpha) = length(y`alpha)")
                (("1" (expand "length" -)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "leq")
                                          (("1" (flatten) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "leq" 2 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "leq" -2)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (expand "leq" 2)
                      (("2" (expand "leq" -2)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (case "NOT length(x`alpha) = length(y`alpha)")
                (("1" (expand "leq" -3)
                  (("1" (assert)
                    (("1" (expand "leq" -4)
                      (("1" (case "length(y`alpha) < length(z`alpha)")
                        (("1" (assert)
                          (("1" (expand "leq" 2)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "NOT length(y`alpha) = length(z`alpha)")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "leq" 3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "leq" -4)
                  (("2" (assert)
                    (("2" (case "length(y`alpha)< length(z`alpha)")
                      (("1" (assert)
                        (("1" (expand "leq" 1 1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "leq" 2 1)
                          (("2" (flatten)
                            (("2"
                              (case "NOT length(y`alpha) = length(z`alpha)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "leq" -5)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "leq" -6)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "sum(x`alpha) < sum(y`alpha)")
                                      (("1"
                                        (case
                                         "sum(y`alpha) < sum(z`alpha)")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "sum(x`alpha) = sum(y`alpha)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "(sum(y`alpha) = sum(z`alpha))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "car(x`alpha) < car(y`alpha)")
                                                  (("1"
                                                    (case
                                                     "car(y`alpha) < car(z`alpha)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "car(y`alpha) = car(z`alpha)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "car(x`alpha) = car(y`alpha)")
                                                      (("1"
                                                        (case
                                                         "car(y`alpha) < car(z`alpha)")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "(# C := x`C, alpha := cdr(x`alpha) #)"
                                                                 "(# C := y`C, alpha := cdr(y`alpha) #)"
                                                                 "(# C := z`C, alpha := cdr(z`alpha) #)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -6)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq def-decl "bool" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sum def-decl "real" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil))
   shostak))
 (leq_dichotomous 0
  (leq_dichotomous-1 nil 3810977483
   ("" (expand "dichotomous?")
    ((""
      (case "FORALL (n:nat, x: monomial), (y: monomial): (length(x`alpha) =n) IMPLIES (leq(x, y) OR leq(y, x))")
      (("1" (skeep)
        (("1" (inst -1 "length(x`alpha)" "x" "y")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (expand "leq" 1)
              (("1" (assert)
                (("1" (case "length(y`alpha)=0")
                  (("1" (assert)
                    (("1" (expand "length" -)
                      (("1" (lift-if -1)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (lift-if -2)
                              (("1"
                                (split -2)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "leq" +)
                (("2" (flatten)
                  (("2" (assert)
                    (("2"
                      (case "NOT length(y`alpha) = length(x`alpha)")
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (assert)
                          (("2" (hide 2 7)
                            (("2"
                              (inst -2
                               "(# C := y`C, alpha := cdr(y`alpha) #)"
                               "(# C := x`C, alpha := cdr(x`alpha) #)")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (expand "length" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq def-decl "bool" standard_form_mult_poly nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dichotomous? const-decl "bool" orders nil))
   shostak))
 (almost_total_order 0
  (almost_total_order-1 nil 3810977487
   (""
    (case "FORALL (n:nat, m1, m2: monomial): length(m1`alpha) = n IMPLIES ( leq(m1, m2) AND leq(m2, m1) IMPLIES m1`alpha = m2`alpha)")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "m1" "m2")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if)
              (("1" (split -1)
                (("1" (expand "leq")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (assert) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "length" -2)
              (("2" (lift-if -2)
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (expand "leq" -3)
                        (("2" (expand "leq" -4)
                          (("2" (split -3)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert)
                              (("3"
                                (flatten)
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (flatten) (("4" (assert) nil nil))
                              nil)
                             ("5" (flatten)
                              (("5"
                                (assert)
                                (("5"
                                  (inst
                                   -8
                                   "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                   "(# C := m2`C, alpha := cdr(m2`alpha) #)")
                                  (("5"
                                    (assert)
                                    (("5"
                                      (hide -6)
                                      (("5"
                                        (hide -8)
                                        (("5"
                                          (hide -6)
                                          (("5"
                                            (case
                                             "FORALL(l1,l2:list[nat]): cons?(l1) AND cons?(l2) IMPLIES (car(l1)=car(l2) AND cdr(l1) = cdr(l2))  IMPLIES l1=l2")
                                            (("1"
                                              (inst
                                               -1
                                               "m1`alpha"
                                               "m2`alpha")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (lemma
                                                   "list_extensionality[nat]")
                                                  (("2"
                                                    (inst -1 "l1" "l2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         length
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "n=0")
                                                            (("1"
                                                              (expand
                                                               nth
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               nth
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (IMP_bubblesort_TCC1 0
  (IMP_bubblesort_TCC1-1 nil 3810975173
   ("" (expand "total_preorder?")
    (("" (lemma "leq_reflexive")
      (("" (lemma "leq_transitive")
        (("" (lemma "leq_dichotomous")
          (("" (assert)
            (("" (expand "preorder?" 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_reflexive formula-decl nil standard_form_mult_poly nil)
    (leq_dichotomous formula-decl nil standard_form_mult_poly nil)
    (preorder? const-decl "bool" orders nil)
    (leq_transitive formula-decl nil standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting))
   nil
   (IMP_bubblesort subtype "standard_form_mult_poly.leq"
    "(total_preorder[monomial].total_preorder?)")))
 (leq_total_preorder 0
  (leq_total_preorder-1 nil 3810977491
   ("" (expand "total_preorder?")
    (("" (lemma "leq_dichotomous")
      (("" (assert)
        (("" (expand "preorder?")
          (("" (lemma "leq_reflexive")
            (("" (lemma "leq_transitive") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_dichotomous formula-decl nil standard_form_mult_poly nil)
    (preorder? const-decl "bool" orders nil)
    (leq_transitive formula-decl nil standard_form_mult_poly nil)
    (leq_reflexive formula-decl nil standard_form_mult_poly nil)
    (total_preorder? const-decl "bool" total_preorder sorting))
   shostak))
 (mv_sort_ex1 0
  (mv_sort_ex1-1 nil 3810977493 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (sort_of_unif 0
  (sort_of_unif-1 nil 3811579596
   ("" (skeep :preds? T)
    (("" (expand "mv_sort")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "Unif?") (("1" (propax) nil nil)) nil)) nil)
         ("2" (flatten)
          (("2" (expand "Unif?")
            (("2" (flatten)
              (("2" (skeep :preds? T)
                (("2" (lemma "bubblesort_works")
                  (("2" (inst?)
                    (("2" (flatten)
                      (("2" (rewrite "permutations_is_commutative")
                        (("1" (lemma "permutations_preserve_contents")
                          (("1"
                            (inst-cp -1
                             "bubblesort(lft(p)(max_length(p)))"
                             "lft(p)(max_length(p))" "i")
                            (("1" (assert)
                              (("1"
                                (skolem -2 "i1")
                                (("1"
                                  (inst
                                   -1
                                   "bubblesort(lft(p)(max_length(p)))"
                                   "lft(p)(max_length(p))"
                                   "j")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skolem -1 "j1")
                                      (("1"
                                        (lemma "lft_Unif")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "Unif?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand "lft" -1)
                                                  (("1"
                                                    (case
                                                     "length(p) < 1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -1 "i1" "j1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "leq_total_preorder")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "leq_total_preorder")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "leq_total_preorder")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bubblesort_works formula-decl nil bubblesort sorting)
    (permutations_preserve_contents formula-decl nil sorting_aux
     sorting)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lft_Unif formula-decl nil standard_form_mult_poly nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutations_is_commutative formula-decl nil sorting_aux sorting)
    (bubblesort const-decl "list[T]" bubblesort sorting)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (PRED type-eq-decl nil defined_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil))
   shostak))
 (mv_sort_max_length 0
  (mv_sort_max_length-1 nil 3814220335
   ("" (skeep :preds? T)
    (("" (expand "mv_sort")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "max_length_is_nth")
              (("2" (inst-cp -1 "bubblesort(lft(p)(max_length(p)))")
                (("1" (inst -1 "p")
                  (("1" (skeep*)
                    (("1" (lemma "bubblesort_works")
                      (("1" (inst?)
                        (("1" (flatten)
                          (("1" (rewrite "permutations_is_commutative")
                            (("1"
                              (lemma "permutations_preserve_contents")
                              (("1"
                                (inst-cp
                                 -1
                                 "bubblesort(lft(p)(max_length(p)))"
                                 "lft(p)(max_length(p))"
                                 "j!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep -2)
                                    (("1"
                                      (inst
                                       -1
                                       "bubblesort(lft(p)(max_length(p)))"
                                       "lft(p)(max_length(p))"
                                       "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "j1")
                                          (("1"
                                            (lemma "max_length_lft")
                                            (("1"
                                              (inst
                                               -1
                                               "p"
                                               "max_length(p)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "lft_length_nth")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "p"
                                                     "max_length(p)"
                                                     "j!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "j!2")
                                                      (("2"
                                                        (lemma
                                                         "Lft_length")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "j")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "bubblesort" 1 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "Lft_length")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "bubblesort_aux_preserves_length")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "Lft_length")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "leq_total_preorder")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "leq_total_preorder")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "leq_total_preorder")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "bubblesort" 1 1)
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (lemma "Lft_length")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (lemma "bubblesort_aux_preserves_length")
                            (("2" (inst?)
                              (("1"
                                (case
                                 "cons?
          (bubblesort_aux(lft(p)(max_length(p)),
                          length[monomial](lft(p)(max_length(p))) - 1))")
                                (("1" (propax) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "length" -1 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" -1 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (lemma "leq_total_preorder")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (lemma "Lft_length")
                                  (("4"
                                    (inst?)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (hide -2)
                                        (("4"
                                          (expand "length" -1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (expand "length" 1 1)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "leq_total_preorder")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (bubblesort_aux def-decl "list[T]" bubblesort sorting)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bubblesort_works formula-decl nil bubblesort sorting)
    (permutations_preserve_contents formula-decl nil sorting_aux
     sorting)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "below(length(p))" standard_form_mult_poly
     nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (j!2 skolem-const-decl "below[length(lft(p)(max_length(p)))]"
     standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_lft formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bubblesort_aux_preserves_length formula-decl nil bubblesort
     sorting)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (permutations_is_commutative formula-decl nil sorting_aux sorting)
    (TRUE const-decl "bool" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bubblesort const-decl "list[T]" bubblesort sorting)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (mv_sort_is_sorted 0
  (mv_sort_is_sorted-1 nil 3810977495
   ("" (skeep)
    (("" (expand "mv_sort")
      (("" (split)
        (("1" (expand "mv_is_sorted?")
          (("1" (expand "is_sorted?")
            (("1" (assert)
              (("1" (expand "Unif?") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "bubblesort_is_sorted")
            (("2" (lemma "sort_of_unif")
              (("2" (expand "mv_is_sorted?")
                (("2" (expand "mv_sort")
                  (("2" (assert)
                    (("2" (inst?)
                      (("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (sort_of_unif formula-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (bubblesort_is_sorted formula-decl nil bubblesort sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (length_null formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting))
   shostak))
 (cons_smaller_to_sorted_is_sorted 0
  (cons_smaller_to_sorted_is_sorted-1 nil 3810977497
   ("" (skeep)
    (("" (expand "is_sorted?")
      (("" (skeep)
        (("" (case "k=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (inst -2 "k-1")
                (("2" (expand "length" -4) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_sorted? const-decl "bool" sorting sorting)
    (below type-eq-decl nil nat_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (add_mono_sorted_TCC1 0
  (add_mono_sorted_TCC1-1 nil 3810975173
   ("" (skeep) (("" (typepred "m2") (("" (assert) nil nil)) nil)) nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (add_mono_sorted subtype "standard_form_mult_poly.m2"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = standard_form_mult_poly.m1`alpha}")))
 (add_mono_sorted 0
  (add_mono_sorted-1 nil 3810977499
   ("" (skeep)
    (("" (expand "is_sorted?" 1)
      (("" (skeep)
        (("" (case "k=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (expand "is_sorted?" -2)
                (("2" (inst -2 "k-1")
                  (("2" (expand "length" -4) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_sorted? const-decl "bool" sorting sorting)
    (below type-eq-decl nil nat_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (constant_doesnt_matter 0
  (constant_doesnt_matter-1 nil 3810977501
   (""
    (case "FORALL (n:nat, m1, m2, m3: monomial): length(m1`alpha) = n  IMPLIES ( leq(m1, m3) AND m1`alpha = m2`alpha IMPLIES leq(m2, m3))")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "m1" "m2" "m3")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (expand "leq" 1 1)
              (("1" (replace -3 -1)
                (("1" (replace -3 -1 rl)
                  (("1" (replace -3 -1)
                    (("1" (expand "length" -1)
                      (("1" (lift-if -1)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "length" 1 1)
                                (("1"
                                  (expand "length" 1 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "leq" -3)
              (("2" (expand "leq" 1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (split -3)
                      (("1" (flatten)
                        (("1" (replace -5) (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil)
                       ("3" (flatten)
                        (("3" (assert)
                          (("3" (replace -8)
                            (("3" (assert)
                              (("3"
                                (inst
                                 -6
                                 "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                 "(# C := m2`C, alpha := cdr(m2`alpha) #)"
                                 "(# C := m3`C, alpha := cdr(m3`alpha) #)")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "length" -6)
                                    (("3"
                                      (reveal -)
                                      (("3"
                                        (hide -1 -2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (constant_doesnt_matter_last 0
  (constant_doesnt_matter_last-1 nil 3810977506
   (""
    (case "FORALL (n:nat,m1, m2, m3: monomial): (length(m1`alpha) = n AND leq(m1, m2) AND m2`alpha = m3`alpha) IMPLIES leq(m1, m3)")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "m1" "m2" "m3")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "leq" 1)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "length" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "leq" -3)
              (("2" (expand "leq" 1)
                (("2" (replace -4)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (split -3)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil)
                           ("3" (flatten)
                            (("3" (hide 1)
                              (("3"
                                (hide 1)
                                (("3"
                                  (hide 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst
                                       -6
                                       "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                       "(# C := m2`C, alpha := cdr(m3`alpha) #)"
                                       "(# C := m3`C, alpha := cdr(m3`alpha) #)")
                                      (("3"
                                        (expand "length" -7)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (append_leq 0
  (append_leq-1 nil 3810977509
   (""
    (case "FORALL (n:nat,l: list[nat], m1: monomial,m2: {mm: monomial | length(m1`alpha) = length(mm`alpha)}): LET M1: [# alpha: list[nat], C: real #] = (# C := m1`C, alpha := append(m1`alpha, l) #), M2: [# alpha: list[nat], C: real #] = (# C := m2`C, alpha := append(m2`alpha, l) #) IN length(m1`alpha) =n AND leq(m1, m2) IMPLIES leq(M1, M2)")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "l" "m1" "m2") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (inst? -1) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (induct "l")
          (("1" (skeep)
            (("1" (lemma "append_null_right[nat]")
              (("1" (lemma "append_null_right[nat]")
                (("1" (inst? -1)
                  (("1" (replace -1)
                    (("1" (inst -2 "m2`alpha")
                      (("1" (replace -2)
                        (("1" (expand "leq") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "length" -2)
                (("2" (lift-if -2)
                  (("2" (split -2)
                    (("1" (typepred "m2")
                      (("1" (expand "length" -1)
                        (("1" (assert)
                          (("1" (lift-if -1)
                            (("1" (split -1)
                              (("1"
                                (lemma "append_null_left[nat]")
                                (("1"
                                  (inst -1 "cons(cons1_var,cons2_var)")
                                  (("1"
                                    (case
                                     "m1`alpha = (: :) AND m2`alpha = (: :)")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "leq" 1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(# C := m1`C, alpha := (: :) #)"
                                                           "(# C := m2`C, alpha := (: :) #)")
                                                          (("1"
                                                            (expand
                                                             length
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               leq
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "append_null_left[nat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "cons2_var")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "length" -2)
              (("3" (lift-if -2)
                (("3" (split -2)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (typepred "m2")
                        (("2" (expand "leq" -4)
                          (("2" (split -4)
                            (("1" (expand "leq" 2)
                              (("1"
                                (lemma "sum_append")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (lemma "length_append[nat]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma "length_append[nat]")
                                          (("1"
                                            (inst -1 "m2`alpha" "l")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "sum_append")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "m2`alpha"
                                                             "l")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   sum
                                                                   2
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lift-if
                                                                       3)
                                                                      (("1"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             sum
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             sum
                                                                             2
                                                                             4)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "leq" 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "length_append[nat]")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "length_append[nat]")
                                          (("2"
                                            (inst -1 "m2`alpha" "l")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "sum_append")
                                                        (("2"
                                                          (lemma
                                                           "sum_append")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "m2`alpha"
                                                                   "l")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "car_append[nat]")
                                                                            (("2"
                                                                              (lemma
                                                                               "car_append[nat]")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "l"
                                                                                       "m2`alpha")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             6)
                                                                                            (("2"
                                                                                              (hide
                                                                                               4)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "length_append[nat]")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         length
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           length
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "length_append[nat]")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m1`alpha"
                                                                                                                         "l")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           length
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             length
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "leq" 2)
                              (("3"
                                (flatten)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (hide 2)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "length_append[nat]")
                                          (("3"
                                            (lemma
                                             "length_append[nat]")
                                            (("3"
                                              (inst -1 "m1`alpha" "l")
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (expand "length" -1 2)
                                                  (("3"
                                                    (expand
                                                     length
                                                     -1
                                                     1)
                                                    (("3"
                                                      (lift-if -1)
                                                      (("3"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "m2`alpha"
                                                                 "l")
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       length
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         length
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sum_append")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sum_append")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m2`alpha"
                                                                                               "l")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "car_append[nat]")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "car_append[nat]")
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "l"
                                                                                                                 "m1`alpha")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "cdr_append[nat]")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "cdr_append[nat]")
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "l"
                                                                                                                                   "m2`alpha")
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -7
                                                                                                                                         "l"
                                                                                                                                         "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                                                                                                                         "(# C := m2`C, alpha := cdr(m2`alpha) #)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "m2")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             length
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (m2 skolem-const-decl
     "{mm: monomial | length(m1`alpha) = length(mm`alpha)}"
     standard_form_mult_poly nil)
    (m1 skolem-const-decl "monomial" standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cdr_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (sum def-decl "real" standard_form_mult_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_append formula-decl nil list_props nil)
    (sum_append formula-decl nil standard_form_mult_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null_left formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (sortedsimplify_TCC1 0
  (sortedsimplify_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil) nil nil
   (sortedsimplify subtype
    "list_adt[monomial].cdr(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (sortedsimplify_TCC2 0
  (sortedsimplify_TCC2-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sortedsimplify subtype
    "list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = list_adt[monomial].car(standard_form_mult_poly.p)`alpha}")))
 (sortedsimplify_TCC3 0
  (sortedsimplify_TCC3-1 nil 3810975173
   ("" (skeep)
    (("" (expand "add_mono")
      (("" (replace -1)
        (("" (case "cdr(cdr(p)) = null")
          (("1" (replace -1)
            (("1" (expand "is_sorted?") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "cons_smaller_to_sorted_is_sorted")
            (("2" (inst?)
              (("2" (assert)
                (("2" (typepred "p")
                  (("2" (lemma "cdr_of_sorted_is_sorted")
                    (("2" (inst -1 "p")
                      (("2" (assert)
                        (("2" (lemma "cdr_of_sorted_is_sorted")
                          (("2" (inst -1 "cdr(p)")
                            (("2" (assert)
                              (("2"
                                (expand "is_sorted?" -2)
                                (("2"
                                  (inst -2 "0")
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (expand "length" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -2)
                                          (("1"
                                            (lift-if -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -2)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "nth" -1)
                                                        (("1"
                                                          (lemma
                                                           "constant_doesnt_matter")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "car(cdr(p))"
                                                             "(# C:= car[monomial](cdr[monomial](p))`C +car[monomial](p)`C,alpha :=car(cdr(p))`alpha #)"
                                                             "car(cdr(cdr(p)))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "nth" -1)
                                                        (("2"
                                                          (lemma
                                                           "constant_doesnt_matter")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(cdr(p))"
                                                             "(# C:= car[monomial](cdr[monomial](p))`C +car[monomial](p)`C,alpha :=car(cdr(p))`alpha #)"
                                                             "car(cdr(cdr(p)))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_mono const-decl "monomial" standard_form_mult_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (p skolem-const-decl "{q: MultPoly | is_sorted?(q)}"
     standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil))
   nil
   (sortedsimplify subtype
    "list_adt[monomial].cons(standard_form_mult_poly.add_mono(list_adt[monomial].car(standard_form_mult_poly.p), list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))), list_adt[monomial].cdr(list_adt[monomial].cdr(standard_form_mult_poly.p)))"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (sortedsimplify_TCC4 0
  (sortedsimplify_TCC4-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" 3 1)
      (("" (expand "length" 3 2)
        (("" (assert)
          (("" (expand "length" 3 2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sortedsimplify termination
    "standard_form_mult_poly.sortedsimplify(list_adt[monomial].cons(standard_form_mult_poly.add_mono(list_adt[monomial].car(standard_form_mult_poly.p), list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))), list_adt[monomial].cdr(list_adt[monomial].cdr(standard_form_mult_poly.p))))"
    "nil")))
 (sortedsimplify_TCC5 0
  (sortedsimplify_TCC5-1 nil 3810975173
   ("" (skeep)
    (("" (typepred "p")
      (("" (lemma "cdr_of_sorted_is_sorted")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting))
   nil
   (sortedsimplify subtype
    "list_adt[monomial].cdr(standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (simplify_TCC1 0
  (simplify_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (expand "mv_sort")
      (("" (split 2)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "is_sorted?" 1) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "bubblesort_is_sorted")
            (("2" (inst? -1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (bubblesort_is_sorted formula-decl nil bubblesort sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (simplify subtype
             "standard_form_mult_poly.mv_sort(standard_form_mult_poly.p)"
     "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (simplify_cdr 0
  (simplify_cdr-1 nil 3810977529
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "simplified?")
        (("" (split 1)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (split 3)
              (("1" (propax) nil nil)
               ("2" (skeep)
                (("2" (split -3)
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (inst -1 "i+1" "j+1")
                        (("1" (assert)
                          (("1" (expand "nth" 1) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil)
                         ("3" (expand "length" 1)
                          (("3" (assert) nil nil)) nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simplified? const-decl "bool" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl "below(length(cdr(p)))"
     standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND simplified?(p)}"
     standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(cdr(p)))"
       standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (simplify_cons 0
  (simplify_cons-1 nil 3810977531
   (""
    (case "FORALL (n:nat, p: MultPoly | is_sorted?(p)): length(p) = n AND cons?(p) IMPLIES cons?(sortedsimplify(p))")
    (("1" (skeep)
      (("1" (inst -1 "length(p)" "p") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split)
                (("1" (assert) nil nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sortedsimplify" 1)
              (("2" (lift-if 1)
                (("2" (split)
                  (("1" (assert) nil nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1"
                              (inst -2
                               "cons(add_mono(car(p), car(cdr(p))),cdr(cdr(p)))")
                              (("1"
                                (expand "length" -2)
                                (("1"
                                  (expand "length" -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (assert)
            (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (leq_simplify_TCC1 0
  (leq_simplify_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "simplify_cons")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((simplify_cons formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (leq_simplify subtype
    "standard_form_mult_poly.sortedsimplify(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (leq_simplify 0
  (leq_simplify-1 nil 3810977534
   (""
    (case "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p), m: monomial): length(p) = n AND leq(m, car(p)) IMPLIES leq(m, car(sortedsimplify(p)))")
    (("1" (skeep)
      (("1" (inst -1 "length(p)" "p" "m") (("1" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sortedsimplify" 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (assert) nil nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "length" -3)
                          (("1" (expand "length" -3)
                            (("1" (assert)
                              (("1"
                                (inst
                                 -2
                                 "cons(add_mono(car(p), car(cdr(p))),cdr(cdr(p)))"
                                 "m")
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (expand "add_mono" 3)
                                    (("1"
                                      (lemma
                                       "constant_doesnt_matter_last")
                                      (("1"
                                        (inst
                                         -1
                                         "m"
                                         "car(p)"
                                         "(# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "p")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "cdr_of_sorted_is_sorted")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cdr_of_sorted_is_sorted")
                                            (("2"
                                              (inst -1 "cdr(p)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2"
                                                    (case
                                                     "cdr(cdr(p))=null")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         is_sorted?
                                                         1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "k")
                                                            (("1"
                                                              (expand
                                                               length
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -1
                                                       "cdr(cdr(p))"
                                                       "add_mono(car(p),car(cdr(p)))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           add_mono
                                                           2)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (expand
                                                               is_sorted?
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "0")
                                                                (("1"
                                                                  (expand
                                                                   length
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     length
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       nth
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         nth
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "constant_doesnt_matter")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "car(cdr(p))"
                                                                                 "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                                 "car(cdr(cdr(p)))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   length
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (assert)
            (("3" (lemma "simplify_cons")
              (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "simplify_cons")
        (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (sorted_simp_is_sorted 0
  (sorted_simp_is_sorted-1 nil 3810977540
   (""
    (case "FORALL (n:nat,p: MultPoly | is_sorted?(p)): length(p) = n IMPLIES is_sorted?(sortedsimplify(p)) = TRUE")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if)
              (("1" (split)
                (("1" (expand "sortedsimplify") (("1" (assert) nil nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sortedsimplify" 1)
              (("2" (assert)
                (("2" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (lemma "add_mono_sorted")
                              (("1"
                                (case "cdr(cdr(p)) = null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "sortedsimplify" 1)
                                    (("1"
                                      (expand "is_sorted?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "k")
                                          (("1"
                                            (expand "length" -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -1
                                   "cdr(cdr(p))"
                                   "car(p)"
                                   "car(cdr(p))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "cdr_of_sorted_is_sorted")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cdr_of_sorted_is_sorted")
                                            (("2"
                                              (inst -1 "p")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   add_mono
                                                   -3
                                                   1)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (lemma
                                                       "constant_doesnt_matter")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "car(cdr(p))"
                                                         "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                         "car(cdr(cdr(p)))")
                                                        (("2"
                                                          (expand
                                                           is_sorted?
                                                           -2)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "0")
                                                            (("1"
                                                              (expand
                                                               length
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     nth
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       nth
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                          (("1"
                                                                            (expand
                                                                             length
                                                                             -7)
                                                                            (("1"
                                                                              (expand
                                                                               length
                                                                               -6)
                                                                              (("1"
                                                                                (expand
                                                                                 length
                                                                                 -6)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               length
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "p")
                              (("2"
                                (lemma "cdr_of_sorted_is_sorted")
                                (("2"
                                  (inst -1 "p")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -4)
                                      (("2"
                                        (inst -3 "cdr(p)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "leq_simplify")
                                            (("2"
                                              (inst
                                               -1
                                               "cdr(p)"
                                               "car(p)")
                                              (("2"
                                                (expand "is_sorted?" -3)
                                                (("2"
                                                  (inst -3 "0")
                                                  (("2"
                                                    (expand "length" -3)
                                                    (("2"
                                                      (expand
                                                       length
                                                       -3)
                                                      (("2"
                                                        (expand "nth" -3)
                                                        (("2"
                                                          (expand
                                                           nth
                                                           -3)
                                                          (("2"
                                                            (expand
                                                             length
                                                             -3)
                                                            (("2"
                                                              (lift-if
                                                               -3)
                                                              (("2"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                      (("1"
                                                                        (lemma
                                                                         "simplify_cons")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "cdr(p)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "sortedsimplify(cdr(p))"
                                                                               "car(p)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "simplify_cons")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(p)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "cons_smaller_to_sorted_is_sorted")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "sortedsimplify(cdr(p))"
                                                                                 "car(p)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
            nil))
          nil)
         ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
      nil)
     ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (add_mono_sorted formula-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | is_sorted?(p)}"
     standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (length_null formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (leq_simplify formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (cons_smaller_simplify 0
  (cons_smaller_simplify-1 nil 3810977547
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil) ("4" (assert) nil nil)
     ("5" (skeep)
      (("5" (case "cons2_var = null")
        (("1" (replace -1)
          (("1" (skeep)
            (("1" (expand "simplified?" 2)
              (("1" (expand "length" 2)
                (("1" (expand "length" 2)
                  (("1" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (skeep)
                            (("2" (typepred "i")
                              (("2"
                                (typepred "j")
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "i=0")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -4)
                                                (("1"
                                                  (lift-if -4)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -4)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if -3)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (expand "simplified?" 3)
              (("2" (expand "length" 3)
                (("2" (assert)
                  (("2" (expand "length" 3)
                    (("2" (split 3)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (hide 1)
                          (("2" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (skeep)
                              (("2"
                                (typepred "i")
                                (("2"
                                  (typepred "j")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (case "i=0")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "nth" -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -4)
                                                (("1"
                                                  (lift-if -4)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "cdr_of_sorted_is_sorted")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cons(cons1_var,cons2_var)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "simplify_cdr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cons(cons1_var,cons2_var)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "m")
                                                                    (("2"
                                                                      (expand
                                                                       is_sorted?
                                                                       -8)
                                                                      (("2"
                                                                        (inst
                                                                         -8
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           length
                                                                           -8)
                                                                          (("1"
                                                                            (expand
                                                                             nth
                                                                             -8)
                                                                            (("1"
                                                                              (expand
                                                                               nth
                                                                               -8)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "leq_transitive")
                                                                                  (("1"
                                                                                    (expand
                                                                                     transitive?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "cons1_var")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             simplified?
                                                                                             -10)
                                                                                            (("1"
                                                                                              (expand
                                                                                               length
                                                                                               -10)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0"
                                                                                                   "1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       nth
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         nth
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "m`alpha = car(cons2_var)`alpha")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "constant_doesnt_matter")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "m"
                                                                                                                   "car(cons2_var)"
                                                                                                                   "cons1_var")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "almost_total_order")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "cons1_var"
                                                                                                                         "car(cons2_var)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 simplified?
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   length
                                                                                                                   -8)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0"
                                                                                                                       "j-1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           nth
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         length
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (expand
                                                                                                                         length
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     length
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     length
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           length
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if -3)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "nth" -2)
                                                    (("1"
                                                      (lift-if -2)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "cdr_of_sorted_is_sorted")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "cons(cons1_var,cons2_var)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "simplify_cdr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "cons(cons1_var,cons2_var)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "m")
                                                                        (("2"
                                                                          (expand
                                                                           is_sorted?
                                                                           -8)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 length
                                                                                 -8)
                                                                                (("1"
                                                                                  (expand
                                                                                   nth
                                                                                   -8)
                                                                                  (("1"
                                                                                    (expand
                                                                                     nth
                                                                                     -8)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "leq_transitive")
                                                                                      (("1"
                                                                                        (expand
                                                                                         transitive?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "m"
                                                                                           "cons1_var"
                                                                                           "car(cons2_var)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "m`alpha = car(cons2_var)`alpha")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "constant_doesnt_matter")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m"
                                                                                                   "car(cons2_var)"
                                                                                                   "cons1_var")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "almost_total_order")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "car(cons2_var)"
                                                                                                         "cons1_var")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   simplified?
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     length
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "0"
                                                                                                         "i-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             nth
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           length
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           length
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               length
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     simplified?
                                                     -6)
                                                    (("2"
                                                      (expand
                                                       length
                                                       -6)
                                                      (("2"
                                                        (expand
                                                         length
                                                         -6)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -6)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i-1"
                                                                     "j-1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (lemma "leq_total_preorder") (("6" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl
       "below(length(cons(m, cons(cons1_var, cons2_var))))"
       standard_form_mult_poly nil)
    (simplify_cdr formula-decl nil standard_form_mult_poly nil)
    (leq_transitive formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (m skolem-const-decl "monomial" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl
     "below(length(cons(m, cons(cons1_var, cons2_var))))"
     standard_form_mult_poly nil)
    (almost_total_order formula-decl nil standard_form_mult_poly nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (transitive? const-decl "bool" relations nil)
    (below type-eq-decl nil nat_types nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (cons_simplify 0
  (cons_simplify-1 nil 3810977559
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "simplified?" 1)
        (("" (expand "length" 1)
          (("" (expand "length" 1)
            (("" (assert)
              (("" (split 1)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (skeep)
                      (("2" (case "i=0")
                        (("1" (expand "nth" -2)
                          (("1" (assert)
                            (("1" (inst -5 "j-1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "j=0")
                          (("1" (expand "nth" -2)
                            (("1" (assert)
                              (("1"
                                (inst -5 "i-1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" -1)
                            (("2" (assert)
                              (("2"
                                (expand "simplified?" -3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "i")
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "j")
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (inst -1 "i-1" "j-1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simplified? const-decl "bool" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (car_equal_simplify_TCC1 0
  (car_equal_simplify_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "simplify_cons")
      (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((simplify_cons formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (car_equal_simplify subtype
    "standard_form_mult_poly.sortedsimplify(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (car_equal_simplify 0
  (car_equal_simplify-1 nil 3810977562
   (""
    (case "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p)): length(p) = n IMPLIES car(p)`alpha = car(sortedsimplify(p))`alpha")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "length" -2)
              (("2" (expand "sortedsimplify" 1)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (lemma "cdr_of_sorted_is_sorted")
                            (("1" (inst -1 "p")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "cdr_of_sorted_is_sorted")
                                  (("1"
                                    (inst -1 "cdr(p)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "cons_smaller_to_sorted_is_sorted")
                                        (("1"
                                          (case "cdr(cdr(p)) = null")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "sortedsimplify" 1)
                                              (("1"
                                                (expand "add_mono" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             -1
                                             "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "add_mono" -1 1)
                                                (("2"
                                                  (expand
                                                   is_sorted?
                                                   -3)
                                                  (("2"
                                                    (inst -3 "0")
                                                    (("1"
                                                      (expand "nth" -3)
                                                      (("1"
                                                        (expand "nth" -3)
                                                        (("1"
                                                          (expand
                                                           length
                                                           -3)
                                                          (("1"
                                                            (expand
                                                             length
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -4)
                                                                  (("1"
                                                                    (lemma
                                                                     "constant_doesnt_matter")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "car(cdr(p))"
                                                                       "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                       "car(cdr(cdr(p)))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                            (("1"
                                                                              (expand
                                                                               length
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 length
                                                                                 -6)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     add_mono
                                                                                     -5
                                                                                     1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   length
                                                                   1)
                                                                  (("2"
                                                                    (lift-if
                                                                     1)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "simplify_cons")
            (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (skeep)
          (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "simplify_cons")
        (("3" (inst -1 "p") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (below type-eq-decl nil nat_types nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (length_sortedsimplify_car_eq_TCC1 0
  (length_sortedsimplify_car_eq_TCC1-1 nil 3811154754
   ("" (subtype-tcc) nil nil) nil nil
   (length_sortedsimplify_car_eq subtype
    "list_adt[monomial].cons(standard_form_mult_poly.m1, standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (length_sortedsimplify_car_eq_TCC2 0
  (length_sortedsimplify_car_eq_TCC2-1 nil 3811154754
   ("" (subtype-tcc) nil nil) nil nil
   (length_sortedsimplify_car_eq subtype
    "list_adt[monomial].cons(standard_form_mult_poly.m2, standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (length_sortedsimplify_car_eq 0
  (length_sortedsimplify_car_eq-1 nil 3811154807
   (""
    (case "FORALL (n: nat, p: MultPoly, m1, m2: {m: monomial | is_sorted?(cons(m, p))}):
        n= length(p) AND m1`alpha = m2`alpha IMPLIES
         length(sortedsimplify(cons(m1, p))) =
          length(sortedsimplify(cons(m2, p)))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "length(p)") (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (expand "length" -1)
              (("1" (assert)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (expand "sortedsimplify" 1)
                      (("1" (assert)
                        (("1" (expand "length" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "leq_total_preorder")
            (("2" (skeep)
              (("2" (skeep)
                (("2" (case "j=0")
                  (("1" (replace -1)
                    (("1" (hide -3)
                      (("1" (expand "sortedsimplify")
                        (("1" (assert)
                          (("1" (expand "length" -3)
                            (("1" (lift-if -3)
                              (("1"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if 2)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -2)
                                              (("1"
                                                (lift-if -2)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (expand
                                                     "sortedsimplify")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         +)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lift-if 2)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "length" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" -3)
                    (("2" (lift-if -3)
                      (("2" (split -3)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "sortedsimplify" +)
                            (("2" (assert)
                              (("2"
                                (lift-if 3)
                                (("2"
                                  (split 3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "add_mono_sorted")
                                            (("1"
                                              (lemma
                                               "constant_doesnt_matter")
                                              (("1"
                                                (expand "length" -5)
                                                (("1"
                                                  (lift-if -5)
                                                  (("1"
                                                    (split -5)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "car(p)"
                                                           "_"
                                                           "car(cdr(p))")
                                                          (("2"
                                                            (typepred
                                                             "m1")
                                                            (("2"
                                                              (expand
                                                               "is_sorted?"
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -3
                                                                               " add_mono(m1, car(p))")
                                                                              (("1"
                                                                                (expand
                                                                                 "add_mono"
                                                                                 -4
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "add_mono(m2, car(p))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add_mono"
                                                                                     -3
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "cdr_of_sorted_is_sorted")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "cons(m1, p)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "cdr_of_sorted_is_sorted")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "p")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -7
                                                                                                   "cdr(p)"
                                                                                                   "m1"
                                                                                                   "car(p)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -7
                                                                                                       "cdr(p)"
                                                                                                       "m2"
                                                                                                       "car(p)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -12
                                                                                                           "cdr(p)"
                                                                                                           "add_mono(m1, car(p))"
                                                                                                           "add_mono(m2, car(p))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "add_mono"
                                                                                                               5)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lift-if 2)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "leq_total_preorder") (("3" (assert) nil nil))
            nil)
           ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (assert) nil nil)) nil)
     ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (below type-eq-decl nil nat_types nil)
    (m1 skolem-const-decl "{m: monomial | is_sorted?(cons(m, p))}"
     standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add_mono_sorted formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (car_const_nth_sortedsimplify_TCC1 0
  (car_const_nth_sortedsimplify_TCC1-1 nil 3811159204
   ("" (skeep)
    (("" (lemma "length_sortedsimplify_car_eq")
      (("" (inst?)
        (("" (assert) (("" (skeep) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length_sortedsimplify_car_eq formula-decl nil
     standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (car_const_nth_sortedsimplify subtype "standard_form_mult_poly.i"
    "below[length[monomial](sortedsimplify(cons[monomial](m2, p)))]")))
 (car_const_nth_sortedsimplify 0
  (car_const_nth_sortedsimplify-1 nil 3811159325
   ("" (lemma "leq_total_preorder")
    ((""
      (case "FORALL (n:nat, p: MultPoly, m1, m2: {m: monomial | is_sorted?(cons(m, p))}):
               n = length(p) AND m1`alpha = m2`alpha IMPLIES
                FORALL (i: below(length(sortedsimplify(cons(m1, p))))):
                  nth(sortedsimplify(cons(m1, p)), i)`alpha =
                   nth(sortedsimplify(cons(m2, p)), i)`alpha")
      (("1" (skeep)
        (("1" (inst?)
          (("1" (inst -1 "length(p)") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (skeep :preds? T)
              (("1" (expand "length" -2)
                (("1" (assert)
                  (("1" (lift-if -2)
                    (("1" (split -2)
                      (("1" (assert)
                        (("1" (expand "sortedsimplify")
                          (("1" (expand "length" -2)
                            (("1" (expand "length" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT i=0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (expand "nth" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (skeep :preds? T)
                (("2" (lemma "length_sortedsimplify_car_eq")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (case "j=0")
                        (("1" (replace -1)
                          (("1" (hide -4)
                            (("1" (expand "sortedsimplify")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -4)
                                  (("1"
                                    (lift-if -4)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lift-if 2)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("1"
                                                      (lift-if -2)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "sortedsimplify"
                                                             +)
                                                            (("1"
                                                              (case
                                                               "i=0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "add_mono")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "nth"
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case "i=0")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "nth" 3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "cons?(p)")
                          (("1" (expand "sortedsimplify" +)
                            (("1" (assert)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "sortedsimplify"
                                               -4)
                                              (("1"
                                                (expand
                                                 "sortedsimplify"
                                                 -5)
                                                (("1"
                                                  (case
                                                   "null?(cdr(p))")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -8)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -8)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "FORALL (M:monomial): M`alpha = car(p)`alpha IMPLIES is_sorted?(cons(M,cdr(p)))")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "add_mono(m1, car(p))")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "add_mono(m2, car(p))")
                                                        (("1"
                                                          (expand
                                                           "add_mono"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "add_mono"
                                                             -3
                                                             1)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "cdr(p)"
                                                               "add_mono(m1, car(p))"
                                                               "add_mono(m2, car(p))")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -10)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "add_mono"
                                                                     -9
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "add_mono"
                                                                       -9
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -9
                                                                         "i")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "m1")
                                                      (("2"
                                                        (lemma
                                                         "cdr_of_sorted_is_sorted")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cons(m1, p)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "cdr_of_sorted_is_sorted")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (lemma
                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(p) "
                                                                         "M")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "constant_doesnt_matter")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "car(p)"
                                                                               "M"
                                                                               "car(cdr(p))")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "is_sorted?"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "0")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "i=0")
                                          (("1"
                                            (expand "nth" 2)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" -4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (lemma "length_sortedsimplify_car_eq")
              (("3" (assert)
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (assert) nil nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "length_sortedsimplify_car_eq")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (assert) nil nil) ("5" (propax) nil nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (PRED type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_sortedsimplify_car_eq formula-decl nil
     standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (m1 skolem-const-decl "{m: monomial | is_sorted?(cons(m, p))}"
     standard_form_mult_poly nil)
    (m2 skolem-const-decl "{m: monomial | is_sorted?(cons(m, p))}"
     standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil))
   shostak))
 (not_equal_simplify 0
  (not_equal_simplify-1 nil 3810977567
   ("" (skeep)
    (("" (expand "sortedsimplify" -1)
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten) nil nil)
           ("2" (flatten)
            (("2" (split -1)
              (("1" (flatten)
                (("1" (lemma "car_equal_simplify")
                  (("1" (typepred "p")
                    (("1" (lemma "cdr_of_sorted_is_sorted")
                      (("1" (inst -1 "p")
                        (("1" (assert)
                          (("1" (lemma "cdr_of_sorted_is_sorted")
                            (("1" (inst -1 "cdr(p)")
                              (("1"
                                (assert)
                                (("1"
                                  (case "cdr(cdr(p)) = null")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "sortedsimplify" -8)
                                      (("1"
                                        (expand "add_mono" -8)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "cons_smaller_to_sorted_is_sorted")
                                    (("2"
                                      (inst
                                       -1
                                       "cdr(cdr(p))"
                                       "add_mono(car(p),car(cdr(p)))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "add_mono" -1 1)
                                          (("2"
                                            (lemma
                                             "constant_doesnt_matter")
                                            (("2"
                                              (expand "is_sorted?" -4)
                                              (("2"
                                                (inst -4 "0")
                                                (("1"
                                                  (split -4)
                                                  (("1"
                                                    (expand "nth" -1)
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (replace -8)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "car(cdr(p))"
                                                           "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                           "car(cdr(cdr(p)))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       add_mono
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -5)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand "length" 1)
                                                      (("2"
                                                        (expand
                                                         length
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (car_equal_simplify formula-decl nil standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting))
   shostak))
 (simplify_alpha 0
  (simplify_alpha-1 nil 3810977571
   (""
    (case "FORALL (n:nat,p: MultPoly | cons?(p) AND is_sorted?(p)): length(p) = n IMPLIES (FORALL (j: below(length(sortedsimplify(p)))): EXISTS (i: below(length(p))): nth(p, i)`alpha = nth(sortedsimplify(p), j)`alpha)")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "length" -2)
              (("2" (skeep)
                (("2" (expand "sortedsimplify" 1)
                  (("2" (case "cdr(p) = null")
                    (("1" (assert)
                      (("1" (inst 1 "j")
                        (("1" (typepred "j")
                          (("1" (expand "sortedsimplify" -1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "car(p)`alpha = car(cdr(p))`alpha")
                        (("1" (assert)
                          (("1" (case "cdr(cdr(p)) = null")
                            (("1" (replace -1)
                              (("1"
                                (expand "sortedsimplify" 2)
                                (("1"
                                  (typepred "j")
                                  (("1"
                                    (expand "sortedsimplify" -1)
                                    (("1"
                                      (expand "sortedsimplify" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (expand "nth" 2 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_mono" 2)
                                                  (("1"
                                                    (inst 2 "0")
                                                    (("1"
                                                      (expand "nth" 2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "cdr_of_sorted_is_sorted")
                              (("2"
                                (inst -1 "p")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "cdr_of_sorted_is_sorted")
                                    (("2"
                                      (inst -1 "cdr(p)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "cons_smaller_to_sorted_is_sorted")
                                          (("2"
                                            (inst
                                             -1
                                             "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "add_mono" -1 1)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (expand
                                                     is_sorted?
                                                     -3)
                                                    (("2"
                                                      (inst -3 "0")
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (expand
                                                           nth
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             nth
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "constant_doesnt_matter")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "car(cdr(p))"
                                                                 "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                 "car(cdr(cdr(p)))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                        (("1"
                                                                          (expand
                                                                           length
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             length
                                                                             -5)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -4
                                                                                 "j")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "i+1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       nth
                                                                                       3
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         nth
                                                                                         -4
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -4)
                                                                                          (("1"
                                                                                            (split
                                                                                             -4)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 add_mono
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     nth
                                                                                                     3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 nth
                                                                                                 4
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (expand
                                                                                         length
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           length
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             length
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "j")
                                                                                  (("2"
                                                                                    (expand
                                                                                     sortedsimplify
                                                                                     -1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           length
                                                           1)
                                                          (("2"
                                                            (expand
                                                             length
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         length
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "nth" 3 2)
                            (("2" (case "j=0")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 3 "0")
                                  (("1"
                                    (expand "nth" 3)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst -1 "cdr(p)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -1 "j-1")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 4 "i+1")
                                          (("1"
                                            (expand "nth" 4 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "j")
                                        (("2"
                                          (expand "sortedsimplify" -1)
                                          (("2"
                                            (expand "length" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "p")
                                      (("2"
                                        (lemma
                                         "cdr_of_sorted_is_sorted")
                                        (("2"
                                          (inst -1 "p")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cdr(p)))"
       standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl
       "below(length(cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))))"
       standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "below(length(sortedsimplify(p)))"
     standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (simplify_alpha_reverse 0
  (simplify_alpha_reverse-1 nil 3810977581
   ("" (lemma "leq_total_preorder")
    ((""
      (case "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p)): length(p)=n IMPLIES EXISTS ((m:monomial | m`alpha = car(p)`alpha)): (FORALL (i: below(length(p))): EXISTS (j: below(length(sortedsimplify(cons(m, cdr(p)))))): nth(p, i)`alpha = nth(sortedsimplify(cons(m, cdr(p))), j)`alpha)")
      (("1" (skeep :preds? T)
        (("1" (inst -3 "length(p)" "p")
          (("1" (skeep :preds? T)
            (("1" (skeep :preds? T)
              (("1" (inst?)
                (("1" (skeep :preds? T)
                  (("1" (lemma "length_sortedsimplify_car_eq")
                    (("1" (inst -1 "cdr(p)" "m" "car(p)")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (case "NOT p = cons(car(p), cdr(p))")
                            (("1" (decompose-equality 1) nil nil)
                             ("2" (replace -1 :dir rl)
                              (("2"
                                (inst 1 "j")
                                (("1"
                                  (lemma
                                   "car_const_nth_sortedsimplify")
                                  (("1"
                                    (inst -1 "cdr(p)" "car(p)" "m")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -1 "j")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "cons_smaller_to_sorted_is_sorted")
                                      (("2"
                                        (case "null?(cdr(p))")
                                        (("1"
                                          (expand "is_sorted?" 1)
                                          (("1"
                                            (skeep :preds? T)
                                            (("1"
                                              (expand "length" -4)
                                              (("1"
                                                (expand "length" -4)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -1 "cdr(p)" "m")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "cdr_of_sorted_is_sorted")
                                              (("2"
                                                (inst -1 "p")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "is_sorted?"
                                                     -8)
                                                    (("2"
                                                      (inst -8 "0")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -8)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -8)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -8)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -8)
                                                                  (("2"
                                                                    (lemma
                                                                     "constant_doesnt_matter")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "car(p)"
                                                                       "m"
                                                                       "car(cdr(p))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "NOT p = cons(car(p), cdr(p))")
                        (("1" (assert)
                          (("1" (decompose-equality 1) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("3" (lemma "cons_smaller_to_sorted_is_sorted")
                        (("3" (lemma "cdr_of_sorted_is_sorted")
                          (("3" (inst -1 "p")
                            (("3" (assert)
                              (("3"
                                (inst -2 "cdr(p)" "m")
                                (("3"
                                  (assert)
                                  (("3"
                                    (split 1)
                                    (("1"
                                      (expand "is_sorted?" 2)
                                      (("1"
                                        (skeep :preds? T)
                                        (("1"
                                          (expand "length" -3)
                                          (("1"
                                            (expand "length" -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "constant_doesnt_matter")
                                      (("2"
                                        (expand "is_sorted?" -7)
                                        (("2"
                                          (inst -7 "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -7)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length" -7)
                                                  (("2"
                                                    (lift-if -7)
                                                    (("2"
                                                      (split -7)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "is_sorted?"
                                                           2)
                                                          (("1"
                                                            (skeep
                                                             :preds?
                                                             T)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -6)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -6)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "car(p)"
                                                                   "m"
                                                                   "car(cdr(p))")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (typepred "p")
              (("1" (expand "length" -) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (case "j_1=0")
              (("1" (replace -1)
                (("1" (hide -2)
                  (("1" (skeep)
                    (("1" (inst 1 "car(p)")
                      (("1" (skeep)
                        (("1" (case "NOT null?(cdr(p))")
                          (("1" (expand "length" -2)
                            (("1" (expand "length" -2)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst 1 "0")
                            (("1" (case "not i=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand "sortedsimplify" +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" +)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sortedsimplify" +)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? T)
                (("2" (case "null?(cdr(p))")
                  (("1" (expand " length" -5)
                    (("1" (expand " length" -5)
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (inst 3 "car(p)")
                    (("2" (skeep)
                      (("2" (typepred "i")
                        (("2" (case "i=0")
                          (("1" (inst 3 "0")
                            (("1" (replace -1)
                              (("1"
                                (expand "nth" 3)
                                (("1"
                                  (case "not cons(car(p), cdr(p)) = p")
                                  (("1" (decompose-equality 1) nil nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (lemma "simplify_cons")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "car_equal_simplify")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "not cons(car(p), cdr(p)) = p")
                              (("1" (decompose-equality 1) nil nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma " simplify_cons")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "simplify_cons")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 4 1)
                                  (("1"
                                    (name
                                     "sscons"
                                     "sortedsimplify(cons(car(p), cdr(p)))")
                                    (("1"
                                      (copy -1)
                                      (("1"
                                        (expand "sortedsimplify" -1)
                                        (("1"
                                          (lift-if -1)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "null?(cdr(cdr(p)))")
                                                (("1"
                                                  (expand
                                                   "sortedsimplify"
                                                   -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst 4 "0")
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           4
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (case
                                                             "NOT i-1 = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 " length"
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   " length"
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     " length"
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "add_mono")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -4)
                                                        (("2"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "cdr_of_sorted_is_sorted")
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "cdr(p)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -10)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep
                                                                 :preds?
                                                                 T)
                                                                (("2"
                                                                  (inst
                                                                   -10
                                                                   "i-1")
                                                                  (("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (skeep
                                                                         :preds?
                                                                         T)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (M:monomial): M`alpha = car(cdr(p))`alpha IMPLIES is_sorted?(cons(M, cdr(cdr(p))))")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "add_mono(car(p), car(cdr(p)))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add_mono"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     5
                                                                                     "j")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -14)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "car_const_nth_sortedsimplify")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "cdr(cdr(p))"
                                                                                           "m"
                                                                                           "add_mono(car(p), car(cdr(p)))")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "add_mono"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "j")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -9
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "length_sortedsimplify_car_eq")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "cdr(cdr(p))"
                                                                                           "add_mono(car(p), car(cdr(p)))"
                                                                                           "m")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "add_mono"
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             6)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (lemma
                                                                                 "cdr_of_sorted_is_sorted")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "cdr(p)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "cdr(cdr(p))"
                                                                                         "M")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "is_sorted?"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -5
                                                                                               "0")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -5)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "constant_doesnt_matter")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               " car(cdr(p))"
                                                                                                               "M"
                                                                                                               "car(cdr(cdr(p)))")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -2 5)
                                                (("2"
                                                  (replace
                                                   -1
                                                   5
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (lemma
                                                     "cdr_of_sorted_is_sorted")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -8
                                                           "cdr(p)")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -9)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep
                                                                 :preds?
                                                                 T)
                                                                (("2"
                                                                  (inst
                                                                   -9
                                                                   "i-1")
                                                                  (("2"
                                                                    (skeep
                                                                     :preds?
                                                                     T)
                                                                    (("2"
                                                                      (inst
                                                                       5
                                                                       "j+1")
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         5
                                                                         2)
                                                                        (("1"
                                                                          (case
                                                                           "null?(cdr(cdr(p)))")
                                                                          (("1"
                                                                            (expand
                                                                             "sortedsimplify"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sortedsimplify"
                                                                                     5)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "not i-1 =0")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth"
                                                                                             5)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "cdr_of_sorted_is_sorted")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "cdr(p)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -11)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "FORALL (M:monomial): M`alpha = car(cdr(p))`alpha IMPLIES is_sorted?(cons(M, cdr(cdr(p))))")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "car(cdr(p))")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "m")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "car_const_nth_sortedsimplify")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "cdr(cdr(p))"
                                                                                                   "m"
                                                                                                   "car(cdr(p))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "is_sorted?"
                                                                                         -5)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "0")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "constant_doesnt_matter")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "car(cdr(p))"
                                                                                                             "M"
                                                                                                             "car(cdr(cdr(p)))")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "cons_smaller_to_sorted_is_sorted")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "cdr(cdr(p))"
                                                                                                                   "M")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -5)
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "length_sortedsimplify_car_eq")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "cdr(cdr(p))"
                                                                                 " car(cdr(p))"
                                                                                 "m")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "cons_smaller_to_sorted_is_sorted")
                                                                                  (("2"
                                                                                    (case
                                                                                     "null?(cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "is_sorted?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (skeep
                                                                                         :preds?
                                                                                         T)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "cdr(cdr(p))"
                                                                                       "m")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "cdr_of_sorted_is_sorted")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "cdr(p)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "constant_doesnt_matter")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "car(cdr(p))"
                                                                                                   "m"
                                                                                                   "car(cdr(cdr(p)))")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_sorted?"
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "0")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (case
                                                                                   "NOT cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "not cons(car(p), cdr(p)) = p")
                                (("1" (decompose-equality 1) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (hide 2)
                (("3" (typepred "p")
                  (("3" (case "null?(cdr(p))")
                    (("1" (expand "is_sorted?" +)
                      (("1" (skeep :preds? T)
                        (("1" (expand "length" -6)
                          (("1" (expand "length" -6)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "is_sorted?" -)
                      (("2" (inst -2 "0")
                        (("2" (expand "length" -2)
                          (("2" (expand "length" -2)
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (expand "nth")
                                    (("2"
                                      (lemma "cdr_of_sorted_is_sorted")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "constant_doesnt_matter")
                                            (("2"
                                              (inst
                                               -1
                                               "car(p)"
                                               "m"
                                               "car(cdr(p))")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (assert) nil nil))
          nil))
        nil)
       ("3" (skeep :preds? T)
        (("3" (skeep :preds? T)
          (("3" (hide 2)
            (("3" (case "null?(cdr(p))")
              (("1" (expand "is_sorted?" +)
                (("1" (skeep :preds? T)
                  (("1" (expand " length" -10)
                    (("1" (expand " length" -10)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "cdr_of_sorted_is_sorted")
                (("2" (inst -1 "p")
                  (("2" (assert)
                    (("2" (lemma "constant_doesnt_matter")
                      (("2" (expand "is_sorted?" -8)
                        (("2" (inst -8 "0")
                          (("2" (expand "length" -8)
                            (("2" (expand "length" -8)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth" -8)
                                    (("2"
                                      (expand "nth" -8)
                                      (("2"
                                        (inst
                                         -1
                                         "car(p)"
                                         "m"
                                         "car(cdr(p))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cons_smaller_to_sorted_is_sorted")
                                            (("2"
                                              (inst -1 "cdr(p)" "m")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (assert) nil nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (PRED type-eq-decl nil defined_types nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (m skolem-const-decl "{m: monomial | m`alpha = car(p)`alpha}"
     standard_form_mult_poly nil)
    (car_const_nth_sortedsimplify formula-decl nil
     standard_form_mult_poly nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (j skolem-const-decl
     "below(length(sortedsimplify(cons(m, cdr(p)))))"
     standard_form_mult_poly nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_sortedsimplify_car_eq formula-decl nil
     standard_form_mult_poly nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (car_equal_simplify formula-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND is_sorted?(p)}"
     standard_form_mult_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "{m: monomial | m`alpha = car(cdr(p))`alpha}"
     standard_form_mult_poly nil)
    (j skolem-const-decl
     "below(length(sortedsimplify(cons(m, cdr(cdr(p))))))"
     standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl
     "below(length(sortedsimplify(cons(m, cdr(cdr(p))))))"
     standard_form_mult_poly nil)
    (m skolem-const-decl "{m: monomial | m`alpha = car(cdr(p))`alpha}"
     standard_form_mult_poly nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil))
   shostak))
 (simplified 0
  (simplified-1 nil 3810977582
   (""
    (case "FORALL (n:nat, p: MultPoly | is_sorted?(p)): length(p) = n IMPLIES simplified?(sortedsimplify(p)) = TRUE")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split)
                (("1" (expand "sortedsimplify")
                  (("1" (assert)
                    (("1" (expand "simplified?") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sortedsimplify" 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (expand "length" -3) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (typepred "p")
                          (("1" (expand "simplified?" 1)
                            (("1" (expand "length" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (case "cdr(cdr(p)) = null")
                            (("1" (replace -1)
                              (("1"
                                (expand "sortedsimplify" 1)
                                (("1"
                                  (expand "simplified?" 1)
                                  (("1"
                                    (expand "length" 1)
                                    (("1"
                                      (expand "length" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "cdr_of_sorted_is_sorted")
                              (("2"
                                (inst -1 "p")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "cdr_of_sorted_is_sorted")
                                    (("2"
                                      (inst -1 "cdr(p)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "cons_smaller_to_sorted_is_sorted")
                                          (("2"
                                            (inst
                                             -1
                                             "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "add_mono" -1)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (lemma
                                                     "constant_doesnt_matter")
                                                    (("2"
                                                      (expand
                                                       is_sorted?
                                                       -4)
                                                      (("2"
                                                        (inst -4 "0")
                                                        (("1"
                                                          (expand
                                                           length
                                                           -4)
                                                          (("1"
                                                            (expand
                                                             length
                                                             -4)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 nth
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   nth
                                                                   -4)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "car(cdr(p))"
                                                                     "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                     "car(cdr(cdr(p)))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         add_mono
                                                                         2)
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "cons((# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #), cdr(cdr(p)))")
                                                                          (("1"
                                                                            (expand
                                                                             length
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               length
                                                                               -7)
                                                                              (("1"
                                                                                (expand
                                                                                 length
                                                                                 -7)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           length
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "p")
                            (("2" (expand "is_sorted?" -1)
                              (("2"
                                (inst -1 "0")
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (expand "nth" -1)
                                        (("1"
                                          (expand "nth" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "cdr_of_sorted_is_sorted")
                                                        (("1"
                                                          (inst -1 "p")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "cdr(p)")
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "leq_simplify")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "cdr(p)"
                                                                       "car(p)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "cons_smaller_to_sorted_is_sorted")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "sortedsimplify(cdr(p))"
                                                                             "car(p)")
                                                                            (("1"
                                                                              (lemma
                                                                               "simplify_cons")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "cdr(p)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sorted_simp_is_sorted")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "cdr(p)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "cons_smaller_simplify")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "sortedsimplify(cdr(p))"
                                                                                             "car(p)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "not_equal_simplify")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "cdr(p)"
                                                                                                   "car(p)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "cdr_of_sorted_is_sorted")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "cdr(p)")
                                                                (("2"
                                                                  (expand
                                                                   length
                                                                   -4)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "cons_smaller_simplify")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "sortedsimplify(cdr(p))"
                                                                         "car(p)")
                                                                        (("1"
                                                                          (lemma
                                                                           "car_equal_simplify")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "cdr(p)")
                                                                            (("1"
                                                                              (lemma
                                                                               "constant_doesnt_matter_last")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "car(p)"
                                                                                 "car(cdr(p))"
                                                                                 "car(sortedsimplify(cdr(p)))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "simplify_cons")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "cdr(p)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "sorted_simp_is_sorted")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "cdr(p)")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (cons_smaller_simplify formula-decl nil standard_form_mult_poly
     nil)
    (not_equal_simplify formula-decl nil standard_form_mult_poly nil)
    (sorted_simp_is_sorted formula-decl nil standard_form_mult_poly
     nil)
    (leq_simplify formula-decl nil standard_form_mult_poly nil)
    (car_equal_simplify formula-decl nil standard_form_mult_poly nil)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (p skolem-const-decl "{p: MultPoly | is_sorted?(p)}"
     standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (simplify_Unif 0
  (simplify_Unif-1 nil 3810977590
   (""
    (case "FORALL (n:nat, p: MultPoly | is_sorted?(p) AND Unif?(p)): length(p) = n IMPLIES Unif?(sortedsimplify(p))")
    (("1" (skeep) (("1" (inst -1 "length(p)" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length")
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "sortedsimplify") (("1" (assert) nil nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "length" -2)
              (("2" (lift-if -2)
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (expand "sortedsimplify" 2)
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "cdr(cdr(p)) = null")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "sortedsimplify" 1)
                                        (("1"
                                          (expand "Unif?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (typepred "j!1")
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (expand "length" -1)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         length
                                                         -2)
                                                        (("1"
                                                          (expand
                                                           nth
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "cdr_of_sorted_is_sorted")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cdr_of_sorted_is_sorted")
                                            (("2"
                                              (inst -1 "cdr(p)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cdr(cdr(p))"
                                                     "add_mono(car(p),car(cdr(p)))")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         add_mono
                                                         -1
                                                         1)
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (lemma
                                                             "constant_doesnt_matter")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "car(cdr(p))"
                                                               "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                               "car(cdr(cdr(p)))")
                                                              (("2"
                                                                (expand
                                                                 is_sorted?
                                                                 -4)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "0")
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       nth
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         nth
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "p")
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     length
                                                                                     -6)
                                                                                    (("1"
                                                                                      (expand
                                                                                       length
                                                                                       -7)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     Unif?
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               add_mono)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       Unif?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "i+1"
                                                                                                         "j!1 + 1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           nth
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             nth
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               nth
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (lift-if
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           nth
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           nth
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           length
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "j!1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               length
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 length
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             length
                                                                                                             -1)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               length
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 length
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       length
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         length
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     length
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst -2 "cdr(p)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "p")
                                        (("1"
                                          (lemma "Unif_cons")
                                          (("1"
                                            (inst
                                             -1
                                             "car(p)"
                                             "sortedsimplify(cdr(p))")
                                            (("1"
                                              (lemma
                                               "car_equal_simplify")
                                              (("1"
                                                (inst -1 "cdr(p)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "Unif?" -4)
                                                    (("1"
                                                      (inst -4 "0" "1")
                                                      (("1"
                                                        (expand "nth" -4)
                                                        (("1"
                                                          (expand
                                                           nth
                                                           -4)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         length
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             length
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         length
                                                         1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "cdr_of_sorted_is_sorted")
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "simplify_cons")
                                                (("2"
                                                  (inst -1 "cdr(p)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "cdr_of_sorted_is_sorted")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "p")
                                            (("2"
                                              (expand "Unif?" 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand "Unif?" -2)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "i+1"
                                                     "j!1+1")
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand "length" 1)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (j!1 skolem-const-decl "below(length(cdr[monomial](p)))"
     standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(cdr[monomial](p)))"
       standard_form_mult_poly nil)
    (Unif_cons formula-decl nil standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (car_equal_simplify formula-decl nil standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p skolem-const-decl "{p: MultPoly | is_sorted?(p) AND Unif?(p)}"
     standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (j!1 skolem-const-decl "below(length(cons[monomial]
                 (add_mono(car[monomial](p),
                           car[monomial](cdr[monomial](p))),
                  cdr[monomial](cdr[monomial](p)))))"
     standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(cons[monomial]
                 (add_mono(car[monomial](p),
                           car[monomial](cdr[monomial](p))),
                  cdr[monomial](cdr[monomial](p)))))"
       standard_form_mult_poly nil)
    (constant_doesnt_matter formula-decl nil standard_form_mult_poly
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (mv_sorted_simp_is_sorted 0
  (mv_sorted_simp_is_sorted-1 nil 3811846575
   ("" (skeep :preds? T)
    (("" (expand "mv_is_sorted?")
      (("" (rewrite "sorted_simp_is_sorted")
        (("" (rewrite "simplify_Unif") nil nil)) nil))
      nil))
    nil)
   ((mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (simplify_Unif formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sorted_simp_is_sorted formula-decl nil standard_form_mult_poly
     nil))
   shostak))
 (max_length_sorted_simplify 0
  (max_length_sorted_simplify-1 nil 3814221720
   ("" (skeep)
    (("" (case "null?(p)")
      (("1" (expand "sortedsimplify" 1) (("1" (assert) nil nil)) nil)
       ("2" (lemma "simplify_alpha_reverse")
        (("2" (lemma "max_length_is_nth")
          (("2" (inst-cp -1 "p")
            (("1" (inst -1 "sortedsimplify(p)")
              (("1" (skeep*)
                (("1" (lemma "simplify_alpha")
                  (("1" (inst -1 "p" "j")
                    (("1" (skeep)
                      (("1" (inst -4 "p" "j!1")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (assert)
                              (("1"
                                (lemma "max_length_is_max")
                                (("1"
                                  (inst-cp
                                   -1
                                   "sortedsimplify(p)"
                                   "j!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "  max_length(p) > max_length(sortedsimplify(p))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case
                                         "max_length(p) < max_length(sortedsimplify(p))")
                                        (("1"
                                          (replace -5 -1 rl)
                                          (("1"
                                            (replace -4 -1 rl)
                                            (("1"
                                              (inst -2 "p" "i")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "p" "0")
                (("1" (skeep -2)
                  (("1" (typepred "j")
                    (("1" (expand "length" -1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" 1) (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (simplify_alpha formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (> const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (p skolem-const-decl "{p: MultPoly | is_sorted?(p)}"
     standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (simplify_alpha_reverse formula-decl nil standard_form_mult_poly
     nil))
   shostak))
 (is_sorted_nth 0
  (is_sorted_nth-1 nil 3814445210
   ("" (induct "p")
    (("1" (flatten)
      (("1" (skeep) (("1" (typepred "i") (("1" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (flatten)
      (("2" (expand "is_sorted?" 1)
        (("2" (skeep)
          (("2" (expand "length" -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (split 1)
        (("1" (flatten)
          (("1" (skeep)
            (("1" (split -3)
              (("1" (case "i=0")
                (("1" (case "j=0")
                  (("1" (lemma "leq_reflexive")
                    (("1" (expand "reflexive?" -1)
                      (("1" (expand "nth" 1)
                        (("1" (assert) (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "is_sorted?" -3)
                      (("2" (inst -3 "0")
                        (("2" (assert)
                          (("2" (expand "nth" -3)
                            (("2" (lemma "leq_transitive")
                              (("2"
                                (expand "transitive?" -1)
                                (("2"
                                  (expand "nth" 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "j-1=0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (inst -3 "0" "j-1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "cons1_var"
                                             "nth(cons2_var,0)"
                                             "nth(cons2_var,j-1)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "j=0")
                  (("1" (assert) nil nil)
                   ("2" (expand "nth" 3)
                    (("2" (assert)
                      (("2" (inst -1 "i-1" "j-1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -2 -3)
                  (("2" (expand "is_sorted?")
                    (("2" (skeep)
                      (("2" (inst -2 "k+1")
                        (("1" (assert)
                          (("1" (expand "length " -2 1)
                            (("1" (expand "nth" -2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "length" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "is_sorted?" 1)
            (("2" (skeep)
              (("2" (inst -1 "k" "1+k") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil)
     ("5" (lemma "leq_total_preorder") (("5" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (reflexive? const-decl "bool" relations nil)
    (leq_reflexive formula-decl nil standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (leq_transitive formula-decl nil standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (transitive? const-decl "bool" relations nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (k skolem-const-decl "below[length(cons2_var)]"
     standard_form_mult_poly nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (allnonzero_TCC1 0
  (allnonzero_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil) nil nil
   (allnonzero subtype "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (allnonzero_TCC2 0
  (allnonzero_TCC2-1 nil 3810975173
   ("" (skeep)
    (("" (assert)
      (("" (expand "length" 2 2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (allnonzero termination
    "standard_form_mult_poly.allnonzero(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "nil")))
 (allnonzero_TCC3 0
  (allnonzero_TCC3-1 nil 3810975173
   ("" (skeep)
    (("" (assert)
      (("" (expand "length" 3 2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (allnonzero termination
    "standard_form_mult_poly.allnonzero(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "nil")))
 (allnonzero_cdr 0
  (allnonzero_cdr-1 nil 3810977601
   ("" (skeep)
    (("" (expand "allnonzero?")
      (("" (assert)
        (("" (case "cdr(p) = null")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (split -2)
              (("1" (propax) nil nil)
               ("2" (split 3)
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (inst 1 "i+1")
                      (("1" (expand "nth" 1) (("1" (propax) nil nil))
                        nil)
                       ("2" (expand "length" 1)
                        (("2" (cancel-add 1)
                          (("2" (typepred "i") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(p)))"
       standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (all_nonzero 0
  (all_nonzero-1 nil 3810977603
   ("" (induct "p")
    (("1" (expand "allnonzero")
      (("1" (expand "allnonzero?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (expand "allnonzero" 1)
        (("2" (split 1)
          (("1" (flatten) nil nil)
           ("2" (flatten)
            (("2" (expand "allnonzero?" 2)
              (("2" (assert)
                (("2" (split 2)
                  (("1" (skeep)
                    (("1" (case "i = 0")
                      (("1" (replace -1)
                        (("1" (expand "nth" -2) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "allnonzero?" -2)
                        (("2" (assert)
                          (("2" (split -2)
                            (("1" (assert)
                              (("1"
                                (typepred "i")
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (expand "length" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (inst 1 "i-1")
                                    (("1"
                                      (expand "nth" -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl
       "below(length(cons(cons1_var, allnonzero(cons2_var))))"
       standard_form_mult_poly nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (allnonzero_alpha 0
  (allnonzero_alpha-1 nil 3810977606
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "j=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (expand "nth" 2 1)
                (("1" (expand "allnonzero" 2)
                  (("1" (assert)
                    (("1" (inst 2 "0")
                      (("1" (expand "nth" 2) (("1" (propax) nil nil))
                        nil)
                       ("2" (expand "allnonzero" 1)
                        (("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (case "cons2_var = null")
                (("1" (replace -1)
                  (("1" (expand "allnonzero" 3)
                    (("1" (assert)
                      (("1" (expand "allnonzero" 3)
                        (("1" (expand "nth" 3 1)
                          (("1" (typepred "j")
                            (("1" (expand "length" -1)
                              (("1"
                                (expand "length" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "nth" 4 1)
                    (("2" (inst -1 "j-1")
                      (("2" (assert)
                        (("2" (case "cons1_var`C = 0")
                          (("1" (expand "allnonzero" 4)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "k")
                                  (("1"
                                    (inst 4 "k")
                                    (("1"
                                      (typepred "j")
                                      (("1"
                                        (expand "length" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "allnonzero" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "allnonzero" 5)
                            (("2" (assert)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 5 "k+1")
                                  (("1"
                                    (expand "nth" 5 2)
                                    (("1"
                                      (typepred "j")
                                      (("1"
                                        (expand "length" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "k")
                                    (("2"
                                      (expand "allnonzero" 1)
                                      (("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (k skolem-const-decl "below(length(allnonzero(cons2_var)))"
     standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k skolem-const-decl "below(length(allnonzero(cons2_var)))"
     standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (allnonzero_alpha_reverse 0
  (allnonzero_alpha_reverse-1 nil 3810977611
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "cons2_var = null")
        (("1" (skeep)
          (("1" (typepred "k")
            (("1" (expand "allnonzero" -1)
              (("1" (lift-if -1)
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (expand "allnonzero" -2)
                      (("1" (assert)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "length" -1)
                      (("2" (expand "allnonzero" -1)
                        (("2" (assert)
                          (("2" (expand "length" -1)
                            (("2" (expand "nth" 2 3)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "allnonzero" 2)
                                  (("2"
                                    (inst 2 "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "allnonzero(cons2_var)=null")
            (("1" (skeep)
              (("1" (typepred "k")
                (("1" (expand "allnonzero" -1)
                  (("1" (lift-if -1)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "length" -1)
                          (("2" (expand "length" -1)
                            (("2" (assert)
                              (("2"
                                (expand "nth" 3 3)
                                (("2"
                                  (expand "allnonzero" 3)
                                  (("2"
                                    (inst 3 "0")
                                    (("1"
                                      (expand "nth" 3)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "k")
                (("2" (expand "allnonzero" -1)
                  (("2" (lift-if -1)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "allnonzero" 3)
                          (("1" (assert)
                            (("1" (inst -3 "k")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 4 "j+1")
                                  (("1"
                                    (expand "nth" 4 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 4 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "length" -1)
                          (("2" (expand "allnonzero" 4)
                            (("2" (assert)
                              (("2"
                                (case "k=0")
                                (("1"
                                  (expand "nth" 4 3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst 4 "0")
                                      (("1"
                                        (expand "nth" 4)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" 5 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 6 "j+1")
                                          (("1"
                                            (expand "nth" 6 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" 6 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (allnonzero_length 0
  (allnonzero_length-1 nil 3810977616
   ("" (induct "p")
    (("1" (expand "allnonzero") (("1" (assert) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "allnonzero" 1)
        (("2" (lift-if 1)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "length" 1 2) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (expand "length" 2) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (allnonzero_sorted 0
  (allnonzero_sorted-1 nil 3810977618
   (""
    (case "FORALL (p:MultPoly): is_sorted?(p) IMPLIES is_sorted?(allnonzero(p))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (expand "mv_is_sorted?")
          (("1" (flatten)
            (("1" (assert)
              (("1" (expand "Unif?" 1)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (lemma "allnonzero_alpha_reverse")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst-cp -1 "i")
                            (("1" (inst -1 "j")
                              (("1"
                                (skolem -1 "j1")
                                (("1"
                                  (skolem -2 "i1")
                                  (("1"
                                    (expand "Unif?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (expand "allnonzero" 3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst -1 "i1" "j1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "allnonzero" 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "p")
        (("1" (expand "is_sorted?")
          (("1" (assert)
            (("1" (expand "allnonzero") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "cdr_of_sorted_is_sorted")
            (("2" (inst -1 "cons(cons1_var,cons2_var)")
              (("2" (assert)
                (("2" (expand "is_sorted?" 1)
                  (("2" (skeep)
                    (("2" (case "cons2_var = null")
                      (("1" (typepred "k")
                        (("1" (lemma "allnonzero_length")
                          (("1" (inst -1 "cons(cons1_var,cons2_var)")
                            (("1" (assert)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (expand "length" -1 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "k=0")
                        (("1" (replace -1)
                          (("1" (expand "nth" 2)
                            (("1" (expand "nth" 2)
                              (("1"
                                (expand "allnonzero" 2)
                                (("1"
                                  (lift-if 2)
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "allnonzero(cons2_var) = null")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "allnonzero" -7)
                                            (("1"
                                              (expand "length" -7)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "is_sorted?" -4)
                                          (("2"
                                            (inst -4 "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -4)
                                                (("1"
                                                  (expand "nth" -1)
                                                  (("1"
                                                    (expand "nth" -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (expand
                                                     allnonzero
                                                     -5)
                                                    (("2"
                                                      (expand
                                                       length
                                                       -5)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma
                                         "allnonzero_alpha_reverse")
                                        (("2"
                                          (inst -1 "cons2_var")
                                          (("1"
                                            (case
                                             "allnonzero(cons2_var)=null")
                                            (("1"
                                              (expand "allnonzero" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "length" -7)
                                                  (("1"
                                                    (expand "length" -7)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "0")
                                                (("1"
                                                  (expand "nth" -1 3)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "is_sorted_implies_monotone")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "cons(cons1_var,cons2_var)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "j+1"
                                                             "0")
                                                            (("1"
                                                              (expand
                                                               nth
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "constant_doesnt_matter_last")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "cons1_var"
                                                                     "nth(cons2_var, j)"
                                                                     "car(allnonzero(cons2_var))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               length
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 3)
                          (("2" (assert)
                            (("2" (expand "allnonzero" 3)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if 3)
                                  (("2"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "is_sorted?" -3)
                                        (("1"
                                          (inst -3 "k")
                                          (("1"
                                            (expand "allnonzero" -5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" -3)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "k")
                                            (("2"
                                              (expand "allnonzero" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "is_sorted?" -2)
                                        (("2"
                                          (inst -2 "k-1")
                                          (("2"
                                            (expand "allnonzero" -4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (skeep)
            (("3" (lemma "leq_total_preorder") (("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil))
          nil))
        nil))
      nil)
     ("3" (lemma "leq_total_preorder") (("3" (assert) nil nil)) nil)
     ("4" (lemma "leq_total_preorder") (("4" (propax) nil nil)) nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (allnonzero_length formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k skolem-const-decl
     "below[length(allnonzero(cons(cons1_var, cons2_var)))]"
     standard_form_mult_poly nil)
    (is_sorted_implies_monotone formula-decl nil sorting sorting)
    (constant_doesnt_matter_last formula-decl nil
     standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (j skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (allnonzero_alpha_reverse formula-decl nil standard_form_mult_poly
     nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (allnonzero_simp 0
  (allnonzero_simp-1 nil 3810977625
   ("" (induct "p")
    (("1" (expand "allnonzero")
      (("1" (assert) (("1" (flatten) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (lemma "simplify_cdr")
        (("2" (inst -1 "cons(cons1_var,cons2_var)")
          (("2" (assert)
            (("2" (expand "simplified?" 1)
              (("2" (split 1)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (split 3)
                    (("1" (propax) nil nil)
                     ("2" (skeep)
                      (("2" (case "i=0")
                        (("1" (expand "nth" -2)
                          (("1" (assert)
                            (("1" (expand "allnonzero" -2)
                              (("1"
                                (lift-if -2)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "simplified?" -5)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (expand "allnonzero" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (expand "length" -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (typepred "j")
                                                    (("2"
                                                      (expand
                                                       allnonzero
                                                       -1)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (inst -1 "0" "j")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "j")
                                                (("2"
                                                  (expand
                                                   allnonzero
                                                   -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (expand "length" 1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma
                                       "allnonzero_alpha_reverse")
                                      (("2"
                                        (inst -1 "cons2_var")
                                        (("1"
                                          (case
                                           "allnonzero(cons2_var)=null")
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "allnonzero" -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (expand "length" -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "j-1")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   simplified?
                                                   -6)
                                                  (("2"
                                                    (split -6)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -1)
                                                      (("1"
                                                        (lemma
                                                         "allnonzero_length")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cons2_var")
                                                          (("1"
                                                            (expand
                                                             length
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "j_1+1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               nth
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             length
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             length
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "j")
                                          (("2"
                                            (expand "allnonzero" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (lift-if -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (lemma
                                                             "allnonzero_length")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "cons2_var")
                                                              (("2"
                                                                (expand
                                                                 length
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" -1)
                          (("2" (assert)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "allnonzero" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if -2)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "simplified?" -5)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (typepred "j")
                                                    (("1"
                                                      (expand
                                                       allnonzero
                                                       -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           length
                                                           -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (expand
                                                                 allnonzero
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             nth
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (expand
                                                             allnonzero
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           length
                                                           1)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "allnonzero_alpha_reverse")
                                              (("2"
                                                (inst -1 "cons2_var")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "allnonzero(cons2_var) = null")
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (expand
                                                         allnonzero
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           length
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             length
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst -1 "i-1")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             simplified?
                                                             -6)
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (expand
                                                                 length
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   length
                                                                   -1)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (typepred
                                                                           "i")
                                                                          (("1"
                                                                            (expand
                                                                             allnonzero
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               allnonzero
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   length
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     length
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j!1+1"
                                                                     "0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         nth
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       length
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       length
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand "length" -1)
                                                    (("2"
                                                      (expand
                                                       allnonzero
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           allnonzero
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             length
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "allnonzero" -1)
                                    (("2"
                                      (lift-if -1)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "simplified?" -4)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (expand
                                                   allnonzero
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst -1 "i" "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "nth" -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (expand
                                                         allnonzero
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "i")
                                                      (("3"
                                                        (expand
                                                         allnonzero
                                                         -1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "simplified?" -3)
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (expand
                                                   allnonzero
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           length
                                                           -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 allnonzero
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   length
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "i-1"
                                                     "j-1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (i skolem-const-decl
       "below(length(allnonzero(cons(cons1_var, cons2_var))))"
       standard_form_mult_poly nil)
    (j!1 skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl
     "below(length(allnonzero(cons(cons1_var, cons2_var))))"
     standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (allnonzero_alpha_reverse formula-decl nil standard_form_mult_poly
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j_1 skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (allnonzero_length formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simplify_cdr formula-decl nil standard_form_mult_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (allnonzero_lft 0
  (allnonzero_lft-1 nil 3812886582
   ("" (skeep)
    (("" (rewrite "lft_is_alt")
      (("" (expand "allnonzero?")
        (("" (split -1)
          (("1" (expand "lft_alt" 1 1)
            (("1" (expand "map") (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (expand "lft_alt" 2 1)
              (("2" (expand "map" 2)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (split 3)
                      (("1" (skeep :preds? T)
                        (("1" (expand "lft_alt" -1)
                          (("1" (rewrite "map_length" -1)
                            (("1" (inst 1 "i")
                              (("1"
                                (expand "lft_alt" -2)
                                (("1"
                                  (rewrite "map_nth_rw")
                                  (("1"
                                    (expand " lft_one")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lft_is_alt formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (n skolem-const-decl "nat" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(lft_alt(p)(n)))"
       standard_form_mult_poly nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (map_length formula-decl nil more_map_props nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil))
   shostak))
 (allnonzero_max_length 0
  (allnonzero_max_length-1 nil 3814223318
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "allnonzero" 1 1)
        (("2" (expand "max_length" 1 3)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "max_length" 2 1)
                    (("2" (assert)
                      (("2" (expand "max" 2 1)
                        (("2" (assert)
                          (("2" (lift-if 2)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (<= const-decl "bool" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (allnonzero_id 0
  (allnonzero_id-1 nil 3814455718
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "allnonzero?" -2)
        (("2" (split -2)
          (("1" (propax) nil nil)
           ("2" (expand "allnonzero" 2 1)
            (("2" (lift-if 2)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (inst 2 "0")
                    (("1" (expand "nth" 2) (("1" (propax) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (decompose-equality 2)
                    (("2" (expand "allnonzero?" 4)
                      (("2" (split 4)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (skeep -1)
                              (("1"
                                (inst 4 "i+1")
                                (("1"
                                  (expand "nth" 4 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((i skolem-const-decl "below(length(cons2_var))"
       standard_form_mult_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (minlength_unif 0
  (minlength_unif-1 nil 3812887372
   ("" (skeep)
    (("" (expand "minlength?")
      (("" (assert)
        (("" (expand "Unif?")
          (("" (flatten)
            (("" (assert)
              (("" (split -1)
                (("1" (skeep)
                  (("1" (inst-cp -1 "i")
                    (("1" (inst-cp -1 "j")
                      (("1" (expand "length" +)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minlength? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cutting_TCC1 0
  (cutting_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting subtype "standard_form_mult_poly.l"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (cutting_TCC2 0
  (cutting_TCC2-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting subtype "standard_form_mult_poly.l"
    "{l: list_adt[nat].list | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (cutting_TCC3 0
  (cutting_TCC3-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "rdc_rac[nat]")
      (("" (inst?)
        (("" (lemma "length_append[nat]")
          (("" (inst?)
            (("" (replace -2)
              (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rdc_rac formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rac const-decl "T" more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting termination
    "standard_form_mult_poly.cutting(more_list_props[nat].rdc(standard_form_mult_poly.l))"
    "nil")))
 (mv_cut_TCC1 0
  (mv_cut_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (assert)
        (("" (expand "length_a" 2 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (length_a def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (mv_cut termination
    "standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "nil")))
 (mv_cut_TCC2 0
  (mv_cut_TCC2-1 nil 3810975173
   ("" (skeep)
    (("" (expand "length" 3 2)
      (("" (assert)
        (("" (expand "length_a" 3 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (length_a def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (mv_cut termination
    "standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "nil")))
 (last_is_nth_TCC1 0
  (last_is_nth_TCC1-1 nil 3811667168
   ("" (assert)
    (("" (skeep) (("" (expand "length") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (last_is_nth subtype
    "(number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), 1)"
    "below[length[nat](l)]")))
 (last_is_nth 0
  (last_is_nth-1 nil 3811667961
   (""
    (case "FORALL (n: nat, l: (cons?[nat])): length(l)=n IMPLIES last(l) = nth(l, length(l) - 1)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst -1 "length(l)") nil nil)) nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (case "j=0")
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (assert)
                      (("1" (expand "last")
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "last" 2)
                  (("2" (assert)
                    (("2" (expand "length" 2)
                      (("2" (expand "length" -2)
                        (("2" (inst?)
                          (("1" (assert)
                            (("1" (expand "nth" 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (typepred " l")
                            (("2" (expand "every" -)
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (skeep)
              (("3" (assert)
                (("3" (expand "length") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand "length" 1) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (l skolem-const-decl "(cons?[nat])" standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (last def-decl "real" standard_form_poly PolySafe)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (cut_monom_null 0
  (cut_monom_null-1 nil 3811666581
   (""
    (case "FORALL (n: nat, l: list[nat]):
        n = length(l) IMPLIES 
        (cutting(l) = null IFF
         NOT (cons?(l) AND EXISTS (m: posnat): member(m, l)))")
    (("1" (skeep)
      (("1" (inst -1 "length(m`alpha)" "m`alpha")
        (("1" (assert)
          (("1" (expand "cut_monom") (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (assert)
                  (("1" (expand "cutting") (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (skeep)
              (("2" (expand "cutting" 1)
                (("2" (assert)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (inst -2 "rdc(l)")
                          (("1" (case "j = length[nat](rdc[nat](l))")
                            (("1" (assert)
                              (("1"
                                (rewrite "last_is_nth" -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "member_nth[nat]")
                                              (("1"
                                                (inst -1 "l" "m")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case
                                                       "i = length(l) -1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (case
                                                           "not cons?(rdc(l))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               3
                                                               "m")
                                                              (("1"
                                                                (lemma
                                                                 "nth_reverse[nat]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "l"
                                                                   "length(l) -1-i")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (move-terms
                                                                               -2
                                                                               r
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           -1
                                                                                           l
                                                                                           2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nth_reverse[nat]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "cdr(reverse(l))"
                                                                                           "i")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "length_reverse[nat]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "l")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "nth_member[nat]")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "reverse(cdr(reverse(l)))"
                                                                                                                     "m"
                                                                                                                     "i")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "rdc"
                                                                                                                         5)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "l")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "every_reverse[number]")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "every"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "length_reverse[nat]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (typepred
                                                                                             "l")
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "every_reverse[number]")
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "m")
                                                              (("2"
                                                                (rewrite
                                                                 "member_reverse"
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -5)
                                                                  (("2"
                                                                    (lift-if
                                                                     -5)
                                                                    (("2"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "nth_reverse[nat]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "l"
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "member_reverse"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rdc")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "m")
                                                (("2"
                                                  (rewrite
                                                   "member_reverse"
                                                   1)
                                                  (("2"
                                                    (expand "member" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (rewrite
                                                             "length_reverse"
                                                             -6
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (rewrite
                                                               "member_reverse"
                                                               3)
                                                              (("2"
                                                                (expand
                                                                 "rdc")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (rewrite "length_reverse[nat]" -3 :dir
                               rl)
                              (("2"
                                (expand "rdc" +)
                                (("2"
                                  (expand "length" -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "length_reverse[nat]"
                                                 -1
                                                 :dir
                                                 rl)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "last_is_nth" 1)
                          (("2" (expand "length" -2)
                            (("2" (assert)
                              (("2"
                                (inst 2 "nth(l, length(l) - 1)")
                                (("2"
                                  (lemma "nth_member[nat]")
                                  (("2"
                                    (inst
                                     -1
                                     "l"
                                     "nth(l, length(l)-1)"
                                     "length(l)-1")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (member_nth formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reverse def-decl "list[T]" list_props nil)
    (l skolem-const-decl "list[nat]" standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(l))" standard_form_mult_poly
       nil)
    (nth_member formula-decl nil more_list_props structures)
    (every_reverse formula-decl nil list_lemmas nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_reverse formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_reverse formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (mv_cut_is_alt 0
  (mv_cut_is_alt-1 nil 3811671036
   ("" (induct "p")
    (("1" (expand "mv_cut")
      (("1" (expand "mv_cut_alt")
        (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (expand "mv_cut" 1)
        (("2" (lemma "cut_monom_null")
          (("2" (inst?)
            (("2" (flatten)
              (("2" (assert)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "mv_cut_alt")
                          (("1" (expand "map" +)
                            (("1" (assert)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (expand "cut_monom")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "mv_cut_alt")
                          (("2" (expand "map" +)
                            (("2" (decompose-equality 2)
                              (("2"
                                (expand "cut_monom")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cut_monom_null formula-decl nil standard_form_mult_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mv_cut_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (cutting_length 0
  (cutting_length-1 nil 3810977636
   (""
    (case "FORALL (l: list[nat], n:nat): length(l) = n IMPLIES length(l) >= length(cutting(l))")
    (("1" (skeep) (("1" (inst -1 "l" "length(l)") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if)
              (("1" (split -1)
                (("1" (expand "cutting" 1) (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" 1)
              (("2" (lift-if 1)
                (("2" (assert)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (lemma "rdc_rac[nat]")
                        (("1" (inst? -1)
                          (("1" (lemma "length_append[nat]")
                            (("1" (inst?)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -4 "rdc(l)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rac const-decl "T" more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (rdc_rac formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil))
   shostak))
 (cutting_nth_TCC1 0
  (cutting_nth_TCC1-1 nil 3813402958
   ("" (skeep)
    (("" (typepred "i")
      (("" (lemma "cutting_length")
        (("" (inst -1 "l") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting_nth subtype "standard_form_mult_poly.i"
    "below[length[nat](l)]")))
 (cutting_nth 0
  (cutting_nth-1 nil 3813403219
   (""
    (case "FORALL(n:nat, l: list[nat], i: below(length(cutting(l)))):
        length(l) = n IMPLIES nth(cutting(l), i) = nth(l, i)")
    (("1" (skeep) (("1" (inst -1 "length(l)" "l" "i") nil nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (grind)
              (("1" (typepred "i")
                (("1" (lemma "cutting_length")
                  (("1" (inst -1 "l") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "cutting" 1 1)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (replace -1) (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (inst -2 "rdc(l)" "i")
                              (("1"
                                (lemma "length_rdc[nat]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (lemma "nth_rdc[nat]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (expand "cutting" -1)
                                                (("1"
                                                  (lemma
                                                   "cutting_length")
                                                  (("1"
                                                    (inst -1 "rdc(l)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "i")
                (("3" (lemma "cutting_length")
                  (("3" (inst -1 "l") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "i")
          (("3" (lemma "cutting_length")
            (("3" (inst -1 "l") (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_rdc formula-decl nil list_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_rdc formula-decl nil list_lemmas nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (cutting_last_TCC1 0
  (cutting_last_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting_last subtype
    "standard_form_mult_poly.cutting(standard_form_mult_poly.l)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (cutting_last 0
  (cutting_last-1 nil 3810977639
   (""
    (case "FORALL (l: list[nat], n:nat): length(l) = n IMPLIES (cutting(l) = null OR last(cutting(l)) /= 0)")
    (("1" (skeep)
      (("1" (inst -1 "l" "length(l)") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if)
              (("1" (split -1)
                (("1" (expand "cutting") (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" 1)
              (("2" (assert)
                (("2" (lift-if 1)
                  (("2" (assert)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (inst -2 "rdc(l)")
                          (("1" (lemma "rdc_rac[nat]")
                            (("1" (inst? -1)
                              (("1"
                                (lemma "length_append[nat]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -5)
                                      (("1"
                                        (expand "length" -1 2)
                                        (("1"
                                          (expand "length" -1 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "rdc(l)")
                        (("2" (lemma "rdc_rac[nat]")
                          (("2" (inst?)
                            (("2" (lemma "length_append[nat]")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (expand "length" -1 2)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil))
    nil)
   ((rdc const-decl "list[T]" more_list_props structures)
    (rac const-decl "T" more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_append formula-decl nil list_props nil)
    (rdc_rac formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last def-decl "real" standard_form_poly PolySafe))
   shostak))
 (cutting_alt_TCC1 0
  (cutting_alt_TCC1-1 nil 3812889535
   ("" (skeep)
    (("" (lemma "cutting_length")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cutting_length formula-decl nil standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (cutting_alt subtype
    "((number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), list_props[nat].length(standard_form_mult_poly.cutting(standard_form_mult_poly.l))))"
    "nat")))
 (cutting_alt 0
  (cutting_alt-1 nil 3812889535
   (""
    (case "FORALL (n:nat, l: list[nat]):
       n = length(l) IMPLIES l = append(cutting(l), (: 0 :) ^ (length(l) - length(cutting(l))))")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst -1 "length(l)") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "cutting")
                  (("1" (assert)
                    (("1" (expand "length")
                      (("1" (expand "append")
                        (("1" (expand "^") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" +)
              (("2" (assert)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (inst -2 "rdc(l)")
                        (("1" (lemma "length_reverse[nat]")
                          (("1" (inst -1 "l")
                            (("1" (expand "length" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite
                                           "length_reverse"
                                           -1
                                           :dir
                                           rl)
                                          (("2"
                                            (expand "length" -4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "rdc" -3 1)
                                                (("2"
                                                  (lemma
                                                   "rdc_rac[nat]")
                                                  (("2"
                                                    (inst -1 "l")
                                                    (("2"
                                                      (expand "rac")
                                                      (("2"
                                                        (lemma
                                                         "last_is_nth")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -4
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (case
                                                                   "not length(cdr(l)) >= length(cutting(rdc(l)))")
                                                                  (("1"
                                                                    (lemma
                                                                     "cutting_length")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "rdc(l)")
                                                                      (("1"
                                                                        (expand
                                                                         "rdc"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "length(cdr(l)) = length(cutting(rdc(l)))")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -7
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (expand
                                                                           "rdc"
                                                                           -7
                                                                           3)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "append_null_right")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "append_null_right")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "caret_swap"
                                                                       3)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_assoc"
                                                                         3
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "rdc"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "^")
                          (("2" (rewrite "append_null_right") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (skeep)
            (("3" (lemma "cutting_length")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skeep)
            (("4" (expand "every")
              (("4" (expand "every") (("4" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "cutting_length")
        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (expand "every")
          (("4" (expand "every") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length_reverse formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (rdc_rac formula-decl nil more_list_props structures)
    (rac const-decl "T" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (caret_swap formula-decl nil list_lemmas nil)
    (append_assoc formula-decl nil list_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_null formula-decl nil more_list_props structures)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (cutting_sum 0
  (cutting_sum-1 nil 3813918822
   ("" (skeep)
    (("" (lemma "cutting_alt")
      (("" (inst?)
        (("" (lemma "sum_append")
          ((""
            (inst -1 "cutting(l)"
             "(: 0 :) ^ (length(l) - length(cutting(l)))")
            (("1" (assert)
              (("1" (lemma "sum_0")
                (("1" (inst -1 "(length(l) - length(cutting(l)))")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (lemma "cutting_length")
                      (("2" (inst -1 "l") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "cutting_length")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cutting_alt formula-decl nil standard_form_mult_poly nil)
    (sum_append formula-decl nil standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (sum_0 formula-decl nil standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (l skolem-const-decl "list[nat]" standard_form_mult_poly nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (mv_cut_length 0
  (mv_cut_length-1 nil 3813581241
   ("" (induct "p")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "mv_cut" 1 1)
        (("2" (assert)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "length" 1) (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "length" 2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (mv_cut_C_TCC1 0
  (mv_cut_C_TCC1-1 nil 3813580263
   ("" (skeep)
    (("" (lemma "mv_cut_length")
      (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (mv_cut_C subtype "standard_form_mult_poly.i"
    "below[length[monomial](mv_cut(p))]")))
 (mv_cut_C 0
  (mv_cut_C-1 nil 3813581266
   ("" (induct "p")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (expand "nth" 1)
            (("1" (assert)
              (("1" (expand "mv_cut" 1)
                (("1" (lift-if 1) (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (inst -1 "i-1")
            (("1" (expand "nth" 2)
              (("1" (expand "mv_cut" 2) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (typepred "i")
                (("2" (assert)
                  (("2" (expand "length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "i")
          (("3" (assert)
            (("3" (lemma "mv_cut_length")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       standard_form_mult_poly nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (mv_cut_alpha 0
  (mv_cut_alpha-1 nil 3813654594
   ("" (induct "p")
    (("1" (skeep) (("1" (typepred "i") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (expand "nth" 1)
            (("1" (expand "mv_cut" 1)
              (("1" (assert)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split 1)
                        (("1" (grind) nil nil)
                         ("2" (lemma "cutting_last")
                          (("2" (inst -1 "cons1_var`alpha")
                            (("2" (assert)
                              (("2"
                                (lemma "last_is_nth")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       1
                                       "last(cutting(cons1_var`alpha))")
                                      (("2"
                                        (lemma "nth_member[nat]")
                                        (("2"
                                          (lemma "cutting_nth")
                                          (("2"
                                            (inst
                                             -2
                                             "cons1_var`alpha"
                                             "last(cutting(cons1_var`alpha))"
                                             " length(cutting(cons1_var`alpha)) - 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -1
                                                 "cons1_var`alpha"
                                                 "length(cutting(cons1_var`alpha)) - 1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "cutting_length")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons1_var`alpha")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "nth" 2)
              (("2" (expand "mv_cut" 2 1)
                (("2" (lift-if 2) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "i")
          (("3" (lemma "mv_cut_length")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cutting_last formula-decl nil standard_form_mult_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last def-decl "real" standard_form_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (cutting_nth formula-decl nil standard_form_mult_poly nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_member formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (null_cut_cdr 0
  (null_cut_cdr-1 nil 3813922686
   (""
    (case "FORALL (n:nat,l: list[nat]):
       length(l) = n IMPLIES ( cons?(l) AND null?(cutting(l)) IMPLIES null?(cutting(cdr(l))))")
    (("1" (skeep)
      (("1" (inst -1 "length(l)" "l") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (lemma "last_cdr[nat]")
                        (("1" (inst -1 "l")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "cutting" -6)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "last_is_nth")
                                    (("1"
                                      (inst -1 "l")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "last_is_nth")
                                          (("1"
                                            (inst -1 "cdr(l)")
                                            (("1"
                                              (expand "last" -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "rdc(l)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "length_rdc[nat]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "rdc[nat](l)=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "rdc_cdr[nat]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "last_cdr[nat]")
                            (("2" (inst?)
                              (("2"
                                (expand "last" -1)
                                (("2"
                                  (lemma "last_is_nth")
                                  (("2"
                                    (inst-cp -1 "l")
                                    (("2"
                                      (inst -1 "cdr(l)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -2 -3 rl)
                                            (("2"
                                              (replace -1 -3 rl)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (expand "cutting" -7)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((l skolem-const-decl "list[nat]" standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_rdc formula-decl nil list_lemmas nil)
    (rdc_cdr formula-decl nil list_lemmas nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (last_cdr formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (zero_n_nth_TCC1 0
  (zero_n_nth_TCC1-1 nil 3813504812
   ("" (induct "n")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "^" 1)
          (("2" (case "i=0")
            (("1" (grind) nil nil)
             ("2" (inst -1 "i-1")
              (("1" (lemma "length_append[nat]")
                (("1" (inst -1 "(: 0 :)" "(: 0 :)^j")
                  (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" standard_form_mult_poly nil)
    (i skolem-const-decl "below(1 + j)" standard_form_mult_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (zero_n_nth subtype "standard_form_mult_poly.i"
    "below[length[real](^[real]((: 0 :), n))]")))
 (zero_n_nth 0
  (zero_n_nth-1 nil 3813505348
   ("" (induct " n")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (expand "^" 1)
            (("1" (lemma "nth_append[nat]")
              (("1" (inst -1 "(: 0:)" "(: 0 :)^j" "i")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "every" 1)
                  (("2" (expand "every" 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "^" 2)
            (("2" (lemma "nth_append[nat]")
              (("2" (inst -1 "(: 0:)" "(: 0 :)^j" "i")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (replace -1) (("1" (inst -2 "i-1") nil nil))
                      nil)
                     ("2" (lemma "zero_n_nth_TCC1")
                      (("2" (inst -1 "j" "i-1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 3 -1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "zero_n_nth_TCC1") (("3" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (zero_n_nth_TCC1 subtype-tcc nil standard_form_mult_poly nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (cutting_cdr 0
  (cutting_cdr-1 nil 3813570272
   (""
    (case " FORALL (n:nat, l1: list[nat]):
      length(l1)=n IMPLIES (  (cons?(cutting(l1)) AND cons?(l1)) IMPLIES
         cutting(cdr(l1)) = cdr(cutting(l1)))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (assert) (("1" (inst -1 "length(l1)") nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" 1 2)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "cutting" 1 1)
                          (("1" (lift-if 1)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "rdc(l1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "length_rdc[nat]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT ((cons?(cutting(rdc(l1))) AND cons?(rdc(l1))))")
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "null?[nat](rdc(l1))")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "cons?[nat](rdc(l1))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "cons?[real](rdc(l1))")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split -5)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (lemma
                                                       "rdc_cdr[nat]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "last" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if -1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "cutting" 2)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "last" 3 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if 3)
                                              (("1"
                                                (split 3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (last def-decl "real" standard_form_poly PolySafe)
    (rdc const-decl "list[T]" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_rdc formula-decl nil list_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rdc_cdr formula-decl nil list_lemmas nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (cutting_append_length 0
  (cutting_append_length-1 nil 3813503552
   (""
    (case "FORALL (A:nat, l1, l2: list[nat], n, m: nat):
                     length(l1)=A IMPLIES ( (length(l1) = length(l2) AND
                        append(cutting(l1), (: 0 :) ^ n) =
                         append(cutting(l2), (: 0 :) ^ m))
                       IMPLIES length(cutting(l1)) = length(cutting(l2)))")
    (("1" (skeep)
      (("1" (inst -1 "length(l1)" "l1" "l2" "n" "m")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (grind)
            (("1" (case "l1=null")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "cutting" -4 1)
              (("2" (lift-if -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "cutting" -2 2)
                          (("1" (lift-if -2)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst
                                       -4
                                       "rdc(l1)"
                                       "rdc(l2)"
                                       "n"
                                       "m")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "length_rdc[nat]")
                                              (("1"
                                                (expand "cutting" 3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "length_rdc[nat]")
                                              (("2"
                                                (inst-cp -1 "l1")
                                                (("2"
                                                  (inst -1 "l2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "length_rdc[nat]")
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "length(l2) > length(cutting(rdc(l1)))")
                                      (("1"
                                        (lemma "nth_append[nat]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "list_extensionality[nat]")
                                            (("1"
                                              (inst
                                               -1
                                               "append(cutting(rdc(l1)), (: 0 :) ^ n)"
                                               " append(l2, (: 0 :) ^ m)")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "length_append[nat]")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "cutting(rdc(l1))"
                                                           " (: 0 :) ^ n")
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             "l2"
                                                             " (: 0 :) ^ m")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "length_appendn[nat]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(: 0:)"
                                                                           "_")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "n")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -5
                                                                                         "cutting(rdc(l1))"
                                                                                         "(: 0 :)^n"
                                                                                         "length(l2)-1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -5
                                                                                             "l2"
                                                                                             "(: 0 :)^m"
                                                                                             "length(l2)-1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "length(l2)-1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   -4
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     -4
                                                                                                     lr)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "last(l2) = nth(l2,length(l2)-1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "zero_n_nth")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -6
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "last_is_nth")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "cutting_length")
                                          (("2"
                                            (inst -1 "rdc(l1)")
                                            (("2"
                                              (lemma "length_rdc[nat]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "cutting" -1 1)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "length(l1) > length(cutting(rdc(l2)))")
                                    (("1"
                                      (lemma "nth_append[nat]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "list_extensionality[nat]")
                                          (("1"
                                            (inst
                                             -1
                                             "append(cutting(rdc(l2)), (: 0 :) ^ m)"
                                             " append(l1, (: 0 :) ^ n)")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma
                                                       "length_append[nat]")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "cutting(rdc(l2))"
                                                         " (: 0 :) ^ m")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "l1"
                                                           " (: 0 :) ^ n")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "length_appendn[nat]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(: 0:)"
                                                                         "_")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "n")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -5
                                                                                       "cutting(rdc(l2))"
                                                                                       "(: 0 :)^m"
                                                                                       "length(l1)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -5
                                                                                           "l1"
                                                                                           "(: 0 :)^n"
                                                                                           "length(l1)-1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -4
                                                                                               "length(l1)-1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5
                                                                                                 -4
                                                                                                 lr)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   -4
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "last(l1) = nth(l1,length(l1)-1)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "zero_n_nth")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -6
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "last_is_nth")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 3
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (hide
                                                                                           3
                                                                                           4)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (lemma "length_rdc[nat]")
                                        (("2"
                                          (lemma "cutting_length")
                                          (("2"
                                            (inst -1 "rdc(l2)")
                                            (("2"
                                              (inst -2 "l2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -2
                                           "cdr(l1)"
                                           "cdr(l2)"
                                           "n"
                                           "m")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "cutting" 4)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_rdc formula-decl nil list_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (last def-decl "real" standard_form_poly PolySafe)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (zero_n_nth formula-decl nil standard_form_mult_poly nil)
    (last_is_nth formula-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (max_length_cut 0
  (max_length_cut-1 nil 3810977647
   ("" (induct "p")
    (("1" (expand "mv_cut") (("1" (assert) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "mv_cut" 1)
        (("2" (lift-if)
          (("2" (split)
            (("1" (flatten)
              (("1" (expand "max_length" 1)
                (("1" (typepred "standard_form(cons1_var`alpha)")
                  (("1" (hide -1)
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1"
                          (case "length(cutting(cons1_var`alpha))< max_length(mv_cut(cons2_var))")
                          (("1" (expand "max" 1 2)
                            (("1" (assert) nil nil)) nil)
                           ("2" (expand "max" 2 2)
                            (("2" (assert)
                              (("2"
                                (lemma "cutting_length")
                                (("2"
                                  (inst -1 "cons1_var`alpha")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "max_length" 2 2)
                (("2" (assert)
                  (("2" (expand "max_length" 2 1)
                    (("2" (assert)
                      (("2" (expand "max" 2 2)
                        (("2" (assert)
                          (("2" (lift-if 2)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly PolySafe)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (standard_form? const-decl "bool" standard_form_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (mv_cut_last_nonzero_TCC1 0
  (mv_cut_last_nonzero_TCC1-1 nil 3810975173
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (mv_cut_last_nonzero subtype
    "list_props[monomial].nth(standard_form_mult_poly.P, standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (mv_cut_last_nonzero 0
  (mv_cut_last_nonzero-1 nil 3810977649
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (case "j=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (expand "nth" -3)
                (("1" (expand "mv_cut" -3)
                  (("1" (assert)
                    (("1" (lift-if -3)
                      (("1" (split -3)
                        (("1" (flatten)
                          (("1" (lemma "cutting_last")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "mv_cut" 1)
                                  (("1"
                                    (lift-if)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "mv_cut" 2)
                            (("2" (assert)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "cons2_var = null")
            (("1" (expand "nth")
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (expand "mv_cut" 2)
                    (("1" (assert)
                      (("1" (expand "mv_cut" 2)
                        (("1" (assert)
                          (("1" (grind)
                            (("1" (expand "nth")
                              (("1"
                                (typepred "j")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst -1 "j-1")
                (("1" (expand "nth" 3)
                  (("1" (expand "mv_cut" 3)
                    (("1" (assert)
                      (("1" (expand "nth" -2)
                        (("1" (expand "mv_cut" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "j")
                  (("2" (lemma "mv_cut_length")
                    (("2" (inst -1 "cons(cons1_var,cons2_var)")
                      (("2" (expand "length" -1 1)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep) (("5" (assert) (("5" (grind) nil nil)) nil)) nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cutting_last formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (reverse def-decl "list[T]" list_props nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (j skolem-const-decl
     "below(length(mv_cut(cons(cons1_var, cons2_var))))"
     standard_form_mult_poly nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (last def-decl "real" standard_form_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (lft_max_0_TCC1 0
  (lft_max_0_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (lft_max_0 subtype "0"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.p))}")))
 (lft_max_0 0
  (lft_max_0-1 nil 3810977654
   ("" (skeep)
    (("" (assert)
      (("" (skeep)
        (("" (lemma "lft_length_nth")
          (("" (case "p=null")
            (("1" (expand "lft" 1)
              (("1" (expand "length" 1) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (inst? -1)
              (("1" (expand "length" -1)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "j")
                (("2" (lemma "Lft_length")
                  (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "below(length(lft(p)(0)))"
     standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p)}"
     standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (lft_minlength 0
  (lft_minlength-1 nil 3810977656
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (skeep)
          (("" (expand "minlength?" 2)
            (("" (lemma "Lft_length")
              (("" (inst -1 "p" "max_length(p)")
                (("" (expand "length" -1)
                  (("" (lift-if -1)
                    (("" (assert)
                      (("" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (split 3)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "lft_Unif")
                                    (("2"
                                      (inst -1 "p")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (lemma "lft_n_last")
                                            (("2"
                                              (inst
                                               -1
                                               "p"
                                               "max_length(p)"
                                               "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "max_length(p) = 0")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "lft" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           length
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "lft_length_nth")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "max_length(p)"
                                                         "j")
                                                        (("2"
                                                          (expand
                                                           length
                                                           -1)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       3
                                                                       "j")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (lft_n_last formula-decl nil standard_form_mult_poly nil)
    (lft_Unif formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil))
   shostak))
 (lft_all_null_TCC1 0
  (lft_all_null_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (lemma "Lft_length")
      (("" (inst?)
        (("" (skeep) (("" (typepred "j") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Lft_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (lft_all_null subtype "standard_form_mult_poly.j"
    "below[length[monomial](p)]")))
 (lft_all_null 0
  (lft_all_null-1 nil 3810977661
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "minlength?")
          (("" (lemma "Lft_length")
            (("" (inst -1 "p" "max_length(p)")
              (("" (expand "length" -1)
                (("" (lift-if -1)
                  (("" (split -1)
                    (("1" (flatten -1) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide -1)
                        (("2" (assert)
                          (("2" (lemma "lft_length_nth")
                            (("2" (inst? -1)
                              (("2"
                                (lemma "max_length_is_nth")
                                (("2"
                                  (inst -1 "p")
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (lift-if -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand
                                                       length
                                                       -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "Lft_length")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i")
                                                                      (("2"
                                                                        (lift-if
                                                                         -4)
                                                                        (("2"
                                                                          (split
                                                                           -4)
                                                                          (("1"
                                                                            (flatten)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "max_length_is_nth")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (expand
                                                       length
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "j!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "j!1")
                                                                    (("2"
                                                                      (lemma
                                                                       "Lft_length")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minlength? const-decl "bool" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j!1 skolem-const-decl "below(length(p))" standard_form_mult_poly
     nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p)}"
     standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_mv_cut_TCC1 0
  (lft_mv_cut_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (lft_mv_cut subtype
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (lft_mv_cut 0
  (lft_mv_cut-1 nil 3810977667
   ("" (skeep)
    (("" (assert)
      (("" (case "mv_cut(p) = null")
        (("1" (replace -1)
          (("1" (expand "lft")
            (("1" (assert)
              (("1" (expand "minlength?") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "max_length_is_nth")
          (("2" (inst -1 "mv_cut(p)")
            (("1" (lemma "max_length_is_max")
              (("1"
                (case "FORALL(j: below(length(mv_cut(p)))): null?(nth(mv_cut(p),j)`alpha)")
                (("1" (lemma "lft_all_null")
                  (("1" (inst -1 "mv_cut(p)")
                    (("1" (assert)
                      (("1" (lemma "Lft_length")
                        (("1" (inst? -1)
                          (("1" (skeep) (("1" (inst -2 "j") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (skeep)
                    (("2" (lemma "mv_cut_last_nonzero")
                      (("2" (inst? -1)
                        (("2" (assert)
                          (("2" (inst -1 "j!1")
                            (("2" (hide -2)
                              (("2"
                                (split -1)
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "lft_max_0")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "Lft_length")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if -1)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           minlength?
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 4)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" -2)
                                  (("2"
                                    (lift-if -2)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma "max_length_is_max")
                                          (("1"
                                            (inst -1 "mv_cut(p)" "j")
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lemma "lft_minlength")
                                          (("2"
                                            (inst -1 "mv_cut(p)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 1 "j!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "mv_cut(p) = null")
              (("1" (propax) nil nil)
               ("2" (expand "lft")
                (("2" (expand "length" 4) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (mv_cut_last_nonzero formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (lft_minlength formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lft_max_0 formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lft_all_null formula-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p)}"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (minlength_cdr_TCC1 0
  (minlength_cdr_TCC1-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (minlength_cdr subtype
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p)))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))))}")))
 (minlength_cdr 0
  (minlength_cdr-1 nil 3810977672
   ("" (skeep)
    (("" (case "cdr(p) = null")
      (("1" (replace -1)
        (("1" (expand "mv_cut")
          (("1" (expand "lft")
            (("1" (assert)
              (("1" (expand "minlength?" 1) (("1" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "lft_mv_cut")
        (("2" (inst -1 "cdr(p)")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_mv_cut formula-decl nil standard_form_mult_poly nil))
   shostak))
 (minlength_simplify 0
  (minlength_simplify-1 nil 3810977674
   ("" (skeep)
    (("" (expand "minlength?" -3)
      (("" (assert)
        (("" (split -3)
          (("1" (lemma "simplify_cons")
            (("1" (inst -1 "p")
              (("1" (assert)
                (("1" (expand "minlength?" 1)
                  (("1" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (lemma "simplify_Unif")
                          (("2" (inst -1 "p")
                            (("1" (assert)
                              (("1"
                                (lemma "simplify_alpha")
                                (("1"
                                  (inst -1 "p" "i")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -4 "i_1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "Unif?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (copy -2)
                                    (("2"
                                      (inst -1 "i!1")
                                      (("2"
                                        (inst -3 "j")
                                        (("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (hide 1)
                      (("1" (skeep)
                        (("1" (expand "minlength?" 2)
                          (("1" (lemma "simplify_cons")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (split 2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (lemma "simplify_Unif")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma
                                                 "simplify_alpha_reverse")
                                                (("2"
                                                  (inst -1 "p" "j")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "j_1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minlength? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (simplify_Unif formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sortedsimplify def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (simplify_alpha formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (simplify_cons formula-decl nil standard_form_mult_poly nil)
    (simplify_alpha_reverse formula-decl nil standard_form_mult_poly
     nil))
   shostak))
 (lft_sorted 0
  (lft_sorted-1 nil 3810977678
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil) ("4" (assert) nil nil)
     ("5" (assert) nil nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (case "cons2_var = null")
          (("1" (replace -1)
            (("1" (expand "lft" 1)
              (("1" (assert)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "lft" 1)
                      (("1" (assert)
                        (("1" (expand "is_sorted?" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "lft" 2) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "cdr_of_sorted_is_sorted")
              (("2" (inst -1 "cons(cons1_var,cons2_var)")
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (expand "lft" 2)
                      (("1" (assert)
                        (("1" (split 2)
                          (("1" (flatten)
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -3 "n")
                                    (("1"
                                      (lemma "Lft_length")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "cons_smaller_to_sorted_is_sorted")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "lft(cons2_var)(n)"
                                                       "(# C := cons1_var`C, alpha := append(cons1_var`alpha, (: 0 :)^(n - length(cons1_var`alpha))) #)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (expand
                                                             lft
                                                             1)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     length
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           Unif?
                                                                           -7)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "0"
                                                                             "1")
                                                                            (("1"
                                                                              (expand
                                                                               nth
                                                                               -7)
                                                                              (("1"
                                                                                (expand
                                                                                 nth
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (expand
                                                                                     is_sorted?
                                                                                     -8)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "0")
                                                                                      (("1"
                                                                                        (split
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           nth
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             nth
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "append_leq")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "(: 0 :)^(n - length(car(cons2_var)`alpha))"
                                                                                                 "cons1_var"
                                                                                                 "car(cons2_var)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "n")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "max_length_is_max")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "cons(cons1_var,cons2_var)"
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         nth
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           nth
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         length
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           length
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             length
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         length
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               length
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   length
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               length
                                                                               1)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           Unif?
                                                                           -5)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "0"
                                                                             "1")
                                                                            (("1"
                                                                              (expand
                                                                               nth
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 nth
                                                                                 -5)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               length
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 length
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               length
                                                                               1)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "n")
                                                        (("2"
                                                          (expand
                                                           max_length
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst -1 "n")
                                    (("2"
                                      (lemma
                                       "cons_smaller_to_sorted_is_sorted")
                                      (("2"
                                        (inst
                                         -1
                                         "lft(cons2_var)(n)"
                                         "cons1_var")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "Lft_length")
                                            (("2"
                                              (inst -1 "cons2_var" "n")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             lft
                                                             2)
                                                            (("2"
                                                              (lift-if
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       length
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         Unif?
                                                                         -3)
                                                                        (("2"
                                                                          (inst
                                                                           -3
                                                                           "0"
                                                                           "1")
                                                                          (("1"
                                                                            (expand
                                                                             nth
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               nth
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     is_sorted?
                                                                                     -4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         nth
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           nth
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             length
                                                                                             6)
                                                                                            (("1"
                                                                                              (expand
                                                                                               length
                                                                                               6)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         length
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             length
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 length
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             length
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Unif?" 1)
                      (("2" (skeep)
                        (("2" (expand "Unif?" -2)
                          (("2" (inst -2 "i+1" "j+1")
                            (("1" (expand "nth" -2)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length" 1)
                              (("2" (assert) nil nil)) nil)
                             ("3" (expand "length" 1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (lemma "leq_total_preorder") (("7" (propax) nil nil))
          nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (lemma "leq_total_preorder") (("8" (propax) nil nil)) nil))
      nil))
    nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (j skolem-const-decl "below(length(cons2_var))"
     standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(cons2_var))"
       standard_form_mult_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (n skolem-const-decl
     "{nn: nat | nn >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (every adt-def-decl "boolean" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (append_leq formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cons_smaller_to_sorted_is_sorted formula-decl nil
     standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (leq def-decl "bool" standard_form_mult_poly nil))
   shostak))
 (lft_allnonzero 0
  (lft_allnonzero-1 nil 3810977689
   ("" (induct "p")
    (("1" (assert) nil nil)
     ("2" (expand "lft")
      (("2" (assert) (("2" (flatten) (("2" (skeep) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (split -1)
        (("1" (skeep)
          (("1" (inst -1 "n")
            (("1" (expand "lft" 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "length") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (hide 2)
                      (("1" (flatten)
                        (("1" (expand "allnonzero?" 1)
                          (("1" (split 1)
                            (("1" (skeep)
                              (("1"
                                (case "i=0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "nth" -2)
                                    (("1"
                                      (expand "allnonzero?" -6)
                                      (("1"
                                        (split -6)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "allnonzero?" -4)
                                      (("2"
                                        (split -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "i")
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "i-1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "allnonzero?" 2)
                        (("2" (split 2)
                          (("1" (skeep)
                            (("1" (expand "nth" -1)
                              (("1"
                                (lift-if -1)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "allnonzero?" -4)
                                      (("1"
                                        (split -4)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "allnonzero?" -2)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "i-1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "n")
              (("2" (expand "max_length" -1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "allnonzero?")
            (("2" (split 1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (split -2)
                    (("1" (propax) nil nil)
                     ("2" (skeep)
                      (("2" (inst 1 "i+1")
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cons2_var))"
       standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (i skolem-const-decl
       "below(length(cons(cons1_var, lft(cons2_var)(n))))"
       standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (n skolem-const-decl
     "{nn: nat | nn >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (cut_allnonzero 0
  (cut_allnonzero-1 nil 3814382791
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "allnonzero?")
        (("" (split -1)
          (("1" (expand "mv_cut" 1) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (split -1)
              (("1" (propax) nil nil)
               ("2" (split 3)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (skeep)
                      (("1" (lemma "mv_cut_C")
                        (("1" (inst -1 "p" "i")
                          (("1" (assert)
                            (("1" (inst 2 "i") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (typepred "i")
                            (("2" (lemma "mv_cut_length")
                              (("2"
                                (inst -1 "p")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(length(mv_cut(p)))"
       standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "{p: MultPoly | allnonzero?(p)}"
     standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (mv_cut_C formula-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_cut_allnonzero 0
  (lft_cut_allnonzero-1 nil 3814382952
   ("" (lemma "lft_allnonzero")
    (("" (lemma "cut_allnonzero")
      (("" (skeep)
        (("" (inst -1 "p") (("" (inst -2 "mv_cut(p)" "n") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cut_allnonzero formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | allnonzero?(p)}"
     standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (lft_allnonzero formula-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_cut_is_lft_TCC1 0
  (lft_cut_is_lft_TCC1-1 nil 3812888893
   ("" (skeep)
    (("" (expand "cut_monom")
      (("" (lemma "cutting_length")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil))
   nil
   (lft_cut_is_lft subtype
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (lft_cut_is_lft 0
  (lft_cut_is_lft-1 nil 3812888894
   ("" (skeep)
    (("" (lemma "cutting_alt")
      (("" (lemma " caret_to_append[nat]")
        (("" (inst -2 "m`alpha")
          (("" (expand "lft_one" 1 2)
            (("" (replace -2 1)
              (("" (assert)
                (("" (rewrite "length_append")
                  (("1" (assert)
                    (("1" (rewrite "length_appendn")
                      (("1" (assert)
                        (("1"
                          (inst -1 "(: 0 :)"
                           "n-length(cutting(m`alpha))"
                           " (length(m`alpha) -
                                length(cutting(m`alpha)))")
                          (("1" (assert)
                            (("1" (case "n=length(m`alpha)")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^" 1 2)
                                    (("1"
                                      (rewrite "append_null_right")
                                      (("1"
                                        (expand "cut_monom")
                                        (("1"
                                          (expand "lft_one")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "cutting_length")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "m`alpha")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (rewrite "append_assoc" 2)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (expand "cut_monom")
                                      (("1"
                                        (expand "lft_one")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "cutting_length")
                                    (("2"
                                      (inst -1 "m`alpha")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "every")
                                    (("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "cutting_length")
                            (("2" (inst -1 "m`alpha")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert)
                            (("3" (lemma "cutting_length")
                              (("3"
                                (inst -1 "m`alpha")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "cutting_length")
                        (("2" (inst -1 "m`alpha")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "cutting_length")
                    (("2" (inst -1 "m`alpha") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cutting_alt formula-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length_append formula-decl nil list_props nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (n skolem-const-decl "nat" standard_form_mult_poly nil)
    (m skolem-const-decl "monomial" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (cutting_length formula-decl nil standard_form_mult_poly nil)
    (append_assoc formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (caret_to_append formula-decl nil list_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (lft_alpha 0
  (lft_alpha-1 nil 3810977694
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var = null")
          (("1" (skeep)
            (("1" (typepred "i")
              (("1" (expand "length" -1)
                (("1" (expand "length" -1)
                  (("1" (assert)
                    (("1" (expand "nth" 1)
                      (("1" (expand "lft" 1)
                        (("1" (assert)
                          (("1" (lift-if 1)
                            (("1" (assert)
                              (("1"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "lft" 3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nth" 3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (assert)
              (("2" (inst -1 "n")
                (("1" (case "i=0")
                  (("1" (expand "nth" 2)
                    (("1" (assert)
                      (("1" (expand "nth" 3)
                        (("1" (expand "lft" 2)
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "lft" 4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nth" 3)
                    (("2" (assert)
                      (("2" (expand "nth" 4)
                        (("2" (expand "lft" 4)
                          (("2" (lift-if 4)
                            (("2" (expand "lft" 3)
                              (("2"
                                (lift-if 3)
                                (("2"
                                  (inst -1 "i-1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "n")
                  (("2" (expand "max_length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (assert)
            (("4" (typepred "i")
              (("4" (lemma "Lft_length")
                (("4" (inst? -1) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "i")
          (("5" (lemma "Lft_length")
            (("5" (inst? -1) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "n")
          (("6" (lemma "max_length_is_max")
            (("6" (inst -1 "p" "i") (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep) (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((p skolem-const-decl "list[monomial]" standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (n skolem-const-decl
     "{nn: nat | nn >= max_length(cons(cons1_var, cons2_var))}"
     standard_form_mult_poly nil)
    (cons2_var skolem-const-decl "list[monomial]"
     standard_form_mult_poly nil)
    (cons1_var skolem-const-decl "monomial" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (lft_simplify 0
  (lft_simplify-1 nil 3810977700
   ("" (skeep :preds? T)
    (("" (expand "simplified?" -1)
      (("" (split -1)
        (("1" (expand "lft" 1)
          (("1" (split -1)
            (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
             ("2" (assert)
              (("2" (assert)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "simplified?" 1)
                        (("1" (assert)
                          (("1" (expand "length" -2)
                            (("1" (lift-if -2)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "lft" 2 1)
                                          (("2"
                                            (expand "length" 2 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "simplified?" 2)
                      (("2" (assert)
                        (("2" (expand "length" -1)
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 3 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "lft" 3 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split -1)
            (("1" (expand "simplified?" 3)
              (("1" (assert)
                (("1" (lemma "Lft_length")
                  (("1" (inst?)
                    (("1" (split 3)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (split 3)
                            (("1" (propax) nil nil)
                             ("2" (skeep :preds? T)
                              (("2"
                                (inst -5 "i" "j")
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lemma "lft_is_alt")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1 -4)
                                            (("2"
                                              (expand "lft_alt" -4)
                                              (("2"
                                                (rewrite
                                                 "map_nth_rw"
                                                 -4)
                                                (("2"
                                                  (rewrite
                                                   "map_nth_rw"
                                                   -4)
                                                  (("2"
                                                    (expand
                                                     "lft_one"
                                                     -4)
                                                    (("2"
                                                      (expand "Unif?")
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "i"
                                                         "j")
                                                        (("2"
                                                          (replace -6)
                                                          (("2"
                                                            (lemma
                                                             "append_left_inj[nat]")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simplified? const-decl "bool" standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append_left_inj formula-decl nil list_lemmas nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_null formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (lft_cut_alpha_TCC1 0
  (lft_cut_alpha_TCC1-1 nil 3811666516
   ("" (lemma "max_length_cut")
    (("" (skeep) (("" (inst -1 "p") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil))
   nil
   (lft_cut_alpha subtype "standard_form_mult_poly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (lft_cut_alpha 0
  (lft_cut_alpha-1 nil 3811677695
   ("" (skeep :preds? t)
    (("" (rewrite "mv_cut_is_alt")
      (("" (rewrite "lft_is_alt")
        (("" (expand "lft_alt")
          (("" (expand "mv_cut_alt")
            (("" (lemma "map_length[monomial, monomial]")
              (("" (inst -1 "cut_monom" "p")
                ((""
                  (lemma
                   "map_length[{m:monomial| n>= length(m`alpha)}, monomial]")
                  (("" (inst -1 "lft_one(n)" "map(cut_monom)(p)")
                    (("" (replace -2 -1)
                      (("" (case "length(p) <=1")
                        (("1" (expand "simplified?" +)
                          (("1" (assert)
                            (("1" (split 1)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split 3)
                                    (("1" (propax) nil nil)
                                     ("2" (skeep :preds? T) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "simplified?" 2)
                          (("2" (split 2)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (skeep :preds? T)
                                  (("2"
                                    (lemma
                                     "map_nth_rw[{m:monomial | n>=length(m`alpha)}, monomial]")
                                    (("2"
                                      (inst
                                       -1
                                       "lft_one(n)"
                                       "map(cut_monom)(p)"
                                       "_")
                                      (("2"
                                        (inst-cp -1 "i")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (inst -1 "j")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "map_nth_rw[monomial, monomial]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cut_monom"
                                                   "p"
                                                   "_")
                                                  (("1"
                                                    (inst-cp -1 "i")
                                                    (("1"
                                                      (inst -1 "j")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (rewrite
                                                             "lft_cut_is_lft")
                                                            (("1"
                                                              (rewrite
                                                               "lft_cut_is_lft")
                                                              (("1"
                                                                (expand
                                                                 "lft_one"
                                                                 -7)
                                                                (("1"
                                                                  (expand
                                                                   "Unif?")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -11)
                                                                      (("1"
                                                                        (expand
                                                                         "map")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "i"
                                                                         "j")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           -8)
                                                                          (("2"
                                                                            (lemma
                                                                             "append_left_inj[nat]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "simplified?"
                                                                                   -12)
                                                                                  (("1"
                                                                                    (split
                                                                                     -12)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "map")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "i"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "max_length_is_max")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     " map"
                                                                                     4)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "max_length_is_max")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "p"
                                                                   "i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "map "
                                                                     4)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "max_length_is_max")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "map"
                                                                   4)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut_is_alt formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (map_length formula-decl nil more_map_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (append_left_inj formula-decl nil list_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (lft_cut_is_lft formula-decl nil standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl
     "below(length(map(lft_one(n))(map(cut_monom)(p))))"
     standard_form_mult_poly nil)
    (i skolem-const-decl
       "below(length(map(lft_one(n))(map(cut_monom)(p))))"
       standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "{nn: nat | nn >= max_length(p)}"
     standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | simplified?(p) AND Unif?(p)}"
     standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil))
   shostak))
 (lft_cut_alpha_mv_cut 0
  (lft_cut_alpha_mv_cut-1 nil 3813395064
   ("" (skeep :preds? t)
    (("" (rewrite "mv_cut_is_alt")
      (("" (rewrite "lft_is_alt")
        (("" (expand "lft_alt")
          (("" (expand "mv_cut_alt")
            (("" (lemma "map_length[monomial, monomial]")
              (("" (inst -1 "cut_monom" "p")
                ((""
                  (lemma
                   "map_length[{m:monomial| n>= length(m`alpha)}, monomial]")
                  (("" (inst -1 "lft_one(n)" "map(cut_monom)(p)")
                    (("" (replace -2 -1)
                      (("" (case "length(p) <=1")
                        (("1" (expand "simplified?" +)
                          (("1" (assert)
                            (("1" (split 1)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split 3)
                                    (("1" (propax) nil nil)
                                     ("2" (skeep :preds? T) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "simplified?" 2)
                          (("2" (split 2)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (skeep :preds? T)
                                  (("2"
                                    (lemma
                                     "map_nth_rw[{m:monomial | n>=length(m`alpha)}, monomial]")
                                    (("2"
                                      (inst
                                       -1
                                       "lft_one(n)"
                                       "map(cut_monom)(p)"
                                       "_")
                                      (("2"
                                        (inst-cp -1 "i")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (inst -1 "j")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "map_nth_rw[monomial, monomial]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cut_monom"
                                                   "p"
                                                   "_")
                                                  (("1"
                                                    (inst-cp -1 "i")
                                                    (("1"
                                                      (inst -1 "j")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (lemma
                                                             "lft_cut_is_lft")
                                                            (("1"
                                                              (expand
                                                               "cut_monom"
                                                               -8)
                                                              (("1"
                                                                (expand
                                                                 "lft_one"
                                                                 -8)
                                                                (("1"
                                                                  (lemma
                                                                   "cutting_alt")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "nth(p,j)`alpha")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "nth(p,i)`alpha")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "p")
                                                                          (("1"
                                                                            (expand
                                                                             "Unif?"
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -1
                                                                                 "i"
                                                                                 "j")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "simplified?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         4)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "i"
                                                                                             "j")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 " nth(p, i)`alpha = nth(p, j)`alpha")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "cutting(nth(p, i)`alpha) = cutting(nth(p, j)`alpha)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "append_list[nat]")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "cutting(nth(p, i)`alpha)"
                                                                                                       " (: 0 :) ^ (n - length(cutting(nth(p, i)`alpha)))"
                                                                                                       "cutting(nth(p, j)`alpha)"
                                                                                                       " (: 0 :) ^ (n - length(cutting(nth(p, j)`alpha)))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "length_append[nat]")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "length_appendn[nat]")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "max_length_is_max")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -9)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "cutting_append_length")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "map(cut_monom)(p)"
                                                                                                                       "j")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -9
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "cut_monom"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "map(cut_monom)(p)"
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -10
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "cut_monom"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "max_length_is_max")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "map(cut_monom)(p)"
                                                                                                           "j")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -8
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cut_monom"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (lemma
                                                                                                         "max_length_is_max")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "map(cut_monom)(p)"
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -9
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cut_monom"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut_is_alt formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (lft_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (map_length formula-decl nil more_map_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (cutting_alt formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (cutting_append_length formula-decl nil standard_form_mult_poly
     nil)
    (length_appendn formula-decl nil more_list_props structures)
    (append_list formula-decl nil list_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (lft_cut_is_lft formula-decl nil standard_form_mult_poly nil)
    (j skolem-const-decl
     "below(length(map(lft_one(n))(map(cut_monom)(p))))"
     standard_form_mult_poly nil)
    (i skolem-const-decl
       "below(length(map(lft_one(n))(map(cut_monom)(p))))"
       standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "{nn: nat | nn >= max_length(mv_cut(p))}"
     standard_form_mult_poly nil)
    (p skolem-const-decl "{p: MultPoly | simplified?(p) AND Unif?(p)}"
     standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut_alt const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_is_alt formula-decl nil standard_form_mult_poly nil))
   shostak))
 (minlength_sorted 0
  (minlength_sorted-1 nil 3810977704
   ("" (skeep)
    (("" (expand "mv_sort")
      (("" (typepred "p")
        (("" (expand "minlength?" -2)
          (("" (split -2)
            (("1" (lemma "lft_all_null")
              (("1" (inst? -1)
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (lemma "bubblesort_works")
                      (("1" (inst? -1)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1"
                              (lemma "permutations_preserve_contents")
                              (("1"
                                (lemma "permutations_is_commutative")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "minlength?" 1)
                                      (("1"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst? -2)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "lft(p)(max_length(p))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             minlength?
                                                             -4)
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 bubblesort
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -5)
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (hide
                                                                               3)
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       Unif?
                                                                                       1)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -4)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "permutations_preserve_contents")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "permutations_preserve_contents")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "lft(p)(max_length(p))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "bubblesort(lft(p)(max_length(p)))"
                                                                                                         "lft(p)(max_length(p))"
                                                                                                         "j!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               Unif?
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Lft_length")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       length
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (lift-if
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -3
                                                                                                                                   "j!2"
                                                                                                                                   "j!3")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "leq_total_preorder")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "leq_total_preorder")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "permutations_preserve_contents")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "lft(p)(max_length(p))"
                                                                                           "bubblesort(lft(p)(max_length(p)))"
                                                                                           "j!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "j!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "leq_total_preorder")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "leq_total_preorder")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "leq_total_preorder")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep) (("2" (inst -1 "j") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (lemma "lft_minlength")
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (split -1)
                              (("1"
                                (expand "minlength?" -1)
                                (("1"
                                  (lemma "Lft_length")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (lift-if -1)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (lemma
                                                     "max_length_is_max")
                                                    (("1"
                                                      (inst -1 "p" "j")
                                                      (("1"
                                                        (expand
                                                         length
                                                         -1)
                                                        (("1"
                                                          (lemma
                                                           "lft_length_nth")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "i")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i")
                                                                (("1"
                                                                  (expand
                                                                   length
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (lemma
                                                                   "Lft_length")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (lemma
                                                               "bubblesort_works")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "permutations_preserve_contents")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "bubblesort(lft(p)(max_length(p)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               minlength?
                                                                               5)
                                                                              (("1"
                                                                                (split
                                                                                 5)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 Unif?)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "permutations_preserve_contents")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "permutations_preserve_contents")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "permutations_is_commutative")
                                                                                                                            (("1"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "bubblesort(lft(p)(max_length(p)))"
                                                                                                                                   "lft(p)(max_length(p))"
                                                                                                                                   "i!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -3
                                                                                                                                       "bubblesort(lft(p)(max_length(p)))"
                                                                                                                                       "lft(p)(max_length(p))"
                                                                                                                                       "j!2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skeep)
                                                                                                                                          (("1"
                                                                                                                                            (skeep)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -5
                                                                                                                                               "j!3"
                                                                                                                                               "j!4")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (lemma
                                                                                                                                         "leq_total_preorder")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "leq_total_preorder")
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "leq_total_preorder")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "j!2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "leq_total_preorder")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "j")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "max_length_Unif")
                                    (("2"
                                      (inst? -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "Unif?" -1)
                                          (("2" (inst? -1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (p skolem-const-decl "{p: MultPoly | cons?(p) AND minlength?(p)}"
     standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(p))" standard_form_mult_poly
       nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (nth def-decl "T" list_props nil)
    (UnifInd type-eq-decl nil standard_form_mult_poly nil)
    (max_length_Unif formula-decl nil standard_form_mult_poly nil)
    (lft_minlength formula-decl nil standard_form_mult_poly nil)
    (lft_all_null formula-decl nil standard_form_mult_poly nil)
    (bubblesort_works formula-decl nil bubblesort sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (permutations_preserve_contents formula-decl nil sorting_aux
     sorting)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (bubblesort const-decl "list[T]" bubblesort sorting)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (leq_total_preorder formula-decl nil standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permutations_is_commutative formula-decl nil sorting_aux sorting)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil))
   shostak))
 (mv_cut_lft_alpha_TCC1 0
  (mv_cut_lft_alpha_TCC2-1 nil 3813656973
   ("" (skeep)
    (("" (typepred "i")
      (("" (typepred "n")
        (("" (lemma "Lft_length")
          (("" (inst?)
            (("" (assert)
              (("" (lemma "max_length_cut")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "mv_cut_length")
                      (("" (inst -1 "p") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil))
   nil
   (mv_cut_lft_alpha subtype "standard_form_mult_poly.i"
    "below[length[monomial](lft(mv_cut(p))(n))]")))
 (mv_cut_lft_alpha_TCC2 0
  (mv_cut_lft_alpha_TCC3-1 nil 3813656973
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "max_length_is_max")
        (("" (inst -1 "mv_cut(p)" "i")
          (("1" (assert)
            (("1" (lemma "mv_cut_alpha")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (typepred "i")
            (("2" (lemma "mv_cut_length")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("3" (lemma "mv_cut_length")
            (("3" (inst?) (("3" (assert) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (i skolem-const-decl "below(length[monomial](p))"
       standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (mv_cut_alpha formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil))
   nil
   (mv_cut_lft_alpha subtype
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(standard_form_mult_poly.cutting(list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.i)`alpha))))"
    "nat")))
 (mv_cut_lft_alpha 0
  (mv_cut_lft_alpha-1 nil 3813657231
   ("" (skeep)
    (("" (lemma "mv_cut_alpha")
      (("" (lemma " lft_nth_alpha")
        (("" (inst -1 "mv_cut(p)" "n" "i")
          (("1" (assert)
            (("1" (replace -1)
              (("1" (inst -2 "p" "i") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (typepred "i")
            (("2" (lemma "mv_cut_length")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_cut_alpha formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (i skolem-const-decl "below(length(p))" standard_form_mult_poly
       nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lft_nth_alpha formula-decl nil standard_form_mult_poly nil))
   shostak))
 (leq_Os 0
  (leq_Os-1 nil 3813596241
   ("" (induct "m")
    (("1" (skeep)
      (("1" (case "NOT n=0")
        (("1" (assert) nil nil)
         ("2" (replace -1)
          (("2" (expand "leq")
            (("2" (flatten)
              (("2" (assert)
                (("2" (hide 1 3 4 5) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "length_appendn[nat]")
          (("2" (inst -1 "(: 0 :)" "_")
            (("2" (inst-cp -1 "n")
              (("2" (inst-cp -1 "j+2")
                (("2" (assert)
                  (("2" (case "NOT n=1+j")
                    (("1" (assert)
                      (("1" (inst-cp -1 "j+1")
                        (("1" (assert)
                          (("1" (expand "leq" 2 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide -3)
                        (("2" (expand "leq" 1 1)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (replace -6)
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (expand "^" 1)
                                    (("2"
                                      (expand "append" 1)
                                      (("2"
                                        (expand "append" 1)
                                        (("2"
                                          (case "n=0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst
                                             -4
                                             "n-1"
                                             "(# C := m1`C, alpha := ((: 0 :) ^ (n - 1)) #)"
                                             "(# C := m2`C, alpha := ((: 0 :) ^ j) #)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_appendn formula-decl nil more_list_props structures)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (leq_0_all 0
  (leq_0_all-1 nil 3813924602
   ("" (skeep)
    (("" (case "sum(m1`alpha) < sum(m2`alpha)")
      (("1" (expand "leq" 1 1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
       ("2" (case "NOT sum(m1`alpha) >= sum(m2`alpha)")
        (("1" (assert) nil nil)
         ("2" (lemma "sum_0")
          (("2" (inst -1 "n")
            (("2" (lemma "sum_0_con")
              (("2" (inst -1 "m2`alpha")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (skeep)
                      (("1" (lemma "leq_Os")
                        (("1" (assert)
                          (("1" (inst -1 "n" "n!1" "m1" "m2")
                            (("1" (assert)
                              (("1"
                                (lemma "length_appendn[nat]")
                                (("1"
                                  (inst-cp -1 "(: 0 :)" "n")
                                  (("1"
                                    (inst-cp -1 "(: 0 :)" "n!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "sum_nat")
                      (("2" (inst-cp -1 "m2`alpha")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monomial type-eq-decl nil standard_form_mult_poly nil)
    (sum def-decl "real" standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (sum_0 formula-decl nil standard_form_mult_poly nil)
    (sum_0_con formula-decl nil standard_form_mult_poly nil)
    (sum_nat formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (leq_Os formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (leq_lft_monom_TCC1 0
  (leq_lft_monom_TCC1-1 nil 3813914695 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil))
   nil
   (leq_lft_monom subtype
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m1)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (leq_lft_monom_TCC2 0
  (leq_lft_monom_TCC2-1 nil 3813914695 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil))
   nil
   (leq_lft_monom subtype
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m2)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (leq_lft_monom 0
  (leq_lft_monom-1 nil 3813914802
   (""
    (case "FORALL (A:nat,m1, m2: monomial,
                     n: nat
                         | n >=
                            max(length(cut_monom(m1)`alpha),
                                length(cut_monom(m2)`alpha))):
               length(m1`alpha) = A IMPLIES ((leq(m1, m2) AND length(m1`alpha) = length(m2`alpha)) IMPLIES
                leq(lft_one(n)(cut_monom(m1)), lft_one(n)(cut_monom(m2))))")
    (("1" (skeep)
      (("1" (inst -1 "length(m1`alpha)" "m1" "m2" "n")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (replace -1 -3 lr)
            (("1" (expand "length" -)
              (("1" (lift-if -)
                (("1" (split)
                  (("1" (split)
                    (("1" (expand "cut_monom" 1)
                      (("1" (expand "cutting " 1)
                        (("1" (assert)
                          (("1" (expand "lft_one" 1)
                            (("1" (expand "append" 1)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (lemma "leq_Os")
                                  (("1"
                                    (inst
                                     -1
                                     "n"
                                     "n"
                                     "(# C := m1`C, alpha := (: 0 :) ^ n #)"
                                     " (# C := m2`C, alpha := (: 0 :) ^ n #)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "length(lft_one(n)(cut_monom(m1))`alpha) = length(lft_one(n)(cut_monom(m2))`alpha)")
              (("1" (expand "leq" -4)
                (("1" (split -4)
                  (("1" (assert) nil nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil)
                   ("3" (flatten)
                    (("3" (assert)
                      (("3" (expand "leq" 1 1)
                        (("3" (flatten)
                          (("3" (hide 3 4)
                            (("3"
                              (case "lft_one(n)(cut_monom(m1))`alpha = null")
                              (("1"
                                (expand "length" -4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if -4)
                                    (("1"
                                      (split -4)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "lft_one(n)(cut_monom(m2))`alpha = null")
                                (("1"
                                  (expand "length" -4)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "lft_one" 3)
                                    (("2"
                                      (expand "cut_monom" 3)
                                      (("2"
                                        (lemma "sum_append")
                                        (("2"
                                          (inst-cp
                                           -1
                                           "cutting(m1`alpha)"
                                           " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                          (("1"
                                            (replace -2 3)
                                            (("1"
                                              (inst
                                               -1
                                               "cutting(m2`alpha)"
                                               " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "sum_0")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "(n-length(cutting(m1`alpha)))")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "(n-length(cutting(m2`alpha)))")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "cutting_sum")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "m1`alpha")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "m2`alpha")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -)
                                                            (("2"
                                                              (typepred
                                                               "n")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "cut_monom"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (typepred
                                                           "n")
                                                          (("2"
                                                            (expand
                                                             "cut_monom"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (expand
                                                     "cut_monom"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (expand "cut_monom" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (case "car[nat](m2`alpha)=0")
                      (("1" (assert)
                        (("1" (replace -1 -6)
                          (("1" (assert)
                            (("1"
                              (case "car[nat](m1`alpha)=car(m1`alpha)")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -7)
                                  (("1"
                                    (replace -1 -7 rl)
                                    (("1"
                                      (typepred "car[nat](m1`alpha)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "cut_monom_null")
                        (("2" (inst -1 "m2")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (case "cut_monom(m2)`alpha=null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 1 "car[nat](m2`alpha)")
                                    (("1"
                                      (lemma "nth_member[nat]")
                                      (("1"
                                        (inst
                                         -1
                                         "m2`alpha"
                                         "car[nat](m2`alpha)"
                                         "0")
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (case "n=0")
                                      (("1"
                                        (typepred "n")
                                        (("1"
                                          (reveal +)
                                          (("1"
                                            (expand "leq" 4)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -7 -6 -5)
                                                (("1"
                                                  (hide 5 6 7)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "lft_one"
                                                       3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "cut_monom(m1)`alpha = null")
                                                          (("1"
                                                            (case
                                                             "cut_monom(m2)`alpha=null")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "lft_one(n)(cut_monom(m1))`alpha = null")
                                        (("1"
                                          (expand "lft_one" -1)
                                          (("1"
                                            (typepred "n")
                                            (("1"
                                              (case
                                               "NOT cut_monom(m1)`alpha = null")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "append" -2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -10)
                                                        (("2"
                                                          (lift-if -10)
                                                          (("2"
                                                            (split -10)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "lft_one"
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "append"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "leq"
                                                                             6)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   6)
                                                                                  (("2"
                                                                                    (hide
                                                                                     7)
                                                                                    (("2"
                                                                                      (split
                                                                                       6)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "cutting_sum")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "m1`alpha")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "m2`alpha")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "lft_one"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sum_append")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "cut_monom"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "cutting(m1`alpha)"
                                                                                                           " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                                                                                          (("1"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             "cutting(m2`alpha)"
                                                                                                             " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "sum_0")
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       "(n - length(cutting(m1`alpha)))")
                                                                                                                      (("1"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         "(n - length(cutting(m2`alpha)))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "n")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "cut_monom")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "n")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "cut_monom")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "n")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "cut_monom")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "n")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "cut_monom")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "lft_one"
                                                                                         1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "append"
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "append"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "cut_monom"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "cutting_nth")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2`alpha"
                                                                                                             "0")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "cut_monom"
                                                                                                               6)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "leq" 5)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide 5 6 8)
                                              (("2"
                                                (split 5)
                                                (("1"
                                                  (lemma "cutting_sum")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "m1`alpha")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "m2`alpha")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "cut_monom"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "lft_one"
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "sum_append")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "cutting(m1`alpha)"
                                                                     " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "cutting(m2`alpha)"
                                                                       " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "sum_0")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "(n - length(cutting(m1`alpha)))")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "(n - length(cutting(m2`alpha)))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "n")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cut_monom")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "n")
                                                                                (("2"
                                                                                  (expand
                                                                                   "cut_monom")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (expand
                                                                           "cut_monom")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "n")
                                                                      (("2"
                                                                        (expand
                                                                         "cut_monom")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (expand
                                                     "length"
                                                     -7)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "cutting_nth")
                                                    (("4"
                                                      (inst-cp
                                                       -1
                                                       "m1`alpha"
                                                       "0")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "m2`alpha"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "lft_one"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "cut_monom"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "append"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "cut_monom"
                                                                                 4)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "cut_monom"
                                                                                   5)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "cut_monom"
                                                             5)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "lft_one"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "append"
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "cut_monom")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "^"
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "cutting_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "m2`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (flatten)
                    (("5" (assert)
                      (("5" (expand "leq" 1)
                        (("5" (flatten)
                          (("5" (hide 1 2 3)
                            (("5"
                              (case "NOT leq((# C := lft_one(n)(cut_monom(m1))`C,
                                 alpha := cdr(lft_one(n)(cut_monom(m1))`alpha) #),
                              (# C := lft_one(n)(cut_monom(m2))`C,
                                 alpha := cdr(lft_one(n)(cut_monom(m2))`alpha) #))")
                              (("1"
                                (hide 2)
                                (("1"
                                  (inst
                                   -8
                                   "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                   " (# C := m2`C, alpha := cdr(m2`alpha) #)"
                                   "n-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "cut_monom" -8)
                                              (("1"
                                                (expand "lft_one" -8)
                                                (("1"
                                                  (expand "lft_one" 1)
                                                  (("1"
                                                    (expand
                                                     "cut_monom"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "cdr_append[nat]")
                                                        (("1"
                                                          (case
                                                           "NOT cutting(m1`alpha) = null")
                                                          (("1"
                                                            (case
                                                             "NOT cutting(m2`alpha) = null")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               " (: 0 :) ^
                                                (n - length(cutting(m2`alpha)))"
                                                               "cutting(m2`alpha)")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 " (: 0 :) ^
                                                  (n - length(cutting(m1`alpha)))"
                                                                 "cutting(m1`alpha)")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   3)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "cutting_cdr")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "m1`alpha")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m2`alpha")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 3
                                                                                 rl)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   3
                                                                                   lr)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     3
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (hide
                                                                     4)
                                                                    (("3"
                                                                      (typepred
                                                                       "n")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "cut_monom"
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -)
                                                                (("3"
                                                                  (typepred
                                                                   "n")
                                                                  (("3"
                                                                    (expand
                                                                     "cut_monom"
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "n=0")
                                                                        (("1"
                                                                          (typepred
                                                                           "n")
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "max"
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 -1)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -2)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "cut_monom"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cut_monom"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "^"
                                                                           3
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "append"
                                                                               3
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "append"
                                                                                 3
                                                                                 2)
                                                                                (("2"
                                                                                  (case
                                                                                   "cutting(cdr(m2`alpha)) = null")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         -11
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "append"
                                                                                             3
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "cutting_cdr")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m1`alpha")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "cutting(m2`alpha) = null")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "cutting_sum")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "m1`alpha")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "m2`alpha")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sum"
                                                                                                       -7
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "null_cut_cdr")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2`alpha")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "append"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "leq_0_all")
                                                                    (("2"
                                                                      (case
                                                                       "NOT n=0")
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         2
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "append"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "(# C := m1`C, alpha := cdr((: 0 :) ^ n) #)"
                                                                                 "  (# C := m2`C,
             alpha
               := cdr(append(cutting(m2`alpha),
                             (: 0 :) ^ (n - length(cutting(m2`alpha))))) #)"
                                                                                 "n-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "append"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "append"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "append"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "length_appendn[nat]")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "append"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "^"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "append"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "append"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "length_append[nat]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "length_appendn[nat]")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "(: 0 :)"
                                                                                                                           "(n - length(cutting(m2`alpha)))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 2
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "n")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "cut_monom")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "n")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "cut_monom")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (case
                                                                                                                     "cdr[real](cutting(m2`alpha)) = cdr[nat](cutting(m2`alpha))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "cdr[nat](cutting(m2`alpha))")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "^"
                                                                                       1
                                                                                       1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "append"
                                                                                         1
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "append"
                                                                                           1
                                                                                           1)
                                                                                          (("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "(append[real]
               (cutting(m2`alpha),
                ^[nat]((: 0 :), (n - length[nat](cutting(m2`alpha)))))) = (append[nat]
               (cutting(m2`alpha),
                ^[nat]((: 0 :), (n - length[nat](cutting(m2`alpha))))))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "  (append[nat]
            (cutting(m2`alpha),
             ^[nat]((: 0 :), (n - length[nat](cutting(m2`alpha))))))")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "n")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "cut_monom")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "n")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "cut_monom")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (lemma
                                                                                   "caretzero_every")
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "n")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "^"
                                                                                         1
                                                                                         1)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "append"
                                                                                             1
                                                                                             1)
                                                                                            (("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         1)
                                                                        (("2"
                                                                          (reveal
                                                                           +)
                                                                          (("2"
                                                                            (hide
                                                                             1
                                                                             2
                                                                             4
                                                                             5
                                                                             6)
                                                                            (("2"
                                                                              (lemma
                                                                               "lft_one_length")
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "cut_monom(m1)"
                                                                                 "n")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "cut_monom(m2)"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -15)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -2)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     " n")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   " n")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (case "NOT n=0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "cut_monom" 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if -1)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "m1`alpha=null")
                                                                  (("1"
                                                                    (case
                                                                     "m2`alpha=null")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "m2`alpha=null")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "cut_monom"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "cut_monom"
                                                                           -3)
                                                                          (("2"
                                                                            (lemma
                                                                             "null_cut_cdr")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "m1`alpha")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "m2`alpha")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     4)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "cut_monom"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "cut_monom"
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           "null_cut_cdr")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "m1`alpha")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 3
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "cutting_cdr")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "m2`alpha")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "cut_monom"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "max")
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "cut_monom")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     4)
                                                                    (("1"
                                                                      (lemma
                                                                       "cutting_cdr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "m1`alpha")
                                                                        (("1"
                                                                          (lemma
                                                                           "null_cut_cdr")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m2`alpha")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   3
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "cut_monom"
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "cut_monom"
                                                                       +)
                                                                      (("2"
                                                                        (hide
                                                                         5)
                                                                        (("2"
                                                                          (lemma
                                                                           "cutting_cdr")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "m1`alpha")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "m2`alpha")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "max"
                                                                                   -3)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     -3)
                                                                                    (("2"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           4)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             4)
                                                                                            (("1"
                                                                                              (split
                                                                                               4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             5)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "cut_monom")
                                            (("2"
                                              (case
                                               "cutting(m1`alpha) = null")
                                              (("1"
                                                (case
                                                 "cutting(m2`alpha)=null")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "lft_one")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (reveal
                                                               +)
                                                              (("1"
                                                                (hide
                                                                 1
                                                                 2
                                                                 4
                                                                 5
                                                                 6
                                                                 7)
                                                                (("1"
                                                                  (expand
                                                                   "lft_one"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "cut_monom"
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("2"
                                                      (hide -4 -5 -6)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "n=0")
                                  (("1"
                                    (typepred "n")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (reveal +)
                                        (("1"
                                          (hide 1 3 4 5)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (case
                                               "cut_monom(m1)`alpha = null")
                                              (("1"
                                                (case
                                                 "cut_monom(m2)`alpha = null")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand
                                                       "lft_one"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       -8
                                                       -9
                                                       -10
                                                       -11
                                                       -12
                                                       -13)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11
                                                   -12)
                                                  (("2"
                                                    (hide -4)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "lft_one(n)(cut_monom(m1))`alpha = null")
                                      (("1"
                                        (expand "cut_monom" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "lft_one" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "append" -1)
                                                (("1"
                                                  (lift-if -1)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "append"
                                                               -2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "lft_one(n)(cut_monom(m2))`alpha = null")
                                          (("1"
                                            (expand "lft_one" -1)
                                            (("1"
                                              (expand "cut_monom" -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "append" -1)
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split 4)
                                              (("1"
                                                (lemma "cutting_sum")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "m1`alpha")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "m2`alpha")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "lft_one"
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "sum_append")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "cut_monom(m1)`alpha"
                                                                 "(: 0 :) ^ (n - length(cut_monom(m1)`alpha))")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "cut_monom(m2)`alpha"
                                                                   "(: 0 :) ^ (n - length(cut_monom(m2)`alpha))")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "sum_0")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "(n - length(cut_monom(m1)`alpha))")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "(n - length(cut_monom(m2)`alpha))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cut_monom")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cut_monom")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "n")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "n")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "n")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "lft_one" 1)
                                                (("2"
                                                  (expand "append" 1)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "^"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     2
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "cut_monom"
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "cut_monom_null")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "m1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "cut_monom"
                                                                                 2)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "car(cut_monom(m2)`alpha)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "nth_member[nat]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       " m1`alpha"
                                                                                       "car(cut_monom(m2)`alpha)"
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "cutting_nth")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m2`alpha"
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cut_monom"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -8
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "car[real](cut_monom(m2)`alpha) = car[nat](cut_monom(m2)`alpha)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "car[real](cut_monom(m2)`alpha) = car[nat](cut_monom(m2)`alpha)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if 2)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "cutting_nth")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "m1`alpha"
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "cut_monom"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "n")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cut_monom"
                                                                                             -)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "n")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "cut_monom"
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "append"
                                                                                                   2
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "cut_monom_null")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "m2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "car(m2`alpha)")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nth_member[nat]")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "m2`alpha"
                                                                                                               "car(m2`alpha)"
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "car[real](m2`alpha) = car[nat](m2`alpha)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "car[nat](m2`alpha)")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "car[real](m2`alpha) = car[nat](m2`alpha)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "car[nat](m2`alpha)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "NOT car[nat](m2`alpha)=0")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -3
                                                                                                                             -12
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -3
                                                                                                                               -12
                                                                                                                               lr)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -12
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lift-if
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "cut_monom")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "cut_monom")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "cutting_nth")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "m1`alpha"
                                                                             "0")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "m2`alpha"
                                                                               "0")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (reveal +)
                                  (("3"
                                    (hide 1 3 4 5)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "length" -7)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (reveal +)
                                  (("4"
                                    (hide 1 3 4 5)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (expand "length" -7)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "lft_one_length")
                  (("2" (inst-cp -1 "cut_monom(m1)" "n")
                    (("1" (inst-cp -1 "cut_monom(m2)" "n")
                      (("1" (assert) nil nil)
                       ("2" (typepred "n") (("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "n") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "n") (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "n") (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (typepred "n") (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (typepred "n") (("4" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m1 skolem-const-decl "monomial" standard_form_mult_poly nil)
    (m2 skolem-const-decl "monomial" standard_form_mult_poly nil)
    (n skolem-const-decl "{n: nat |
   n >= max(length(cut_monom(m1)`alpha), length(cut_monom(m2)`alpha))}"
     standard_form_mult_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cutting_sum formula-decl nil standard_form_mult_poly nil)
    (sum_0 formula-decl nil standard_form_mult_poly nil)
    (sum_append formula-decl nil standard_form_mult_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (length_null formula-decl nil more_list_props structures)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (cutting_nth formula-decl nil standard_form_mult_poly nil)
    (nth_member formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cut_monom_null formula-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sum def-decl "real" standard_form_mult_poly nil)
    (null_cut_cdr formula-decl nil standard_form_mult_poly nil)
    (cutting_cdr formula-decl nil standard_form_mult_poly nil)
    (caretzero_every formula-decl nil standard_form_mult_poly nil)
    (length_appendn formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (lft_one_length formula-decl nil standard_form_mult_poly nil)
    (leq_0_all formula-decl nil standard_form_mult_poly nil)
    (cdr_append formula-decl nil more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (reverse def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (leq_Os formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil))
   shostak))
 (leq_lft_mv_TCC1 0
  (leq_lft_mv_TCC1-1 nil 3813657726
   ("" (skeep)
    (("" (typepred "j")
      (("" (lemma "Lft_length")
        (("" (lemma "mv_cut_length")
          (("" (inst -1 "p")
            (("" (inst -2 "mv_cut(p)" "n") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil))
   nil
   (leq_lft_mv subtype "standard_form_mult_poly.j"
    "below[length[monomial](lft(mv_cut(p))(n))]")))
 (leq_lft_mv 0
  (induction_proof "induction" 3813882429
   ("" (skeep)
    (("" (lemma "leq_lft_monom")
      (("" (inst -1 "nth(p,i)" "nth(p,j)" "n")
        (("1" (assert)
          (("1" (expand "Unif?" -3)
            (("1" (split -3)
              (("1" (typepred "i")
                (("1" (hide -3 -4 1)
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "i" "j")
                (("2" (assert)
                  (("2" (lemma "mv_cut_alpha")
                    (("2" (lemma "lft_nth_alpha")
                      (("2" (inst-cp -2 "p" "i")
                        (("2" (inst -2 "p" "j")
                          (("2" (inst-cp -1 "mv_cut(p)" "n" "i")
                            (("2" (inst-cp -1 "mv_cut(p)" "n" "j")
                              (("2"
                                (hide -1)
                                (("2"
                                  (case
                                   "lft_one(n)(cut_monom(nth(p, i))) = nth(lft(mv_cut(p))(n), i)")
                                  (("1"
                                    (case
                                     "lft_one(n)(cut_monom(nth(p, j))) = nth(lft(mv_cut(p))(n), j)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (expand "lft_one" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "cut_monom" 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "cut_monom" 1)
                                          (("2"
                                            (lemma "lft_nth_C")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (expand
                                                     "lft_one"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "mv_cut_C")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "lft_one" 1)
                                        (("2"
                                          (expand "cut_monom" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (lemma "lft_nth_C")
                                                (("1"
                                                  (lemma "mv_cut_C")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (lemma
                                                   "max_length_is_max")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "mv_cut(p)"
                                                     "i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "mv_cut_length")
                                                      (("2"
                                                        (inst -1 "p")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (hide
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9
                                                               -10)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "n")
            (("2" (lemma "max_length_is_max")
              (("2" (inst -1 "mv_cut(p)" "_")
                (("1" (inst-cp -1 "i")
                  (("1" (inst -1 "j")
                    (("1" (assert)
                      (("1" (lemma "mv_cut_alpha")
                        (("1" (inst-cp -1 "p" "j")
                          (("1" (inst -1 "p" "i")
                            (("1" (assert)
                              (("1"
                                (expand "cut_monom" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "max" 1)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (lemma "mv_cut_length")
                        (("2" (inst -1 "p") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (lemma "mv_cut_length")
                      (("2" (inst -1 "p") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "mv_cut_length")
                  (("2" (inst -1 "p")
                    (("2" (assert)
                      (("2" (typepred "i")
                        (("2" (expand "length" -1)
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_lft_monom formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lft_nth_alpha formula-decl nil standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lft_one const-decl "monomial" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut_C formula-decl nil standard_form_mult_poly nil)
    (lft_nth_C formula-decl nil standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cutting def-decl "list[nat]" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (max_length_is_max formula-decl nil standard_form_mult_poly nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_cut_alpha formula-decl nil standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (n skolem-const-decl "{n: nat | n >= max_length(mv_cut(p))}"
     standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (cut_monom const-decl "monomial" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(p))" standard_form_mult_poly
       nil)
    (j skolem-const-decl "below(length(p))" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak)
  (leq_lft_mv-1 nil 3813657870
   ("" (skeep)
    (("" (lemma "mv_cut_lft_alpha")
      (("" (inst -1 "p" "_" "n")
        (("" (inst-cp -1 "i")
          (("" (inst -1 "j")
            (("" (assert)
              (("" (expand "leq" -3)
                ((""
                  (case "length(nth(lft(mv_cut(p))(n), j)`alpha ) = length(nth(lft(mv_cut(p))(n), i)`alpha)")
                  (("1" (split -4)
                    (("1" (assert)
                      (("1" (expand "Unif?" -5)
                        (("1" (split -5)
                          (("1" (typepred "i" "j")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -1 "i" "j")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "cutting" -)
                          (("2" (expand "append" -)
                            (("2" (assert)
                              (("2"
                                (replace -4)
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (lemma "leq_Os")
                                    (("2"
                                      (inst
                                       -1
                                       "n"
                                       "n"
                                       "nth(lft(mv_cut(p))(n), i)"
                                       "nth(lft(mv_cut(p))(n), j)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten)
                      (("3" (expand "leq" 1)
                        (("3" (flatten)
                          (("3" (hide 5)
                            (("3" (hide 4)
                              (("3"
                                (assert)
                                (("3"
                                  (replace -4)
                                  (("3"
                                    (replace -5)
                                    (("3"
                                      (lemma "sum_append_0")
                                      (("3"
                                        (inst-cp
                                         -1
                                         "cutting(nth(p, j)`alpha)"
                                         "n - length(cutting(nth(p, j)`alpha))")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "cutting(nth(p, i)`alpha)"
                                           "n - length(cutting(nth(p, i)`alpha))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "sum_append")
                                              (("1"
                                                (lemma "cutting_alt")
                                                (("1"
                                                  (hide 1 2)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (hide -4 -5)
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "nth(p,i)`alpha")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "nth(p,j)`alpha")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -6)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -6)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -2
                                                                     "cutting(nth(p, i)`alpha)"
                                                                     "(length(nth(p, i)`alpha) -
                                           length(cutting(nth(p, i)`alpha)))")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -2
                                                                       "cutting(nth(p, j)`alpha)"
                                                                       "(length(nth(p, j)`alpha) -
                                               length(cutting(nth(p, j)`alpha)))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           "cutting_length")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "cutting_length")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "n")
                                            (("2"
                                              (lemma
                                               "max_length_is_max")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (lemma
                                                   "cutting_length")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "i"
                                                         "j")
                                                        (("1"
                                                          (hide
                                                           -3
                                                           -4
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (hide
                                                             2
                                                             3
                                                             4
                                                             5)
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (typepred
                                                                 "n")
                                                                (("1"
                                                                  (lemma
                                                                   "max_length_is_max")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "mv_cut(p)"
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "mv_cut_alpha")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "p"
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "mv_cut_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (case
                                                                       "mv_cut(p)=null")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "mv_cut_length")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       -8
                                                       -9)
                                                      (("2"
                                                        (hide 2 3 4 5)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (lemma
                                                 "cutting_length")
                                                (("2"
                                                  (lemma
                                                   "max_length_is_max")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "mv_cut(p)"
                                                     "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "mv_cut_alpha")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (lemma
                                                         "mv_cut_length")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (case
                                                       "mv_cut(p)=null")
                                                      (("1"
                                                        (lemma
                                                         "mv_cut_length")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (typepred "n")
                      (("4" (expand "leq" 1 1)
                        (("4" (flatten)
                          (("4" (hide 1 2 3 5)
                            (("4" (assert)
                              (("4"
                                (assert)
                                (("4"
                                  (split 1)
                                  (("1"
                                    (lemma "sum_append_0")
                                    (("1"
                                      (replace -9 1)
                                      (("1"
                                        (replace -10 1)
                                        (("1"
                                          (hide -9 -10)
                                          (("1"
                                            (inst-cp
                                             -1
                                             "cutting(nth(p, j)`alpha)"
                                             "n - length(cutting(nth(p, j)`alpha))")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "cutting(nth(p, i)`alpha)"
                                               "n - length(cutting(nth(p, i)`alpha))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "sum_append")
                                                  (("1"
                                                    (lemma
                                                     "cutting_alt")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_append")
                                                        (("1"
                                                          (lemma
                                                           "cutting_alt")
                                                          (("1"
                                                            (replace
                                                             -4)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -6)
                                                                (("1"
                                                                  (hide
                                                                   -5
                                                                   -6)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "nth(p,i)`alpha")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "nth(p,j)`alpha")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -8)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -8)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -3
                                                                                 "cutting(nth(p, i)`alpha)"
                                                                                 "(length(nth(p, i)`alpha) -
                                           length(cutting(nth(p, i)`alpha)))")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -3
                                                                                   "cutting(nth(p, j)`alpha)"
                                                                                   "(length(nth(p, j)`alpha) -
                                               length(cutting(nth(p, j)`alpha)))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "cutting_length")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "cutting_length")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (lemma
                                                   "max_length_is_max")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (lemma
                                                       "cutting_length")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4
                                                               -5
                                                               -6)
                                                              (("1"
                                                                (hide
                                                                 2
                                                                 3
                                                                 4
                                                                 5)
                                                                (("1"
                                                                  (lemma
                                                                   "max_length_is_max")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "mv_cut(p)"
                                                                     "i")
                                                                    (("1"
                                                                      (lemma
                                                                       "mv_cut_alpha")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "mv_cut_length")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "mv_cut_length")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("3"
                                                                          (hide
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "mv_cut_length")
                                                (("2"
                                                  (lemma
                                                   "mv_cut_alpha")
                                                  (("2"
                                                    (inst -1 "p" "j")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "max_length_is_max")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "mv_cut(p)"
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (lemma
                                                               "mv_cut_length")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "lft_length_nth")
                                    (("2"
                                      (inst -1 "mv_cut(p)" "n" "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal +)
                                          (("1"
                                            (hide 3 4 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "lft_length_nth")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "mv_cut(p)"
                                                   "n"
                                                   "j")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (lemma
                                                         "mv_cut_length")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -)
                                                    (("3"
                                                      (lemma
                                                       "mv_cut_length")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (typepred
                                                           "i")
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (lemma "mv_cut_length")
                                            (("2"
                                              (inst -1 "p")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide -)
                                        (("3"
                                          (lemma "mv_cut_length")
                                          (("3"
                                            (inst -1 "p")
                                            (("3"
                                              (typepred "i")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (reveal +)
                                    (("3"
                                      (hide 1 3 4)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (lemma "lft_length_nth")
                                          (("3"
                                            (inst-cp
                                             -1
                                             "mv_cut(p)"
                                             "n"
                                             "i")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "mv_cut(p)"
                                               "n"
                                               "j")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (lemma "mv_cut_length")
                                                (("2"
                                                  (inst -1 "p")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide -)
                                                (("3"
                                                  (lemma
                                                   "mv_cut_length")
                                                  (("3"
                                                    (inst -1 "p")
                                                    (("3"
                                                      (typepred "i")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (lemma "mv_cut_length")
                                                (("2"
                                                  (inst -1 "p")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide -)
                                              (("3"
                                                (lemma "mv_cut_length")
                                                (("3"
                                                  (inst -1 "p")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (replace -8)
                                    (("4"
                                      (replace -9)
                                      (("4"
                                        (hide -8 -9)
                                        (("4"
                                          (expand "append" 1 1)
                                          (("4"
                                            (lift-if 1)
                                            (("4"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "append" 1 1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (typepred
                                                                         "n")
                                                                        (("1"
                                                                          (lemma
                                                                           "mv_cut_length")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (reveal
                                                                               +)
                                                                              (("1"
                                                                                (hide
                                                                                 2
                                                                                 4
                                                                                 5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "lft_length_nth")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "mv_cut(p)"
                                                                                         "n"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "mv_cut(p)"
                                                                                           "n"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -14
                                                                                                 -15
                                                                                                 -16)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "mv_cut_length")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -7
                                                                                                 -8
                                                                                                 -9
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -14
                                                                                                 -15)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           8
                                                                                           -9
                                                                                           -10
                                                                                           -11)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -5)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lift-if
                                                                     2)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         +)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "append"
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               +)
                                                                              (("2"
                                                                                (lemma
                                                                                 "cut_monom_null")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "nth(p,j)")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "nth(p,i)")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -4)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "cut_monom"
                                                                                           -)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               2
                                                                                               "car[nat](nth(p, j)`alpha)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nth_member[nat]")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "nth(p,j)`alpha"
                                                                                                   "car[nat](nth(p,j)`alpha)"
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "NOT car[nat](nth[monomial](p, j)`alpha) = 0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "car[nat](nth[monomial](p, j)`alpha)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "car[nat](nth(p, i)`alpha)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             " car[nat](nth(p, i)`alpha) =  car[real](nth(p, i)`alpha)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             2
                                                             1)
                                                            (("2"
                                                              (lift-if
                                                               2)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "lft_length_nth")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "mv_cut(p)"
                                                                         "n"
                                                                         "j")
                                                                        (("1"
                                                                          (lemma
                                                                           "max_length_is_max")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "mv_cut(p)"
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "mv_cut_alpha")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         -6)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "mv_cut_length")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               -)
                                                                              (("3"
                                                                                (lemma
                                                                                 "mv_cut_length")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "p")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (lemma
                                                                             "mv_cut_length")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "p")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           -)
                                                                          (("3"
                                                                            (lemma
                                                                             "mv_cut_length")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "p")
                                                                              (("3"
                                                                                (typepred
                                                                                 "j")
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "append"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "car(cutting(nth(p, j)`alpha))=0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "cutting_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "nth(p,j)`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           -9)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "car(nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "car[nat](nth(p, i)`alpha)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "car[nat](cutting(nth(p, j)`alpha)) = car[real](cutting(nth(p, j)`alpha))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "append"
                                                     2
                                                     1)
                                                    (("2"
                                                      (lift-if 2)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             " car(nth(p, j)`alpha) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "car[nat](nth(p, i)`alpha)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "car[real](nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "cut_monom_null")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "nth(p,j)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "cut_monom"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "car(nth(p, j)`alpha)")
                                                                            (("1"
                                                                              (lemma
                                                                               "nth_member[nat]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "nth(p,j)`alpha"
                                                                                 "car(nth(p,j)`alpha)"
                                                                                 "0")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (case
                                                                                   "car[real](nth[monomial](p, j)`alpha) = car[nat](nth[monomial](p, j)`alpha)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "car[nat](nth[monomial](p, j)`alpha)")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "car[real](nth[monomial](p, j)`alpha) = car[nat](nth[monomial](p, j)`alpha)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "car[nat](nth[monomial](p, j)`alpha)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "car(nth(p, j)`alpha) = car[nat](nth(p, j)`alpha)")
                                                              (("1"
                                                                (typepred
                                                                 "car[nat](nth(p, j)`alpha)")
                                                                (("1"
                                                                  (case
                                                                   "car[nat](nth(p, j)`alpha) = 0 ")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "car(nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "car[nat](nth(p, i)`alpha)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "cut_monom_null")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "nth(p,j)")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (lemma
                                                                               "cutting_nth")
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "nth(p,i)`alpha"
                                                                                 "0")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "nth(p,j)`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -3
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -3
                                                                                             2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 -12
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   -12
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "leq" 1 1)
                      (("5" (flatten)
                        (("5" (hide 1 2 3 4) (("5" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (lemma "lft_length_nth")
                      (("2" (inst -1 "mv_cut(p)" "n" "_")
                        (("1" (inst-cp -1 "j")
                          (("1" (inst -1 "i")
                            (("1" (assert) nil nil)
                             ("2" (lemma "mv_cut_length")
                              (("2"
                                (inst -1 "p")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (lemma "mv_cut_length")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "mv_cut_length")
                          (("2" (inst -1 "p")
                            (("2" (typepred "i")
                              (("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sorted_mv_lift 0
  (sorted_mv_lift-1 nil 3813653524
   ("" (skeep)
    (("" (lemma "leq_lft_mv")
      (("" (expand "is_sorted?")
        (("" (skeep)
          (("" (inst -2 "k")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "Lft_length")
                  (("1" (inst -1 "mv_cut(p)" "n")
                    (("1" (lemma "mv_cut_length")
                      (("1" (inst -1 "p") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "n")
                (("2" (lemma "max_length_cut")
                  (("2" (inst -1 "p")
                    (("2" (assert)
                      (("2" (lemma "Lft_length")
                        (("2" (inst -1 "mv_cut(p)" "n")
                          (("2" (lemma "mv_cut_length")
                            (("2" (inst -1 "p")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "mv_cut_length")
                (("3" (lemma "Lft_length")
                  (("3" (inst -1 "mv_cut(p)" "n")
                    (("3" (inst -2 "p") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "mv_cut_length")
              (("2" (lemma "Lft_length")
                (("2" (inst -1 "mv_cut(p)" "n")
                  (("2" (inst -2 "p") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_lft_mv formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (n skolem-const-decl "{n: nat | n >= max_length(mv_cut(p))}"
     standard_form_mult_poly nil)
    (below type-eq-decl nil nat_types nil)
    (k skolem-const-decl "below[length(lft(mv_cut(p))(n))]"
     standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_sorted? const-decl "bool" sorting sorting))
   shostak))
 (f_count_le4 0
  (f_count_le4-1 nil 3813575884
   ("" (skeep)
    (("" (expand "false_counter" 1 1)
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (f_count_mv_sort 0
  (f_count_mv_sort-1 nil 3813652365
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if 3)
          (("" (assert)
            (("" (expand "mv_sort" 3)
              (("" (lift-if 3)
                (("" (expand "mv_standard_form?" 3 1)
                  (("" (expand "mv_is_sorted?")
                    (("" (split 3)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (lemma "bubblesort_is_sorted")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "sort_of_unif")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "mv_sort")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bubblesort_is_sorted formula-decl nil bubblesort sorting)
    (sort_of_unif formula-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (f_count_simplify 0
  (f_count_simplify-1 nil 3813652315
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if 3)
          (("" (assert)
            (("" (lemma "simplified")
              (("" (inst? -1)
                (("1" (expand "simplify" 3)
                  (("1" (assert)
                    (("1" (lemma "sorted_simp_is_sorted")
                      (("1" (expand "mv_is_sorted?")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split 3)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma "simplify_Unif")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "mv_is_sorted?")
                  (("2" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (simplified formula-decl nil standard_form_mult_poly nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (sorted_simp_is_sorted formula-decl nil standard_form_mult_poly
     nil)
    (simplify_Unif formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil))
   shostak))
 (f_count_all_nz 0
  (f_count_all_nz-1 nil 3813652275
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if)
          (("" (assert)
            (("" (lemma "allnonzero_sorted")
              (("" (inst? -1)
                (("" (assert)
                  (("" (lemma "allnonzero_simp")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (lemma "all_nonzero")
                          (("" (inst? -1) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (allnonzero_sorted formula-decl nil standard_form_mult_poly nil)
    (all_nonzero formula-decl nil standard_form_mult_poly nil)
    (allnonzero_simp formula-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mv_standard_form_TCC1 0
  (mv_standard_form_TCC1-1 nil 3810975173
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if 3)
          (("" (assert)
            (("" (expand "mv_sort" 3)
              (("" (lift-if 3)
                (("" (expand "mv_standard_form?" 3 1)
                  (("" (expand "mv_is_sorted?")
                    (("" (split 3)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (lemma "bubblesort_is_sorted")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "sort_of_unif")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "mv_sort")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bubblesort_is_sorted formula-decl nil bubblesort sorting)
    (sort_of_unif formula-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mv_standard_form termination
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.mv_sort(standard_form_mult_poly.p))"
    "nil")))
 (mv_standard_form_TCC2 0
  (mv_standard_form_TCC2-1 nil 3810975173
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if 3)
          (("" (assert)
            (("" (lemma "simplified")
              (("" (inst? -1)
                (("1" (expand "simplify" 3)
                  (("1" (assert)
                    (("1" (lemma "sorted_simp_is_sorted")
                      (("1" (expand "mv_is_sorted?")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split 3)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma "simplify_Unif")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "mv_is_sorted?")
                  (("2" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (simplified formula-decl nil standard_form_mult_poly nil)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (sorted_simp_is_sorted formula-decl nil standard_form_mult_poly
     nil)
    (simplify_Unif formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil))
   nil
   (mv_standard_form termination
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.simplify(standard_form_mult_poly.p))"
    "nil")))
 (mv_standard_form_TCC3 0
  (mv_standard_form_TCC3-1 nil 3810975173
   ("" (skeep)
    (("" (expand "false_counter")
      (("" (assert)
        (("" (lift-if)
          (("" (assert)
            (("" (lemma "allnonzero_sorted")
              (("" (inst? -1)
                (("" (assert)
                  (("" (lemma "allnonzero_simp")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (lemma "all_nonzero")
                          (("" (inst? -1) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((false_counter const-decl "nat" standard_form_mult_poly nil)
    (allnonzero_sorted formula-decl nil standard_form_mult_poly nil)
    (all_nonzero formula-decl nil standard_form_mult_poly nil)
    (allnonzero_simp formula-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (mv_standard_form termination
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.allnonzero(standard_form_mult_poly.p))"
    "nil")))
 (mv_standard_form_TCC4 0
  (mv_standard_form_TCC4-1 nil 3810975173
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (mv_standard_form subtype
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (standard_form_is_standard 0
  (standard_form_is_standard-1 nil 3810977727
   (""
    (case "FORALL (n:nat,p: MultPoly): (n<=4 AND false_counter(p) <= n) IMPLIES mv_standard_form?(mv_standard_form(p)) = TRUE")
    (("1" (skeep)
      (("1" (inst -1 "false_counter(p)" "p")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (lemma "f_count_le4") (("1" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "false_counter" -2)
            (("1" (lift-if -2)
              (("1" (split -2)
                (("1" (assert)
                  (("1" (expand "mv_standard_form" 1)
                    (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (name "mvp" "mv_standard_form(p)")
              (("2" (replace -1)
                (("2" (expand "mv_standard_form" -1)
                  (("2" (assert)
                    (("2" (lift-if -1)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (inst -2 "mv_sort(p)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "f_count_mv_sort")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "simplify(p)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "f_count_simplify")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -4 "allnonzero(p)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "f_count_all_nz")
                                              (("1"
                                                (inst -1 "p")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2 2 rl)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (lemma
                                                 "lft_cut_alpha_mv_cut")
                                                (("2"
                                                  (expand
                                                   "mv_standard_form?"
                                                   1
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "lft_mv_cut")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "false_counter"
                                                                         -9)
                                                                        (("1"
                                                                          (case
                                                                           "NOT allnonzero?(lft(mv_cut(p))(max_length(mv_cut(p))))")
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "allnonzero?")
                                                                              (("1"
                                                                                (split
                                                                                 -3)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       3)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "i")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mv_cut_C")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "lft_nth_C")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "p"
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "mv_cut(p)"
                                                                                                   "max_length(mv_cut(p))"
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "Lft_length")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mv_cut_length")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "mv_cut(p)"
                                                                                                     "(max_length(mv_cut(p)))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "mv_is_sorted?"
                                                                               -7)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sorted_mv_lift")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "NOT null[monomial]=p")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         -4
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "mv_is_sorted?"
                                                                 -4)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (f_count_simplify formula-decl nil standard_form_mult_poly nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (f_count_all_nz formula-decl nil standard_form_mult_poly nil)
    (lft_mv_cut formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl
       "below(length(lft(mv_cut(p))(max_length(mv_cut(p)))))"
       standard_form_mult_poly nil)
    (lft_nth_C formula-decl nil standard_form_mult_poly nil)
    (mv_cut_C formula-decl nil standard_form_mult_poly nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (sorted_mv_lift formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (lft_cut_alpha_mv_cut formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (f_count_mv_sort formula-decl nil standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f_count_le4 formula-decl nil standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (false_counter const-decl "nat" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (standard_form_max_length 0
  (standard_form_max_length-1 nil 3814219729
   (""
    (case " FORALL (n:nat,p: MultPoly): false_counter(p) <= n IMPLIES  max_length(mv_standard_form(p)) <= max_length(p)")
    (("1" (skeep)
      (("1" (inst -1 "false_counter(p)" "p") (("1" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "false_counter" -1)
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (expand "mv_standard_form" 1 1)
                  (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "mv_standard_form" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (assert) nil nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (lemma "f_count_mv_sort")
                          (("1" (inst -1 "p")
                            (("1" (assert)
                              (("1"
                                (inst -2 "mv_sort(p)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "mv_sort_max_length")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (lemma "f_count_simplify")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -3 "simplify(p)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "simplify" 2 1)
                                        (("1"
                                          (expand "mv_is_sorted?" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "max_length_sorted_simplify")
                                                  (("1"
                                                    (inst -1 "p")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "simplify"
                                                         -5)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "f_count_all_nz")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 "allnonzero(p)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "allnonzero_max_length")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "max_length_cut")
                                    (("2"
                                      (lemma "lft_length_nth")
                                      (("2"
                                        (lemma "max_length_is_nth")
                                        (("2"
                                          (inst
                                           -1
                                           "lft(mv_cut(p))(max_length(mv_cut(p)))")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst
                                               -2
                                               "mv_cut(p)"
                                               "max_length(mv_cut(p))"
                                               "j!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -3 "p")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "j!1")
                                                (("2"
                                                  (lemma "Lft_length")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "mv_cut_length")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("3"
                                                        (lift-if -1)
                                                        (("3"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "mv_standard_form?"
                                                               3)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "Lft_length")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "mv_cut_length")
                                                    (("2"
                                                      (inst -1 "p")
                                                      (("2"
                                                        (case
                                                         "null?(p)")
                                                        (("1"
                                                          (expand
                                                           "mv_standard_form?"
                                                           3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (f_count_mv_sort formula-decl nil standard_form_mult_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mv_sort_max_length formula-decl nil standard_form_mult_poly nil)
    (mv_sort const-decl "MultPoly" standard_form_mult_poly nil)
    (f_count_simplify formula-decl nil standard_form_mult_poly nil)
    (mv_is_sorted? const-decl "bool" standard_form_mult_poly nil)
    (max_length_sorted_simplify formula-decl nil
     standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (simplify const-decl "MultPoly" standard_form_mult_poly nil)
    (f_count_all_nz formula-decl nil standard_form_mult_poly nil)
    (allnonzero_max_length formula-decl nil standard_form_mult_poly
     nil)
    (allnonzero def-decl "MultPoly" standard_form_mult_poly nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (mv_cut def-decl "MultPoly" standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j!1 skolem-const-decl
     "below(length(lft(mv_cut(p))(max_length(mv_cut(p)))))"
     standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (mv_cut_length formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (max_length_cut formula-decl nil standard_form_mult_poly nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (false_counter const-decl "nat" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_standard_form def-decl "MultPoly" standard_form_mult_poly nil))
   shostak)))

