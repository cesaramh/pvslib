(insertionsort
 (insert_TCC1 0
  (insert_TCC1-1 nil 3578072583 ("" (tcc)) nil nil
   (insert subtype "insertionsort.l"
    "(list_adt[insertionsort.T].cons?)")))
 (insert_TCC2 0
  (insert_TCC2-1 nil 3589201731 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (insert termination
    "insertionsort.insert(insertionsort.x, list_adt[insertionsort.T].cdr(insertionsort.l))"
    "nil")))
 (occ_in_insert 0
  (occ_in_insert-1 nil 3582477709
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (prop)
        (("1" (expand "insert" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (replace -2)
                (("1" (hide -2)
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (replace -2)
                (("2" (hide -2)
                  (("2" (expand "occurrences" 1 1)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("3" (replace -1)
                (("3" (hide -1)
                  (("3" (expand "occurrences" 2 1)
                    (("3" (assert)
                      (("3" (expand "occurrences" 2 2)
                        (("3" (inst -1 "cdr(x!1)")
                          (("3" (inst -1 "y" "y")
                            (("3" (prop)
                              (("1" (grind) nil nil)
                               ("2"
                                (hide 2 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "null?(x!1)")
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (inst -1 "cdr(x!1)")
            (("1" (inst -1 "x" "y")
              (("1" (prop)
                (("1" (hide 3)
                  (("1" (expand "insert" 3)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "occurrences" 1 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "occurrences" 2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lift-if)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3 4) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 3 4) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" insertionsort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (insert def-decl "list[T]" insertionsort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (insertion_sort_TCC1 0
  (insertion_sort_TCC1-1 nil 3578072583 ("" (tcc)) nil nil
   (insertion_sort subtype "insertionsort.l"
    "(list_adt[insertionsort.T].cons?)")))
 (insertion_sort_TCC2 0
  (insertion_sort_TCC2-1 nil 3656079119 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (insertion_sort termination
    "insertionsort.insertion_sort(list_adt[insertionsort.T].cdr(insertionsort.l))"
    "nil")))
 (insert_size 0
  (insert_size-1 nil 3578301238
   ("" (auto-rewrite "list2finseq")
    (("" (assert)
      (("" (measure-induct+ "length(l)" "l")
        (("" (case "x!1=null")
          (("1" (hide -2) (("1" (skeep) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (skeep)
            (("2" (expand "insert" 2)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (hide -2) (("1" (grind) nil nil)) nil)
                     ("2" (inst -1 "cdr(x!1)")
                      (("2" (inst -1 "x")
                        (("2" (prop)
                          (("1" (hide 1)
                            (("1" (expand "length" 1 1)
                              (("1"
                                (expand "length" 1 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (insert def-decl "list[T]" insertionsort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (insert_in_sorted_preserves_sort 0
  (insert_in_sorted_preserves_sort-4 nil 3797766006
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "insert" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (hide -)
            (("1" (expand "is_sorted?")
              (("1" (skeep)
                (("1" (hide +)
                  (("1" (expand "length")
                    (("1" (expand "length") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (expand "is_sorted?" 1)
              (("2" (skeep)
                (("2" (expand "is_sorted?" -3)
                  (("2" (case "k = 0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 1 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "nth" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 2 1)
                      (("2" (assert)
                        (("2" (expand "nth" 2 2)
                          (("2" (inst -3 "k - 1")
                            (("2" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (hide-all-but (-2 1))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst -1 "cdr(x!1)")
            (("3" (inst -1 "x")
              (("3" (prop)
                (("1" (expand "is_sorted?" 2)
                  (("1" (skeep)
                    (("1" (case "k > 0")
                      (("1" (expand "nth" 2 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "nth" 2 2)
                              (("1"
                                (expand "is_sorted?" -2)
                                (("1"
                                  (inst -2 "k -1")
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 3 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "nth" 3)
                              (("2"
                                (expand "nth" 3)
                                (("2"
                                  (expand "insert" 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (1 3))
                                        (("1"
                                          (typepred "leq")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (typepred "leq")
                                          (("2"
                                            (expand "total_preorder?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "dichotomous?")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "is_sorted?" -3)
                                        (("3"
                                          (inst -3 "0")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 7))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "is_sorted?")
                    (("2" (skeep)
                      (("2" (inst -2 "k + 1")
                        (("1" (prop)
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (1 4)) (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (k skolem-const-decl "below[length(cdr(x!1))]" insertionsort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "list[T]" insertionsort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (insert def-decl "list[T]" insertionsort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (insert_in_sorted_preserves_sort-3 nil 3731693416
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "insert" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (hide -)
            (("1" (expand "is_sorted?")
              (("1" (skeep)
                (("1" (hide +)
                  (("1" (expand "length")
                    (("1" (expand "length") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (expand "is_sorted?" 1)
              (("2" (skeep)
                (("2" (expand "is_sorted?" -3)
                  (("2" (case "k = 0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 1 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "nth" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 2 1)
                      (("2" (assert)
                        (("2" (expand "nth" 2 2)
                          (("2" (inst -3 "k - 1")
                            (("1" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (hide-all-but (-2 1))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst -1 "cdr(x!1)")
            (("3" (inst -1 "x")
              (("3" (prop)
                (("1" (expand "is_sorted?" 2)
                  (("1" (skeep)
                    (("1" (case "k > 0")
                      (("1" (expand "nth" 2 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "nth" 2 2)
                              (("1"
                                (expand "is_sorted?" -2)
                                (("1"
                                  (inst -2 "k -1")
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 3 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "nth" 3)
                              (("2"
                                (expand "nth" 3)
                                (("2"
                                  (expand "insert" 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (1 3))
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (typepred "<=")
                                          (("2"
                                            (expand "total_preorder?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "dichotomous?")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "is_sorted?" -3)
                                        (("3"
                                          (inst -3 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 7))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "is_sorted?")
                    (("2" (skeep)
                      (("2" (inst -2 "k + 1")
                        (("1" (prop)
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (1 4)) (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (is_sorted? const-decl "bool" sorting nil)
    (length def-decl "nat" list_props nil))
   nil)
  (insert_in_sorted_preserves_sort-2 nil 3731693387
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "insert" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (hide -)
            (("1" (expand "is_sorted?")
              (("1" (skeep)
                (("1" (hide +)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (assert) nil)))))))))))))
           ("2" (hide -2)
            (("2" (expand "is_sorted?" 1)
              (("2" (skeep)
                (("2" (expand "is_sorted?" -3)
                  (("2" (case "k = 0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 1 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "nth" 1)
                            (("1" (propax) nil)))))))))
                     ("2" (expand "nth" 2 1)
                      (("2" (assert)
                        (("2" (expand "nth" 2 2)
                          (("2" (inst -3 "k - 1")
                            (("1" (prop)
                              (("1" (assert) nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (hide-all-but (-2 1))
                                  (("2" (assert) nil)))))))
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (grind)
                                    nil)))))))))))))))))))))))))
           ("3" (inst -1 "cdr(x!1)")
            (("3" (inst -1 "x")
              (("3" (prop)
                (("1" (expand "is_sorted?" 2)
                  (("1" (skeep)
                    (("1" (case "k > 0")
                      (("1" (expand "nth" 2 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "nth" 2 2)
                              (("1"
                                (expand "is_sorted?" -2)
                                (("1"
                                  (inst -2 "k -1")
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2" (grind) nil)))))
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2" (grind) nil)))))))))))))))
                       ("2" (expand "nth" 3 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "nth" 3)
                              (("2"
                                (expand "nth" 3)
                                (("2"
                                  (expand "insert" 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (1 3))
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    nil)))))))))))))
                                       ("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (typepred "<=")
                                          (("2"
                                            (expand "total_order?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "dichotomous?")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))
                                       ("3"
                                        (expand "is_sorted?" -3)
                                        (("3"
                                          (inst -3 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" -1)
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide-all-but (1 4 7))
                                              (("2" (grind) nil)))))
                                           ("2"
                                            (hide-all-but (1 7))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (hide 3)
                  (("2" (expand "is_sorted?")
                    (("2" (skeep)
                      (("2" (inst -2 "k + 1")
                        (("1" (prop)
                          (("1" (expand "nth" -1) (("1" (propax) nil)))
                           ("2" (hide 2 3) (("2" (grind) nil)))))
                         ("2" (hide 2 3) (("2" (grind) nil)))))))))))
                 ("3" (hide-all-but (1 4))
                  (("3" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (insert_in_sorted_preserves_sort-1 nil 3578302955
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "insert" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (hide -)
            (("1" (expand "is_sorted?")
              (("1" (skeep)
                (("1" (hide +)
                  (("1" (expand "length")
                    (("1" (expand "length") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (expand "is_sorted?" 1)
              (("2" (skeep)
                (("2" (expand "is_sorted?" -3)
                  (("2" (case "k = 0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 1 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "nth" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 2 1)
                      (("2" (assert)
                        (("2" (expand "nth" 2 2)
                          (("2" (inst -3 "k - 1")
                            (("1" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (hide-all-but (-2 1))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst -1 "cdr(x!1)")
            (("3" (inst -1 "x")
              (("3" (prop)
                (("1" (expand "is_sorted?" 2)
                  (("1" (skeep)
                    (("1" (case "k > 0")
                      (("1" (expand "nth" 2 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "nth" 2 2)
                              (("1"
                                (expand "is_sorted?" -2)
                                (("1"
                                  (inst -2 "k -1")
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 3 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "nth" 3)
                              (("2"
                                (expand "nth" 3)
                                (("2"
                                  (expand "insert" 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (1 3))
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_order?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (typepred "<=")
                                          (("2"
                                            (expand "total_order?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "dichotomous?")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "is_sorted?" -3)
                                        (("3"
                                          (inst -3 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 7))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "is_sorted?")
                    (("2" (skeep)
                      (("2" (inst -2 "k + 1")
                        (("1" (prop)
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (1 4)) (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_sorted? const-decl "bool" sorting nil)) shostak))
 (insertionsort_is_sorted 0
  (insertionsort_is_sorted-1 nil 3582304089
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "insertion_sort" 1)
      (("" (prop)
        (("1" (hide -) (("1" (grind) nil nil)) nil)
         ("2" (inst -1 "cdr(x!1)")
          (("2" (prop)
            (("1" (rewrite "insert_in_sorted_preserves_sort") nil nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (insert_in_sorted_preserves_sort formula-decl nil insertionsort
     nil)
    (nth def-decl "T" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (insertion_sort def-decl "list[T]" insertionsort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (ins_and_cons_in_perm_is_perm 0
  (ins_and_cons_in_perm_is_perm-1 nil 3581889068
   ("" (skeep)
    (("" (typepred "l2")
      (("" (expand "permutations")
        (("" (skeep)
          (("" (inst -1 "x_1")
            (("" (lemma "occ_in_insert")
              (("" (inst?)
                (("" (prop)
                  (("1" (expand "occurrences" 1 1)
                    (("1" (assert) nil nil)) nil)
                   ("2" (expand "occurrences" 2 1)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (occ_in_insert formula-decl nil insertionsort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (insertion_sort_is_permutations 0
  (insertion_sort_is_permutations-1 nil 3581887977
   ("" (measure-induct+ "l`length" "l")
    (("" (expand "insertion_sort" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (lemma "ins_and_cons_in_perm_is_perm")
            (("2"
              (inst -1 "cdr(x!1)" "insertion_sort(cdr(x!1))"
               "car(x!1)")
              (("1" (inst -2 "cdr(x!1)")
                (("1" (prop)
                  (("1" (case "cons(car(x!1), cdr(x!1)) = x!1")
                    (("1" (replace -1 -3) (("1" (propax) nil nil)) nil)
                     ("2" (hide - 3)
                      (("2" (grind)
                        (("2" (decompose-equality) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide - 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (inst -1 "cdr(x!1)")
                (("2" (prop)
                  (("2" (hide 2 4) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((occurrences def-decl "nat" sorting_aux nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" insertionsort nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (ins_and_cons_in_perm_is_perm formula-decl nil insertionsort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (insertion_sort def-decl "list[T]" insertionsort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil insertionsort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (insertion_sort_works 0
  (insertion_sort_works-1 nil 3580193237
   ("" (skeep)
    (("" (rewrite "insertion_sort_is_permutations")
      (("" (rewrite "insertionsort_is_sorted") nil nil)) nil))
    nil)
   ((insertion_sort_is_permutations formula-decl nil insertionsort nil)
    (T formal-type-decl nil insertionsort nil)
    (list type-decl nil list_adt nil)
    (insertionsort_is_sorted formula-decl nil insertionsort nil))
   shostak)))

