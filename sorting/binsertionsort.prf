(binsertionsort
 (bin_search_TCC1 0
  (bin_search_TCC1-1 nil 3716283276 ("" (subtype-tcc) nil nil) nil nil
   (bin_search subtype
    "(number_fields.-)(binsertionsort.j, binsertionsort.i)"
    "naturalnumber")))
 (bin_search_TCC2 0
  (bin_search_TCC2-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil (bin_search subtype "binsertionsort.i" "upto[j + 1]")))
 (bin_search_TCC3 0
  (bin_search_TCC3-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (bin_search subtype "(number_fields.+)(binsertionsort.i, 1)"
    "upto[j + 1]")))
 (bin_search_TCC4 0
  (bin_search_TCC4-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (bin_search subtype "binsertionsort.l" "below[length(v)]")))
 (bin_search_TCC5 0
  (bin_search_TCC5-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (bin_search subtype "binsertionsort.l" "upto[j + 1]")))
 (bin_search_TCC6 0
  (bin_search_TCC6-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (bin_search subtype "binsertionsort.i" "upto[j + 1]")))
 (bin_search_TCC7 0
  (bin_search_TCC7-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search subtype "(number_fields.-)(binsertionsort.l, 1)"
    "{j: nat_types[length(binsertionsort.v)].below | reals.<=(binsertionsort.i, j)}")))
 (bin_search_TCC8 0
  (bin_search_TCC8-1 nil 3716283276 ("" (termination-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search termination
    "binsertionsort.bin_search(binsertionsort.v)(binsertionsort.k)(binsertionsort.i, (number_fields.-)(binsertionsort.l, 1))"
    "nil")))
 (bin_search_TCC9 0
  (bin_search_TCC9-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search subtype
    "binsertionsort.bin_search(binsertionsort.v)(binsertionsort.k)(binsertionsort.i, (number_fields.-)(binsertionsort.l, 1))"
    "upto[j + 1]")))
 (bin_search_TCC10 0
  (bin_search_TCC10-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search subtype "(number_fields.+)(binsertionsort.l, 1)"
    "below[length(v)]")))
 (bin_search_TCC11 0
  (bin_search_TCC11-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search subtype "binsertionsort.j"
    "{j: nat_types[length(binsertionsort.v)].below | reals.<=((number_fields.+)(1, binsertionsort.l), j)}")))
 (bin_search_TCC12 0
  (bin_search_TCC12-1 nil 3716283276 ("" (termination-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (lt const-decl "bool" sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bin_search termination
    "binsertionsort.bin_search(binsertionsort.v)(binsertionsort.k)((number_fields.+)(binsertionsort.l, 1), binsertionsort.j)"
    "nil")))
 (binsertionsort_aux_TCC1 0
  (binsertionsort_aux_TCC1-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   nil nil
   (binsertionsort_aux subtype
    "(number_fields.-)(length(binsertionsort.v), binsertionsort.j)"
    "naturalnumber")))
 (binsertionsort_aux_TCC2 0
  (binsertionsort_aux_TCC2-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures))
   nil
   (binsertionsort_aux subtype "binsertionsort.l"
    "upto[length(delete[T](v, j))]")))
 (binsertionsort_aux_TCC3 0
  (binsertionsort_aux_TCC3-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures))
   nil
   (binsertionsort_aux subtype "binsertionsort.w"
    "{w: finite_sequences[binsertionsort.T].finite_sequence | length(w) = length(binsertionsort.v)}")))
 (binsertionsort_aux_TCC4 0
  (binsertionsort_aux_TCC4-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures))
   nil
   (binsertionsort_aux subtype "(number_fields.+)(binsertionsort.j, 1)"
    "below[length(w)]")))
 (binsertionsort_aux_TCC5 0
  (binsertionsort_aux_TCC5-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures))
   nil
   (binsertionsort_aux subtype "binsertionsort.w"
    "{v | reals.>=(length(binsertionsort.v), 2)}")))
 (binsertionsort_aux_TCC6 0
  (binsertionsort_aux_TCC6-1 nil 3716283276
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (binsertionsort_aux termination
    "binsertionsort.binsertionsort_aux(binsertionsort.w)((number_fields.+)(binsertionsort.j, 1))"
    "nil")))
 (binsertionsort_aux_TCC7 0
  (binsertionsort_aux_TCC7-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures))
   nil
   (binsertionsort_aux subtype
    "binsertionsort.binsertionsort_aux(binsertionsort.w)((number_fields.+)(binsertionsort.j, 1))"
    "{w: finite_sequences[binsertionsort.T].finite_sequence | length(w) = length(binsertionsort.v)}")))
 (binsertionsort_aux_TCC8 0
  (binsertionsort_aux_TCC8-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   nil nil (binsertionsort_aux subtype "0" "below[length(v)]")))
 (binsertionsort_aux_TCC9 0
  (binsertionsort_aux_TCC9-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil binsertionsort nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (binsertionsort_aux subtype "(number_fields.-)(binsertionsort.j, 1)"
    "{j: nat_types[length(binsertionsort.v)].below | reals.<=(0, j)}")))
 (binsertionsort_TCC1 0
  (binsertionsort_TCC1-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (binsertionsort subtype "1" "below[length(v)]")))
 (binsertionsort_TCC2 0
  (binsertionsort_TCC2-1 nil 3716283276 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (binsertionsort subtype "binsertionsort.v"
    "{v | reals.>=(length(binsertionsort.v), 2)}")))
 (b_search_bound 0
  (b_search_bound-2 nil 3716502711
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("" (split)
          (("1" (expand "bin_search" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (expand "finseq_appl")
                  (("5" (inst -2 "x!1" " floor((x!1 + x!2) / 2) - 1")
                    (("1" (split)
                      (("1" (flatten) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("6" (expand "finseq_appl")
                  (("6" (inst -1 "1 + floor((x!1 + x!2) / 2)" "x!2")
                    (("6" (split)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "bin_search" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!2 skolem-const-decl "{j: below[length(v)] | x!1 <= j}"
     binsertionsort nil)
    (x!1 skolem-const-decl "below[length(v)]" binsertionsort nil)
    (v skolem-const-decl "finite_sequence[T]" binsertionsort nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bin_search def-decl "upto[j + 1]" binsertionsort nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (b_search_bound-1 nil 3716312225
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("" (split)
          (("1" (expand "bin_search" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (expand "finseq_appl")
                  (("5" (inst -2 "x!1" " floor((x!1 + x!2) / 2) - 1")
                    (("1" (split)
                      (("1" (flatten) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("6" (expand "finseq_appl")
                  (("6" (inst -1 "1 + floor((x!1 + x!2) / 2)" "x!2")
                    (("6" (split)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "bin_search" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak))
 (b_search_preserves_sorting_TCC1 0
  (b_search_preserves_sorting_TCC1-1 nil 3716302491
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (is_sorted? const-decl "bool" sorting_seq nil))
   nil
   (b_search_preserves_sorting subtype
    "(number_fields.-)(binsertionsort.i, 1)" "below[length(v)]")))
 (b_search_preserves_sorting_TCC2 0
  (b_search_preserves_sorting_TCC2-1 nil 3716377284
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (geq const-decl "pred[[T, T]]" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (b_search_preserves_sorting subtype
    "(number_fields.+)(binsertionsort.j, 1)" "below[length(v)]")))
 (b_search_preserves_sorting_TCC3 0
  (b_search_preserves_sorting_TCC3-1 nil 3716380168
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil binsertionsort nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (geq const-decl "pred[[T, T]]" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (b_search_preserves_sorting subtype
    "binsertionsort.bin_search(binsertionsort.v)(binsertionsort.k)(binsertionsort.i, binsertionsort.j)"
    "upto[length(v)]")))
 (b_search_preserves_sorting 0
  (b_search_preserves_sorting-4 nil 3797770588
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("1" (expand "is_sorted?" 1)
          (("1" (expand "finseq_appl")
            (("1" (skeep)
              (("1" (expand "insert?" 1 2)
                (("1" (hide -3 -4)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "insert?" 1)
                        (("1" (assert)
                          (("1" (expand "finseq_appl")
                            (("1" (hide-all-but (-3 1))
                              (("1"
                                (expand "is_sorted?")
                                (("1"
                                  (inst -1 "k_1")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "insert?" 1)
                        (("2" (assert)
                          (("2" (expand "finseq_appl")
                            (("2" (hide 2)
                              (("2"
                                (expand "bin_search" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -1 -3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (both-sides "-" "1" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -3)
                                                  (("2"
                                                    (expand "geq")
                                                    (("2"
                                                      (expand
                                                       "converse")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (typepred "leq")
                                              (("2"
                                                (expand
                                                 "total_preorder?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "dichotomous?")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "finseq_appl")
                                      (("3"
                                        (replace -1 2)
                                        (("3"
                                          (both-sides "-" "1" -2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (replace -2 2)
                                              (("3"
                                                (hide -3)
                                                (("3"
                                                  (expand "is_sorted?")
                                                  (("3"
                                                    (inst
                                                     -3
                                                     "floor((x!1 + x!2) / 2) - 1")
                                                    (("3"
                                                      (expand
                                                       "finseq_appl")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "finseq_appl")
                                      (("4"
                                        (reveal -1)
                                        (("4"
                                          (split)
                                          (("1"
                                            (replace -1 -3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (both-sides "-" "1" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -3)
                                                (("2"
                                                  (expand "geq")
                                                  (("2"
                                                    (expand "converse")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "finseq_appl")
                                      (("5"
                                        (hide -4)
                                        (("5"
                                          (inst
                                           -3
                                           "x!1"
                                           "floor((x!1 + x!2) / 2) - 1")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "k_1")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (reveal -3)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide-all-but (-2 2 4))
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "lt")
                                                    (("3"
                                                      (hide 3)
                                                      (("3"
                                                        (typepred
                                                         "leq")
                                                        (("3"
                                                          (expand
                                                           "total_preorder?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (expand
                                                               "dichotomous?")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (hide -3)
                                      (("6"
                                        (inst
                                         -2
                                         "1 + floor((x!1 + x!2) / 2)"
                                         "x!2")
                                        (("6"
                                          (split)
                                          (("1"
                                            (expand "is_sorted?")
                                            (("1"
                                              (inst -1 "k_1")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "geq")
                                                (("2"
                                                  (expand "converse")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "lt")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (reveal -4)
                                              (("3"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finseq_appl")
                        (("3" (expand "insert?" 2)
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "bin_search" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (replace -2 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (replace -2 -1)
                                        (("2"
                                          (reveal -2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "insert?" -6)
                                              (("1"
                                                (replace -1 -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -2 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "finseq_appl")
                                      (("3"
                                        (replace -1 2)
                                        (("3"
                                          (replace -2 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "leq")
                                              (("3"
                                                (expand
                                                 "total_preorder?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (expand
                                                     "dichotomous?")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "finseq_appl")
                                      (("4"
                                        (replace -2 3)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (typepred "leq")
                                            (("4"
                                              (expand
                                               "total_preorder?")
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (expand
                                                   "dichotomous?")
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (expand "lt")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "finseq_appl")
                                      (("5"
                                        (inst
                                         -3
                                         "x!1"
                                         "floor((x!1 + x!2) / 2) - 1")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "is_sorted?")
                                            (("1"
                                              (inst -1 "k_1")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (expand "insert?")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "insert?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "insert?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (reveal -2)
                                              (("3"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (flatten)
                                            (("4"
                                              (expand "lt")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (typepred "leq")
                                                  (("4"
                                                    (expand
                                                     "total_preorder?")
                                                    (("4"
                                                      (flatten)
                                                      (("4"
                                                        (expand
                                                         "dichotomous?")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (expand "finseq_appl")
                                      (("6"
                                        (inst
                                         -2
                                         "1 + floor((x!1 + x!2) / 2)"
                                         "x!2")
                                        (("6"
                                          (split)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "k_1")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "insert?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (hide-all-but (1 2))
                                              (("3"
                                                (expand "lt")
                                                (("3"
                                                  (expand "geq")
                                                  (("3"
                                                    (expand "converse")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (reveal -3)
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "finseq_appl")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "is_sorted?")
                                    (("3"
                                      (inst -1 "k_1 -1")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (expand "insert?")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "b_search_bound")
            (("2" (inst -1 "v" "k" "y!1" "y!2")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil))
        nil))
      nil))
    nil)
   ((b_search_bound formula-decl nil binsertionsort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k_1 skolem-const-decl
     "below[length(insert?(k, v, bin_search(v)(k)(x!1, x!2)))]"
     binsertionsort nil)
    (x!1 skolem-const-decl "below[length(v)]" binsertionsort nil)
    (x!2 skolem-const-decl "{j: below[length(v)] | x!1 <= j}"
     binsertionsort nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lt const-decl "bool" sorting nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dichotomous? const-decl "bool" orders nil)
    (> const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (bin_search def-decl "upto[j + 1]" binsertionsort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (geq const-decl "pred[[T, T]]" sorting nil)
    (k skolem-const-decl "T" binsertionsort nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (v skolem-const-decl "finite_sequence[T]" binsertionsort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (b_search_preserves_sorting-3 nil 3797698361
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("1" (expand "is_sorted?" 1)
          (("1" (expand "finseq_appl")
            (("1" (skeep)
              (("1" (expand "insert?" 1 2)
                (("1" (hide -3 -4)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "insert?" 1)
                        (("1" (assert)
                          (("1" (expand "finseq_appl")
                            (("1" (hide-all-but (-3 1))
                              (("1"
                                (expand "is_sorted?")
                                (("1"
                                  (inst -1 "k_1")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "insert?" 1)
                        (("2" (assert)
                          (("2" (expand "finseq_appl")
                            (("2" (hide 2)
                              (("2"
                                (expand "bin_search" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -1 -3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (both-sides "-" "1" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -3)
                                                  (("2"
                                                    (expand ">=")
                                                    (("2"
                                                      (expand
                                                       "converse")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (use-dichotomy)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "finseq_appl")
                                      (("3"
                                        (replace -1 2)
                                        (("3"
                                          (both-sides "-" "1" -2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (replace -2 2)
                                              (("3"
                                                (hide -3)
                                                (("3"
                                                  (expand "is_sorted?")
                                                  (("3"
                                                    (inst
                                                     -3
                                                     "floor((x!1 + x!2) / 2) - 1")
                                                    (("3"
                                                      (expand
                                                       "finseq_appl")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "finseq_appl")
                                      (("4"
                                        (reveal -1)
                                        (("4"
                                          (split)
                                          (("1"
                                            (replace -1 -3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (both-sides "-" "1" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -3)
                                                (("2"
                                                  (expand ">=")
                                                  (("2"
                                                    (expand "converse")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "finseq_appl")
                                      (("5"
                                        (hide -4)
                                        (("5"
                                          (inst
                                           -3
                                           "x!1"
                                           "floor((x!1 + x!2) / 2) - 1")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "k_1")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (reveal -3)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide-all-but (-2 2 4))
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite "lt_def")
                                                    (("3"
                                                      (use-dichotomy)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (hide -3)
                                      (("6"
                                        (inst
                                         -2
                                         "1 + floor((x!1 + x!2) / 2)"
                                         "x!2")
                                        (("6"
                                          (split)
                                          (("1"
                                            (expand "is_sorted?")
                                            (("1"
                                              (inst -1 "k_1")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand ">=")
                                                (("2"
                                                  (expand "converse")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "lt_def")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (reveal -4)
                                              (("3"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finseq_appl")
                        (("3" (expand "insert?" 2)
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "bin_search" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (replace -2 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (replace -2 -1)
                                        (("2"
                                          (reveal -2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "insert?" -6)
                                              (("1"
                                                (replace -1 -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -2 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "finseq_appl")
                                      (("3"
                                        (replace -1 2)
                                        (("3"
                                          (replace -2 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (use-dichotomy)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "finseq_appl")
                                      (("4"
                                        (replace -2 3)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (rewrite "lt_def")
                                            (("4"
                                              (use-dichotomy)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "finseq_appl")
                                      (("5"
                                        (inst
                                         -3
                                         "x!1"
                                         "floor((x!1 + x!2) / 2) - 1")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "is_sorted?")
                                            (("1"
                                              (inst -1 "k_1")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (expand "insert?")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "insert?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "insert?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (reveal -2)
                                              (("3"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (flatten)
                                            (("4"
                                              (rewrite "lt_def")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (use-dichotomy)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (expand "finseq_appl")
                                      (("6"
                                        (inst
                                         -2
                                         "1 + floor((x!1 + x!2) / 2)"
                                         "x!2")
                                        (("6"
                                          (split)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand "is_sorted?")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "k_1")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "insert?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (hide-all-but (1 2))
                                              (("3"
                                                (rewrite "lt_def")
                                                (("3"
                                                  (expand ">=")
                                                  (("3"
                                                    (expand "converse")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (reveal -3)
                                            (("4" (propax) nil nil))
                                            nil)
                                           ("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "finseq_appl")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "is_sorted?")
                                    (("3"
                                      (inst -1 "k_1 -1")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (expand "insert?")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "b_search_bound")
            (("2" (inst -1 "v" "k" "y!1" "y!2")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   nil)
  (b_search_preserves_sorting-2 nil 3779098857
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("1" (expand "sorted" 1)
          (("1" (flatten)
            (("1" (expand "psorted" 2)
              (("1" (assert)
                (("1" (expand "finseq_appl")
                  (("1" (skeep)
                    (("1" (hide 1)
                      (("1" (expand "insert?" 1 2)
                        (("1" (hide -3 -4)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "insert?" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (hide-all-but (-3 1))
                                      (("1"
                                        (expand "sorted")
                                        (("1"
                                          (expand "psorted")
                                          (("1"
                                            (inst -1 "k_1")
                                            (("1"
                                              (split)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "insert?" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "bin_search" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (both-sides
                                                       "-"
                                                       "1"
                                                       -3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces -3)
                                                          (("2"
                                                            (expand
                                                             ">=")
                                                            (("2"
                                                              (expand
                                                               "converse")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (use-dichotomy)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "finseq_appl")
                                              (("3"
                                                (replace -1 2)
                                                (("3"
                                                  (both-sides
                                                   "-"
                                                   "1"
                                                   -2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (replace -2 2)
                                                      (("3"
                                                        (hide -3)
                                                        (("3"
                                                          (expand
                                                           "sorted")
                                                          (("3"
                                                            (expand
                                                             "psorted")
                                                            (("3"
                                                              (inst
                                                               -3
                                                               "floor((x!1 + x!2) / 2) - 1")
                                                              (("3"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "finseq_appl")
                                              (("4"
                                                (reveal -1)
                                                (("4"
                                                  (split)
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (both-sides
                                                     "-"
                                                     "1"
                                                     -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replaces -3)
                                                        (("2"
                                                          (expand ">=")
                                                          (("2"
                                                            (expand
                                                             "converse")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (expand "finseq_appl")
                                              (("5"
                                                (hide -4)
                                                (("5"
                                                  (inst
                                                   -3
                                                   "x!1"
                                                   "floor((x!1 + x!2) / 2) - 1")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand "sorted")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "insert?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal -3)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide-all-but
                                                         (-2 2 4))
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "<")
                                                            (("3"
                                                              (use-dichotomy)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (hide -3)
                                              (("6"
                                                (inst
                                                 -2
                                                 "1 + floor((x!1 + x!2) / 2)"
                                                 "x!2")
                                                (("6"
                                                  (split)
                                                  (("1"
                                                    (expand "sorted")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "psorted")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "insert?")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -1
                                                             "k_1")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "insert?")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (expand ">=")
                                                        (("2"
                                                          (expand
                                                           "converse")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "<")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (reveal -4)
                                                      (("3"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "finseq_appl")
                                (("3"
                                  (expand "insert?" 2)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "bin_search" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (reveal -2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "insert?"
                                                       -6)
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -2 2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "finseq_appl")
                                              (("3"
                                                (replace -1 2)
                                                (("3"
                                                  (replace -2 2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (use-dichotomy)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "finseq_appl")
                                              (("4"
                                                (replace -2 3)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand "<")
                                                    (("4"
                                                      (use-dichotomy)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (expand "finseq_appl")
                                              (("5"
                                                (inst
                                                 -3
                                                 "x!1"
                                                 "floor((x!1 + x!2) / 2) - 1")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "sorted")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "insert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "insert?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (reveal -2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand "<")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (use-dichotomy)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (expand "finseq_appl")
                                              (("6"
                                                (inst
                                                 -2
                                                 "1 + floor((x!1 + x!2) / 2)"
                                                 "x!2")
                                                (("6"
                                                  (split)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (expand "sorted")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "insert?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "insert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "insert?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand ">=")
                                                        (("2"
                                                          (expand "<")
                                                          (("2"
                                                            (expand
                                                             "converse")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (reveal -3)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "finseq_appl")
                                        (("3"
                                          (hide -1)
                                          (("3"
                                            (expand "sorted")
                                            (("3"
                                              (expand "psorted")
                                              (("3"
                                                (inst -1 "k_1 -1")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "insert?")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "b_search_bound")
            (("2" (inst -1 "v" "k" "y!1" "y!2")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil))
        nil))
      nil))
    nil)
   ((psorted const-decl "bool" sorting_seq nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   nil)
  (b_search_preserves_sorting-1 nil 3716302495
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "j-i" ("i" "j"))
        (("1" (expand "sorted" 1)
          (("1" (flatten)
            (("1" (expand "psorted" 2)
              (("1" (assert)
                (("1" (expand "finseq_appl")
                  (("1" (skeep)
                    (("1" (hide 1)
                      (("1" (expand "insert?" 1 2)
                        (("1" (hide -3 -4)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "insert?" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (hide-all-but (-3 1))
                                      (("1"
                                        (expand "sorted")
                                        (("1"
                                          (expand "psorted")
                                          (("1"
                                            (inst -1 "k_1")
                                            (("1"
                                              (split)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "insert?" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "bin_search" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       "k_1 = x!1 - 1"
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand ">=")
                                                        (("1"
                                                          (expand
                                                           "converse")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (use-dichotomy)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "finseq_appl")
                                              (("3"
                                                (replace -1 2)
                                                (("3"
                                                  (both-sides
                                                   "-"
                                                   "1"
                                                   -2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (replace -2 2)
                                                      (("3"
                                                        (hide -3)
                                                        (("3"
                                                          (expand
                                                           "sorted")
                                                          (("3"
                                                            (expand
                                                             "psorted")
                                                            (("3"
                                                              (inst
                                                               -3
                                                               "floor((x!1 + x!2) / 2) - 1")
                                                              (("3"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "finseq_appl")
                                              (("4"
                                                (reveal -1)
                                                (("4"
                                                  (split)
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (both-sides
                                                     "-"
                                                     "1"
                                                     -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replaces -3)
                                                        (("2"
                                                          (expand ">=")
                                                          (("2"
                                                            (expand
                                                             "converse")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (expand "finseq_appl")
                                              (("5"
                                                (hide -4)
                                                (("5"
                                                  (inst
                                                   -3
                                                   "x!1"
                                                   "floor((x!1 + x!2) / 2) - 1")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand "sorted")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "insert?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal -3)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide-all-but
                                                         (-2 2 4))
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "<")
                                                            (("3"
                                                              (use-dichotomy)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (hide -3)
                                              (("6"
                                                (inst
                                                 -2
                                                 "1 + floor((x!1 + x!2) / 2)"
                                                 "x!2")
                                                (("6"
                                                  (split)
                                                  (("1"
                                                    (expand "sorted")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "psorted")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "insert?")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -1
                                                             "k_1")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "insert?")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (expand ">=")
                                                        (("2"
                                                          (expand
                                                           "converse")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "<")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (reveal -4)
                                                      (("3"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "finseq_appl")
                                (("3"
                                  (expand "insert?" 2)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "bin_search" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (reveal -2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "insert?"
                                                       -6)
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -2 2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "finseq_appl")
                                              (("3"
                                                (replace -1 2)
                                                (("3"
                                                  (replace -2 2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (use-dichotomy)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "finseq_appl")
                                              (("4"
                                                (replace -2 3)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand "<")
                                                    (("4"
                                                      (use-dichotomy)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (expand "finseq_appl")
                                              (("5"
                                                (inst
                                                 -3
                                                 "x!1"
                                                 "floor((x!1 + x!2) / 2) - 1")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "sorted")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "insert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "insert?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (reveal -2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand "<")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (use-dichotomy)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (expand "finseq_appl")
                                              (("6"
                                                (inst
                                                 -2
                                                 "1 + floor((x!1 + x!2) / 2)"
                                                 "x!2")
                                                (("6"
                                                  (split)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (expand "sorted")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "insert?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "psorted")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "insert?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "k_1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (expand
                                                                     "insert?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "insert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "insert?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand ">=")
                                                        (("2"
                                                          (expand "<")
                                                          (("2"
                                                            (expand
                                                             "converse")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (reveal -3)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "finseq_appl")
                                        (("3"
                                          (hide -1)
                                          (("3"
                                            (expand "sorted")
                                            (("3"
                                              (expand "psorted")
                                              (("3"
                                                (inst -1 "k_1 -1")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "insert?")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "b_search_bound")
            (("2" (inst -1 "v" "k" "y!1" "y!2")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil))
        nil))
      nil))
    nil)
   ((psorted const-decl "bool" sorting_seq nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak))
 (b_search_translation_TCC1 0
  (b_search_translation_TCC1-1 nil 3716394782
   ("" (subtype-tcc) nil nil) nil nil
   (b_search_translation subtype
    "(number_fields.-)(length(binsertionsort.v), 1)" "nat")))
 (b_search_translation_TCC2 0
  (b_search_translation_TCC2-1 nil 3716394782
   ("" (subtype-tcc) nil nil) nil nil
   (b_search_translation subtype "binsertionsort.i"
    "below[length(v)]")))
 (b_search_translation_TCC3 0
  (b_search_translation_TCC3-1 nil 3716394782
   ("" (subtype-tcc) nil nil) nil nil
   (b_search_translation subtype "binsertionsort.j"
    "{j: nat_types[length(binsertionsort.v)].below | reals.<=(binsertionsort.i, j)}")))
 (b_search_translation_TCC4 0
  (b_search_translation_TCC4-1 nil 3716394782
   ("" (subtype-tcc) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (b_search_translation subtype "binsertionsort.i"
    "below[length(^[T](v, (0, j)))]")))
 (b_search_translation_TCC5 0
  (b_search_translation_TCC5-1 nil 3716399597
   ("" (subtype-tcc) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (b_search_translation subtype "binsertionsort.j"
    "{j_1: nat_types[length(finite_sequences[binsertionsort.T].^(binsertionsort.v, (0, binsertionsort.j)))].below | reals.<=(binsertionsort.i, j_1)}")))
 (b_search_translation 0
  (b_search_translation-1 nil 3716394783
   ("" (measure-induct+ "length(v)" "v")
    (("1" (hide -1)
      (("1" (skeep)
        (("1" (measure-induct+ "j-i" ("j" "i"))
          (("1"
            (case "FORALL(v)(j:below[length(v)])(k:upto[j]): (v^(0,j))(k) = v(k)")
            (("1" (inst -1 "x!1")
              (("1" (inst -1 "x!2")
                (("1" (expand "bin_search" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "bin_search" 1)
                        (("1" (assert)
                          (("1" (expand "finseq_appl")
                            (("1" (inst -3 "x!3")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "finseq_appl")
                        (("2" (hide -3)
                          (("2" (expand "bin_search")
                            (("2" (assert)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (inst -2 "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -3)
                        (("3" (expand "finseq_appl")
                          (("3" (inst -2 "floor((x!2+x!3)/2)")
                            (("1" (expand "bin_search")
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide -4)
                        (("4" (inst -3 "floor((x!2+x!3)/2)")
                          (("1" (expand "bin_search")
                            (("1" (expand "finseq_appl")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("5" (expand "finseq_appl")
                        (("5" (inst -2 "floor((x!2+x!3)/2)")
                          (("1" (expand "bin_search" 2 2)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -3
                                   "floor((x!2+x!3)/2)-1"
                                   "x!3")
                                  (("1"
                                    (split)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (reveal -8)
                                        (("1"
                                          (inst -1 "x!1^(0, x!2)")
                                          (("1"
                                            (inst -1 "k")
                                            (("1"
                                              (split)
                                              (("1"
                                                (inst
                                                 -1
                                                 "floor((x!2 + x!3) / 2) - 1"
                                                 "x!3")
                                                (("1"
                                                  (case
                                                   "x!1 ^ (0, x!2) ^ (0, floor((x!2 + x!3) / 2) - 1) = x!1 ^ (0,  floor((x!2 + x!3) / 2) - 1)")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "^" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "^" 1)
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("6" (inst -1 "floor((x!2+x!3)/2)")
                        (("1" (expand "bin_search" 2 2)
                          (("1" (expand "finseq_appl")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -2
                                 "x!2"
                                 "1 + floor((x!2 + x!3) / 2)")
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (skeep)
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (expand "finseq_appl")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1 2)
              (("3" (skeep)
                (("3" (expand "^")
                  (("3" (expand "min") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (expand "^")
              (("2" (expand "min") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("3" (hide -1 2)
            (("3" (expand "^")
              (("3" (expand "min") (("3" (assert) nil nil)) nil)) nil))
            nil)
           ("4" (hide -1 2)
            (("4" (split)
              (("1" (expand "^")
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "empty_seq") (("1" (assert) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "min") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("5" (hide -1 2)
            (("5" (expand "^")
              (("5" (lift-if)
                (("5" (prop)
                  (("1" (expand "empty_seq") (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "min")
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (hide-all-but 1)
            (("6" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("7" (skeep)
            (("7" (typepred "x!2`2")
              (("7" (typepred "x!2`1") (("7" (assert) nil nil)) nil))
              nil))
            nil)
           ("8" (hide-all-but 1) (("8" (grind) nil nil)) nil)
           ("9" (hide-all-but 1) (("9" (grind) nil nil)) nil)
           ("10" (hide-all-but 1) (("10" (grind) nil nil)) nil)
           ("11" (assert) nil nil)
           ("12" (hide-all-but 1) (("12" (grind) nil nil)) nil)
           ("13" (hide-all-but 1) (("13" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skeep)
        (("2" (expand "^")
          (("2" (expand "min") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (expand "^")
          (("3" (expand "min") (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (expand "^")
        (("4" (expand "min") (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (expand "^")
        (("5" (expand "min") (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "{v | length(v) >= 2}" binsertionsort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x!3 skolem-const-decl "upto[x!2]" binsertionsort nil)
    (x!2 skolem-const-decl "below[length(x!1) - 1]" binsertionsort nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bin_search def-decl "upto[j + 1]" binsertionsort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bs_aux_perm 0
  (bs_aux_perm-1 nil 3716408602
   ("" (measure-induct+ "length(v)-j" ("v" "j"))
    (("" (hide -1)
      (("" (typepred "x!1")
        (("" (expand "binsertionsort_aux")
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "permutations") (("1" (propax) nil nil))
                nil)
               ("2" (expand "finseq_appl")
                (("2" (lemma "delete_insert_same_permutes")
                  (("2"
                    (inst -1 "x!1" "x!2"
                     "bin_search(x!1)(x!1`seq(x!2))(0, x!2 - 1)")
                    (("1" (expand "finseq_appl")
                      (("1" (propax) nil nil)) nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (reveal -1)
                (("3" (expand "finseq_appl")
                  (("3"
                    (inst -1
                     "insert?(x!1`seq(x!2),delete(x!1, x!2), bin_search(x!1)(x!1`seq(x!2))(0, x!2 - 1))"
                     "1 + x!2")
                    (("1" (split)
                      (("1" (expand "permutations")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (swap-rel -1)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (lemma "occ_in_insert")
                                  (("1"
                                    (inst
                                     -1
                                     "delete(x!1,x!2)"
                                     "x"
                                     "x!1`seq(x!2)"
                                     "bin_search(x!1)(x!1`seq(x!2))(0, x!2 - 1)")
                                    (("1"
                                      (lemma "occ_in_delete")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (inst -1 "x!1" "x" "x!2")
                                          (("1"
                                            (prop)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "insert?" 1)
                        (("2" (expand "delete")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((delete_insert_same_permutes formula-decl nil sorting_seq nil)
    (> const-decl "bool" reals nil)
    (bin_search def-decl "upto[j + 1]" binsertionsort nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (x!2 skolem-const-decl "below[length(x!1)]" binsertionsort nil)
    (x!1 skolem-const-decl "{v | length(v) >= 2}" binsertionsort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (occ_in_insert formula-decl nil sorting_seq nil)
    (occ_in_delete formula-decl nil sorting_seq nil)
    (TRUE const-decl "bool" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (binsertionsort_aux def-decl
     "{w: finite_sequence[T] | length(w) = length(v)}" binsertionsort
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permutations const-decl "bool" sorting_seq nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bs_aux_sorts_TCC1 0
  (bs_aux_sorts_TCC1-1 nil 3716403696 ("" (subtype-tcc) nil nil) nil
   nil
   (bs_aux_sorts subtype "(number_fields.-)(binsertionsort.j, 1)"
    "nat")))
 (bs_aux_sorts 0
  (bs_aux_sorts-1 nil 3716283413
   ("" (measure-induct+ "length(v)-j" ("v" "j"))
    (("1" (expand "binsertionsort_aux" 1)
      (("1" (prop)
        (("1" (expand "finseq_appl")
          (("1" (hide -1 -2)
            (("1" (lemma "b_search_preserves_sorting")
              (("1"
                (inst -1 "delete(x!1,x!2)" "x!1`seq(x!2)" "0" "x!2-1")
                (("1" (case "delete(x!1, x!2) = x!1^(0,x!2-1)")
                  (("1" (split)
                    (("1" (replaces -2)
                      (("1" (lemma "b_search_translation")
                        (("1"
                          (inst -1 "x!1" "x!1`seq(x!2)" "x!2 - 1" "0")
                          (("1" (replaces -1) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replaces -1) nil nil)
                     ("3" (flatten)
                      (("3" (expand "delete" 1)
                        (("3" (reveal -2) (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (reveal -4)
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (reveal -3)
                    (("2" (expand "delete") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "delete" 1) (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "finseq_appl")
          (("2"
            (inst -1
             "insert?(x!1`seq(x!2),delete(x!1, x!2), bin_search (x!1)(x!1`seq(x!2))(0, x!2 - 1))"
             "1 + x!2")
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (assert)
                (("2" (hide 3)
                  (("2" (lemma "b_search_preserves_sorting")
                    (("2"
                      (inst -1 "x!1 ^ (0, x!2 - 1)" "x!1`seq(x!2)" "0"
                       "x!2 - 1")
                      (("1" (split)
                        (("1" (hide-all-but (-1 1))
                          (("1" (expand "is_sorted?")
                            (("1" (expand "finseq_appl")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "k")
                                  (("1"
                                    (split)
                                    (("1"
                                      (lemma "b_search_translation")
                                      (("1"
                                        (inst
                                         -1
                                         "x!1"
                                         "x!1`seq(x!2)"
                                         "x!2 - 1"
                                         "0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (name-replace
                                             "indx"
                                             "  bin_search(x!1 ^ (0, x!2 - 1))(x!1`seq(x!2))(0, x!2 - 1)")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (expand "insert?")
                                          (("2"
                                            (expand "delete")
                                            (("2"
                                              (expand "min")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "^" -1)
                                      (("2"
                                        (expand "insert?")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "delete")
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil)
                         ("3" (flatten)
                          (("3" (hide -1 2 3)
                            (("3" (expand "^")
                              (("3"
                                (expand "min")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (expand "^")
                          (("2" (expand "min") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1 2)
                        (("3" (expand "^")
                          (("3" (expand "min") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 3)
                (("3" (expand "insert?")
                  (("3" (expand "delete") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert) nil nil) ("3" (assert) nil nil))
    nil)
   ((k skolem-const-decl "below[length
        (insert?(x!1`seq(x!2), delete(x!1, x!2),
                 bin_search(x!1)(x!1`seq(x!2))(0, x!2 - 1))
          ^ (0, x!2))]" binsertionsort nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (insert? const-decl "finseq" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bin_search def-decl "upto[j + 1]" binsertionsort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (b_search_preserves_sorting formula-decl nil binsertionsort nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (b_search_translation formula-decl nil binsertionsort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (<= const-decl "bool" reals nil)
    (x!2 skolem-const-decl "{j: below[length(x!1)] | j > 0}"
     binsertionsort nil)
    (x!1 skolem-const-decl "{v | length(v) >= 2}" binsertionsort nil)
    (delete const-decl "finseq" seq_extras structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (binsertionsort_aux def-decl
     "{w: finite_sequence[T] | length(w) = length(v)}" binsertionsort
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (binsertion_permutation 0
  (binsertion_permutation-2 nil 3716507844
   ("" (skeep)
    (("" (expand "binsertionsort")
      (("" (lift-if)
        (("" (prop)
          (("1" (expand "permutations") (("1" (propax) nil nil)) nil)
           ("2" (lemma "bs_aux_perm") (("2" (inst -1 "v" "1") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((binsertionsort const-decl
     "{w: finite_sequence[T] | length(w) = length(v)}" binsertionsort
     nil)
    (permutations const-decl "bool" sorting_seq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil binsertionsort nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (bs_aux_perm formula-decl nil binsertionsort nil))
   nil)
  (binsertion_permutation-1 nil 3716416489
   ("" (skeep)
    (("" (expand "binsertionsort")
      (("" (lift-if)
        (("" (prop)
          (("1" (expand "permutations") (("1" (propax) nil nil)) nil)
           ("2" (lemma "bs_aux_perm")
            (("2" (inst -1 "v" "1")
              (("2" (split)
                (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil))
   shostak))
 (binsertion_sorts 0
  (binsertion_sorts-2 nil 3716507867
   ("" (skeep)
    (("" (expand "binsertionsort")
      (("" (prop)
        (("1" (expand "is_sorted?")
          (("1" (skeep) (("1" (assert) nil nil)) nil)) nil)
         ("2" (lemma "bs_aux_sorts")
          (("2" (inst -1 "v" "1")
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((binsertionsort const-decl
     "{w: finite_sequence[T] | length(w) = length(v)}" binsertionsort
     nil)
    (bs_aux_sorts formula-decl nil binsertionsort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (leq formal-const-decl "(total_preorder?[T])" binsertionsort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil binsertionsort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (binsertion_sorts-1 nil 3716415298
   ("" (skeep)
    (("" (expand "binsertionsort")
      (("" (prop)
        (("1" (expand "sorted")
          (("1" (flatten)
            (("1" (expand "psorted") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (lemma "bs_aux_sorts")
          (("2" (inst -1 "v" "1")
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (psorted const-decl "bool" sorting_seq nil))
   shostak))
 (binsertionsort_works 0
  (binsertionsort_works-1 nil 3716416623
   ("" (skeep)
    (("" (lemma "binsertion_sorts")
      (("" (lemma "binsertion_permutation")
        (("" (inst -1 "v")
          (("" (inst -2 "v")
            (("" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((binsertion_sorts formula-decl nil binsertionsort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil binsertionsort nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (binsertion_permutation formula-decl nil binsertionsort nil))
   shostak)))

