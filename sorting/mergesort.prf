(mergesort
 (merge_TCC1 0
  (merge_TCC1-1 nil 3589038563 ("" (subtype-tcc) nil nil) nil nil
   (merge subtype "mergesort.l1" "(list_adt[mergesort.T].cons?)")))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3589038563 ("" (termination-tcc) nil nil) nil nil
   (merge subtype "mergesort.l2" "(list_adt[mergesort.T].cons?)")))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3589038563 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (merge termination
          "mergesort.merge(list_adt[mergesort.T].cdr(mergesort.l1), mergesort.l2)"
          "nil")))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3589194902 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (merge termination
          "mergesort.merge(mergesort.l1, list_adt[mergesort.T].cdr(mergesort.l2))"
          "nil")))
 (merge_size 0
  (merge_size-1 nil 3589039228
   ("" (measure-induct "length(l1) + length(l2)" ("l1" "l2"))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (rewrite "length_append") nil nil))
              nil)
             ("2" (hide -2) (("2" (rewrite "length_append") nil nil))
              nil)
             ("3" (expand "length" 1 1)
              (("3" (inst -2 "cdr(x!1)" "x!2")
                (("3" (prop)
                  (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide - 2)
                    (("2" (expand "length" 1 3)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "length" 2 1)
              (("4" (inst -1 "x!1" "cdr(x!2)")
                (("4" (prop)
                  (("1" (expand "length" 2 3) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "length" 1 4)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_occurrence 0
  (merge_occurrence-1 nil 3589039505
   ("" (skolem 1 ("_" "_" "x"))
    (("" (measure-induct "length(l1) + length(l2)" ("l1" "l2"))
      (("" (skosimp)
        (("" (expand "merge" 1)
          (("" (case "x!1 = null")
            (("1" (assert)
              (("1" (expand "append" 1)
                (("1" (expand "occurrences" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (case "x!2 = null")
              (("1" (assert)
                (("1" (replace -1 2)
                  (("1" (rewrite "append_null" 2)
                    (("1" (expand "occurrences" 2 3)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "occurrences" 1 (1 2))
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (inst -2 "cdr(x!1)" "x!2")
                            (("1" (prop)
                              (("1"
                                (hide -1 2)
                                (("1"
                                  (expand "length" 1 3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "occurrences" 2 (1 3))
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst -1 "x!1" "cdr(x!2)")
                            (("2" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (expand "length" 1 4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge def-decl "list[T]" mergesort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append_null formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (merge_is_permutation 0
  (merge_is_permutation-1 nil 3589039689
   ("" (skeep)
    (("" (expand "permutations")
      (("" (rewrite "merge_size")
        (("" (rewrite "length_append")
          (("" (skeep)
            (("" (rewrite "merge_occurrence")
              (("" (rewrite "occurrences_of_app") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences_of_app formula-decl nil sorting_aux nil))
   shostak))
 (merge_of_sorted_is_sorted 0
  (merge_of_sorted_is_sorted-3 nil 3797776332
   ("" (measure-induct "length(l1) + length(l2)" ("l1" "l2"))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (case "x!1 = null")
          (("1" (assert)
            (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (case "x!2 = null")
            (("1" (assert)
              (("1" (replace -1 2)
                (("1" (rewrite "append_null") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (expand "is_sorted?" 1)
                  (("1" (skeep)
                    (("1" (case "k=0")
                      (("1" (expand "nth")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "merge" 1)
                              (("1"
                                (expand "is_sorted?" (-5 -6))
                                (("1"
                                  (case "cdr(x!1) = null")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (inst -6 "0")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst -3 "cdr(x!1)" "x!2")
                            (("2" (prop)
                              (("1"
                                (hide -4 -5)
                                (("1"
                                  (expand "is_sorted?")
                                  (("1"
                                    (inst -1 "k-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "cdr_of_sorted_is_sorted")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (1 4 5))
                                (("3"
                                  (expand "length" 1 3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_sorted?" 2)
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (expand "nth" 2)
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (expand "merge" 2)
                              (("1"
                                (case "cdr(x!2) = null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "append_null")
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "leq")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "leq")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "is_sorted?" -5)
                                        (("2"
                                          (inst -5 "0")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (assert)
                            (("2" (inst -2 "x!1" "cdr(x!2)")
                              (("2"
                                (expand "length" -2 4)
                                (("2"
                                  (rewrite "cdr_of_sorted_is_sorted")
                                  (("2"
                                    (expand "is_sorted?" -2)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 3 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (x!2 skolem-const-decl "list[T]" mergesort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (TRUE const-decl "bool" booleans nil)
    (k skolem-const-decl
     "below[length(cons(car(x!2), merge(x!1, cdr(x!2))))]" mergesort
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "list[T]" mergesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (append_null formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" mergesort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (merge def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (merge_of_sorted_is_sorted-2 nil 3731751321
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (case "x!1 = null")
          (("1" (assert)
            (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (case "x!2 = null")
            (("1" (assert)
              (("1" (replace -1 2)
                (("1" (rewrite "append_null") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (expand "is_sorted?" 1)
                  (("1" (skeep)
                    (("1" (case k=0)
                      (("1" (expand "nth")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "merge" 1)
                              (("1"
                                (expand "is_sorted?" (-5 -6))
                                (("1"
                                  (case "cdr(x!1) = null")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (inst -6 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst -3 "cdr(x!1)" "x!2")
                            (("2" (prop)
                              (("1"
                                (hide -4 -5)
                                (("1"
                                  (expand "is_sorted?")
                                  (("1"
                                    (inst -1 "k-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "cdr_of_sorted_is_sorted")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (1 4 5))
                                (("3"
                                  (expand "length" 1 3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_sorted?" 2)
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (expand "nth" 2)
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (expand "merge" 2)
                              (("1"
                                (case "cdr(x!2) = null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "append_null")
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "is_sorted?" -5)
                                        (("2"
                                          (inst -5 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (assert)
                            (("2" (inst -2 "x!1" "cdr(x!2)")
                              (("2"
                                (expand "length" -2 4)
                                (("2"
                                  (rewrite "cdr_of_sorted_is_sorted")
                                  (("2"
                                    (expand "is_sorted?" -2)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 3 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (is_sorted? const-decl "bool" sorting nil))
   nil)
  (merge_of_sorted_is_sorted-1 nil 3589040010
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (case "x!1 = null")
          (("1" (assert)
            (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (case "x!2 = null")
            (("1" (assert)
              (("1" (replace -1 2)
                (("1" (rewrite "append_null") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (expand "is_sorted?" 1)
                  (("1" (skeep)
                    (("1" (case k=0)
                      (("1" (expand "nth")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "merge" 1)
                              (("1"
                                (expand "is_sorted?" (-5 -6))
                                (("1"
                                  (case "cdr(x!1) = null")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (inst -6 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst -3 "cdr(x!1)" "x!2")
                            (("2" (prop)
                              (("1"
                                (hide -4 -5)
                                (("1"
                                  (expand "is_sorted?")
                                  (("1"
                                    (inst -1 "k-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" -2)
                                      (("2"
                                        (expand "list2finseq")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cdr_of_sorted_is_sorted")
                                nil
                                nil)
                               ("3"
                                (hide-all-but (1 4 5))
                                (("3"
                                  (expand "length" 1 3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_sorted?" 2)
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (expand "nth" 2)
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (expand "merge" 2)
                              (("1"
                                (case "cdr(x!2) = null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "append_null")
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_order?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "dichotomous?")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "car(x!2)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_order?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "dichotomous?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "is_sorted?" -5)
                                        (("2"
                                          (inst -5 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (assert)
                            (("2" (inst -2 "x!1" "cdr(x!2)")
                              (("2"
                                (expand "length" -2 4)
                                (("2"
                                  (rewrite "cdr_of_sorted_is_sorted")
                                  (("2"
                                    (expand "is_sorted?" -2)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 3 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3589038563
   ("" (skeep)
    (("" (expand "length")
      (("" (assert)
        (("" (lift-if)
          (("" (assert) (("" (prop) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (merge_sort subtype
    "floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))"
    "below[1 + length[T](l)]")))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3589038563
   ("" (skeep)
    (("" (rewrite "length_prefix") (("" (grind) nil nil)) nil)) nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (T formal-type-decl nil mergesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (merge_sort termination
    "mergesort.merge_sort(sorting_aux[mergesort.T].prefix(mergesort.l, floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))))"
    "nil")))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3589038563
   ("" (skeep)
    (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil)) nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (T formal-type-decl nil mergesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (merge_sort termination
    "mergesort.merge_sort(sorting_aux[mergesort.T].suffix(mergesort.l, floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))))"
    "nil")))
 (merge_sort_size 0
  (merge_sort_size-1 nil 3589040671
   ("" (measure-induct "length(l)" "l")
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (lift-if)
          (("" (prop)
            (("" (rewrite "merge_size")
              (("" (inst-cp -1 "prefix(x, floor(length(x) / 2))")
                (("" (inst -1 "suffix(x, floor(length(x) / 2))")
                  (("" (rewrite "length_suffix")
                    (("" (rewrite "length_prefix")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (merge_size formula-decl nil mergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_is_sorted 0
  (merge_sort_is_sorted-1 nil 3589040459
   ("" (measure-induct "length(l)" "l")
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (prop)
          (("1" (expand "is_sorted?" 1)
            (("1" (skeep)
              (("1" (expand "length" -2)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (expand "length" -2)
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "merge_of_sorted_is_sorted")
            (("2"
              (inst -1 "merge_sort(prefix(x, floor(length(x) / 2)))"
               "merge_sort(suffix(x, floor(length(x) / 2)))")
              (("2" (assert)
                (("2" (split)
                  (("1" (inst -1 "prefix(x, floor(length(x) / 2))")
                    (("1" (assert)
                      (("1" (rewrite "length_prefix")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "length" 2)
                    (("2" (assert)
                      (("2" (inst -1 "suffix(x, floor(length(x) / 2))")
                        (("2" (assert)
                          (("2" (rewrite "length_suffix")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_of_sorted_is_sorted formula-decl nil mergesort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" mergesort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_is_permutation 0
  (merge_sort_is_permutation-1 nil 3589041194
   ("" (measure-induct "length(l)" "l")
    (("" (skeep)
      (("" (expand "permutations")
        (("" (skeep)
          (("" (expand "merge_sort" 1)
            (("" (lift-if)
              (("" (prop)
                (("" (inst-cp -1 "suffix(x, floor(length(x) / 2))")
                  (("" (inst -1 "prefix(x, floor(length(x) / 2))")
                    (("" (rewrite "length_prefix")
                      (("" (rewrite "length_suffix")
                        (("" (assert)
                          (("" (rewrite "merge_occurrence")
                            (("" (inst -1 "x_1")
                              ((""
                                (inst -2 "x_1")
                                ((""
                                  (replaces -1)
                                  ((""
                                    (replaces -1)
                                    ((""
                                      (lemma "app_prefix_suffix")
                                      ((""
                                        (inst
                                         -1
                                         "x"
                                         "floor(length(x) / 2)")
                                        ((""
                                          (lemma "occurrences_of_app")
                                          ((""
                                            (inst
                                             -1
                                             "prefix(x, floor(length(x) / 2))"
                                             "suffix(x, floor(length(x) / 2))"
                                             "x_1")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_works 0
  (merge_sort_works-1 nil 3589041415
   ("" (skeep)
    (("" (rewrite "merge_sort_is_sorted")
      (("" (rewrite "merge_sort_is_permutation") nil nil)) nil))
    nil)
   ((merge_sort_is_sorted formula-decl nil mergesort nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil))
   shostak))
 (merge_is_conservative 0
  (merge_is_conservative-3 nil 3797776536
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (case "null?(x!1) OR null?(x!2)")
          (("1" (replace -1)
            (("1" (inst 1 "m" "n")
              (("1" (typepred "n")
                (("1" (rewrite "merge_size")
                  (("1" (rewrite "length_append") nil nil)) nil))
                nil)
               ("2" (typepred "m")
                (("2" (rewrite "merge_size")
                  (("2" (rewrite "length_append") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (assert)
              (("2" (case "leq(car(x!1), car(x!2))")
                (("1" (assert)
                  (("1" (case "m=0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 3 1)
                        (("1" (lemma "merge_is_permutation")
                          (("1" (inst -1 "x!1" "x!2")
                            (("1"
                              (lemma "permutations_preserve_contents")
                              (("1"
                                (inst -1 "merge(x!1,x!2)" "_" "n")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "merge" -1)
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (inst 3 "0" "j")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 4 1)
                      (("2" (assert)
                        (("2" (case "n=0")
                          (("1" (assert) nil nil)
                           ("2" (expand "nth" 5 3)
                            (("2" (inst -2 "cdr(x!1)" "x!2")
                              (("1"
                                (inst -2 "m-1" "n-1")
                                (("1"
                                  (expand "length" -2 3)
                                  (("1"
                                    (expand "merge" -4)
                                    (("1"
                                      (expand "merge" -5)
                                      (("1"
                                        (expand "nth" -5)
                                        (("1"
                                          (expand "nth" -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 5 "i+1" "j+1")
                                                (("1"
                                                  (expand "append" 5)
                                                  (("1"
                                                    (expand
                                                     "nth"
                                                     5
                                                     (2 4))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "n")
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "m")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cdr_of_sorted_is_sorted")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "m=0")
                    (("1" (expand "nth" 4 1)
                      (("1" (assert)
                        (("1" (case "n=0")
                          (("1" (expand "nth" 4 2)
                            (("1" (assert)
                              (("1"
                                (inst 4 "length(x!1)" "length(x!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "nth_of_append")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "length_append")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 5 2)
                            (("2" (assert)
                              (("2"
                                (expand "merge" -4)
                                (("2"
                                  (expand "merge" -5)
                                  (("2"
                                    (expand "nth" -5)
                                    (("2"
                                      (expand "nth" -4)
                                      (("2"
                                        (lemma "merge_is_permutation")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (lemma
                                             "permutations_preserve_contents")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (use
                                                       "nth_of_append")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (lemma
                                                                   "is_sorted_implies_monotone")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "j=0")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -1
                                                                           "j"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "leq")
                                                                              (("1"
                                                                                (expand
                                                                                 "total_preorder?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "preorder?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "transitive?")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "car(x!1)"
                                                                                         "nth(x!1,j)"
                                                                                         "car(x!2)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (case
                                                                 "j - length(x!1) = 0")
                                                                (("1"
                                                                  (inst
                                                                   6
                                                                   "length(x!1)"
                                                                   "j+1")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     7
                                                                     "length(x!1)"
                                                                     "j+1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_of_append")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 5 (1 3))
                      (("2" (assert)
                        (("2" (inst -1 "x!1" "cdr(x!2)")
                          (("1" (inst -1 "m-1" "n-1")
                            (("1" (expand "length" -1 4)
                              (("1"
                                (expand "merge" -3)
                                (("1"
                                  (expand "merge" -4)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (expand "nth" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (lemma "nth_of_append")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst-cp -1 "i")
                                                (("1"
                                                  (inst -1 "j")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             5
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (lemma
                                                               "nth_of_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2"
                                                                 "_")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "i")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append")
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "i")
                                                              (("3"
                                                                (rewrite
                                                                 "length_append")
                                                                (("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 6
                                                                 "i"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "i")
                                                                  (("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replaces
                                                             -2)
                                                            (("3"
                                                              (replaces
                                                               -2)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (replaces
                                                             -1)
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (inst
                                                                 7
                                                                 "i+1"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "j")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "n")
                              (("2" (grind) nil nil)) nil)
                             ("3" (typepred "m")
                              (("3" (grind) nil nil)) nil))
                            nil)
                           ("2" (typepred "x!2")
                            (("2" (rewrite "cdr_of_sorted_is_sorted")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "(is_sorted?)" mergesort nil)
    (x!2 skolem-const-decl "(is_sorted?)" mergesort nil)
    (m skolem-const-decl "below[length(merge(x!1, x!2))]" mergesort
     nil)
    (n skolem-const-decl "below[length(merge(x!1, x!2))]" mergesort
     nil)
    (merge_size formula-decl nil mergesort nil)
    (length_append formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "below[length(append(x!1, cdr(x!2)))]"
     mergesort nil)
    (i skolem-const-decl "below[length(append(x!1, cdr(x!2)))]"
       mergesort nil)
    (nth_of_append formula-decl nil sorting_aux nil)
    (j skolem-const-decl "below[length(append(x!1, cdr(x!2)))]"
     mergesort nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (is_sorted_implies_monotone formula-decl nil sorting nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below[length(append(cdr(x!1), x!2))]"
     mergesort nil)
    (i skolem-const-decl "below[length(append(cdr(x!1), x!2))]"
       mergesort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (merge_is_permutation formula-decl nil mergesort nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (TRUE const-decl "bool" booleans nil)
    (permutations const-decl "bool" sorting_aux nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (merge def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_sorted? const-decl "bool" sorting nil)
    (leq formal-const-decl "(total_preorder?[T])" mergesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (merge_is_conservative-2 nil 3797776366
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (case "null?(x!1) OR null?(x!2)")
          (("1" (replace -1)
            (("1" (inst 1 "m" "n")
              (("1" (typepred "n")
                (("1" (rewrite "merge_size")
                  (("1" (rewrite "length_append") nil)))))
               ("2" (typepred "m")
                (("2" (rewrite "merge_size")
                  (("2" (rewrite "length_append") nil)))))))))
           ("2" (prop)
            (("2" (assert)
              (("2" (case "car(x!1) <= car(x!2)")
                (("1" (assert)
                  (("1" (case "m=0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 3 1)
                        (("1" (lemma "merge_is_permutation")
                          (("1" (inst -1 "x!1" "x!2")
                            (("1"
                              (lemma "permutations_preserve_contents")
                              (("1"
                                (inst -1 "merge(x!1,x!2)" "_" "n")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "merge" -1)
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (inst 3 "0" "j")
                                            (("1"
                                              (grind)
                                              nil)))))))))))))))))))))))))
                     ("2" (expand "nth" 4 1)
                      (("2" (assert)
                        (("2" (case "n=0")
                          (("1" (assert) nil)
                           ("2" (expand "nth" 5 3)
                            (("2" (inst -2 "cdr(x!1)" "x!2")
                              (("1"
                                (inst -2 "m-1" "n-1")
                                (("1"
                                  (expand "length" -2 3)
                                  (("1"
                                    (expand "merge" -4)
                                    (("1"
                                      (expand "merge" -5)
                                      (("1"
                                        (expand "nth" -5)
                                        (("1"
                                          (expand "nth" -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 5 "i+1" "j+1")
                                                (("1"
                                                  (expand "append" 5)
                                                  (("1"
                                                    (expand
                                                     "nth"
                                                     5
                                                     (2 4))
                                                    (("1"
                                                      (assert)
                                                      nil)))))
                                                 ("2"
                                                  (typepred "j")
                                                  (("2" (grind) nil)))
                                                 ("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (grind)
                                                    nil)))))))))))))))))))
                                 ("2"
                                  (typepred "n")
                                  (("2" (grind) nil)))
                                 ("3"
                                  (typepred "m")
                                  (("3" (grind) nil)))))
                               ("2"
                                (rewrite "cdr_of_sorted_is_sorted")
                                nil)))))))))))))))
                 ("2" (assert)
                  (("2" (case "m=0")
                    (("1" (expand "nth" 4 1)
                      (("1" (assert)
                        (("1" (case "n=0")
                          (("1" (expand "nth" 4 2)
                            (("1" (assert)
                              (("1"
                                (inst 4 "length(x!1)" "length(x!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "nth_of_append")
                                    (("1" (grind) nil)
                                     ("2" (grind) nil)))))
                                 ("2"
                                  (rewrite "length_append")
                                  (("2" (grind) nil)))))))))
                           ("2" (expand "nth" 5 2)
                            (("2" (assert)
                              (("2"
                                (expand "merge" -4)
                                (("2"
                                  (expand "merge" -5)
                                  (("2"
                                    (expand "nth" -5)
                                    (("2"
                                      (expand "nth" -4)
                                      (("2"
                                        (lemma "merge_is_permutation")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (lemma
                                             "permutations_preserve_contents")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (use
                                                       "nth_of_append")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (lemma
                                                                   "is_sorted_implies_monotone")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "j=0")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -1
                                                                           "j"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "leq")
                                                                              (("1"
                                                                                (expand
                                                                                 "total_preorder?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "preorder?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "transitive?")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "car(x!1)"
                                                                                         "nth(x!1,j)"
                                                                                         "car(x!2)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))))))))))))
                                                                           ("2"
                                                                            (assert)
                                                                            nil)))))))))))))))))
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (case
                                                                 "j - length(x!1) = 0")
                                                                (("1"
                                                                  (inst
                                                                   6
                                                                   "length(x!1)"
                                                                   "j+1")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (grind)
                                                                      nil)))
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     7
                                                                     "length(x!1)"
                                                                     "j+1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_of_append")
                                                                        (("1"
                                                                          (grind)
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))
                                                                     ("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          nil)))))))))))))))))))))))))))))))))))))
                     ("2" (expand "nth" 5 (1 3))
                      (("2" (assert)
                        (("2" (inst -1 "x!1" "cdr(x!2)")
                          (("1" (inst -1 "m-1" "n-1")
                            (("1" (expand "length" -1 4)
                              (("1"
                                (expand "merge" -3)
                                (("1"
                                  (expand "merge" -4)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (expand "nth" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (lemma "nth_of_append")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst-cp -1 "i")
                                                (("1"
                                                  (inst -1 "j")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             5
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (lemma
                                                               "nth_of_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2"
                                                                 "_")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "i")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (rewrite
                                                               "length_append")
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("3"
                                                              (typepred
                                                               "i")
                                                              (("3"
                                                                (rewrite
                                                                 "length_append")
                                                                (("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (grind)
                                                                    nil)))))))))
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 6
                                                                 "i"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("3"
                                                                  (typepred
                                                                   "i")
                                                                  (("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil)))))))))))))
                                                           ("3"
                                                            (replaces
                                                             -2)
                                                            (("3"
                                                              (replaces
                                                               -2)
                                                              (("3"
                                                                (assert)
                                                                nil)))))
                                                           ("4"
                                                            (replaces
                                                             -1)
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (inst
                                                                 7
                                                                 "i+1"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (typepred "j")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil)))))
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil)))))))))))))))))))))))
                             ("2" (typepred "n") (("2" (grind) nil)))
                             ("3" (typepred "m") (("3" (grind) nil)))))
                           ("2" (typepred "x!2")
                            (("2" (rewrite "cdr_of_sorted_is_sorted")
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (merge_is_conservative-1 nil 3784126368
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (case "null?(x!1) OR null?(x!2)")
          (("1" (replace -1)
            (("1" (inst 1 "m" "n")
              (("1" (typepred "n")
                (("1" (rewrite "merge_size")
                  (("1" (rewrite "length_append") nil nil)) nil))
                nil)
               ("2" (typepred "m")
                (("2" (rewrite "merge_size")
                  (("2" (rewrite "length_append") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (assert)
              (("2" (case "car(x!1) <= car(x!2)")
                (("1" (assert)
                  (("1" (case "m=0")
                    (("1" (replace -1)
                      (("1" (expand "nth" 3 1)
                        (("1" (lemma "merge_is_permutation")
                          (("1" (inst -1 "x!1" "x!2")
                            (("1"
                              (lemma "permutations_preserve_contents")
                              (("1"
                                (inst -1 "merge(x!1,x!2)" "_" "n")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "merge" -1)
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (inst 3 "0" "j")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 4 1)
                      (("2" (assert)
                        (("2" (case "n=0")
                          (("1" (assert) nil nil)
                           ("2" (expand "nth" 5 3)
                            (("2" (inst -2 "cdr(x!1)" "x!2")
                              (("1"
                                (inst -2 "m-1" "n-1")
                                (("1"
                                  (expand "length" -2 3)
                                  (("1"
                                    (expand "merge" -4)
                                    (("1"
                                      (expand "merge" -5)
                                      (("1"
                                        (expand "nth" -5)
                                        (("1"
                                          (expand "nth" -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 5 "i+1" "j+1")
                                                (("1"
                                                  (expand "append" 5)
                                                  (("1"
                                                    (expand
                                                     "nth"
                                                     5
                                                     (2 4))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "n")
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "m")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cdr_of_sorted_is_sorted")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "m=0")
                    (("1" (expand "nth" 4 1)
                      (("1" (assert)
                        (("1" (case "n=0")
                          (("1" (expand "nth" 4 2)
                            (("1" (assert)
                              (("1"
                                (inst 4 "length(x!1)" "length(x!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "nth_of_append")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "length_append")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 5 2)
                            (("2" (assert)
                              (("2"
                                (expand "merge" -4)
                                (("2"
                                  (expand "merge" -5)
                                  (("2"
                                    (expand "nth" -5)
                                    (("2"
                                      (expand "nth" -4)
                                      (("2"
                                        (lemma "merge_is_permutation")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (lemma
                                             "permutations_preserve_contents")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (use
                                                       "nth_of_append")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (lemma
                                                                   "is_sorted_implies_monotone")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "j=0")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -1
                                                                           "j"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "<=")
                                                                              (("1"
                                                                                (expand
                                                                                 "total_preorder?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "preorder?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "transitive?")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "car(x!1)"
                                                                                         "nth(x!1,j)"
                                                                                         "car(x!2)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (case
                                                                 "j - length(x!1) = 0")
                                                                (("1"
                                                                  (inst
                                                                   6
                                                                   "length(x!1)"
                                                                   "j+1")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     7
                                                                     "length(x!1)"
                                                                     "j+1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_of_append")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 5 (1 3))
                      (("2" (assert)
                        (("2" (inst -1 "x!1" "cdr(x!2)")
                          (("1" (inst -1 "m-1" "n-1")
                            (("1" (expand "length" -1 4)
                              (("1"
                                (expand "merge" -3)
                                (("1"
                                  (expand "merge" -4)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (expand "nth" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (lemma "nth_of_append")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst-cp -1 "i")
                                                (("1"
                                                  (inst -1 "j")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             5
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (lemma
                                                               "nth_of_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2"
                                                                 "_")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "i")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append")
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "i")
                                                              (("3"
                                                                (rewrite
                                                                 "length_append")
                                                                (("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 6
                                                                 "i"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_of_append")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "i")
                                                                  (("3"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (replaces
                                                             -2)
                                                            (("3"
                                                              (replaces
                                                               -2)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (replaces
                                                             -1)
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (inst
                                                                 7
                                                                 "i+1"
                                                                 "j+1")
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_of_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_of_append")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "j")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "n")
                              (("2" (grind) nil nil)) nil)
                             ("3" (typepred "m")
                              (("3" (grind) nil nil)) nil))
                            nil)
                           ("2" (typepred "x!2")
                            (("2" (rewrite "cdr_of_sorted_is_sorted")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_of_append formula-decl nil sorting_aux nil)
    (is_sorted_implies_monotone formula-decl nil sorting nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (is_sorted? const-decl "bool" sorting nil)
    (total_preorder? const-decl "bool" total_preorder nil))
   shostak))
 (merge_sort_is_conservative 0
  (merge_sort_is_conservative-1 nil 3778250623
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (case "length(x!1) <= 1")
          (("1" (assert)
            (("1" (inst 1 "m" "n")
              (("1" (typepred "n")
                (("1" (rewrite "merge_sort_size") nil nil)) nil)
               ("2" (typepred "m")
                (("2" (rewrite "merge_sort_size") nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "merge_is_conservative")
              (("2" (expand "merge_sort" -4)
                (("2" (expand "merge_sort" -5)
                  (("2" (inst?)
                    (("1" (inst -1 "m" "n")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (lemma "nth_of_append")
                            (("1"
                              (inst -1
                               "merge_sort(prefix(x!1, floor(length(x!1) / 2)))"
                               "merge_sort(suffix(x!1, floor(length(x!1) / 2)))"
                               "_")
                              (("1"
                                (inst-cp -1 "i")
                                (("1"
                                  (inst -1 "j")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (inst
                                                 -4
                                                 "prefix(x!1, floor(length(x!1) / 2))")
                                                (("1"
                                                  (inst -4 "i" "j")
                                                  (("1"
                                                    (rewrite
                                                     "length_prefix")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (lemma
                                                           "contents_prefix")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "floor(length(x!1) / 2)"
                                                             "_")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "i_1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "j_1")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (replaces
                                                                       -5)
                                                                      (("1"
                                                                        (replaces
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           2
                                                                           "i_1"
                                                                           "j_1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "j_1")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_prefix")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "i_1")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_prefix")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "merge_sort_size")
                                            (("2"
                                              (rewrite "length_prefix")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (lemma
                                                     "merge_sort_is_permutation")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "prefix(x!1, floor(length(x!1) / 2))")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "suffix(x!1, floor(length(x!1) / 2))")
                                                        (("2"
                                                          (lemma
                                                           "permutations_preserve_contents")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "merge_sort(suffix(x!1, floor(length(x!1) / 2)))"
                                                             "suffix(x!1, floor(length(x!1) / 2))"
                                                             "j - floor(length(x!1) / 2)")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "merge_sort(prefix(x!1, floor(length(x!1) / 2)))"
                                                               "prefix(x!1, floor(length(x!1) / 2))"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "contents_prefix")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!1"
                                                                         "floor(length(x!1) / 2)"
                                                                         "j!1")
                                                                        (("1"
                                                                          (use
                                                                           "contents_suffix")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "j!1"
                                                                                     "j_1 + floor(length(x!1) / 2)")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "j!1")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_prefix")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "j_1")
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_suffix")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j!1")
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_prefix")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil)
                                           ("4"
                                            (rewrite "merge_sort_size")
                                            (("4"
                                              (rewrite "length_prefix")
                                              (("4"
                                                (replaces -1)
                                                (("4"
                                                  (replaces -1)
                                                  (("4"
                                                    (inst
                                                     -2
                                                     "suffix(x!1, floor(length(x!1) / 2))")
                                                    (("4"
                                                      (inst
                                                       -2
                                                       "i - floor(length(x!1) / 2)"
                                                       "j - floor(length(x!1) / 2)")
                                                      (("1"
                                                        (rewrite
                                                         "length_suffix")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (replaces
                                                               -3)
                                                              (("1"
                                                                (replaces
                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "contents_suffix")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "contents_suffix")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           4
                                                                           "i_1 + floor(length(x!1) / 2)"
                                                                           "j_1 + floor(length(x!1) / 2)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "j_1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_suffix")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i_1")
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_suffix")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 2))
                                    (("2"
                                      (typepred "j")
                                      (("2"
                                        (rewrite "length_append")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 2))
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (rewrite "length_append")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "merge_sort_is_sorted") nil nil)
                     ("3" (use "merge_sort_is_sorted") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "list[T]" mergesort nil)
    (m skolem-const-decl "below[length(merge_sort(x!1))]" mergesort
     nil)
    (n skolem-const-decl "below[length(merge_sort(x!1))]" mergesort
     nil)
    (merge_sort_size formula-decl nil mergesort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (merge_is_conservative formula-decl nil mergesort nil)
    (merge_sort_is_sorted formula-decl nil mergesort nil)
    (merge def-decl "list[T]" mergesort nil)
    (j skolem-const-decl
     "below[length(append(merge_sort(prefix(x!1, floor(length(x!1) / 2))),
                    merge_sort(suffix(x!1, floor(length(x!1) / 2)))))]"
     mergesort nil)
    (contents_prefix formula-decl nil sorting_aux nil)
    (i_1 skolem-const-decl
     "below[length(prefix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (j_1 skolem-const-decl
     "below[length(prefix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (contents_suffix formula-decl nil sorting_aux nil)
    (j_1 skolem-const-decl
     "below[length(suffix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (j!1 skolem-const-decl
     "below[length(prefix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (i_1 skolem-const-decl
     "below[length(suffix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (j_1 skolem-const-decl
     "below[length(suffix(x!1, floor(length(x!1) / 2)))]" mergesort
     nil)
    (TRUE const-decl "bool" booleans nil)
    (length_append formula-decl nil list_props nil)
    (i skolem-const-decl
       "below[length(append(merge_sort(prefix(x!1, floor(length(x!1) / 2))),
                    merge_sort(suffix(x!1, floor(length(x!1) / 2)))))]"
       mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_of_append formula-decl nil sorting_aux nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (is_sorted? const-decl "bool" sorting nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" mergesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

