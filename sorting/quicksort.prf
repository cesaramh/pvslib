(quicksort
 (leq_elements_TCC1 0
  (leq_elements_TCC1-1 nil 3619867046 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (leq_elements termination
    "quicksort.leq_elements(quicksort.r, quicksort.p)" "nil")))
 (leq_elements_TCC2 0
  (leq_elements_TCC2-1 nil 3619867046 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (leq_elements termination
    "quicksort.leq_elements(quicksort.r, quicksort.p)" "nil")))
 (g_elements_TCC1 0
  (g_elements_TCC1-1 nil 3731797056 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil quicksort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (g_elements termination
    "quicksort.g_elements(quicksort.r, quicksort.p)" "nil")))
 (g_elements_TCC2 0
  (g_elements_TCC2-1 nil 3731797056 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil quicksort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (g_elements termination
    "quicksort.g_elements(quicksort.r, quicksort.p)" "nil")))
 (leq_elements_size 0
  (leq_elements_size-1 nil 3619867047
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep)
      (("" (expand "leq_elements" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (inst -2 "cdr(x!1)")
              (("2" (inst -2 "x")
                (("2" (prop)
                  (("1" (expand "length" 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (inst -1 "cdr(x!1)")
              (("3" (inst -1 "x")
                (("3" (prop)
                  (("1" (expand "length" 2 2) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (<= const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (g_elements_size 0
  (g_elements_size-1 nil 3620034974
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep)
      (("" (expand "g_elements" 1)
        (("" (lift-if)
          (("" (rewrite "gt_not_le")
            (("" (prop)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (inst -1 "cdr(x!1)")
                (("2" (inst -1 "x")
                  (("2" (prop)
                    (("1" (expand "length" 2) (("1" (assert) nil nil))
                      nil)
                     ("2" (hide-all-but (1 4)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (inst -2 "cdr(x!1)")
                (("3" (inst -2 "x")
                  (("3" (prop)
                    (("1" (expand "length" 1 2)
                      (("1" (assert) nil nil)) nil)
                     ("2" (expand "length" 1 2)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_not_le formula-decl nil sorting nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (<= const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (same_occurrence_leq 0
  (same_occurrence_leq-1 nil 3620053581
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep)
      (("" (split)
        (("1" (case "x!1=null")
          (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
           ("2" (inst -1 "cdr(x!1)")
            (("1" (inst -1 "x" "p")
              (("1" (prop)
                (("1" (expand "leq_elements" 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (hide-all-but (-1 1))
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand "occurrences" 1 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (expand "occurrences" 1 1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "occurrences" 2 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "occurrences" 2 1)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 3) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (case "x!1=null")
          (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
           ("2" (inst -1 "cdr(x!1)")
            (("1" (inst -1 "x" "p")
              (("1" (prop)
                (("1" (expand "g_elements" 2)
                  (("1" (lift-if)
                    (("1" (rewrite "gt_not_le")
                      (("1" (prop)
                        (("1" (hide-all-but (-1 2))
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "occurrences" 2)
                          (("2" (lift-if)
                            (("2" (prop) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" 1 2) (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (gt_not_le formula-decl nil sorting nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" quicksort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (same_occurrence_g 0
  (same_occurrence_g-1 nil 3620058296
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep)
      (("" (rewrite "gt_not_le")
        (("" (split)
          (("1" (case "x!1=null")
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (inst -1 "cdr(x!1)")
              (("1" (inst -1 "x" "p")
                (("1" (rewrite "gt_not_le")
                  (("1" (expand "length" -1 2)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "g_elements" 2)
                          (("1" (rewrite "gt_not_le")
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "occurrences" 2 2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "occurrences" 1 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "occurrences" 2 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "occurrences" 1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (case "x!1=null")
            (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
             ("2" (inst -1 "cdr(x!1)")
              (("1" (inst -1 "x" "p")
                (("1" (rewrite "gt_not_le")
                  (("1" (expand "length" -1 2)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "leq_elements" 2)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "occurrences" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" quicksort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (gt_not_le formula-decl nil sorting nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (quick_sort_TCC1 0
  (quick_sort_TCC1-2 nil 3797765865
   ("" (lemma "leq_elements_size")
    (("" (skeep)
      (("" (inst -1 "l" "x")
        (("" (expand "leq_elements" -1)
          (("" (assert)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (typepred "leq") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_elements def-decl "list[T]" quicksort nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (leq_elements_size formula-decl nil quicksort nil))
   nil
   (quick_sort termination
    "quicksort.quick_sort(quicksort.leq_elements(quicksort.r, quicksort.x))"
    "nil"))
  (quick_sort_TCC1-1 nil 3620020924
   ("" (lemma "leq_elements_size")
    (("" (skeep)
      (("" (inst -1 "l" "x")
        (("" (expand "leq_elements" -1)
          (("" (assert)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (typepred "<=") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_preorder? const-decl "bool" total_preorder nil)
    (length def-decl "nat" list_props nil))
   nil
   (quick_sort termination
    "quicksort.quick_sort(quicksort.leq_elements(quicksort.r, quicksort.x))"
    "nil")))
 (quick_sort_TCC2 0
  (quick_sort_TCC2-1 nil 3620020924
   ("" (lemma "g_elements_size")
    (("" (skeep)
      (("" (inst -1 "r" "x")
        (("" (expand "length" 1 2) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (g_elements_size formula-decl nil quicksort nil))
   nil
   (quick_sort termination
    "quicksort.quick_sort(quicksort.g_elements(quicksort.r, quicksort.x))"
    "nil")))
 (g_leq_car_size_TCC1 0
  (g_leq_car_size_TCC1-1 nil 3620399534 ("" (subtype-tcc) nil nil) nil
   nil
   (g_leq_car_size subtype "quicksort.l1"
    "(list_adt[quicksort.T].cons?)")))
 (g_leq_car_size 0
  (g_leq_car_size-1 nil 3620399536
   ("" (skeep)
    (("" (lemma "length_append")
      ((""
        (inst -1 "cons(car(l1), g_elements(cdr(l1), car(l1)))"
         "leq_elements(cdr(l1), car(l1))")
        (("" (expand "length" -1 2)
          (("" (replace -1 2 rl)
            (("" (hide -1)
              (("" (lemma "same_occurrences_same_length")
                ((""
                  (inst -1
                   "append(cons(car(l1), g_elements(cdr(l1), car(l1))),
                             leq_elements(cdr(l1), car(l1)))" "l1")
                  (("" (prop)
                    (("" (hide 3)
                      (("" (lemma "occurrences_of_app")
                        (("" (inst?)
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (lemma "same_occurrence_leq")
                                  (("1"
                                    (lemma "same_occurrence_g")
                                    (("1"
                                      (inst -1 "cdr(l1)" "x" "car(l1)")
                                      (("1"
                                        (rewrite "gt_not_le")
                                        (("1"
                                          (inst
                                           -2
                                           "cdr(l1)"
                                           "x"
                                           "car(l1)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (replace -4 -1)
                                              (("1"
                                                (expand
                                                 "occurrences"
                                                 1
                                                 1)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "occurrences"
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -2 2)
                                              (("2"
                                                (expand
                                                 "occurrences"
                                                 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1 2 rl)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "occurrences"
                                               1
                                               (1 3))
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lift-if)
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -2 2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil quicksort nil)
    (length_append formula-decl nil list_props nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (l1 skolem-const-decl "list[T]" quicksort nil)
    (same_occurrence_leq formula-decl nil quicksort nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (gt_not_le formula-decl nil sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (same_occurrence_g formula-decl nil quicksort nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (same_occurrences_same_length formula-decl nil sorting_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (quick_sort_size 0
  (quick_sort_size-1 nil 3620020926
   ("" (measure-induct+ "length(l)" "l")
    (("" (case "null?(x!1)")
      (("1" (hide -2)
        (("1" (expand "quick_sort") (("1" (assert) nil nil)) nil)) nil)
       ("2" (expand "quick_sort" 2)
        (("2" (assert)
          (("2" (lemma "length_append")
            (("2"
              (inst -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
               "cons(car(x!1),
                             quick_sort(g_elements(cdr(x!1), car(x!1))))")
              (("2" (replaces -1)
                (("2" (expand "length" 2 2)
                  (("2" (inst-cp -1 "g_elements(cdr(x!1), car(x!1))")
                    (("2" (split)
                      (("1" (replaces -1)
                        (("1"
                          (inst-cp -1
                           "leq_elements(cdr(x!1), car(x!1))")
                          (("1" (split)
                            (("1" (replaces -1)
                              (("1"
                                (lemma "g_leq_car_size")
                                (("1"
                                  (inst -1 "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3 -1)
                              (("2"
                                (lemma "leq_elements_size")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 3)
                        (("2" (lemma "g_elements_size")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (leq_elements_size formula-decl nil quicksort nil)
    (g_leq_car_size formula-decl nil quicksort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (g_elements_size formula-decl nil quicksort nil)
    (TRUE const-decl "bool" booleans nil)
    (length_append formula-decl nil list_props nil)
    (quick_sort def-decl "list[T]" quicksort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (leq_elements_works 0
  (leq_elements_works-1 nil 3620463812
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (inst -1 "cdr(x!1)")
        (("1" (expand "leq_elements" -2)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (inst -3 "x" "i") (("2" (grind) nil nil)) nil)
               ("3" (inst -2 "x" "i") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" quicksort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (g_elements_works 0
  (g_elements_works-1 nil 3620466925
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "g_elements" -2)
        (("" (lift-if)
          (("" (inst -1 "cdr(x!1)")
            (("1" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (inst -3 "x" "i") (("2" (grind) nil nil)) nil)
               ("3" (inst -2 "x" "i") (("3" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" quicksort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (quick_sort_is_permutation 0
  (quick_sort_is_permutation-1 nil 3620036003
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "permutations")
      (("" (skeep)
        (("" (expand "quick_sort" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (lemma "occurrences_of_app")
                (("2"
                  (inst -1
                   "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                   " cons(car(x!1),
                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))"
                   "x")
                  (("2" (replaces -1)
                    (("2"
                      (inst-cp -1 "leq_elements(cdr(x!1), car(x!1))")
                      (("2" (split)
                        (("1" (inst -1 "x")
                          (("1" (replaces -1)
                            (("1" (expand "occurrences" 2 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst
                                     -2
                                     "g_elements(cdr(x!1), car(x!1))")
                                    (("1"
                                      (split)
                                      (("1"
                                        (inst -1 "x")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "same_occurrence_g")
                                            (("1"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x"
                                               "x")
                                              (("1"
                                                (rewrite "gt_not_le")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "occurrences"
                                                               1
                                                               2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "same_occurrence_g")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cdr(x!1)"
                                                         "x"
                                                         "car(x!1)")
                                                        (("2"
                                                          (rewrite
                                                           "gt_not_le")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "occurrences"
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "same_occurrence_leq")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cdr(x!1)"
                                                                 "x"
                                                                 "car(x!1)")
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (replaces
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "occurrences"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "g_elements_size")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     -1
                                     "g_elements(cdr(x!1), car(x!1))")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "x")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "same_occurrence_g")
                                            (("1"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x"
                                               "car(x!1)")
                                              (("1"
                                                (rewrite "gt_not_le")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replace -1 2 rl)
                                                    (("1"
                                                      (expand
                                                       "occurrences"
                                                       2
                                                       3)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "occurrences"
                                                     2
                                                     3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "same_occurrence_leq")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cdr(x!1)"
                                                           "x"
                                                           "car(x!1)")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (lemma "g_elements_size")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 3)
                          (("2" (lemma "leq_elements_size")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((occurrences def-decl "nat" sorting_aux nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (leq_elements_size formula-decl nil quicksort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (same_occurrence_leq formula-decl nil quicksort nil)
    (gt_not_le formula-decl nil sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (same_occurrence_g formula-decl nil quicksort nil)
    (g_elements_size formula-decl nil quicksort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (quick_sort def-decl "list[T]" quicksort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (append_null_in_sorted_is_sorted 0
  (append_null_in_sorted_is_sorted-1 nil 3620551497
   ("" (skeep)
    (("" (split)
      (("1" (hide -2) (("1" (grind) nil nil)) nil)
       ("2" (hide -3) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (is_sorted? const-decl "bool" sorting nil)
    (T formal-type-decl nil quicksort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (nth def-decl "T" list_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list2set def-decl "set[T]" list2set nil))
   shostak))
 (cons_in_sorted_TCC1 0
  (cons_in_sorted_TCC1-1 nil 3620551764 ("" (subtype-tcc) nil nil)
   ((leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil quicksort nil)
    (is_sorted? const-decl "bool" sorting nil))
   nil
   (cons_in_sorted subtype "quicksort.l1"
    "(list_adt[quicksort.T].cons?)")))
 (cons_in_sorted 0
  (cons_in_sorted-1 nil 3620551766
   ("" (skeep)
    (("" (case "null?(l1)")
      (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
       ("2" (expand "is_sorted?" 2)
        (("2" (skeep)
          (("2" (case "k=0")
            (("1" (replace -1)
              (("1" (expand "nth" 2)
                (("1" (expand "nth" 2) (("1" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "is_sorted?")
              (("2" (inst -1 "k-1")
                (("1" (split)
                  (("1" (expand "nth" 3) (("1" (assert) nil nil)) nil)
                   ("2" (expand "length" -2) (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "T" quicksort nil)
    (l1 skolem-const-decl "{l1: list[T] | NOT null?(l1)}" quicksort
     nil)
    (k skolem-const-decl "below[length(cons(x, l1))]" quicksort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak))
 (quick_sort_is_sorted 0
  (quick_sort_is_sorted-2 nil 3797765815
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "quick_sort" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2"
            (case "null?(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
            (("1"
              (case "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (lemma "append_null_in_sorted_is_sorted")
                (("2"
                  (inst -1
                   "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                   "cons(car(x!1),
                                                                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))")
                  (("2" (prop)
                    (("1" (hide -2 4) (("1" (grind) nil nil)) nil)
                     ("2" (hide -1 4)
                      (("2" (inst -1 "g_elements(cdr(x!1), car(x!1))")
                        (("2" (split)
                          (("1" (lemma "g_elements_works")
                            (("1"
                              (inst -1 "cdr(x!1)" "car(x!1)"
                               "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                              (("1"
                                (rewrite "gt_not_le")
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "cons_in_sorted")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (hide-all-but (1 2))
                                          (("3"
                                            (typepred "leq")
                                            (("3"
                                              (expand
                                               "total_preorder?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand
                                                   "dichotomous?")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "quick_sort_is_permutation")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "permutations")
                                        (("2"
                                          (inst
                                           -1
                                           "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                          (("2"
                                            (lemma
                                             "occurrences_implies_member")
                                            (("2"
                                              (inst
                                               -1
                                               "g_elements(cdr(x!1), car(x!1))"
                                               "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                              (("2"
                                                (replace -2 -1 rl)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (lemma "g_elements_size")
                            (("2" (hide 2 3)
                              (("2"
                                (inst?)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst-cp -1 "leq_elements(cdr(x!1), car(x!1))")
              (("2" (inst -1 "g_elements(cdr(x!1), car(x!1))")
                (("2" (prop)
                  (("1" (expand "is_sorted?")
                    (("1" (skeep)
                      (("1" (lemma "nth_of_append")
                        (("1"
                          (inst-cp -1
                           "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                           " cons(car(x!1),
                                                                                          quick_sort(g_elements(cdr(x!1), car(x!1))))"
                           "k")
                          (("1" (replaces -2)
                            (("1"
                              (inst -1
                               "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                               " cons(car(x!1),
                                                                                                            quick_sort(g_elements(cdr(x!1), car(x!1))))"
                               "k+1")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -3 "k")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case
                                           "k + 1 = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                          (("1"
                                            (expand "nth" 2 2)
                                            (("1"
                                              (lemma
                                               "leq_elements_works")
                                              (("1"
                                                (inst
                                                 -1
                                                 "cdr(x!1)"
                                                 "car(x!1)"
                                                 "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1)))) -1")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1 3))
                                                          (("1"
                                                            (lemma
                                                             "quick_sort_is_permutation")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "permutations")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                                  (("1"
                                                                    (lemma
                                                                     "occurrences_implies_member")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "leq_elements(cdr(x!1),car(x!1))"
                                                                       "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "occurrences_of_nth_element")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                                                                             "k")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                            (("1"
                                              (expand "nth" 3 2)
                                              (("1"
                                                (hide -4 -5)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil)
                                         ("4"
                                          (expand "nth" 2)
                                          (("4"
                                            (lift-if)
                                            (("4"
                                              (lift-if)
                                              (("4"
                                                (lift-if)
                                                (("4"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (rewrite
                                                                 "length_append")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "g_elements_works")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cdr(x!1)"
                                                                 "car(x!1)"
                                                                 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                (("1"
                                                                  (rewrite
                                                                   "gt_not_le")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (1
                                                                            4))
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (typepred
                                                                               "leq")
                                                                              (("1"
                                                                                (expand
                                                                                 "total_preorder?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "preorder?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dichotomous?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           5
                                                                           6)
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (lemma
                                                                               "quick_sort_is_permutation")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "permutations")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "occurrences_implies_member")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "g_elements(cdr(x!1), car(x!1))"
                                                                                         "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "occurrences"
                                                                                           -2
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (inst
                                                     -2
                                                     "k -1 - length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -1 3)
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (rewrite
                                                         "length_append")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2 4)
                                (("2"
                                  (expand "length" 1 2)
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (expand "length" -1 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 4)
                            (("2" (rewrite "length_append")
                              (("2"
                                (expand "length" -1 2)
                                (("2"
                                  (expand "length" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2 4)
                    (("2" (lemma "leq_elements_size")
                      (("2" (inst?)
                        (("2" (expand "length" 1 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 2 4)
                    (("3" (lemma "g_elements_size")
                      (("3" (inst?)
                        (("3" (expand "length" 1 2)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2 3 5)
                    (("4" (lemma "leq_elements_size")
                      (("4" (inst?)
                        (("4" (expand "length" 1 2)
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (k skolem-const-decl
     "below[length(append(quick_sort(leq_elements(cdr(x!1), car(x!1))),
                    cons(car(x!1),
                         quick_sort(g_elements(cdr(x!1), car(x!1))))))]"
     quicksort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (preorder? const-decl "bool" orders nil)
    (length_append formula-decl nil list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leq_elements_works formula-decl nil quicksort nil)
    (occurrences_of_nth_element formula-decl nil sorting_aux nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nth_of_append formula-decl nil sorting_aux nil)
    (leq_elements_size formula-decl nil quicksort nil)
    (g_elements def-decl "list[T]" quicksort nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (x!1 skolem-const-decl "list[T]" quicksort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (cons_in_sorted formula-decl nil quicksort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (occurrences_implies_member formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (quick_sort_is_permutation formula-decl nil quicksort nil)
    (gt_not_le formula-decl nil sorting nil)
    (g_elements_works formula-decl nil quicksort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (g_elements_size formula-decl nil quicksort nil)
    (append_null_in_sorted_is_sorted formula-decl nil quicksort nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq_elements def-decl "list[T]" quicksort nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" quicksort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (quick_sort def-decl "list[T]" quicksort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (quick_sort_is_sorted-1 nil 3620401365
   ("" (measure-induct+ "length(l)" l)
    (("" (expand "quick_sort" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2"
            (case "null?(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
            (("1"
              (case "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (lemma "append_null_in_sorted_is_sorted")
                (("2"
                  (inst -1
                   "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                   "cons(car(x!1),
                                                                                             quick_sort(g_elements(cdr(x!1), car(x!1))))")
                  (("2" (prop)
                    (("1" (hide -2 4) (("1" (grind) nil nil)) nil)
                     ("2" (hide -1 4)
                      (("2" (inst -1 "g_elements(cdr(x!1), car(x!1))")
                        (("2" (split)
                          (("1" (lemma "g_elements_works")
                            (("1"
                              (inst -1 "cdr(x!1)" "car(x!1)"
                               "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                              (("1"
                                (rewrite "gt_not_le")
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "cons_in_sorted")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (hide-all-but (1 2))
                                          (("3"
                                            (typepred "<=")
                                            (("3"
                                              (expand
                                               "total_preorder?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand
                                                   "dichotomous?")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "quick_sort_is_permutation")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "permutations")
                                        (("2"
                                          (inst
                                           -1
                                           "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                          (("2"
                                            (lemma
                                             "occurrences_implies_member")
                                            (("2"
                                              (inst
                                               -1
                                               "g_elements(cdr(x!1), car(x!1))"
                                               "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                              (("2"
                                                (replace -2 -1 rl)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (lemma "g_elements_size")
                            (("2" (hide 2 3)
                              (("2"
                                (inst?)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst-cp -1 "leq_elements(cdr(x!1), car(x!1))")
              (("2" (inst -1 "g_elements(cdr(x!1), car(x!1))")
                (("2" (prop)
                  (("1" (expand "is_sorted?")
                    (("1" (skeep)
                      (("1" (lemma "nth_of_append")
                        (("1"
                          (inst-cp -1
                           "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                           " cons(car(x!1),
                                                                                  quick_sort(g_elements(cdr(x!1), car(x!1))))"
                           "k")
                          (("1" (replaces -2)
                            (("1"
                              (inst -1
                               "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                               " cons(car(x!1),
                                                                                                  quick_sort(g_elements(cdr(x!1), car(x!1))))"
                               "k+1")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -3 "k")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "k + 1 = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                          (("1"
                                            (expand "nth" 2 2)
                                            (("1"
                                              (lemma
                                               "leq_elements_works")
                                              (("1"
                                                (inst
                                                 -1
                                                 "cdr(x!1)"
                                                 "car(x!1)"
                                                 "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1)))) -1")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1 3))
                                                          (("1"
                                                            (lemma
                                                             "quick_sort_is_permutation")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "permutations")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                                  (("1"
                                                                    (lemma
                                                                     "occurrences_implies_member")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "leq_elements(cdr(x!1),car(x!1))"
                                                                       "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "occurrences_of_nth_element")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "quick_sort(leq_elements(cdr(x!1), car(x!1)))"
                                                                             "k")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                            (("1"
                                              (expand "nth" 3 2)
                                              (("1"
                                                (hide -4 -5)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil)
                                         ("4"
                                          (expand "nth" 2)
                                          (("4"
                                            (lift-if)
                                            (("4"
                                              (lift-if)
                                              (("4"
                                                (lift-if)
                                                (("4"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (rewrite
                                                                 "length_append")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "g_elements_works")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cdr(x!1)"
                                                                 "car(x!1)"
                                                                 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                (("1"
                                                                  (rewrite
                                                                   "gt_not_le")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (1
                                                                            4))
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (typepred
                                                                               "<=")
                                                                              (("1"
                                                                                (expand
                                                                                 "total_preorder?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "preorder?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dichotomous?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           5
                                                                           6)
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (lemma
                                                                               "quick_sort_is_permutation")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "permutations")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "occurrences_implies_member")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "g_elements(cdr(x!1), car(x!1))"
                                                                                         "car(quick_sort(g_elements(cdr(x!1), car(x!1))))")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "occurrences"
                                                                                           -2
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (inst
                                                     -2
                                                     "k -1 - length(quick_sort(leq_elements(cdr(x!1), car(x!1))))")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -1 3)
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "list2finseq")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2 4)
                                (("2"
                                  (expand "length" 1 2)
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (expand "length" -1 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 4)
                            (("2" (rewrite "length_append")
                              (("2"
                                (expand "length" -1 2)
                                (("2"
                                  (expand "length" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2 4)
                    (("2" (lemma "leq_elements_size")
                      (("2" (inst?)
                        (("2" (expand "length" 1 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 2 4)
                    (("3" (lemma "g_elements_size")
                      (("3" (inst?)
                        (("3" (expand "length" 1 2)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2 3 5)
                    (("4" (lemma "leq_elements_size")
                      (("4" (inst?)
                        (("4" (expand "length" 1 2)
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (length_append formula-decl nil list_props nil)
    (occurrences_of_nth_element formula-decl nil sorting_aux nil)
    (nth_of_append formula-decl nil sorting_aux nil)
    (append def-decl "list[T]" list_props nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (occurrences_implies_member formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (gt_not_le formula-decl nil sorting nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (is_sorted? const-decl "bool" sorting nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (quick_sort_works 0
  (quick_sort_works-1 nil 3620406814
   ("" (skeep)
    (("" (split)
      (("1" (rewrite "quick_sort_is_sorted") nil nil)
       ("2" (rewrite "quick_sort_is_permutation") nil nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (T formal-type-decl nil quicksort nil)
    (quick_sort_is_sorted formula-decl nil quicksort nil)
    (quick_sort_is_permutation formula-decl nil quicksort nil))
   shostak)))

