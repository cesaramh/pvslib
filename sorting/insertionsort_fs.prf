(insertionsort_fs
 (insertion_TCC1 0
  (insertion_TCC1-1 nil 3702380473 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (insertion subtype "insertionsort_fs.s" "not_empty_seq[T]")))
 (insertion_TCC2 0
  (insertion_TCC2-1 nil 3702380473 ("" (termination-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (insertion termination
    "insertionsort_fs.insertion(insertionsort_fs.x, seq_extras[insertionsort_fs.T].rest(insertionsort_fs.s))"
    "nil")))
 (length_insertion 0
  (length_insertion-1 nil 3702581516
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (expand "insertion" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (expand "add_first" 1)
              (("2" (expand "insert?" 1) (("2" (propax) nil nil)) nil))
              nil)
             ("3" (expand "add_first" 2)
              (("3" (expand "insert?" 2)
                (("3" (inst -1 "rest(x!1)")
                  (("3" (inst?)
                    (("3" (prop)
                      (("1" (replace -1)
                        (("1" (lemma "seq_first_rest")
                          (("1" (inst -1 "x!1")
                            (("1" (assert)
                              (("1"
                                (replace -1 (2 2))
                                (("1"
                                  (expand "add_first" 2 2)
                                  (("1"
                                    (expand "insert?" 2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_rest")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "finseq" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_rest formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (insertion def-decl "finseq[T]" insertionsort_fs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (occ_in_insert 0
  (occ_in_insert-2 nil 3797766116
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (case "length(x!1) =0")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (expand "insertion" 2)
          (("2" (assert)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replaces -2)
                  (("1" (expand "occurrences" 1 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "add_first(y, x!1) ^ (1, length(add_first(y, x!1)) - 1) = x!1")
                            (("1" (assert) nil nil)
                             ("2" (hide - 2)
                              (("2"
                                (decompose-equality 1)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "occurrences" 2 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide-all-but (-1 3))
                          (("1" (lemma "length_insertion")
                            (("1" (inst?)
                              (("1"
                                (expand "add_first")
                                (("1"
                                  (expand "insert?")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 3))
                          (("2" (expand "finseq_appl")
                            (("2" (expand "add_first")
                              (("2"
                                (expand "insert?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "leq")
                                    (("2"
                                      (expand "total_preorder?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "preorder?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "reflexive?")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "occurrences" 2 2)
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1"
                                (hide-all-but (-1 2))
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "add_first")
                                    (("1"
                                      (expand "insert?")
                                      (("1"
                                        (expand "first")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "rest(x!1)")
                                (("2"
                                  (inst -1 "y" "y")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (case-replace
                                       "add_first(first(x!1), insertion(y, rest(x!1))) ^
                               (1,
                                length(add_first(first(x!1), insertion(y, rest(x!1))))
                                 - 1) = insertion(y, rest(x!1))")
                                      (("1"
                                        (case
                                         "x!1 ^ (1, length(x!1) - 1) = rest(x!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but (1 7))
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide - 3)
                                        (("2"
                                          (name-replace
                                           "irest"
                                           "insertion(y, rest(x!1))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (case
                                                 "length(irest) > 0")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "irest")
                                                    (("2"
                                                      (lemma
                                                       "length_insertion")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide - 2 3 4 5 6)
                                        (("3"
                                          (expand "add_first")
                                          (("3"
                                            (expand "insert?")
                                            (("3"
                                              (lemma
                                               "length_insertion")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 7))
                                      (("2"
                                        (rewrite "length_rest")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lift-if)
                  (("3" (prop)
                    (("1" (hide -)
                      (("1" (expand "occurrences" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide +) (("1" (grind) nil nil)) nil)
                             ("2" (hide 1 2 4) (("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "first(x!1) = x")
                      (("1"
                        (case "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = 1 + occurrences(insertion(y, rest(x!1)))(x)")
                        (("1"
                          (case "occurrences(x!1)(x) = 1 + occurrences(rest(x!1))(x)")
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "length_rest")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "occurrences" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "rest" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 6))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "occurrences" 1 1)
                          (("2" (lift-if)
                            (("2" (expand "finseq_appl")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 5))
                                    (("1"
                                      (expand "add_first")
                                      (("1"
                                        (expand "insert?")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     "irest"
                                     "insertion(y, rest(x!1))")
                                    (("2"
                                      (hide -1 -2 -3 3 4 5)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-1 1 7))
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = occurrences(insertion(y, rest(x!1)))(x)")
                        (("1"
                          (case "occurrences(x!1)(x) =  occurrences(rest(x!1))(x)")
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "length_rest")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "occurrences" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "rest" 1)
                                  (("1"
                                    (hide-all-but (-1 2 6))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "rest" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "occurrences" 1 1)
                          (("2" (lift-if)
                            (("2" (expand "finseq_appl")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 6))
                                    (("1"
                                      (expand "add_first")
                                      (("1"
                                        (expand "insert?")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     "irest"
                                     "insertion(y, rest(x!1))")
                                    (("2"
                                      (hide-all-but (-1 3 7))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (name-replace
                                     "irest"
                                     "insertion(y, rest(x!1))")
                                    (("3"
                                      (hide-all-but (2 3 8))
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "T" seq_extras structures)
    (length_rest formula-decl nil seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (irest skolem-const-decl "finseq[T]" insertionsort_fs nil)
    (x!1 skolem-const-decl "finseq[T]" insertionsort_fs nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest const-decl "finseq" seq_extras structures)
    (length_insertion formula-decl nil insertionsort_fs nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (insertion def-decl "finseq[T]" insertionsort_fs nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort_fs nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (occ_in_insert-1 nil 3702377257
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (case "length(x!1) =0")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (expand "insertion" 2)
          (("2" (assert)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replaces -2)
                  (("1" (expand "occurrences" 1 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "add_first(y, x!1) ^ (1, length(add_first(y, x!1)) - 1) = x!1")
                            (("1" (assert) nil nil)
                             ("2" (hide - 2)
                              (("2"
                                (decompose-equality 1)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "occurrences" 2 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide-all-but (-1 3))
                          (("1" (lemma "length_insertion")
                            (("1" (inst?)
                              (("1"
                                (expand "add_first")
                                (("1"
                                  (expand "insert?")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 3))
                          (("2" (expand "finseq_appl")
                            (("2" (expand "add_first")
                              (("2"
                                (expand "insert?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "<=")
                                    (("2"
                                      (expand "total_preorder?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "preorder?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "reflexive?")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "occurrences" 2 2)
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1"
                                (hide-all-but (-1 2))
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "add_first")
                                    (("1"
                                      (expand "insert?")
                                      (("1"
                                        (expand "first")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "rest(x!1)")
                                (("2"
                                  (inst -1 "y" "y")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (case-replace
                                       "add_first(first(x!1), insertion(y, rest(x!1))) ^
                   (1,
                    length(add_first(first(x!1), insertion(y, rest(x!1))))
                     - 1) = insertion(y, rest(x!1))")
                                      (("1"
                                        (case
                                         "x!1 ^ (1, length(x!1) - 1) = rest(x!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but (1 7))
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide - 3)
                                        (("2"
                                          (name-replace
                                           irest
                                           "insertion(y, rest(x!1))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (case
                                                 "length(irest) > 0")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "irest")
                                                    (("2"
                                                      (lemma
                                                       "length_insertion")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide - 2 3 4 5 6)
                                        (("3"
                                          (expand "add_first")
                                          (("3"
                                            (expand "insert?")
                                            (("3"
                                              (lemma
                                               "length_insertion")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 7))
                                      (("2"
                                        (rewrite "length_rest")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lift-if)
                  (("3" (prop)
                    (("1" (hide -)
                      (("1" (expand "occurrences" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide +) (("1" (grind) nil nil)) nil)
                             ("2" (hide 1 2 4) (("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "first(x!1) = x")
                      (("1"
                        (case "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = 1 + occurrences(insertion(y, rest(x!1)))(x)")
                        (("1"
                          (case "occurrences(x!1)(x) = 1 + occurrences(rest(x!1))(x)")
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "length_rest")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "occurrences" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "rest" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 6))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "occurrences" 1 1)
                          (("2" (lift-if)
                            (("2" (expand "finseq_appl")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 5))
                                    (("1"
                                      (expand "add_first")
                                      (("1"
                                        (expand "insert?")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     irest
                                     "insertion(y, rest(x!1))")
                                    (("2"
                                      (hide -1 -2 -3 3 4 5)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-1 1 7))
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = occurrences(insertion(y, rest(x!1)))(x)")
                        (("1"
                          (case "occurrences(x!1)(x) =  occurrences(rest(x!1))(x)")
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "length_rest")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "occurrences" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "rest" 1)
                                  (("1"
                                    (hide-all-but (-1 2 6))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "rest" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "occurrences" 1 1)
                          (("2" (lift-if)
                            (("2" (expand "finseq_appl")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 6))
                                    (("1"
                                      (expand "add_first")
                                      (("1"
                                        (expand "insert?")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     irest
                                     "insertion(y, rest(x!1))")
                                    (("2"
                                      (hide-all-but (-1 3 7))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (name-replace
                                     irest
                                     "insertion(y, rest(x!1))")
                                    (("3"
                                      (hide-all-but (2 3 8))
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first const-decl "T" seq_extras structures)
    (length_rest formula-decl nil seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (fs_insertion_sort_TCC1 0
  (fs_insertion_sort_TCC1-1 nil 3702377221
   ("" (termination-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (fs_insertion_sort subtype "insertionsort_fs.s"
    "not_empty_seq[T]")))
 (fs_insertion_sort_TCC2 0
  (fs_insertion_sort_TCC2-1 nil 3779126492
   ("" (termination-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (rest const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (fs_insertion_sort termination
    "insertionsort_fs.fs_insertion_sort(seq_extras[insertionsort_fs.T].rest(insertionsort_fs.s))"
    "nil")))
 (fs_insert_size 0
  (fs_insert_size-1 nil 3702599166
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (expand "insertion" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (hide -2)
              (("2" (expand "add_first")
                (("2" (expand "insert?") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (expand "add_first")
              (("3" (expand "insert?")
                (("3" (inst?)
                  (("3" (prop)
                    (("1" (case "rest(x!1)`length + 1 = x!1`length ")
                      (("1" (assert) nil nil)
                       ("2" (hide -1 2 3)
                        (("2" (lemma "seq_first_rest")
                          (("2" (inst -1 "x!1")
                            (("2" (prop)
                              (("2"
                                (name-replace "rrest" "rest(x!1)")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (expand "add_first")
                                    (("2"
                                      (expand "insert?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_rest") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_rest formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (insertion def-decl "finseq[T]" insertionsort_fs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (fs_insert_in_sorted_preserves_sort 0
  (fs_insert_in_sorted_preserves_sort-2 nil 3797766160
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (expand "insertion" 1)
        (("" (prop)
          (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
           ("2" (hide -2)
            (("2" (expand "add_first")
              (("2" (expand "is_sorted?")
                (("2" (expand "finseq_appl")
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "insert?" -2)
                        (("2" (case "x!1`length = 1")
                          (("1" (assert) nil nil)
                           ("2" (inst -3 "k-1")
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst -1 "rest(x!1)")
            (("3" (inst?)
              (("3" (rewrite "length_rest")
                (("3" (prop)
                  (("1" (hide -2)
                    (("1" (expand "add_first")
                      (("1" (expand "is_sorted?")
                        (("1" (skeep)
                          (("1" (expand "finseq_appl")
                            (("1" (case-replace "k = 0")
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "insert?")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (case "length(rest(x!1)) = 0")
                                      (("1"
                                        (hide -2 -3)
                                        (("1"
                                          (expand "insertion")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (typepred "leq")
                                                  (("1"
                                                    (expand
                                                     "total_preorder?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "dichotomous?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "insertion" 3)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (typepred "leq")
                                                      (("1"
                                                        (expand
                                                         "total_preorder?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "dichotomous?")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x"
                                                               "x!1`seq(0)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "add_first")
                                              (("2"
                                                (expand "insert?")
                                                (("2"
                                                  (reveal -2)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "is_sorted?")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "k - 1")
                                (("1"
                                  (expand "insert?")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (prop)
                                  (("1"
                                    (expand "insert?")
                                    (("1"
                                      (rewrite "fs_insert_size")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "insert?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "is_sorted?")
                      (("2" (skeep)
                        (("2" (expand "finseq_appl")
                          (("2" (inst -2 "k+1")
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (first const-decl "T" seq_extras structures)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (k skolem-const-decl "below[length(insert?(x, x!1, 0))]"
     insertionsort_fs nil)
    (x!1 skolem-const-decl "finseq[T]" insertionsort_fs nil)
    (x skolem-const-decl "T" insertionsort_fs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (fs_insert_size formula-decl nil insertionsort_fs nil)
    (k skolem-const-decl
     "below[length(insert?(first(x!1), insertion(x, rest(x!1)), 0))]"
     insertionsort_fs nil)
    (k skolem-const-decl "below[length(rest(x!1))]" insertionsort_fs
     nil)
    (length_rest formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort_fs nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (insertion def-decl "finseq[T]" insertionsort_fs nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (fs_insert_in_sorted_preserves_sort-1 nil 3702599945
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (skeep)
      (("" (expand "insertion" 1)
        (("" (prop)
          (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
           ("2" (hide -2)
            (("2" (expand "add_first")
              (("2" (expand "is_sorted?")
                (("2" (expand "finseq_appl")
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "insert?" -2)
                        (("2" (case "x!1`length = 1")
                          (("1" (assert) nil nil)
                           ("2" (inst -3 "k-1")
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst -1 "rest(x!1)")
            (("3" (inst?)
              (("3" (rewrite "length_rest")
                (("3" (prop)
                  (("1" (hide -2)
                    (("1" (expand "add_first")
                      (("1" (expand "is_sorted?")
                        (("1" (skeep)
                          (("1" (expand "finseq_appl")
                            (("1" (case-replace "k = 0")
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "insert?")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (case "length(rest(x!1)) = 0")
                                      (("1"
                                        (hide -2 -3)
                                        (("1"
                                          (expand "insertion")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (typepred "<=")
                                                  (("1"
                                                    (expand
                                                     "total_preorder?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "dichotomous?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "insertion" 3)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (typepred "<=")
                                                      (("1"
                                                        (expand
                                                         "total_preorder?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "dichotomous?")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x"
                                                               "x!1`seq(0)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "add_first")
                                              (("2"
                                                (expand "insert?")
                                                (("2"
                                                  (reveal -2)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "is_sorted?")
                                                      (("2"
                                                        (inst -1 0)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "k - 1")
                                (("1"
                                  (expand "insert?")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (prop)
                                  (("1"
                                    (expand "insert?")
                                    (("1"
                                      (rewrite "fs_insert_size")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "insert?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "is_sorted?")
                      (("2" (skeep)
                        (("2" (expand "finseq_appl")
                          (("2" (inst -2 "k+1")
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length_rest formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (fs_insertionsort_is_sorted 0
  (fs_insertionsort_is_sorted-1 nil 3702632156
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (case "length(x!1) = 0")
      (("1" (hide -2) (("1" (grind) nil nil)) nil)
       ("2" (case "length(x!1) = 1")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (expand "fs_insertion_sort" 3)
          (("2" (prop)
            (("2" (inst -1 "rest(x!1)")
              (("2" (lemma "fs_insert_in_sorted_preserves_sort")
                (("2" (inst?)
                  (("2" (rewrite "length_rest")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (length_rest formula-decl nil seq_extras structures)
    (fs_insert_in_sorted_preserves_sort formula-decl nil
     insertionsort_fs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (insertion def-decl "finseq[T]" insertionsort_fs nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort_fs nil)
    (is_sorted? const-decl "bool" sorting_seq nil)
    (fs_insertion_sort def-decl "finseq[T]" insertionsort_fs nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (fs_ins_and_add_in_perm_is_perm 0
  (fs_ins_and_add_in_perm_is_perm-1 nil 3702635713
   ("" (skeep)
    (("" (typepred "s2")
      (("" (expand "permutations")
        (("" (skeep)
          (("" (inst -1 "x_1")
            (("" (lemma "occ_in_insert")
              (("" (inst?)
                (("" (prop)
                  (("1" (replaces -1)
                    (("1" (replaces -1)
                      (("1" (expand "occurrences" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but -1)
                              (("1" (grind) nil nil)) nil)
                             ("2"
                              (case "add_first(x, s1) ^ (1, length(add_first(x, s1)) - 1) = s1")
                              (("1"
                                (replaces -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide - 2)
                                (("2"
                                  (case "length(s1) = 0")
                                  (("1"
                                    (grind)
                                    (("1" (rewrite "empty_0") nil nil))
                                    nil)
                                   ("2"
                                    (decompose-equality 2)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide - 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (expand "occurrences" 2 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but -1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (hide-all-but (-1 3))
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide 1)
                            (("3"
                              (case "add_first(x, s1) ^ (1, length(add_first(x, s1)) - 1) = s1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (case "length(s1) = 0")
                                  (("1"
                                    (grind)
                                    (("1" (rewrite "empty_0") nil nil))
                                    nil)
                                   ("2"
                                    (decompose-equality 2)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 2 3)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (permutations const-decl "bool" sorting_seq nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort_fs nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (occ_in_insert formula-decl nil insertionsort_fs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty_0 formula-decl nil seq_extras structures)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (< const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (s1 skolem-const-decl "finseq[T]" insertionsort_fs nil)
    (x skolem-const-decl "T" insertionsort_fs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (fs_insertion_sort_is_permutations 0
  (fs_insertion_sort_is_permutations-1 nil 3702633808
   ("" (measure-induct+ "length(s)" ("s"))
    (("" (expand "fs_insertion_sort" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (lemma "fs_ins_and_add_in_perm_is_perm")
            (("2"
              (inst -1 "rest(x!1)" "fs_insertion_sort(rest(x!1))"
               "first(x!1)")
              (("1" (lemma "seq_first_rest")
                (("1" (inst -1 "x!1")
                  (("1" (prop) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (inst -1 "rest(x!1)")
                (("2" (rewrite "length_rest") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (x!1 skolem-const-decl "finseq[T]" insertionsort_fs nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (length_rest formula-decl nil seq_extras structures)
    (fs_ins_and_add_in_perm_is_perm formula-decl nil insertionsort_fs
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" insertionsort_fs nil)
    (permutations const-decl "bool" sorting_seq nil)
    (fs_insertion_sort def-decl "finseq[T]" insertionsort_fs nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (fs_insertion_sort_works 0
  (fs_insertion_sort_works-1 nil 3702635247
   ("" (skeep)
    (("" (rewrite "fs_insertionsort_is_sorted")
      (("" (rewrite "fs_insertion_sort_is_permutations") nil nil))
      nil))
    nil)
   ((fs_insertionsort_is_sorted formula-decl nil insertionsort_fs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil insertionsort_fs nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fs_insertion_sort_is_permutations formula-decl nil
     insertionsort_fs nil))
   shostak)))

