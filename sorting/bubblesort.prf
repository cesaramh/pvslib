(bubblesort
 (bubbling_TCC1 0
  (bubbling_TCC1-1 nil 3638806625
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubbling subtype "bubblesort.l" "(list_adt[bubblesort.T].cons?)")))
 (bubbling_TCC2 0
  (bubbling_TCC2-1 nil 3638806625
   ("" (skeep)
    (("" (typepred "n")
      (("" (grind)
        (("" (case "null?(l)")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bubbling subtype "list_adt[bubblesort.T].cdr(bubblesort.l)"
    "(list_adt[bubblesort.T].cons?)")))
 (bubbling_TCC3 0
  (bubbling_TCC3-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (case "null?(l!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(l!1))")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (T formal-type-decl nil bubblesort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil))
   nil
   (bubbling subtype "(number_fields.-)(bubblesort.n, 1)"
    "below[length[T](cons[T](car[T](l), cdr[T](cdr[T](l))))]")))
 (bubbling_TCC4 0
  (bubbling_TCC4-1 nil 3638806625 ("" (termination-tcc) nil nil)
   ((leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil bubblesort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (bubbling termination
    "bubblesort.bubbling(list_adt[bubblesort.T].cons(list_adt[bubblesort.T].car(bubblesort.l), list_adt[bubblesort.T].cdr(list_adt[bubblesort.T].cdr(bubblesort.l))), (number_fields.-)(bubblesort.n, 1))"
    "nil")))
 (bubbling_TCC5 0
  (bubbling_TCC5-1 nil 3638806625
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (split)
        (("1" (typepred "n")
          (("1" (expand "list2finseq") (("1" (grind) nil nil)) nil))
          nil)
         ("2" (grind)
          (("1" (hide -1)
            (("1" (typepred "n")
              (("1" (expand "list2finseq")
                (("1" (expand "length" -1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "n")
            (("2" (expand "list2finseq")
              (("2" (expand "length" -1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil))
   nil
   (bubbling subtype "(number_fields.-)(bubblesort.n, 1)"
    "below[length[T](cdr[T](l))]")))
 (bubbling_TCC6 0
  (bubbling_TCC6-1 nil 3638806625 ("" (termination-tcc) nil nil)
   ((leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil bubblesort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil))
   nil
   (bubbling termination
    "bubblesort.bubbling(list_adt[bubblesort.T].cdr(bubblesort.l), (number_fields.-)(bubblesort.n, 1))"
    "nil")))
 (bubbling_preserves_length 0
  (bubbling_preserves_length-1 nil 3638809301
   ("" (measure-induct "length(l)" ("l"))
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "n")
          (("" (expand "bubbling" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "length" 1 1)
                  (("1"
                    (case "length(x) = length(cons(car(x), cdr(cdr(x)))) + 1")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (inst -4 "cons(car(x), cdr(cdr(x)))")
                          (("1" (assert)
                            (("1" (inst -4 "n -1") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (with-tccs (grind)) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "length" 2 1)
                  (("2" (expand "length" 2 2)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide -3) (("1" (grind) nil nil))
                              nil)
                             ("2" (inst -2 "cdr(x)")
                              (("2"
                                (prop)
                                (("1" (inst -1 "n - 1") nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubbling_preserves_suffix_TCC1 0
  (bubbling_preserves_suffix_TCC1-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (rewrite "bubbling_preserves_length") nil nil)) nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubbling_preserves_suffix subtype "bubblesort.i"
    "below[length[T](l1)]")))
 (bubbling_preserves_suffix 0
  (bubbling_preserves_suffix-1 nil 3638806633
   ("" (measure-induct+ "length(l)" ("l"))
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand "bubbling" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "nth" 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (expand "nth" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (case "i = 1")
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2"
                              (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                              (("2"
                                (inst -2 "n - 1")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "i - 1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "nth" -1 2)
                                        (("1"
                                          (expand "nth" 3 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide -1 4)
                                      (("2"
                                        (typepred "i")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (grind)
                                              (("2"
                                                (expand "length" -1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (typepred "i" "n")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (grind)
                                              (("2"
                                                (expand "length")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (expand "nth" 2 2)
                      (("2" (inst? -1)
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (prop) (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (typepred "i")
                            (("2" (hide 3 2)
                              (("2"
                                (grind)
                                (("2"
                                  (expand "length" -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep :preds? t)
      (("2" (use "bubbling_preserves_length") (("2" (assert) nil nil))
        nil))
      nil)
     ("3" (skeep :preds? t)
      (("3" (use "bubbling_preserves_length") (("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (> const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_TCC1 0
  (bubblesort_aux_TCC1-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (lemma "bubbling_preserves_length")
      (("" (inst?)
        (("" (replace -1) (("" (hide -1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubblesort_aux subtype "(number_fields.-)(bubblesort.n, 1)"
    "below[length[T](bubbling(l, n))]")))
 (bubblesort_aux_TCC2 0
  (bubblesort_aux_TCC2-1 nil 3638806625 ("" (termination-tcc) nil nil)
   nil nil
   (bubblesort_aux termination
    "bubblesort.bubblesort_aux(bubblesort.bubbling(bubblesort.l, bubblesort.n), (number_fields.-)(bubblesort.n, 1))"
    "nil")))
 (bubblesort_aux_preserves_length 0
  (bubblesort_aux_preserves_length-1 nil 3639083378
   ("" (measure-induct+ "n" ("l" "n"))
    (("" (expand "bubblesort_aux" 1)
      (("" (lift-if)
        (("" (prop)
          (("" (lemma "bubbling_preserves_length")
            (("" (inst?)
              (("" (replace -1 2 rl)
                (("" (inst? -2)
                  (("1" (prop)
                    (("1" (hide -1 3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide -1 3) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preserves_length formula-decl nil bubblesort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_TCC1 0
  (bubblesort_TCC1-1 nil 3638806625
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (bubblesort subtype
    "(number_fields.-)(list_props[bubblesort.T].length(bubblesort.l), 1)"
    "below[length[T](l)]")))
 (bubbling_preseves_contents 0
  (bubbling_preseves_contents-1 nil 3639002259
   ("" (measure-induct+ "n" ("l" "n"))
    (("" (expand "bubbling" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -) (("1" (grind) nil nil)) nil)
           ("2" (lemma "permutations_is_transitive")
            (("2"
              (inst -1 "x!1"
               "cons(car(cdr(x!1)), cons(car(x!1), cdr(cdr(x!1))))"
               "cons(car(cdr(x!1)),
                                    bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1))")
              (("1" (prop)
                (("1" (hide 2)
                  (("1" (lemma "cons_elim_is_permutation")
                    (("1" (inst -1 "x!1" "car(cdr(x!1))")
                      (("1" (prop)
                        (("1" (expand "elim_list" -1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (expand "elim_list" -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (case
                                       "cons(car(cdr(x!1)), cdr(cdr(x!1))) = cdr(x!1)")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "x!2")
                                        (("2"
                                          (with-tccs (grind))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (grind)
                            (("2" (expand "member")
                              (("2"
                                (grind)
                                (("1"
                                  (typepred "x!2")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "member")
                                  (("2"
                                    (grind)
                                    (("2"
                                      (typepred "x!2")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cons_of_perm_is_permutation")
                  (("2" (hide 2)
                    (("2"
                      (inst -1 "cons(car(x!1), cdr(cdr(x!1)))"
                       "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)"
                       "car(cdr(x!1))")
                      (("1" (prop)
                        (("1" (hide 2)
                          (("1"
                            (inst -2 "cons(car(x!1), cdr(cdr(x!1)))"
                             "x!2 - 1")
                            (("1" (prop)
                              (("1"
                                (hide 2 -1)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide -1 2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide - 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide - 2) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("3" (hide 1)
            (("3" (case "x!1 = cons(car(x!1), cdr(x!1))")
              (("1" (lemma "cons_of_perm_is_permutation")
                (("1"
                  (inst -1 "cdr(x!1)" "bubbling(cdr(x!1), x!2 - 1)"
                   "car(x!1)")
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (hide 2 -1)
                      (("2" (inst? -1)
                        (("1" (assert) nil nil)
                         ("2" (hide 2) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 3)) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (typepred "x!2")
                  (("2" (case "null?(x!1)")
                    (("1" (grind) nil nil)
                     ("2" (decompose-equality 2) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_of_perm_is_permutation formula-decl nil sorting_aux nil)
    (member def-decl "bool" list_props nil)
    (elim_list def-decl "list[T]" sorting_aux nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons_elim_is_permutation formula-decl nil sorting_aux nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubbling_preserves_prefix_TCC1 0
  (bubbling_preserves_prefix_TCC1-1 nil 3639146808
   ("" (subtype-tcc) nil nil) nil nil
   (bubbling_preserves_prefix subtype "bubblesort.i"
    "below[length[T](l)]")))
 (bubbling_preserves_prefix_TCC2 0
  (bubbling_preserves_prefix_TCC2-1 nil 3639146808
   ("" (subtype-tcc)
    (("" (rewrite "bubbling_preserves_length") (("" (grind) nil nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (bubbling_preserves_prefix subtype "bubblesort.j"
    "below[length[T](bubbling(l, n))]")))
 (bubbling_preserves_prefix 0
  (bubbling_preserves_prefix-4 "" 3804609245
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (typepred "x!2")
        (("1" (case "x!2 = 0")
          (("1" (hide -3)
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (case "i=0")
            (("1" (replaces -1)
              (("1" (expand "nth" 2 1)
                (("1" (expand "bubbling" 2)
                  (("1" (assert)
                    (("1" (case "NOT  gt(car(x!1), car(cdr(x!1)))")
                      (("1" (assert)
                        (("1" (inst 3 "0")
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -3)
                          (("1" (inst -3 "0")
                            (("1" (prop)
                              (("1"
                                (expand "nth" -1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1)
                            (("2" (grind)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -2 3)
                        (("3" (grind)
                          (("3" (expand "length" -1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide -2 3) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 3 1)
              (("2" (assert)
                (("2" (expand "bubbling" 3)
                  (("2" (case "NOT  gt(car(x!1), car(cdr(x!1)))")
                    (("1" (assert)
                      (("1" (inst? -2)
                        (("1" (inst -2 "i -1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst 4 " j + 1")
                                (("1"
                                  (expand "nth" 4 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 5 2)
                          (("2" (expand "length" -1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "i = 1")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (expand "nth" 3 1)
                              (("1"
                                (inst 3 "0")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -3)
                          (("1" (inst -3 "i - 1")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "nth" -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 4 1)
                                      (("1"
                                        (inst 4 " j + 1")
                                        (("1"
                                          (expand "nth" 4 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 5)
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -2 4)
                      (("3" (expand "length" -1)
                        (("3" (grind) nil nil)) nil))
                      nil)
                     ("4" (hide -2 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (rewrite "bubbling_preserves_length")
        (("2" (skeep)
          (("2" (typepred "j" "y!1" "y!2" "x!2")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep :preds? t)
      (("3" (use "bubbling_preserves_length") (("3" (assert) nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubbling_preserves_length")
          (("4" (typepred "j" "x!1`1")
            (("4" (typepred "j" "x!1`2") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "j")
          (("5" (use "bubbling_preserves_length")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (typepred "i!1" "y!1`1") (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (skeep) (("7" (typepred "i") (("7" (assert) nil nil)) nil))
      nil)
     ("8" (hide -2 3)
      (("8" (skeep)
        (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep) (("9" (typepred "i!1") (("9" (assert) nil nil)) nil))
      nil)
     ("10" (skeep)
      (("10" (rewrite "bubbling_preserves_length")
        (("10" (typepred "j" "x!1`2" "y!1`1" "y!1`2")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (typepred "i") (("11" (assert) nil nil)) nil)) nil)
     ("12" (hide 2)
      (("12" (rewrite "bubbling_preserves_length")
        (("12" (typepred "j!1") (("12" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (bubbling_preserves_prefix-3 nil 3797766835
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (typepred "x!2")
        (("1" (case "x!2 = 0")
          (("1" (hide -3)
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (case "i=0")
            (("1" (replaces -1)
              (("1" (expand "nth" 2 1)
                (("1" (expand "bubbling" 2)
                  (("1" (assert)
                    (("1" (case "NOT  gt(car(x!1), car(cdr(x!1)))")
                      (("1" (assert)
                        (("1" (inst 3 0)
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -3)
                          (("1" (inst -3 0)
                            (("1" (prop)
                              (("1"
                                (expand "nth" -1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1)
                            (("2" (grind)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -2 3)
                        (("3" (grind)
                          (("3" (expand "length" -1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide -2 3) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 3 1)
              (("2" (assert)
                (("2" (expand "bubbling" 3)
                  (("2" (case "NOT  gt(car(x!1), car(cdr(x!1)))")
                    (("1" (assert)
                      (("1" (inst? -2)
                        (("1" (inst -2 "i -1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst 4 " j + 1")
                                (("1"
                                  (expand "nth" 4 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 5 2)
                          (("2" (expand "length" -1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "i = 1")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (expand "nth" 3 1)
                              (("1"
                                (inst 3 0)
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -3)
                          (("1" (inst -3 "i - 1")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "nth" -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 4 1)
                                      (("1"
                                        (inst 4 " j + 1")
                                        (("1"
                                          (expand "nth" 4 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 5)
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -2 4)
                      (("3" (expand "length" -1)
                        (("3" (grind) nil nil)) nil))
                      nil)
                     ("4" (hide -2 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (rewrite "bubbling_preserves_length")
        (("2" (skeep)
          (("2" (typepred "j" "y!1" "y!2" "x!2")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep :preds? t)
      (("3" (use "bubbling_preserves_length") (("3" (assert) nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubbling_preserves_length")
          (("4" (typepred "j1" "x!1`1")
            (("4" (typepred "j1" "x!1`2") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "j")
          (("5" (use "bubbling_preserves_length")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (typepred "i!1" "y!1`1") (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (skeep) (("7" (typepred "i1") (("7" (assert) nil nil)) nil))
      nil)
     ("8" (hide -2 3)
      (("8" (skeep)
        (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep) (("9" (typepred "i!1") (("9" (assert) nil nil)) nil))
      nil)
     ("10" (skeep)
      (("10" (rewrite "bubbling_preserves_length")
        (("10" (typepred "j" "x!1`2" "y!1`1" "y!1`2")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (typepred "i") (("11" (assert) nil nil)) nil)) nil)
     ("12" (hide 2)
      (("12" (rewrite "bubbling_preserves_length")
        (("12" (typepred "j!1") (("12" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (total_preorder? const-decl "bool" total_preorder nil))
   nil)
  (bubbling_preserves_prefix-2 nil 3654272128
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (typepred "x!2")
        (("1" (case "x!2 = 0")
          (("1" (hide -3)
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (case "i=0")
            (("1" (replaces -1)
              (("1" (expand "nth" 2 1)
                (("1" (expand "bubbling" 2)
                  (("1" (assert)
                    (("1" (case "NOT  car(x!1) > car(cdr(x!1))")
                      (("1" (assert)
                        (("1" (inst 3 0)
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -3)
                          (("1" (inst -3 0)
                            (("1" (prop)
                              (("1"
                                (expand "nth" -1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1)
                            (("2" (grind)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -2 3)
                        (("3" (grind)
                          (("3" (expand "length" -1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide -2 3) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 3 1)
              (("2" (assert)
                (("2" (expand "bubbling" 3)
                  (("2" (case "NOT  car(x!1) > car(cdr(x!1))")
                    (("1" (assert)
                      (("1" (inst? -2)
                        (("1" (inst -2 "i -1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst 4 " j + 1")
                                (("1"
                                  (expand "nth" 4 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 5 2)
                          (("2" (expand "length" -1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "i = 1")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (expand "nth" 3 1)
                              (("1"
                                (inst 3 0)
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -3)
                          (("1" (inst -3 "i - 1")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "nth" -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 4 1)
                                      (("1"
                                        (inst 4 " j + 1")
                                        (("1"
                                          (expand "nth" 4 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 5)
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -2 4)
                      (("3" (expand "length" -1)
                        (("3" (grind) nil nil)) nil))
                      nil)
                     ("4" (hide -2 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (rewrite "bubbling_preserves_length")
        (("2" (skeep)
          (("2" (typepred "j" "y!1" "y!2" "x!2")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep :preds? t)
      (("3" (use "bubbling_preserves_length") (("3" (assert) nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubbling_preserves_length")
          (("4" (typepred "j1" "x!1`1")
            (("4" (typepred "j1" "x!1`2") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "j")
          (("5" (use "bubbling_preserves_length")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (typepred "i!1" "y!1`1") (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (skeep) (("7" (typepred "i1") (("7" (assert) nil nil)) nil))
      nil)
     ("8" (hide -2 3)
      (("8" (skeep)
        (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep) (("9" (typepred "i!1") (("9" (assert) nil nil)) nil))
      nil)
     ("10" (skeep)
      (("10" (rewrite "bubbling_preserves_length")
        (("10" (typepred "j" "x!1`2" "y!1`1" "y!1`2")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (typepred "i") (("11" (assert) nil nil)) nil)) nil)
     ("12" (hide 2)
      (("12" (rewrite "bubbling_preserves_length")
        (("12" (typepred "j!1") (("12" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   nil)
  (bubbling_preserves_prefix-1 nil 3639175728
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (typepred "x!2")
        (("1" (case "x!2 = 0")
          (("1" (hide -3)
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (case "i=0")
            (("1" (replaces -1)
              (("1" (expand "nth" 2 1)
                (("1" (expand "bubbling" 2)
                  (("1" (assert)
                    (("1" (case "NOT  car(x!1) > car(cdr(x!1))")
                      (("1" (assert)
                        (("1" (inst 3 0)
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -3)
                          (("1" (inst -3 0)
                            (("1" (prop)
                              (("1"
                                (expand "nth" -1 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1)
                            (("2" (grind)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -3 3)
                        (("3" (grind)
                          (("3" (expand "length" -1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide -2 3) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 3 1)
              (("2" (assert)
                (("2" (expand "bubbling" 3)
                  (("2" (case "NOT  car(x!1) > car(cdr(x!1))")
                    (("1" (assert)
                      (("1" (inst? -2)
                        (("1" (inst -2 "i -1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (inst 4 " j + 1")
                                (("1"
                                  (expand "nth" 4 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 5 2)
                          (("2" (expand "list2finseq")
                            (("2" (expand "length" -1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "i = 1")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (expand "nth" 3 1)
                              (("1"
                                (inst 3 0)
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -3)
                          (("1" (inst -3 "i - 1")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "nth" -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 4 1)
                                      (("1"
                                        (inst 4 " j + 1")
                                        (("1"
                                          (expand "nth" 4 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 5)
                            (("2" (expand "list2finseq")
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (expand "length" -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -2 4)
                      (("3" (expand "list2finseq")
                        (("3" (expand "length" -1)
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (hide -2 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -2 2)
      (("2" (rewrite "bubbling_preserves_length")
        (("2" (skeep)
          (("2" (typepred "j" "y!1" "y!2" "x!2")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide -2 2)
      (("3" (skeep)
        (("3" (typepred "i!1" "y!1" "y!2" "x!2")
          (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubbling_preserves_length")
          (("4" (typepred "j" "y!1" "y!2" "x!2")
            (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "i" "y!1" "y!2" "x!2") (("5" (grind) nil nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (rewrite "bubbling_preserves_length")
          (("6" (typepred "j1" "x!1`1")
            (("6" (typepred "x!1`2") (("6" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide -2 3)
      (("7" (rewrite "bubbling_preserves_length")
        (("7" (skeep)
          (("7" (typepred "j" "y!1`1" "y!1`2" "x!1`2")
            (("7" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (hide -2 3)
      (("8" (skeep)
        (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (typepred "i1" "x!1`1")
          (("9" (typepred "x!1`2") (("9" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("10" (hide -2 3)
      (("10" (skeep)
        (("10" (rewrite "bubbling_preserves_length")
          (("10" (typepred "j" "x!1`2" "y!1`1" "y!1`2")
            (("10" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("11" (hide -2 3)
      (("11" (skeep)
        (("11" (typepred "i!1" "x!1`2" "y!1`1" "y!1`2")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (skeep)
        (("12" (rewrite "bubbling_preserves_length")
          (("12" (typepred "j" "x!1`2" "y!1`1" "y!1`2")
            (("12" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (skeep)
        (("13" (typepred "i" "x!1`2" "y!1`1" "y!1`2")
          (("13" (grind) nil nil)) nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (rewrite "bubbling_preserves_length")
        (("14" (typepred "j!1" "l!1")
          (("14" (typepred "n!1") (("14" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (typepred "i!1" "l!1")
        (("15" (typepred "n!1") (("15" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (bubbling_bubbles_TCC1 0
  (bubbling_bubbles_TCC1-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (rewrite "bubbling_preserves_length") (("" (grind) nil nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubbling_bubbles subtype "bubblesort.i" "below[length[T](l1)]")))
 (bubbling_bubbles_TCC2 0
  (bubbling_bubbles_TCC2-1 nil 3638806625
   ("" (subtype-tcc)
    (("" (rewrite "bubbling_preserves_length") nil nil)) nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubbling_bubbles subtype "bubblesort.n" "below[length[T](l1)]")))
 (bubbling_bubbles 0
  (bubbling_bubbles-5 nil 3797767055
   ("" (auto-rewrite "bubbling_preserves_length")
    (("" (measure-induct+ "n" ("l" "n"))
      (("1" (case "length(x!1) < 2")
        (("1" (hide -2)
          (("1" (skeep)
            (("1" (grind)
              (("1" (typepred "leq") (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "bubbling" 2 1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind)
                  (("1" (typepred "leq") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "nth" 1 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "bubbling_preserves_prefix")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 "0")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (inst? -5)
                                            (("1"
                                              (replace -1 -5 rl)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (name-replace
                                                   "bb"
                                                   "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)")
                                                  (("1"
                                                    (typepred "leq")
                                                    (("1"
                                                      (expand
                                                       "total_preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "preorder?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "gt")
                                                              (("1"
                                                                (expand
                                                                 "converse")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (expand
                                                                     "lt")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)"
                                                                         "nth(bb, x!2 - 1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "dichotomous?")
                                                                            (("1"
                                                                              (inst?
                                                                               :where
                                                                               (1
                                                                                2))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "nth" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "bubbling_preserves_prefix")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 "0")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "nth" -1 1)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand "gt")
                                                    (("1"
                                                      (expand
                                                       "converse")
                                                      (("1"
                                                        (expand "lt")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "leq")
                                                            (("1"
                                                              (expand
                                                               "total_preorder?")
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "dichotomous?")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "car(x!1)"
                                                                             "car(cdr(x!1))"
                                                                             " nth(bubbling(cdr(x!1), x!2 - 1), x!2 - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "y!2") (("2" (grind) nil nil)) nil)
       ("3" (skeep) (("3" (assert) nil nil)) nil)
       ("4" (skeep)
        (("4" (typepred "x!1`2") (("4" (propax) nil nil)) nil)) nil)
       ("5" (typepred "y!1`2") (("5" (propax) nil nil)) nil)
       ("6" (typepred "i!1") (("6" (assert) nil nil)) nil)
       ("7" (skeep) (("7" (assert) nil nil)) nil)
       ("8" (hide -3 2 3)
        (("8" (typepred "y!1`2" "i!1" "x!1`2") (("8" (propax) nil nil))
          nil))
        nil)
       ("9" (typepred "i!1") (("9" (assert) nil nil)) nil)
       ("10" (skeep) (("10" (assert) nil nil)) nil)
       ("11" (skeep) (("11" (assert) nil nil)) nil)
       ("12" (skeep)
        (("12" (typepred "n!1")
          (("12" (replaces -2)
            (("12" (use "bubbling_preserves_length")
              (("12" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("13" (skeep)
        (("13" (typepred "n!1")
          (("13" (replaces -2)
            (("13" (use "bubbling_preserves_length")
              (("13" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubbling_preserves_length formula-decl nil bubblesort nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (nth def-decl "T" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (i skolem-const-decl "nat" bubblesort nil)
    (bubbling_preserves_prefix formula-decl nil bubblesort nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (bubbling_bubbles-4 nil 3797766890
   ("" (auto-rewrite "bubbling_preserves_length")
    (("" (measure-induct+ "n" ("l" "n"))
      (("1" (case "length(x!1) < 2")
        (("1" (hide -2)
          (("1" (skeep)
            (("1" (typepred "x!2") (("1" (use-dichotomy) nil)))))))
         ("2" (expand "bubbling" 2 1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (use-dichotomy) (("1" (grind) nil)))
                 ("2" (expand "nth" 1 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "bubbling_preserves_prefix")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 0)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (inst? -5)
                                            (("1"
                                              (replace -1 -5 rl)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (name-replace
                                                   "bb"
                                                   "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)")
                                                  (("1"
                                                    (typepred "leq")
                                                    (("1"
                                                      (expand
                                                       "total_preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "preorder?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (rewrite
                                                               "gt_def")
                                                              (("1"
                                                                (expand
                                                                 "converse")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (use
                                                                     "lt_def")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)"
                                                                         "nth(bb, x!2 - 1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "dichotomous?")
                                                                            (("1"
                                                                              (inst?
                                                                               :where
                                                                               (1
                                                                                2))
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))))))))))))))))))))))))))
                                                 ("2"
                                                  (typepred "j")
                                                  (("2" (assert) nil)))
                                                 ("3"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil)
                                       ("2"
                                        (assert)
                                        nil)))))))))))))))))))))))
                 ("3" (expand "nth" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "bubbling_preserves_prefix")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 0)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "nth" -1 1)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite "gt_def")
                                                    (("1"
                                                      (expand
                                                       "converse")
                                                      (("1"
                                                        (use "lt_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "leq")
                                                            (("1"
                                                              (expand
                                                               "total_preorder?")
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "dichotomous?")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "car(x!1)"
                                                                             "car(cdr(x!1))"
                                                                             " nth(bubbling(cdr(x!1), x!2 - 1), x!2 - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))))))))
                                                   ("2" (assert) nil)
                                                   ("3"
                                                    (assert)
                                                    nil)))))))))))
                                         ("2" (assert) nil)))
                                       ("2"
                                        (assert)
                                        nil)))))))))))))))))
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil)
                                       ("2" (assert) nil)))
                                     ("2" (assert) nil)
                                     ("3"
                                      (assert)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (typepred "y!2") (("2" (grind) nil)))
       ("3" (skeep) (("3" (assert) nil)))
       ("4" (skeep) (("4" (typepred "x!1`2") (("4" (propax) nil)))))
       ("5" (typepred "y!1`2") (("5" (propax) nil)))
       ("6" (typepred "i!1") (("6" (assert) nil)))
       ("7" (skeep) (("7" (assert) nil)))
       ("8" (hide -3 2 3)
        (("8" (typepred "y!1`2" "i!1" "x!1`2") (("8" (propax) nil)))))
       ("9" (typepred "i!1") (("9" (assert) nil)))
       ("10" (skeep) (("10" (assert) nil)))
       ("11" (skeep) (("11" (assert) nil)))
       ("12" (skeep)
        (("12" (typepred "n!1")
          (("12" (replaces -2)
            (("12" (use "bubbling_preserves_length")
              (("12" (assert) nil)))))))))
       ("13" (skeep)
        (("13" (typepred "n!1")
          (("13" (replaces -2)
            (("13" (use "bubbling_preserves_length")
              (("13" (assert) nil))))))))))))
    nil)
   nil nil)
  (bubbling_bubbles-3 nil 3797696350
   ("" (auto-rewrite "bubbling_preserves_length")
    (("" (measure-induct+ "n" ("l" "n"))
      (("1" (case "length(x!1) < 2")
        (("1" (hide -2)
          (("1" (skeep)
            (("1" (typepred "x!2") (("1" (use-dichotomy) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "bubbling" 2 1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (use-dichotomy) (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth" 1 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "bubbling_preserves_prefix")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 0)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (inst? -5)
                                            (("1"
                                              (replace -1 -5 rl)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (name-replace
                                                   "bb"
                                                   "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)")
                                                  (("1"
                                                    (typepred "<=")
                                                    (("1"
                                                      (expand
                                                       "total_preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "preorder?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (rewrite
                                                               "gt_def")
                                                              (("1"
                                                                (expand
                                                                 "converse")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (use
                                                                     "lt_def")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)"
                                                                         "nth(bb, x!2 - 1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "dichotomous?")
                                                                            (("1"
                                                                              (inst?
                                                                               :where
                                                                               (1
                                                                                2))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "nth" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "bubbling_preserves_prefix")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 0)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "nth" -1 1)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite "gt_def")
                                                    (("1"
                                                      (expand
                                                       "converse")
                                                      (("1"
                                                        (use "lt_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "<=")
                                                            (("1"
                                                              (expand
                                                               "total_preorder?")
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "dichotomous?")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "car(x!1)"
                                                                             "car(cdr(x!1))"
                                                                             " nth(bubbling(cdr(x!1), x!2 - 1), x!2 - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "y!2") (("2" (grind) nil nil)) nil)
       ("3" (skeep) (("3" (assert) nil nil)) nil)
       ("4" (skeep)
        (("4" (typepred "x!1`2") (("4" (propax) nil nil)) nil)) nil)
       ("5" (typepred "y!1`2") (("5" (propax) nil nil)) nil)
       ("6" (typepred "i!1") (("6" (assert) nil nil)) nil)
       ("7" (skeep) (("7" (assert) nil nil)) nil)
       ("8" (hide -3 2 3)
        (("8" (typepred "y!1`2" "i!1" "x!1`2") (("8" (propax) nil nil))
          nil))
        nil)
       ("9" (typepred "i!1") (("9" (assert) nil nil)) nil)
       ("10" (skeep) (("10" (assert) nil nil)) nil)
       ("11" (skeep) (("11" (assert) nil nil)) nil)
       ("12" (skeep)
        (("12" (typepred "n!1")
          (("12" (replaces -2)
            (("12" (use "bubbling_preserves_length")
              (("12" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("13" (skeep)
        (("13" (typepred "n!1")
          (("13" (replaces -2)
            (("13" (use "bubbling_preserves_length")
              (("13" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (nth def-decl "T" list_props nil))
   nil)
  (bubbling_bubbles-2 nil 3731694240
   ("" (auto-rewrite "bubbling_preserves_length")
    (("" (measure-induct+ "n" ("l" "n"))
      (("1" (case "length(x!1) < 2")
        (("1" (hide -2)
          (("1" (skeep)
            (("1" (typepred "x!2") (("1" (use-dichotomy) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "bubbling" 2 1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (use-dichotomy) (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth" 1 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "bubbling_preserves_prefix")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 0)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (inst? -5)
                                            (("1"
                                              (replace -1 -5 rl)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (name-replace
                                                   "bb"
                                                   "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)")
                                                  (("1"
                                                    (typepred "<=")
                                                    (("1"
                                                      (expand
                                                       "total_preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "preorder?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               ">")
                                                              (("1"
                                                                (expand
                                                                 "converse")
                                                                (("1"
                                                                  (expand
                                                                   "transitive?")
                                                                  (("1"
                                                                    (expand
                                                                     "<")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "car(cdr(x!1))"
                                                                       "car(x!1)"
                                                                       "nth(bb, x!2 - 1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "dichotomous?")
                                                                          (("1"
                                                                            (inst?
                                                                             :where
                                                                             (1
                                                                              2))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "nth" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "bubbling_preserves_prefix")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 0)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "nth" -1 1)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand ">")
                                                    (("1"
                                                      (expand
                                                       "converse")
                                                      (("1"
                                                        (expand "<")
                                                        (("1"
                                                          (typepred
                                                           "<=")
                                                          (("1"
                                                            (expand
                                                             "total_preorder?")
                                                            (("1"
                                                              (expand
                                                               "preorder?")
                                                              (("1"
                                                                (expand
                                                                 "transitive?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "car(cdr(x!1))"
                                                                       "car(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "car(x!1)"
                                                                           "car(cdr(x!1))"
                                                                           " nth(bubbling(cdr(x!1), x!2 - 1), x!2 - 1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "y!2") (("2" (grind) nil nil)) nil)
       ("3" (skeep) (("3" (assert) nil nil)) nil)
       ("4" (skeep)
        (("4" (typepred "x!1`2") (("4" (propax) nil nil)) nil)) nil)
       ("5" (typepred "y!1`2") (("5" (propax) nil nil)) nil)
       ("6" (typepred "i!1") (("6" (assert) nil nil)) nil)
       ("7" (skeep) (("7" (assert) nil nil)) nil)
       ("8" (hide -3 2 3)
        (("8" (typepred "y!1`2" "i!1" "x!1`2") (("8" (propax) nil nil))
          nil))
        nil)
       ("9" (typepred "i!1") (("9" (assert) nil nil)) nil)
       ("10" (skeep) (("10" (assert) nil nil)) nil)
       ("11" (skeep) (("11" (assert) nil nil)) nil)
       ("12" (skeep)
        (("12" (typepred "n!1")
          (("12" (replaces -2)
            (("12" (use "bubbling_preserves_length")
              (("12" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("13" (skeep)
        (("13" (typepred "n!1")
          (("13" (replaces -2)
            (("13" (use "bubbling_preserves_length")
              (("13" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (nth def-decl "T" list_props nil))
   nil)
  (bubbling_bubbles-1 nil 3639078119
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (case "length(x!1) < 2")
      (("1" (hide -2)
        (("1" (skeep)
          (("1" (typepred "x!2")
            (("1" (typepred "<=") (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (case "x!2 = 0")
        (("1" (replace -1)
          (("1" (skeep)
            (("1" (hide -2)
              (("1" (typepred "<=") (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (expand "bubbling" 3 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "nth" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "bubbling_preserves_prefix")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 0)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (inst? -5)
                                            (("1"
                                              (replace -1 -5 rl)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (name-replace
                                                   "bb"
                                                   "bubbling(cons(car(x!1), cdr(cdr(x!1))), x!2 - 1)")
                                                  (("1"
                                                    (typepred "<=")
                                                    (("1"
                                                      (expand
                                                       "total_order?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "partial_order?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "preorder?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   ">")
                                                                  (("1"
                                                                    (expand
                                                                     "converse")
                                                                    (("1"
                                                                      (expand
                                                                       "transitive?")
                                                                      (("1"
                                                                        (expand
                                                                         "<")
                                                                        (("1"
                                                                          (expand
                                                                           "difference")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "car(cdr(x!1))"
                                                                                 "car(x!1)"
                                                                                 "nth(bb, x!2 - 1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -3)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "bubbling" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "nth" 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "bubbling_preserves_prefix")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 0)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "nth" -1 1)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand ">")
                                                    (("1"
                                                      (expand
                                                       "converse")
                                                      (("1"
                                                        (expand "<")
                                                        (("1"
                                                          (expand
                                                           "difference")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (typepred
                                                                 "<=")
                                                                (("1"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("1"
                                                                    (expand
                                                                     "partial_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "preorder?")
                                                                      (("1"
                                                                        (expand
                                                                         "transitive?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "dichotomous?")
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "car(cdr(x!1))"
                                                                               "car(x!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "car(x!1)"
                                                                                   "car(cdr(x!1))"
                                                                                   " nth(bubbling(cdr(x!1), x!2 - 1), x!2 - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "bubbling" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "nth" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "bubbling_preserves_length")
      (("2" (typepred "y!2") (("2" (grind) nil nil)) nil)) nil)
     ("3" (rewrite "bubbling_preserves_length")
      (("3" (typepred "i!1" "y!2") (("3" (grind) nil nil)) nil)) nil)
     ("4" (skeep)
      (("4" (rewrite "bubbling_preserves_length")
        (("4" (typepred "y!2" "i" "x!2")
          (("4" (hide 2) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (rewrite "bubbling_preserves_length")
          (("5" (typepred "y!2" "i" "x!2") (("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (skeep)
        (("6" (rewrite "bubbling_preserves_length")
          (("6" (typepred "x!1`2" i1) (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (hide -3 2 3)
      (("7" (rewrite "bubbling_preserves_length")
        (("7" (typepred "y!1`2" "i!1" "x!1`2") (("7" (grind) nil nil))
          nil))
        nil))
      nil)
     ("8" (hide -3 2 3)
      (("8" (rewrite "bubbling_preserves_length")
        (("8" (typepred "y!1`2" "i!1" "x!1`2") (("8" (grind) nil nil))
          nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (rewrite "bubbling_preserves_length")
          (("9" (typepred "i1" "x!1`2") (("9" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("10" (hide -3 2 3)
      (("10" (rewrite "bubbling_preserves_length")
        (("10" (typepred "y!1`2" "i!1" "x!1`2")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (hide -3 2 3)
      (("11" (rewrite "bubbling_preserves_length")
        (("11" (typepred "y!1`2" "i!1" "x!1`2")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (skeep)
        (("12" (rewrite "bubbling_preserves_length")
          (("12" (typepred "y!1`2" "i" "x!1`2")
            (("12" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (skeep)
        (("13" (rewrite "bubbling_preserves_length")
          (("13" (typepred "y!1`2" "i" "x!1`2")
            (("13" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (skeep)
        (("14" (typepred "n!1")
          (("14" (replace -2)
            (("14" (rewrite "bubbling_preserves_length")
              (("14" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (skeep)
        (("15" (replace -1 1)
          (("15" (rewrite "bubbling_preserves_length")
            (("15" (typepred "i" "n!1") (("15" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bubblesort_aux_preserves_suffix_TCC1 0
  (bubblesort_aux_preserves_suffix_TCC1-1 nil 3639014491
   ("" (subtype-tcc)
    (("" (rewrite "bubblesort_aux_preserves_length") nil nil)) nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubblesort_aux_preserves_suffix subtype "bubblesort.i"
    "below[length[T](l1)]")))
 (bubblesort_aux_preserves_suffix 0
  (bubblesort_aux_preserves_suffix-1 nil 3639077936
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (expand "bubblesort_aux" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (inst -1 "bubbling(x!1, x!2)" "x!2 - 1")
              (("1" (inst?)
                (("1" (prop)
                  (("1" (lemma "bubbling_preserves_suffix")
                    (("1" (inst -1 "x!1" "x!2")
                      (("1" (assert)
                        (("1" (inst? -1)
                          (("1" (prop) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (lemma "bubbling_preserves_length")
                    (("2" (inst?)
                      (("2" (typepred "i" "x!1" "x!2")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "i!1")
      (("2" (use "bubblesort_aux_preserves_length")
        (("2" (assert) nil nil)) nil))
      nil)
     ("3" (skeep :preds? t)
      (("3" (use "bubblesort_aux_preserves_length")
        (("3" (assert) nil nil)) nil))
      nil)
     ("4" (skeep :preds? t)
      (("4" (use "bubblesort_aux_preserves_length")
        (("4" (assert) nil nil)) nil))
      nil)
     ("5" (typepred "y!1`2")
      (("5" (use "bubblesort_aux_preserves_length")
        (("5" (assert) nil nil)) nil))
      nil)
     ("6" (skeep :preds? t)
      (("6" (use "bubblesort_aux_preserves_length")
        (("6" (assert) nil nil)) nil))
      nil)
     ("7" (skeep :preds? t)
      (("7" (replaces -2)
        (("7" (use "bubblesort_aux_preserves_length")
          (("7" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bubbling_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preserves_suffix formula-decl nil bubblesort nil)
    (i skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (> const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_is_permutation 0
  (bubblesort_aux_is_permutation-1 nil 3639009901
   ("" (measure-induct+ "n" ("l" "n"))
    (("" (expand "bubblesort_aux" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide -) (("1" (grind) nil nil)) nil)
           ("2" (lemma "permutations_is_transitive")
            (("2"
              (inst -1 "x!1" "bubbling(x!1, x!2)"
               "bubblesort_aux(bubbling(x!1, x!2), x!2 - 1)")
              (("1" (prop)
                (("1" (rewrite "bubbling_preseves_contents") nil nil)
                 ("2" (inst? -1)
                  (("1" (prop) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling_preseves_contents formula-decl nil bubblesort nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_preserves_prefix_TCC1 0
  (bubblesort_aux_preserves_prefix_TCC1-1 nil 3639079535
   ("" (subtype-tcc)
    (("" (rewrite "bubblesort_aux_preserves_length")
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubblesort_aux_preserves_prefix subtype "bubblesort.i"
    "below[length[T](l1)]")))
 (bubblesort_aux_preserves_prefix_TCC2 0
  (bubblesort_aux_preserves_prefix_TCC2-1 nil 3639079535
   ("" (subtype-tcc) nil nil) nil nil
   (bubblesort_aux_preserves_prefix subtype "bubblesort.j"
    "below[length[T](l)]")))
 (bubblesort_aux_preserves_prefix 0
  (bubblesort_aux_preserves_prefix-1 nil 3639209466
   ("" (skeep)
    (("" (assert)
      (("" (skeep)
        (("" (lemma "bubblesort_aux_preserves_suffix")
          (("" (inst? -1)
            (("" (assert)
              (("" (lemma "permutations_of_app_pref")
                ((""
                  (inst -1 "prefix(l,n+1)"
                   "prefix(bubblesort_aux(l, n), n+1)" "suffix(l,n+1)"
                   "suffix(bubblesort_aux(l, n), n+1)")
                  (("1" (prop)
                    (("1" (rewrite "permutations_is_commutative")
                      (("1" (lemma "permutations_preserve_contents")
                        (("1" (inst?)
                          (("1" (inst -1 "i")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "j")
                                  (("1"
                                    (lemma "contents_prefix")
                                    (("1"
                                      (copy -1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -2 "l" "1 + n" "j")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (typepred "j")
                                            (("2"
                                              (rewrite "length_prefix")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2"
                                      (rewrite "length_prefix")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_prefix")
                              (("2"
                                (typepred "i" "n")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "permutations_is_ext_reflexive")
                      (("2" (inst? -1)
                        (("1" (prop)
                          (("1" (skeep)
                            (("1" (lemma "contents_suffix")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "contents_suffix")
                                      (("1"
                                        (inst
                                         -1
                                         "bubblesort_aux(l, n)"
                                         "n + 1"
                                         "i!1")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i!1" "n")
                                                (("2"
                                                  (hide 2 3 4)
                                                  (("2"
                                                    (lemma
                                                     "length_suffix")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (rewrite
                                             "bubblesort_aux_preserves_length")
                                            (("2"
                                              (typepred "i!1" "l" "n")
                                              (("2"
                                                (rewrite
                                                 "length_suffix")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (typepred "i!1" "l" "n")
                                      (("2"
                                        (rewrite "length_suffix")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2"
                            (lemma "bubblesort_aux_preserves_length")
                            (("2" (inst?)
                              (("2"
                                (lemma "length_suffix")
                                (("2"
                                  (copy -1)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "app_prefix_suffix")
                      (("3" (copy -1)
                        (("3" (inst? -1)
                          (("3" (replace -1 1 rl)
                            (("3"
                              (inst -2 "bubblesort_aux(l, n)" "n +1")
                              (("3"
                                (replace -2 1 rl)
                                (("3"
                                  (rewrite
                                   "bubblesort_aux_is_permutation")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "list2finseq")
                      (("2" (rewrite "bubblesort_aux_preserves_length")
                        (("2" (typepred "n") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort_aux_preserves_suffix formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (n skolem-const-decl "below[length(l)]" bubblesort nil)
    (l skolem-const-decl "list[T]" bubblesort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (permutations_is_ext_reflexive formula-decl nil sorting_aux nil)
    (TRUE const-decl "bool" booleans nil)
    (contents_suffix formula-decl nil sorting_aux nil)
    (i!1 skolem-const-decl "below[length(suffix(l, 1 + n))]" bubblesort
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permutations_is_commutative formula-decl nil sorting_aux nil)
    (j skolem-const-decl "below[length(prefix(l, 1 + n))]" bubblesort
     nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (contents_prefix formula-decl nil sorting_aux nil)
    (i skolem-const-decl "below[1 + n]" bubblesort nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (permutations_of_app_pref formula-decl nil sorting_aux nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil))
   shostak))
 (bubblesort_is_permutation 0
  (bubblesort_is_permutation-1 nil 3639009162
   ("" (skeep)
    (("" (expand "bubblesort")
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (rewrite "bubblesort_aux_is_permutation")
            (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort const-decl "list[T]" bubblesort nil)
    (T formal-type-decl nil bubblesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (bubblesort_aux_is_permutation formula-decl nil bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bubblesort_aux_sorts_prefix_TCC1 0
  (bubblesort_aux_sorts_prefix_TCC1-1 nil 3639011941
   ("" (subtype-tcc)
    (("" (rewrite "bubblesort_aux_preserves_length")
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubblesort_aux_sorts_prefix subtype "bubblesort.i"
    "below[length[T](bubblesort_aux(l, n))]")))
 (bubblesort_aux_sorts_prefix_TCC2 0
  (bubblesort_aux_sorts_prefix_TCC2-1 nil 3639011941
   ("" (subtype-tcc)
    (("" (rewrite "bubblesort_aux_preserves_length")
      (("" (grind) nil nil)) nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (bubblesort_aux_sorts_prefix subtype
    "(number_fields.+)(bubblesort.i, 1)"
    "below[length[T](bubblesort_aux(l, n))]")))
 (bubblesort_aux_sorts_prefix 0
  (bubblesort_aux_sorts_prefix-2 "" 3804609590
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (expand "bubblesort_aux" 1)
        (("1" (inst -1 "bubbling(x!1, x!2)" "x!2 - 1" "i")
          (("1" (assert) nil nil)
           ("2" (typepred "i")
            (("2" (typepred "x!2")
              (("2" (case "i = x!2 - 1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (lemma "bubblesort_aux_preserves_suffix")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (inst -1 "x!2")
                            (("1" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "bubbling_bubbles")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bubblesort_aux_preserves_prefix")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst? -2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (lemma "bubbling_preserves_length")
                                (("2"
                                  (inst?)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 1 2)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "bubblesort_aux_preserves_length")
      (("2" (hide -2 2)
        (("2" (typepred "y!2" "x!2" "i!1" "y!1")
          (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("3" (hide -2 2)
      (("3" (rewrite "bubblesort_aux_preserves_length")
        (("3" (typepred "y!2" "x!2" "i!1" "y!1")
          (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubblesort_aux_preserves_length")
          (("4" (typepred "y!2" "x!2" "i" "y!1")
            (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "y!2" "x!2" "i" "y!1")
          (("5" (rewrite "bubblesort_aux_preserves_length")
            (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (rewrite "bubblesort_aux_preserves_length")
        (("6" (skeep)
          (("6" (hide - 2)
            (("6" (typepred "i" "x!1`1" "x!1`2")
              (("6" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2 3 -2)
      (("7" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("7" (rewrite "bubblesort_aux_preserves_length")
          (("7" (grind) nil nil)) nil))
        nil))
      nil)
     ("8" (hide -2 2 3)
      (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("8" (rewrite "bubblesort_aux_preserves_length")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (typepred "i" "x!1`1" "x!1`2")
          (("9" (rewrite "bubblesort_aux_preserves_length")
            (("9" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("10" (hide -2 2 3)
      (("10" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("10" (rewrite "bubblesort_aux_preserves_length")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (hide -2 2 3)
      (("11" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("11" (rewrite "bubblesort_aux_preserves_length")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide -2 2 3)
      (("12" (skeep)
        (("12" (rewrite "bubblesort_aux_preserves_length")
          (("12" (typepred "i" "y!1`1" "y!1`2" "x!1`2")
            (("12" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("13" (hide - 2)
      (("13" (skeep)
        (("13" (typepred "i" "y!1`1" "y!1`2")
          (("13" (rewrite "bubblesort_aux_preserves_length")
            (("13" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (typepred "i!1" "l!1" "n!1")
        (("14" (rewrite "bubblesort_aux_preserves_length")
          (("14" (grind) nil nil)) nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite "bubblesort_aux_preserves_length")
        (("15" (typepred "i!1" "l!1" "n!1") (("15" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below[x!2]" bubblesort nil)
    (x!2 skolem-const-decl "below[length(x!1)]" bubblesort nil)
    (x!1 skolem-const-decl "list[T]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubbling def-decl "list[T]" bubblesort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bubblesort_aux_preserves_suffix formula-decl nil bubblesort nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (lt const-decl "bool" sorting nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (bubbling_preserves_length formula-decl nil bubblesort nil)
    (bubblesort_aux_preserves_prefix formula-decl nil bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bubbling_bubbles formula-decl nil bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil bubblesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (bubblesort_aux_sorts_prefix-1 nil 3639013577
   ("" (measure-induct+ "n" ("l" "n"))
    (("1" (skeep)
      (("1" (expand "bubblesort_aux" 1)
        (("1" (inst -1 "bubbling(x!1, x!2)" "x!2 - 1" "i")
          (("1" (assert) nil nil)
           ("2" (typepred "i")
            (("2" (typepred "x!2")
              (("2" (case "i = x!2 - 1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (lemma "bubblesort_aux_preserves_suffix")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (inst -1 "x!2")
                            (("1" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "bubbling_bubbles")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bubblesort_aux_preserves_prefix")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst? -2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (lemma "bubbling_preserves_length")
                                (("2"
                                  (inst?)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 1 2)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "bubblesort_aux_preserves_length")
      (("2" (hide -2 2)
        (("2" (typepred "y!2" "x!2" "i!1" "y!1")
          (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("3" (hide -2 2)
      (("3" (rewrite "bubblesort_aux_preserves_length")
        (("3" (typepred "y!2" "x!2" "i!1" "y!1")
          (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (rewrite "bubblesort_aux_preserves_length")
          (("4" (typepred "y!2" "x!2" "i" "y!1")
            (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "y!2" "x!2" "i" "y!1")
          (("5" (rewrite "bubblesort_aux_preserves_length")
            (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (rewrite "bubblesort_aux_preserves_length")
        (("6" (skeep)
          (("6" (hide - 2)
            (("6" (typepred "i1" "x!1`1" "x!1`2")
              (("6" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2 3 -2)
      (("7" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("7" (rewrite "bubblesort_aux_preserves_length")
          (("7" (grind) nil nil)) nil))
        nil))
      nil)
     ("8" (hide -2 2 3)
      (("8" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("8" (rewrite "bubblesort_aux_preserves_length")
          (("8" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (hide -1 2)
      (("9" (skeep)
        (("9" (typepred "i1" "x!1`1" "x!1`2")
          (("9" (rewrite "bubblesort_aux_preserves_length")
            (("9" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("10" (hide -2 2 3)
      (("10" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("10" (rewrite "bubblesort_aux_preserves_length")
          (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (hide -2 2 3)
      (("11" (typepred "i!1" "y!1`1" "y!1`2" "x!1`2")
        (("11" (rewrite "bubblesort_aux_preserves_length")
          (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (hide -2 2 3)
      (("12" (skeep)
        (("12" (rewrite "bubblesort_aux_preserves_length")
          (("12" (typepred "i" "y!1`1" "y!1`2" "x!1`2")
            (("12" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("13" (hide - 2)
      (("13" (skeep)
        (("13" (typepred "i" "y!1`1" "y!1`2")
          (("13" (rewrite "bubblesort_aux_preserves_length")
            (("13" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (typepred "i!1" "l!1" "n!1")
        (("14" (rewrite "bubblesort_aux_preserves_length")
          (("14" (grind) nil nil)) nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite "bubblesort_aux_preserves_length")
        (("15" (typepred "i!1" "l!1" "n!1") (("15" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (nth def-decl "T" list_props nil)
    (gt const-decl "pred[[T, T]]" sorting nil)
    (lt const-decl "bool" sorting nil))
   shostak))
 (bubblesort_is_sorted 0
  (bubblesort_is_sorted-1 nil 3639011943
   ("" (skeep)
    (("" (expand "bubblesort")
      (("" (prop)
        (("1" (grind) nil nil)
         ("2" (lemma "bubblesort_aux_sorts_prefix")
          (("2" (inst? -1)
            (("1" (expand "is_sorted?")
              (("1" (skeep)
                (("1" (inst -1 "k")
                  (("1" (assert) nil nil)
                   ("2" (hide 3)
                    (("2" (expand "list2finseq")
                      (("2" (rewrite "bubblesort_aux_preserves_length")
                        (("1" (assert) nil nil)
                         ("2" (hide -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bubblesort const-decl "list[T]" bubblesort nil)
    (bubblesort_aux_sorts_prefix formula-decl nil bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bubblesort_aux def-decl "list[T]" bubblesort nil)
    (k skolem-const-decl
     "below[length(bubblesort_aux(l, length(l) - 1))]" bubblesort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bubblesort_aux_preserves_length formula-decl nil bubblesort nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (l skolem-const-decl "list[T]" bubblesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_sorted? const-decl "bool" sorting nil)
    (T formal-type-decl nil bubblesort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" bubblesort nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (bubblesort_works 0
  (bubblesort_works-1 nil 3639009015
   ("" (skeep)
    (("" (rewrite "bubblesort_is_permutation")
      (("" (rewrite "bubblesort_is_sorted") nil nil)) nil))
    nil)
   ((bubblesort_is_permutation formula-decl nil bubblesort nil)
    (T formal-type-decl nil bubblesort nil)
    (list type-decl nil list_adt nil)
    (bubblesort_is_sorted formula-decl nil bubblesort nil))
   shostak)))

