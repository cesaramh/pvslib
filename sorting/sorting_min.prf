(sorting_min
 (switching_min_TCC1 0
  (switching_min_TCC1-1 nil 3517307926 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   shostak
   (switching_min subtype "sorting_min.l"
    "(list_adt[sorting_min.T].cons?)")))
 (switching_min_TCC2 0
  (switching_min_TCC2-1 nil 3517307926
   ("" (subtype-tcc)
    (("" (grind) (("" (expand "length") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   shostak
   (switching_min subtype "list_adt[sorting_min.T].cdr(sorting_min.l)"
    "(list_adt[sorting_min.T].cons?)")))
 (switching_min_TCC3 0
  (switching_min_TCC3-1 nil 3517307926
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (hide -1)
        (("" (grind)
          (("" (expand "length" 2 2)
            (("" (grind)
              (("" (case "null?(l)")
                (("1" (grind) nil nil)
                 ("2" (case "length(l) = 1")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil))
   shostak
   (switching_min termination
    "sorting_min.switching_min(list_adt[sorting_min.T].cons(list_adt[sorting_min.T].car(sorting_min.l), list_adt[sorting_min.T].cdr(list_adt[sorting_min.T].cdr(sorting_min.l))))"
    "nil")))
 (switching_min_TCC4 0
  (switching_min_TCC4-1 nil 3517307926
   ("" (skeep) (("" (expand "length" 3 2) (("" (grind) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sorting_min nil)
    (lt const-decl "bool" sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (switching_min termination
    "sorting_min.switching_min(list_adt[sorting_min.T].cdr(sorting_min.l))"
    "nil")))
 (reverse_is_permutation 0
  (reverse_is_permutation-1 nil 3558374535
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "permutations")
      (("" (skeep)
        (("" (expand "reverse" 1)
          (("" (lift-if)
            (("" (prop)
              (("" (rewrite "occurrences_of_app")
                (("" (expand "occurrences" 2 2)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (inst -2 "cdr(x!1)")
                        (("1" (prop)
                          (("1" (inst -1 "x")
                            (("1" (replaces -1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst?)
                        (("2" (prop)
                          (("1" (inst?)
                            (("1" (replaces -1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((occurrences def-decl "nat" sorting_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (permutations const-decl "bool" sorting_aux nil)
    (reverse def-decl "list[T]" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (swch_min_preserves_length 0
  (swch_min_preserves_length-1 nil 3523646710
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (expand "switching_min" 1)
      (("" (case "length(x!1) < 2")
        (("1" (assert) (("1" (grind) nil nil)) nil)
         ("2" (expand "list2finseq")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (prop)
                (("1" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("1" (prop)
                    (("1" (expand "length" 1 2)
                      (("1" (expand "length" -1 1)
                        (("1" (replace -1 1 rl)
                          (("1" (hide -1)
                            (("1" (expand "length" 1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (grind)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (case "null?(x!1)")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "length(x!1) = 1")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (expand "length")
                        (("2" (grind)
                          (("2" (expand "length" 2 2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 1 2) (("1" (grind) nil nil)) nil)
                       ("2" (inst?)
                        (("2" (prop)
                          (("1" (replace -1 2 rl)
                            (("1" (hide -1) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 4 5) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (swch_min_preserves_contents 0
  (swch_min_preserves_contents-2 nil 3797766371
   ("" (measure-induct+ ("length(l)") "l")
    (("" (skeep)
      (("" (expand "switching_min" 1)
        (("" (case "list2finseq(x!1)`length < 2")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (case "lt(car(x!1), car(cdr(x!1)))")
              (("1" (assert)
                (("1" (case "i=car(cdr(x!1))")
                  (("1" (expand "member" 2) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "member" 3)
                    (("2" (assert)
                      (("2"
                        (case "member(i, cons(car(x!1),cdr(cdr(x!1))))")
                        (("1" (inst -3 "cons(car(x!1),cdr(cdr(x!1)))")
                          (("1" (inst -3 "i")
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (hide-all-but (1 3))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "length" 1 2)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (case "length(x!1) = 1")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (case "null?(x!1)")
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 4)
                          (("2" (expand "member")
                            (("2" (grind)
                              (("2"
                                (expand "member" -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case "i=car(x!1)")
                  (("1" (expand "member" 3) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "member" 4)
                    (("2" (assert)
                      (("2" (expand "member" -2)
                        (("2" (case "x!1=null")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (inst -1 "cdr(x!1)")
                              (("2"
                                (inst -1 "i")
                                (("2"
                                  (prop)
                                  (("2"
                                    (hide-all-but (1 2))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (1 2))
                (("3" (case "NOT null?(x!1)")
                  (("1" (grind) nil nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide-all-but (1 2))
                (("4" (case "NOT null?(x!1)")
                  (("1" (grind) nil nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (lt const-decl "bool" sorting nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (swch_min_preserves_contents-1 nil 3553523288
   ("" (measure-induct+ ("length(l)") "l")
    (("" (skeep)
      (("" (expand "switching_min" 1)
        (("" (case "list2finseq(x!1)`length < 2")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (case "car(x!1) < car(cdr(x!1))")
              (("1" (assert)
                (("1" (case "i=car(cdr(x!1))")
                  (("1" (expand "member" 2) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "member" 3)
                    (("2" (assert)
                      (("2"
                        (case "member(i, cons(car(x!1),cdr(cdr(x!1))))")
                        (("1" (inst -3 "cons(car(x!1),cdr(cdr(x!1)))")
                          (("1" (inst -3 "i")
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (hide-all-but (1 3))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "length" 1 2)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (case "length(x!1) = 1")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (case "null?(x!1)")
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 4)
                          (("2" (expand "member")
                            (("2" (grind)
                              (("2"
                                (expand "member" -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case "i=car(x!1)")
                  (("1" (expand "member" 3) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "member" 4)
                    (("2" (assert)
                      (("2" (expand "member" -2)
                        (("2" (case "x!1=null")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (inst -1 "cdr(x!1)")
                              (("2"
                                (inst -1 "i")
                                (("2"
                                  (prop)
                                  (("2"
                                    (hide-all-but (1 2))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (1 2))
                (("3" (case "NOT null?(x!1)")
                  (("1" (grind) nil nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide-all-but (1 2))
                (("4" (case "NOT null?(x!1)")
                  (("1" (grind) nil nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (swch_min_is_permutation 0
  (swch_min_is_permutation-1 nil 3556825965
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (expand "permutations" 1)
      (("" (skeep)
        (("" (expand "switching_min" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "occurrences" 1 2)
                (("1" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("1" (prop)
                    (("1" (lift-if)
                      (("1" (expand "permutations")
                        (("1" (inst?)
                          (("1" (replace -1 1 rl)
                            (("1" (hide -1)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "occurrences")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "occurrences" 1 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1" (grind) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "occurrences" 2 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "occurrences")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "occurrences" 1 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "occurrences" 2 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide - 2)
                      (("2" (expand "length")
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "length" 2 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "cdr(x!1)")
                (("2" (prop)
                  (("1" (expand "permutations")
                    (("1" (inst -1 "x")
                      (("1" (expand "occurrences" 2 2)
                        (("1" (replace -1 2 rl)
                          (("1" (hide -1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "occurrences" 1 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "occurrences" 2 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "length" 1 2) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (lt const-decl "bool" sorting nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (last_swch_min_element_is_least_TCC1 0
  (last_swch_min_element_is_least_TCC1-1 nil 3554566004
   ("" (skeep)
    (("" (typepred "k")
      (("" (case "null?(l)")
        (("1" (hide +) (("1" (grind) nil nil)) nil)
         ("2" (lemma "swch_min_preserves_length")
          (("2" (inst -1 "l")
            (("2" (replace -1 2 rl)
              (("2" (prop)
                (("1" (hide -)
                  (("1" (expand "length") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide -)
                  (("2" (expand "length") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak
   (last_swch_min_element_is_least subtype
    "(number_fields.-)(list_props[sorting_min.T].length(sorting_min.l), 1)"
    "below[length[T](switching_min(l))]")))
 (last_swch_min_element_is_least_TCC2 0
  (last_swch_min_element_is_least_TCC2-1 nil 3589549499
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (last_swch_min_element_is_least subtype "sorting_min.k"
    "below[length[T](l)]")))
 (last_swch_min_element_is_least 0
  (last_swch_min_element_is_least-4 nil 3797766452
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "length(x!1) = 0")
      (("1" (hide -2)
        (("1" (skosimp)
          (("1" (typepred "k!1")
            (("1" (hide 1)
              (("1" (expand "list2finseq") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep 2)
        (("2" (expand "switching_min" 2)
          (("2" (case "list2finseq(x!1)`length < 2")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (grind)
                  (("1" (typepred "leq") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "lt(car(x!1), car(cdr(x!1)))")
              (("1" (assert)
                (("1" (expand "nth" 3 1)
                  (("1" (case "length(x!1) -1 = 0")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("2"
                          (case "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (name-replace
                                 "lastelement"
                                 "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)")
                                (("1"
                                  (expand "nth" 4)
                                  (("1"
                                    (case "k=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 "0")
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "k=1")
                                        (("1"
                                          (expand "nth" 5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -4 "0")
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (lemma "lt_le")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "leq")
                                                          (("1"
                                                            (expand
                                                             "total_preorder?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "lastelement"
                                                                       "car(x!1)"
                                                                       "car(cdr(x!1))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "list2finseq")
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 6)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -3 "k-1")
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "k")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (expand "list2finseq")
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (case "length(x!1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "null?(x!1)")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "nth" 4 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 3 4)
                        (("1" (typepred "k")
                          (("1" (grind)
                            (("1" (case "null?(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "leq")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "cdr(x!1)")
                        (("2" (expand "length" 2)
                          (("2" (case "null?(x!1)")
                            (("1" (assert)
                              (("1"
                                (hide -2 1 2 3 4)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "nth" 3 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -2 "0")
                                      (("1"
                                        (expand "nth" -2 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "leq")
                                                (("1"
                                                  (expand
                                                   "total_preorder?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "transitive?")
                                                          (("1"
                                                            (tccs-formula
                                                             1)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) "
                                                               "car(cdr(x!1))"
                                                               "car(x!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 6))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "k-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (7 8))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "k")
                                        (("2"
                                          (hide 3 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 4)
                (("3" (grind)
                  (("3" (expand "length") (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide -1 4) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "k!1")
      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skosimp)
      (("3" (typepred "k!1" "k!2")
        (("3" (expand "list2finseq")
          (("3" (inst -4 "y!1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (hide -2)
        (("4" (grind)
          (("1" (rewrite "swch_min_preserves_length")
            (("1" (grind) nil nil)) nil)
           ("2" (rewrite "swch_min_preserves_length")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (typepred "k!1") (("5" (hide 2) (("5" (grind) nil nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "swch_min_preserves_length")
        (("6" (grind)
          (("6" (typepred "k!1") (("6" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((swch_min_preserves_length formula-decl nil sorting_min nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt const-decl "bool" sorting nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (k skolem-const-decl "below[list2finseq(x!1)`length]" sorting_min
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lt_le formula-decl nil sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (x!1 skolem-const-decl "list[T]" sorting_min nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (last_swch_min_element_is_least-3 nil 3797695681
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "length(x!1) = 0")
      (("1" (hide -2)
        (("1" (skosimp)
          (("1" (typepred "k!1")
            (("1" (hide 1)
              (("1" (expand "list2finseq") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep 2)
        (("2" (expand "switching_min" 2)
          (("2" (case "list2finseq(x!1)`length < 2")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (grind)
                  (("1" (typepred "<=") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "car(x!1) < car(cdr(x!1))")
              (("1" (assert)
                (("1" (expand "nth" 3 1)
                  (("1" (case "length(x!1) -1 = 0")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("2"
                          (case "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (name-replace
                                 "lastelement"
                                 "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)")
                                (("1"
                                  (expand "nth" 4)
                                  (("1"
                                    (case "k=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 0)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "k=1")
                                        (("1"
                                          (expand "nth" 5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -4 0)
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (lemma "lt_le")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "<=")
                                                          (("1"
                                                            (expand
                                                             "total_preorder?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "lastelement"
                                                                       "car(x!1)"
                                                                       "car(cdr(x!1))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "list2finseq")
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 6)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -3 "k-1")
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "k")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (expand "list2finseq")
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (case "length(x!1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "null?(x!1)")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "nth" 4 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 3 4)
                        (("1" (typepred "k")
                          (("1" (grind)
                            (("1" (case "null?(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "<=")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "cdr(x!1)")
                        (("2" (expand "length" 2)
                          (("2" (case "null?(x!1)")
                            (("1" (assert)
                              (("1"
                                (hide -2 1 2 3 4)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "nth" 3 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -2 0)
                                      (("1"
                                        (expand "nth" -2 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "lt_def")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "<=")
                                                  (("1"
                                                    (expand
                                                     "total_preorder?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "transitive?")
                                                            (("1"
                                                              (tccs-formula
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) "
                                                                 "car(cdr(x!1))"
                                                                 "car(x!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 6))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "k-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (7 8))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "k")
                                        (("2"
                                          (hide 3 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 4)
                (("3" (grind)
                  (("3" (expand "length") (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide -1 4) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "k!1")
      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skosimp)
      (("3" (typepred "k!1" "k!2")
        (("3" (expand "list2finseq")
          (("3" (inst -4 "y!1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (hide -2)
        (("4" (grind)
          (("1" (rewrite "swch_min_preserves_length")
            (("1" (grind) nil nil)) nil)
           ("2" (rewrite "swch_min_preserves_length")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (typepred "k!1") (("5" (hide 2) (("5" (grind) nil nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "swch_min_preserves_length")
        (("6" (grind)
          (("6" (typepred "k!1") (("6" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((lt_le formula-decl nil sorting nil)
    (nth def-decl "T" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (length def-decl "nat" list_props nil))
   nil)
  (last_swch_min_element_is_least-2 nil 3731693507
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "length(x!1) = 0")
      (("1" (hide -2)
        (("1" (skosimp)
          (("1" (typepred "k!1")
            (("1" (hide 1)
              (("1" (expand "list2finseq") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep 2)
        (("2" (expand "switching_min" 2)
          (("2" (case "list2finseq(x!1)`length < 2")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (grind)
                  (("1" (typepred "<=") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "car(x!1) < car(cdr(x!1))")
              (("1" (assert)
                (("1" (expand "nth" 3 1)
                  (("1" (case "length(x!1) -1 = 0")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("2"
                          (case "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (name-replace
                                 lastelement
                                 "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)")
                                (("1"
                                  (expand "nth" 4)
                                  (("1"
                                    (case "k=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 0)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "k=1")
                                        (("1"
                                          (expand "nth" 5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -4 0)
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (lemma "lt_le")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "<=")
                                                          (("1"
                                                            (expand
                                                             "total_preorder?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "lastelement"
                                                                       "car(x!1)"
                                                                       "car(cdr(x!1))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "list2finseq")
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 6)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -3 "k-1")
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "k")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (expand "list2finseq")
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (case "length(x!1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "null?(x!1)")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "nth" 4 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 3 4)
                        (("1" (typepred "k")
                          (("1" (grind)
                            (("1" (case "null?(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "<=")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "cdr(x!1)")
                        (("2" (expand "length" 2)
                          (("2" (case "null?(x!1)")
                            (("1" (assert)
                              (("1"
                                (hide -2 1 2 3 4)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "nth" 3 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -2 0)
                                      (("1"
                                        (expand "nth" -2 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "<")
                                              (("1"
                                                (typepred "<=")
                                                (("1"
                                                  (expand
                                                   "total_preorder?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "preorder?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "transitive?")
                                                          (("1"
                                                            (tccs-formula
                                                             1)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) "
                                                               "car(cdr(x!1))"
                                                               "car(x!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 6))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "k-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (7 8))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "k")
                                        (("2"
                                          (hide 3 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 4)
                (("3" (grind)
                  (("3" (expand "length") (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide -1 4) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "k!1")
      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skosimp)
      (("3" (typepred "k!1" "k!2")
        (("3" (expand "list2finseq")
          (("3" (inst -4 "y!1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (hide -2)
        (("4" (grind)
          (("1" (rewrite "swch_min_preserves_length")
            (("1" (grind) nil nil)) nil)
           ("2" (rewrite "swch_min_preserves_length")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (typepred "k!1") (("5" (hide 2) (("5" (grind) nil nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "swch_min_preserves_length")
        (("6" (grind)
          (("6" (typepred "k!1") (("6" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (length def-decl "nat" list_props nil))
   nil)
  (last_swch_min_element_is_least-1 nil 3554566006
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "length(x!1) = 0")
      (("1" (hide -2)
        (("1" (skosimp)
          (("1" (typepred "k!1")
            (("1" (hide 1)
              (("1" (expand "list2finseq") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep 2)
        (("2" (expand "switching_min" 2)
          (("2" (case "list2finseq(x!1)`length < 2")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (grind)
                  (("1" (typepred "<=") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "car(x!1) < car(cdr(x!1))")
              (("1" (assert)
                (("1" (expand "nth" 3 1)
                  (("1" (case "length(x!1) -1 = 0")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("2"
                          (case "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (name-replace
                                 lastelement
                                 "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)")
                                (("1"
                                  (expand "nth" 4)
                                  (("1"
                                    (case "k=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 0)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "k=1")
                                        (("1"
                                          (expand "nth" 5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -4 0)
                                                (("1"
                                                  (expand "nth" -4)
                                                  (("1"
                                                    (expand "<")
                                                    (("1"
                                                      (expand
                                                       "difference")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "<=")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -4
                                                                -5
                                                                6))
                                                              (("1"
                                                                (expand
                                                                 "total_order?")
                                                                (("1"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("1"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "transitive?")
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "lastelement"
                                                                           "car(x!1)"
                                                                           "car(cdr(x!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "list2finseq")
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 6)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -3 "k-1")
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "k")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (expand "list2finseq")
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (case "length(x!1) = 1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "null?(x!1)")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "nth" 4 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 3 4)
                        (("1" (typepred "k")
                          (("1" (grind)
                            (("1" (case "null?(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "<=")
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "<=")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "cdr(x!1)")
                        (("2" (expand "length" 2)
                          (("2" (case "null?(x!1)")
                            (("1" (assert)
                              (("1"
                                (hide -2 1 2 3 4)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "nth" 3 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -2 0)
                                      (("1"
                                        (expand "nth" -2 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "<")
                                              (("1"
                                                (expand "difference")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (typepred "<=")
                                                      (("1"
                                                        (expand
                                                         "total_order?")
                                                        (("1"
                                                          (expand
                                                           "partial_order?")
                                                          (("1"
                                                            (expand
                                                             "preorder?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "transitive?")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1)"
                                                                   "car(cdr(x!1))"
                                                                   "car(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "dichotomous?")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "car(cdr(x!1))"
                                                                         "car(x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      6))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "member")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 7))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 6))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "k-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (7 8))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "k")
                                        (("2"
                                          (hide 3 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 4)
                (("3" (grind)
                  (("3" (expand "length") (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide -1 4) (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "k!1")
      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skosimp)
      (("3" (typepred "k!1" "k!2")
        (("3" (expand "list2finseq")
          (("3" (inst -4 "y!1") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (hide -2)
        (("4" (grind)
          (("1" (rewrite "swch_min_preserves_length")
            (("1" (grind) nil nil)) nil)
           ("2" (rewrite "swch_min_preserves_length")
            (("2" (grind) nil nil)) nil)
           ("3" (typepred "k!1")
            (("3" (hide 2)
              (("3" (grind)
                (("3" (hide 2)
                  (("3" (lemma "swch_min_preserves_length")
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (typepred "k!1") (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (lemma "swch_min_preserves_length")
        (("6" (inst -1 "l!1")
          (("6" (grind)
            (("6" (typepred "k!1") (("6" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sorting_min_TCC1 0
  (sorting_min_TCC1-1 nil 3517307926
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "swch_min_preserves_length")
        (("" (inst -1 "l")
          (("" (lemma "length_reverse")
            (("" (inst -1 "switching_min(l)")
              (("" (replace -2 -1 rl)
                (("" (hide -2)
                  (("" (replace -2 -1 rl)
                    (("" (hide -2) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_reverse formula-decl nil list_props nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil))
   shostak
   (sorting_min subtype "sorting_min.rev_sw_min"
    "(list_adt[sorting_min.T].cons?)")))
 (sorting_min_TCC2 0
  (sorting_min_TCC2-1 nil 3517307926
   ("" (skeep)
    (("" (skeep)
      (("" (replaces -1)
        (("" (lemma "length_reverse")
          (("" (inst?)
            (("" (expand "length" -1 1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lemma "swch_min_preserves_length")
                    (("2" (inst -1 "l") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_reverse formula-decl nil list_props nil)
    (T formal-type-decl nil sorting_min nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (lt const-decl "bool" sorting nil)
    (reverse def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (sorting_min termination
    "sorting_min.sorting_min(list_adt[sorting_min.T].cdr(sorting_min.rev_sw_min))"
    "nil")))
 (sorting_min_preserves_length 0
  (sorting_min_preserves_length-1 nil 3523648590
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (case "length(x!1) < 2")
      (("1" (expand "sorting_min" 1)
        (("1" (lift-if) (("1" (assert) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (expand "sorting_min" 2)
        (("2" (lift-if)
          (("2" (assert)
            (("2" (case "list2finseq(x!1)`length >= 2")
              (("1" (assert)
                (("1" (expand "length" 2 2)
                  (("1" (inst -2 "cdr(reverse(switching_min(x!1)))")
                    (("1" (prop)
                      (("1" (replace -1 2 rl)
                        (("1" (hide -1)
                          (("1" (lemma "length_reverse")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (lemma
                                       "swch_min_preserves_length")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_reverse")
                        (("2" (inst?)
                          (("2" (expand "length" -1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (lemma "swch_min_preserves_length")
                                  (("2"
                                    (inst -1 "x!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (lt const-decl "bool" sorting nil)
    (length_reverse formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorting_min def-decl "list[T]" sorting_min nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (sorting_min_is_permutations 0
  (sorting_min_is_permutations-1 nil 3557864953
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (expand "permutations")
      (("" (skeep)
        (("" (expand "sorting_min" 1)
          (("" (lift-if)
            (("" (prop)
              (("" (expand "occurrences" 2 2)
                (("" (inst -1 "cdr(reverse(switching_min(x!1)))")
                  (("1" (prop)
                    (("1" (inst?)
                      (("1" (replace -1 2 rl)
                        (("1" (hide -1)
                          (("1" (lift-if)
                            (("1" (lemma "reverse_is_permutation")
                              (("1"
                                (lemma "swch_min_is_permutation")
                                (("1"
                                  (inst -1 "x!1")
                                  (("1"
                                    (inst -2 "switching_min(x!1)")
                                    (("1"
                                      (rewrite
                                       "permutations_is_commutative")
                                      (("1"
                                        (lemma
                                         "permutations_is_transitive")
                                        (("1"
                                          (inst
                                           -1
                                           "reverse(switching_min(x!1))"
                                           "switching_min(x!1)"
                                           "x!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3)
                                              (("1"
                                                (expand "permutations")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand
                                                     "list2finseq")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "occurrences"
                                                         -2
                                                         1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (lemma
                                                                 "length_reverse")
                                                                (("1"
                                                                  (lemma
                                                                   "swch_min_preserves_length")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!1")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "switching_min(x!1)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "occurrences"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               2
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "length_reverse")
                                                                  (("1"
                                                                    (lemma
                                                                     "swch_min_preserves_length")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "switching_min(x!1)")
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -2
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (lemma "length_reverse")
                        (("2" (lemma "swch_min_preserves_length")
                          (("2" (inst -1 "x!1")
                            (("2" (inst -2 "switching_min(x!1)")
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -2 1 rl)
                                  (("2"
                                    (name-replace
                                     "rswmp"
                                     "reverse(switching_min(x!1))")
                                    (("2"
                                      (expand "length" 1 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (lemma "length_reverse")
                      (("2" (lemma "swch_min_preserves_length")
                        (("2" (inst -1 "x!1")
                          (("2" (inst -2 "switching_min(x!1)")
                            (("2"
                              (name-replace "rev"
                               "reverse[T](switching_min(x!1))")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (x!1 skolem-const-decl "list[T]" sorting_min nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reverse_is_permutation formula-decl nil sorting_min nil)
    (permutations_is_commutative formula-decl nil sorting_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (length_reverse formula-decl nil list_props nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (lt const-decl "bool" sorting nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (swch_min_is_permutation formula-decl nil sorting_min nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (sorting_min def-decl "list[T]" sorting_min nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sorting_min nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (swch_min_moves_min_to_end_TCC1 0
  (swch_min_moves_min_to_end_TCC1-1 nil 3525020231
   ("" (subtype-tcc)
    (("" (lemma "swch_min_preserves_length")
      (("" (inst -1 "l!1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((swch_min_preserves_length formula-decl nil sorting_min nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   shostak
   (swch_min_moves_min_to_end subtype "sorting_min.k"
    "below[length[T](switching_min(l))]")))
 (swch_min_moves_min_to_end_TCC2 0
  (swch_min_moves_min_to_end_TCC2-1 nil 3525020231
   ("" (subtype-tcc)
    (("" (lemma "swch_min_preserves_length")
      (("" (inst -1 "l!1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((swch_min_preserves_length formula-decl nil sorting_min nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   shostak
   (swch_min_moves_min_to_end subtype
    "(number_fields.-)(list_props[sorting_min.T].length(sorting_min.l), 1)"
    "below[length[T](switching_min(l))]")))
 (swch_min_moves_min_to_end 0
  (swch_min_moves_min_to_end-2 nil 3797766559
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "last_swch_min_element_is_least")
        (("" (lemma "swch_min_is_permutation")
          (("" (lemma "permutations_preserve_contents")
            (("" (inst -2 "l")
              (("" (inst -1 "switching_min(l)" "l" "length(l)-1")
                (("" (lemma "permutations_is_commutative")
                  (("" (inst -1 "l" "switching_min(l)")
                    (("" (assert)
                      (("" (skeep -2)
                        (("" (inst -4 "l" "_")
                          (("" (lemma "permutations_preserve_contents")
                            (("" (inst -1 "switching_min(l)" "l" "k")
                              ((""
                                (assert)
                                ((""
                                  (skosimp*)
                                  ((""
                                    (inst -5 "j!1")
                                    (("1"
                                      (expand "geq")
                                      (("1"
                                        (expand "converse")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (typepred "j!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((swch_min_is_permutation formula-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (permutations_is_commutative formula-decl nil sorting_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (geq const-decl "pred[[T, T]]" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (j!1 skolem-const-decl "below[length(l)]" sorting_min nil)
    (l skolem-const-decl "list[T]" sorting_min nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (T formal-type-decl nil sorting_min nil)
    (last_swch_min_element_is_least formula-decl nil sorting_min nil))
   nil)
  (swch_min_moves_min_to_end-1 nil 3557660047
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "last_swch_min_element_is_least")
        (("" (lemma "swch_min_is_permutation")
          (("" (lemma "permutations_preserve_contents")
            (("" (inst -2 "l")
              (("" (inst -1 "switching_min(l)" "l" "length(l)-1")
                (("" (lemma "permutations_is_commutative")
                  (("" (inst -1 "l" "switching_min(l)")
                    (("" (assert)
                      (("" (skeep -2)
                        (("" (inst -4 "l" "_")
                          (("" (lemma "permutations_preserve_contents")
                            (("" (inst -1 "switching_min(l)" "l" "k")
                              ((""
                                (assert)
                                ((""
                                  (skosimp*)
                                  ((""
                                    (inst -5 "j!1")
                                    (("1"
                                      (expand ">=")
                                      (("1"
                                        (expand "converse")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (typepred "j!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations_is_commutative formula-decl nil sorting_aux nil)
    (length def-decl "nat" list_props nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil))
   shostak))
 (sorting_min_moves_min_to_begining_TCC1 0
  (sorting_min_moves_min_to_begining_TCC1-1 nil 3525020231
   ("" (subtype-tcc)
    (("" (lemma "sorting_min_preserves_length")
      (("" (inst -1 "l!1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((sorting_min_preserves_length formula-decl nil sorting_min nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   shostak
   (sorting_min_moves_min_to_begining subtype "0"
    "below[length[T](sorting_min(l))]")))
 (sorting_min_moves_min_to_begining_TCC2 0
  (sorting_min_moves_min_to_begining_TCC2-1 nil 3525020231
   ("" (subtype-tcc)
    (("" (lemma "sorting_min_preserves_length")
      (("" (inst -1 "l!1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((sorting_min_preserves_length formula-decl nil sorting_min nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   shostak
   (sorting_min_moves_min_to_begining subtype "sorting_min.k"
    "below[length[T](sorting_min(l))]")))
 (sorting_min_moves_min_to_begining 0
  (sorting_min_moves_min_to_begining-2 nil 3797766592
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "swch_min_moves_min_to_end")
        (("" (expand "sorting_min" 2 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (typepred "k")
                (("1" (hide -3)
                  (("1" (grind)
                    (("1" (typepred "leq") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (inst -1 "l")
                  (("2" (assert)
                    (("2" (inst -1 "k")
                      (("1" (lemma "nth_rev_last")
                        (("1" (inst -1 "switching_min(l)")
                          (("1" (expand "nth" -1 2)
                            (("1" (lemma "swch_min_preserves_length")
                              (("1"
                                (inst -1 "l")
                                (("1"
                                  (lemma "swch_min_is_permutation")
                                  (("1"
                                    (inst -1 "l")
                                    (("1"
                                      (lemma
                                       "sorting_min_is_permutations")
                                      (("1"
                                        (inst -1 "l")
                                        (("1"
                                          (lemma
                                           "permutations_is_transitive")
                                          (("1"
                                            (lemma
                                             "permutations_is_commutative")
                                            (("1"
                                              (inst
                                               -1
                                               "l"
                                               "switching_min(l)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "switching_min(l)"
                                                   "l"
                                                   "sorting_min(l)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -5
                                                         -6
                                                         -9)
                                                        (("1"
                                                          (lemma
                                                           "permutations_preserve_contents")
                                                          (("1"
                                                            (lemma
                                                             "permutations_is_commutative")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "sorting_min(l)"
                                                               "switching_min(l)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "sorting_min(l)"
                                                                   "switching_min(l)"
                                                                   "k")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep
                                                                       -2)
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "j")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (typepred "k") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sorting_min def-decl "list[T]" sorting_min nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (k skolem-const-decl "below[list2finseq(l)`length]" sorting_min
     nil)
    (l skolem-const-decl "list[T]" sorting_min nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (swch_min_is_permutation formula-decl nil sorting_min nil)
    (sorting_min_is_permutations formula-decl nil sorting_min nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (geq const-decl "pred[[T, T]]" sorting nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (preorder_converse application-judgement "(preorder?[T])"
     relation_converse_props nil)
    (dichotomous_converse application-judgement "(dichotomous?[T])"
     relation_converse_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (permutations_is_commutative formula-decl nil sorting_aux nil)
    (reverse def-decl "list[T]" list_props nil)
    (lt const-decl "bool" sorting nil)
    (nth_rev_last formula-decl nil sorting_aux nil)
    (swch_min_moves_min_to_end formula-decl nil sorting_min nil))
   nil)
  (sorting_min_moves_min_to_begining-1 nil 3525019134
   ("" (skeep)
    (("" (skeep 2)
      (("" (lemma "swch_min_moves_min_to_end")
        (("" (expand "sorting_min" 2 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (typepred "k")
                (("1" (hide -3)
                  (("1" (grind)
                    (("1" (typepred "<=") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (inst -1 "l")
                  (("2" (assert)
                    (("2" (inst -1 "k")
                      (("1" (lemma "nth_rev_last")
                        (("1" (inst -1 "switching_min(l)")
                          (("1" (expand "nth" -1 2)
                            (("1" (lemma "swch_min_preserves_length")
                              (("1"
                                (inst -1 "l")
                                (("1"
                                  (lemma "swch_min_is_permutation")
                                  (("1"
                                    (inst -1 "l")
                                    (("1"
                                      (lemma
                                       "sorting_min_is_permutations")
                                      (("1"
                                        (inst -1 "l")
                                        (("1"
                                          (lemma
                                           "permutations_is_transitive")
                                          (("1"
                                            (lemma
                                             "permutations_is_commutative")
                                            (("1"
                                              (inst
                                               -1
                                               "l"
                                               "switching_min(l)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "switching_min(l)"
                                                   "l"
                                                   "sorting_min(l)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -5
                                                         -6
                                                         -9)
                                                        (("1"
                                                          (lemma
                                                           "permutations_preserve_contents")
                                                          (("1"
                                                            (lemma
                                                             "permutations_is_commutative")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "sorting_min(l)"
                                                               "switching_min(l)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "sorting_min(l)"
                                                                   "switching_min(l)"
                                                                   k)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep
                                                                       -2)
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "j")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (typepred "k") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_preorder? const-decl "bool" total_preorder nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (permutations_preserve_contents formula-decl nil sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (permutations_is_commutative formula-decl nil sorting_aux nil)
    (reverse def-decl "list[T]" list_props nil)
    (nth_rev_last formula-decl nil sorting_aux nil))
   shostak))
 (sorting_min_work 0
  (sorting_min_work-1 nil 3578072584
   ("" (expand "is_sorted?")
    (("" (measure-induct+ "length(l)" "l")
      (("1" (prop)
        (("1" (skeep)
          (("1" (case "length(x!1)<2")
            (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
             ("2" (case "k=0")
              (("1" (replaces -1)
                (("1" (assert)
                  (("1" (lemma "sorting_min_moves_min_to_begining")
                    (("1" (inst -1 "x!1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (inst -1 "1")
                            (("1" (hide -2 3) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "sorting_min" 3)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (hide-all-but (-1 3)) (("1" (grind) nil nil))
                      nil)
                     ("2" (expand "nth" 2)
                      (("2" (assert)
                        (("2"
                          (inst -2 "cdr(reverse(switching_min(x!1)))")
                          (("2" (prop)
                            (("1" (inst -1 "k-1")
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 3)
                                  (("2"
                                    (lemma
                                     "sorting_min_preserves_length")
                                    (("2"
                                      (inst
                                       -1
                                       "cdr(reverse(switching_min(x!1)))")
                                      (("2"
                                        (replace -1 1 rl)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (lemma
                                             "sorting_min_preserves_length")
                                            (("2"
                                              (inst -1 "x!1")
                                              (("2"
                                                (replace -1 -2 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "swch_min_preserves_length")
                                                    (("2"
                                                      (lemma
                                                       "length_reverse")
                                                      (("2"
                                                        (inst -2 "x!1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "switching_min(x!1)")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 3)
                                (("2"
                                  (expand "list2finseq")
                                  (("2"
                                    (lemma
                                     "sorting_min_preserves_length")
                                    (("2"
                                      (inst-cp -1 "x!1")
                                      (("2"
                                        (inst
                                         -1
                                         "cdr(reverse(switching_min(x!1)))")
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (replace -2 -3 rl)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (lemma
                                                 "swch_min_preserves_length")
                                                (("2"
                                                  (lemma
                                                   "length_reverse")
                                                  (("2"
                                                    (inst -2 "x!1")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "switching_min(x!1)")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (lemma "swch_min_preserves_length")
                                (("2"
                                  (lemma "length_reverse")
                                  (("2"
                                    (inst -2 "x!1")
                                    (("2"
                                      (inst -1 "switching_min(x!1)")
                                      (("2"
                                        (expand "length" -1 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "sorting_min_is_permutations") nil nil))
        nil)
       ("2" (hide 2) (("2" (assert) nil nil)) nil)
       ("3" (hide 2) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil sorting_min nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (sorting_min def-decl "list[T]" sorting_min nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (leq formal-const-decl "(total_preorder?[T])" sorting_min nil)
    (nth def-decl "T" list_props nil)
    (permutations const-decl "bool" sorting_aux nil)
    (sorting_min_is_permutations formula-decl nil sorting_min nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (x!1 skolem-const-decl "list[T]" sorting_min nil)
    (sorting_min_moves_min_to_begining formula-decl nil sorting_min
     nil)
    (TRUE const-decl "bool" booleans nil)
    (switching_min def-decl "list[T]" sorting_min nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lt const-decl "bool" sorting nil)
    (swch_min_preserves_length formula-decl nil sorting_min nil)
    (sorting_min_preserves_length formula-decl nil sorting_min nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak)))

