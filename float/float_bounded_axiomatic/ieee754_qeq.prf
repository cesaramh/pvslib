(ieee754_qeq
 (qeq_finite_equiv 0
  (qeq_finite_equiv-1 nil 3909504818
   ("" (skeep)
    (("" (use "pInf_nInf_Nan_finite")
      (("" (assert)
        (("" (hide 2)
          (("" (typepred "f1")
            (("" (split)
              (("1" (expand "/=")
                (("1" (replace -1)
                  (("1" (use "qeq_correct__nnan_pInf")
                    (("1" (replace -1)
                      (("1" (replace -4) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (use "pInf_nInf_Nan_finite")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "qeq_correct__nnan_nInf")
                (("2" (expand "/=")
                  (("2" (replace -2)
                    (("2" (inst -1 "f1")
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (use "pInf_nInf_Nan_finite")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (use "qeq_correct__nan") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pInf_nInf_Nan_finite formula-decl nil ieee754_data nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_qeq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qeq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qeq nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (f1 skolem-const-decl "(finite?)" ieee754_qeq nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (qeq_correct__nnan_pInf formula-decl nil ieee754_qeq nil)
    (/= const-decl "boolean" notequal nil)
    (qeq_correct__nnan_nInf formula-decl nil ieee754_qeq nil)
    (qeq_correct__nan formula-decl nil ieee754_qeq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite? const-decl "bool" ieee754_data nil))
   shostak))
 (qeq_finite_def 0
  (qeq_finite_def-2 nil 3884070676
   ("" (skeep)
    (("" (rewrite "qeq_correct__finite")
      (("" (flatten)
        (("" (rewrite "nzfinite?_def")
          (("" (rewrite "nzfinite?_def")
            (("" (expand "/=")
              (("" (lemma "only_zeros_proj_zero")
                (("" (copy -1)
                  (("" (inst -1 "f1")
                    (("" (inst -2 "f2")
                      (("" (assert)
                        (("" (prop)
                          (("1"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("2"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("3"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("4"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qeq_correct__finite formula-decl nil ieee754_qeq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_qeq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qeq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qeq nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (qeq_correct__pZero_pZero formula-decl nil ieee754_qeq nil)
    (qeq_correct__pZero_nZero formula-decl nil ieee754_qeq nil)
    (qeq_correct__nZero_pZero formula-decl nil ieee754_qeq nil)
    (qeq_correct__nZero_nZero formula-decl nil ieee754_qeq nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil))
   nil)
  (qeq_finite_def-1 nil 3884070168
   ("" (skeep)
    (("" (rewrite mul_correct__finite)
      ((""
        (case "(f1 = pZero or f1 = nZero) OR (f2 = pZero or f2 = nZero)")
        (("1" (hide 1)
          (("1" (prop)
            (("1" (case "f2 = pZero OR f2 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite mul_correct__pZero_pZero)
                    (("1" (assert) nil)))))
                 ("2" (replaces)
                  (("2" (rewrite mul_correct__pZero_nZero)
                    (("2" (assert) nil)))))))
               ("2" (replaces)
                (("2" (rewrite mul_correct__pZero_pfinite)
                  (("1" (assert) nil)
                   ("2" (rewrite mul_correct__pZero_nfinite)
                    (("1" (assert) nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite only_zeros_proj_zero)
                        (("2" (rewrite nfinite?_def)
                          (("2" (rewrite pfinite?_def)
                            (("2" (assert) nil)))))))))))))))))
             ("2" (case "f2 = pZero OR f2 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite mul_correct__nZero_pZero)
                    (("1" (assert) nil)))))
                 ("2" (replaces)
                  (("2" (rewrite mul_correct__nZero_nZero)
                    (("2" (assert) nil)))))))
               ("2" (replaces)
                (("2" (rewrite mul_correct__nZero_pfinite)
                  (("1" (assert) nil)
                   ("2" (rewrite mul_correct__nZero_nfinite)
                    (("1" (assert) nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite only_zeros_proj_zero)
                        (("2" (rewrite nfinite?_def)
                          (("2" (rewrite pfinite?_def)
                            (("2" (assert) nil)))))))))))))))))
             ("3" (case "f1 = pZero OR f1 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite mul_correct__pZero_pZero)
                    (("1" (assert) nil)))))
                 ("2" (replaces)
                  (("2" (rewrite mul_correct__nZero_pZero)
                    (("2" (assert) nil)))))))
               ("2" (replaces)
                (("2" (rewrite mul_correct__pfinite_pZero)
                  (("1" (assert) nil)
                   ("2" (rewrite mul_correct__nfinite_pZero)
                    (("1" (assert) nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite only_zeros_proj_zero)
                        (("2" (rewrite nfinite?_def)
                          (("2" (rewrite pfinite?_def)
                            (("2" (assert) nil)))))))))))))))))
             ("4" (case "f1 = pZero OR f1 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite mul_correct__pZero_nZero)
                    (("1" (assert) nil)))))
                 ("2" (replaces)
                  (("2" (rewrite mul_correct__nZero_nZero)
                    (("2" (assert) nil)))))))
               ("2" (replaces)
                (("2" (rewrite mul_correct__pfinite_nZero)
                  (("1" (assert) nil)
                   ("2" (rewrite mul_correct__nfinite_nZero)
                    (("1" (assert) nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite only_zeros_proj_zero)
                        (("2" (rewrite nfinite?_def)
                          (("2" (rewrite pfinite?_def)
                            (("2" (assert) nil)))))))))))))))))))))
         ("2" (hide -1 3)
          (("2" (lemma only_zeros_proj_zero)
            (("2" (copy -1)
              (("2" (inst -1 f1)
                (("2" (inst -2 f2)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (rewrite nzfinite?_def) nil)
                           ("2" (rewrite nzfinite?_def)
                            nil))))))))))))))))))))))))
    nil)
   nil nil))
 (qeq_number_symmetric 0
  (qeq_number_symmetric-1 nil 3909567408
   ("" (skeep)
    (("" (typepred "f")
      (("" (use "pInf_nInf_Nan_finite")
        (("" (assert)
          (("" (flatten)
            (("" (split)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (use "qeq_correct__finite")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (hide 2)
                          (("1" (assert)
                            (("1" (use "nzfinite?_def")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (expand "/=")
                                        (("1"
                                          (use "only_zeros_proj_zero")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1"
                                                (replace -1 :hide? T)
                                                (("1"
                                                  (rewrite
                                                   "qeq_correct__pZero_pZero")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1 :hide? T)
                                                (("2"
                                                  (rewrite
                                                   "qeq_correct__nZero_nZero")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "/=")
                  (("2" (replace -1 :hide? T)
                    (("2" (use "qeq_correct__nnan_pInf")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "/=")
                  (("3" (replace -1 :hide? T)
                    (("3" (use "qeq_correct__nnan_nInf")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qeq nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qeq nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_qeq nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (qeq_correct__pZero_pZero formula-decl nil ieee754_qeq nil)
    (qeq_correct__nZero_nZero formula-decl nil ieee754_qeq nil)
    (/= const-decl "boolean" notequal nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (f skolem-const-decl "(LAMBDA (f: datum[b, p, emax]): NOT NaN?(f))"
     ieee754_qeq nil)
    (qeq_correct__finite formula-decl nil ieee754_qeq nil)
    (qeq_correct__nnan_pInf formula-decl nil ieee754_qeq nil)
    (qeq_correct__nnan_nInf formula-decl nil ieee754_qeq nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil))
   shostak)))

