(ieee754_double_base
 (er_ub_value 0
  (er_ub_value-1 nil 3873539739
   ("" (expand "er_ub")
    (("" (expand "smax")
      (("" (expand "value")
        (("" (expand "sigma")
          (("" (expand "sigma")
            (("" (expand "sigma")
              (("" (expand "sigma")
                (("" (expand "sigma")
                  (("" (expand "sigma")
                    (("" (expand "sigma")
                      (("" (expand "sigma")
                        (("" (expand "sigma")
                          (("" (expand "sigma")
                            (("" (expand "sigma")
                              ((""
                                (expand "sigma")
                                ((""
                                  (expand "sigma")
                                  ((""
                                    (expand "sigma")
                                    ((""
                                      (expand "sigma")
                                      ((""
                                        (expand "sigma")
                                        ((""
                                          (expand "sigma")
                                          ((""
                                            (expand "sigma")
                                            ((""
                                              (expand "sigma")
                                              ((""
                                                (expand "sigma")
                                                ((""
                                                  (expand "sigma")
                                                  ((""
                                                    (expand "sigma")
                                                    ((""
                                                      (expand "sigma")
                                                      ((""
                                                        (expand
                                                         "sigma")
                                                        ((""
                                                          (expand
                                                           "sigma")
                                                          ((""
                                                            (expand
                                                             "sigma")
                                                            ((""
                                                              (expand
                                                               "sigma")
                                                              ((""
                                                                (expand
                                                                 "sigma")
                                                                ((""
                                                                  (expand
                                                                   "sigma")
                                                                  ((""
                                                                    (expand
                                                                     "sigma")
                                                                    ((""
                                                                      (expand
                                                                       "sigma")
                                                                      ((""
                                                                        (expand
                                                                         "sigma")
                                                                        ((""
                                                                          (expand
                                                                           "sigma")
                                                                          ((""
                                                                            (expand
                                                                             "sigma")
                                                                            ((""
                                                                              (expand
                                                                               "sigma")
                                                                              ((""
                                                                                (expand
                                                                                 "sigma")
                                                                                ((""
                                                                                  (expand
                                                                                   "sigma")
                                                                                  ((""
                                                                                    (expand
                                                                                     "sigma")
                                                                                    ((""
                                                                                      (expand
                                                                                       "sigma")
                                                                                      ((""
                                                                                        (expand
                                                                                         "sigma")
                                                                                        ((""
                                                                                          (expand
                                                                                           "sigma")
                                                                                          ((""
                                                                                            (expand
                                                                                             "sigma")
                                                                                            ((""
                                                                                              (expand
                                                                                               "sigma")
                                                                                              ((""
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                ((""
                                                                                                  (expand
                                                                                                   "sigma")
                                                                                                  ((""
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    ((""
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      ((""
                                                                                                        (expand
                                                                                                         "sigma")
                                                                                                        ((""
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          ((""
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            ((""
                                                                                                              (expand
                                                                                                               "sigma")
                                                                                                              ((""
                                                                                                                (expand
                                                                                                                 "sigma")
                                                                                                                ((""
                                                                                                                  (expand
                                                                                                                   "sigma")
                                                                                                                  ((""
                                                                                                                    (expand
                                                                                                                     "sigma")
                                                                                                                    ((""
                                                                                                                      (eval-expr
                                                                                                                       "2 ^ 1023 * 2 ^ (-0) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-1) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-2) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-3) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-4) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-5) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-6) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-7) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-8) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-9) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-10) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-11) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-12) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-13) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-14) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-15) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-16) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-17) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-18) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-19) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-20) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-21) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-22) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-23) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-24) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-25) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-26) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-27) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-28) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-29) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-30) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-31) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-32) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-33) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-34) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-35) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-36) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-37) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-38) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-39) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-40) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-41) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-42) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-43) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-44) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-45) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-46) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-47) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-48) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-49) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-50) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-51) * (-1) ^ 0 + 2 ^ 1023 * 2 ^ (-52) * (-1) ^ 0")
                                                                                                                      ((""
                                                                                                                        (eval-formula)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smax const-decl "significand" ieee754_domain nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (sigma_rat application-judgement "rational" ieee754_domain nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sigma def-decl "real" sigma reals)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (value const-decl "real" ieee754_domain nil)
    (er_ub const-decl "er_real" ieee754_domain nil))
   shostak))
 (er_lb_value 0
  (er_lb_value-1 nil 3873541233
   ("" (expand "er_lb")
    (("" (expand "smax")
      (("" (expand "value")
        (("" (expand "sigma")
          (("" (expand "sigma")
            (("" (expand "sigma")
              (("" (expand "sigma")
                (("" (expand "sigma")
                  (("" (expand "sigma")
                    (("" (expand "sigma")
                      (("" (expand "sigma")
                        (("" (expand "sigma")
                          (("" (expand "sigma")
                            (("" (expand "sigma")
                              ((""
                                (expand "sigma")
                                ((""
                                  (expand "sigma")
                                  ((""
                                    (expand "sigma")
                                    ((""
                                      (expand "sigma")
                                      ((""
                                        (expand "sigma")
                                        ((""
                                          (expand "sigma")
                                          ((""
                                            (expand "sigma")
                                            ((""
                                              (expand "sigma")
                                              ((""
                                                (expand "sigma")
                                                ((""
                                                  (expand "sigma")
                                                  ((""
                                                    (expand "sigma")
                                                    ((""
                                                      (expand "sigma")
                                                      ((""
                                                        (expand
                                                         "sigma")
                                                        ((""
                                                          (expand
                                                           "sigma")
                                                          ((""
                                                            (expand
                                                             "sigma")
                                                            ((""
                                                              (expand
                                                               "sigma")
                                                              ((""
                                                                (expand
                                                                 "sigma")
                                                                ((""
                                                                  (expand
                                                                   "sigma")
                                                                  ((""
                                                                    (expand
                                                                     "sigma")
                                                                    ((""
                                                                      (expand
                                                                       "sigma")
                                                                      ((""
                                                                        (expand
                                                                         "sigma")
                                                                        ((""
                                                                          (expand
                                                                           "sigma")
                                                                          ((""
                                                                            (expand
                                                                             "sigma")
                                                                            ((""
                                                                              (expand
                                                                               "sigma")
                                                                              ((""
                                                                                (expand
                                                                                 "sigma")
                                                                                ((""
                                                                                  (expand
                                                                                   "sigma")
                                                                                  ((""
                                                                                    (expand
                                                                                     "sigma")
                                                                                    ((""
                                                                                      (expand
                                                                                       "sigma")
                                                                                      ((""
                                                                                        (expand
                                                                                         "sigma")
                                                                                        ((""
                                                                                          (expand
                                                                                           "sigma")
                                                                                          ((""
                                                                                            (expand
                                                                                             "sigma")
                                                                                            ((""
                                                                                              (expand
                                                                                               "sigma")
                                                                                              ((""
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                ((""
                                                                                                  (expand
                                                                                                   "sigma")
                                                                                                  ((""
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    ((""
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      ((""
                                                                                                        (expand
                                                                                                         "sigma")
                                                                                                        ((""
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          ((""
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            ((""
                                                                                                              (expand
                                                                                                               "sigma")
                                                                                                              ((""
                                                                                                                (expand
                                                                                                                 "sigma")
                                                                                                                ((""
                                                                                                                  (expand
                                                                                                                   "sigma")
                                                                                                                  ((""
                                                                                                                    (expand
                                                                                                                     "sigma")
                                                                                                                    ((""
                                                                                                                      (eval-formula)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smax const-decl "significand" ieee754_domain nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (sigma_rat application-judgement "rational" ieee754_domain nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sigma def-decl "real" sigma reals)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (value const-decl "real" ieee754_domain nil)
    (er_lb const-decl "er_real" ieee754_domain nil))
   shostak))
 (add_double_finite_def 0
  (add_double_finite_def-1 nil 3884076137
   ("" (skeep)
    (("" (rewrite "add_def") (("" (rewrite "add_finite_def") nil nil))
      nil))
    nil)
   ((add_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (add_finite_def formula-decl nil ieee754_add nil))
   shostak))
 (sub_double_finite_def 0
  (sub_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "sub_def")
      (("" (rewrite "sub_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sub_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sub_finite_def formula-decl nil ieee754_sub nil))
   shostak))
 (mul_double_finite_def 0
  (mul_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "mul_def")
      (("" (rewrite "mul_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((mul_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_finite_def formula-decl nil ieee754_mul nil))
   shostak))
 (div_double_finite_def_TCC1 0
  (div_double_finite_def_TCC1-1 nil 3884076136
   ("" (skeep :preds? t)
    (("" (expand "zero?_double")
      (("" (lemma "only_zeros_proj_zero")
        (("" (inst -1 "f2")
          (("" (expand "safe_proj")
            (("" (replaces)
              (("" (rewrite "pZero_def")
                (("" (rewrite "nZero_def") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero?_double const-decl "bool" ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (TRUE const-decl "bool" booleans nil)
    (nZero_def formula-decl nil ieee754_double_base nil)
    (pZero_def formula-decl nil ieee754_double_base nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil))
   nil
   (div_double_finite_def subtype
    "ieee754_semantics[2, 53, 1023].safe_proj(ieee754_double_base.f2)"
    "nznum")))
 (div_double_finite_def 0
  (div_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "div_def")
      (("" (rewrite "div_finite_def")
        (("1" (expand "safe_proj") (("1" (propax) nil nil)) nil)
         ("2" (typepred "f2")
          (("2" (rewrite "nzfinite?_def")
            (("2" (expand "/=")
              (("2" (lemma "only_zeros_proj_zero")
                (("2" (inst -1 "f2")
                  (("2" (assert)
                    (("2" (expand "zero?_double")
                      (("2" (rewrite "nZero_def")
                        (("2" (rewrite "pZero_def") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero?_double const-decl "bool" ieee754_double_base nil)
    (/= const-decl "boolean" notequal nil)
    (pZero_def formula-decl nil ieee754_double_base nil)
    (nZero_def formula-decl nil ieee754_double_base nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (div_finite_def formula-decl nil ieee754_div nil))
   shostak))
 (qeq_double_finite_equiv 0
  (qeq_double_finite_equiv-1 nil 3909480296
   ("" (skeep)
    (("" (use "qeq_def")
      (("" (replace -1)
        (("" (use "qeq_finite_equiv") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((qeq_def formula-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (finite? const-decl "bool" ieee754_data nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (qeq_finite_equiv formula-decl nil ieee754_qeq nil))
   shostak))
 (qeq_double_finite_def 0
  (qeq_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "qeq_def")
      (("" (rewrite "qeq_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((qeq_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (qeq_finite_def formula-decl nil ieee754_qeq nil))
   shostak))
 (qge_double_finite_def 0
  (qge_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "qge_def")
      (("" (rewrite "qge_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((qge_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (qge_finite_def formula-decl nil ieee754_qge nil))
   shostak))
 (qgt_double_finite_def 0
  (qgt_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "qgt_def")
      (("" (rewrite "qgt_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((qgt_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (qgt_finite_def formula-decl nil ieee754_qgt nil))
   shostak))
 (qle_double_finite_def 0
  (qle_double_finite_def-1 nil 3884078527
   ("" (skeep)
    (("" (rewrite "qle_def")
      (("" (rewrite "qle_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((qle_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (qle_finite_def formula-decl nil ieee754_qle nil))
   shostak))
 (qle_double_finite_safe_def 0
  (qle_double_finite_safe_def-1 nil 3909480301
   ("" (skeep)
    (("" (use "qle_def")
      (("" (replace -1) (("" (use "qle_finite_safe_def") nil nil))
        nil))
      nil))
    nil)
   ((qle_def formula-decl nil ieee754_double_base nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (qle_finite_safe_def formula-decl nil ieee754_qle nil))
   shostak))
 (qlt_double_finite_def 0
  (qlt_double_finite_def-1 nil 3884078528
   ("" (skeep)
    (("" (rewrite "qlt_def")
      (("" (rewrite "qlt_finite_def")
        (("" (expand "safe_proj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((qlt_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (qlt_finite_def formula-decl nil ieee754_qlt nil))
   shostak))
 (neg_double_finite_def 0
  (neg_double_finite_def-1 nil 3884078528
   ("" (skeep)
    (("" (rewrite "neg_def") (("" (rewrite "neg_finite_def") nil nil))
      nil))
    nil)
   ((neg_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (neg_finite_def formula-decl nil ieee754_neg nil))
   shostak))
 (finite?_double_add 0
  (finite?_double_add-1 nil 3884080203
   ("" (skeep)
    (("" (rewrite "add_def")
      (("" (rewrite "add_finites_is_finite") nil nil)) nil))
    nil)
   ((add_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (add_finites_is_finite formula-decl nil ieee754_add nil))
   shostak))
 (finite?_double_sub 0
  (finite?_double_sub-1 nil 3884080276
   ("" (skeep)
    (("" (rewrite "sub_def")
      (("" (rewrite "sub_finites_is_finite") nil nil)) nil))
    nil)
   ((sub_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (sub_finites_is_finite formula-decl nil ieee754_sub nil))
   shostak))
 (finite?_double_mul 0
  (finite?_double_mul-1 nil 3884080276
   ("" (skeep)
    (("" (rewrite "mul_def")
      (("" (rewrite "mul_finites_is_finite") nil nil)) nil))
    nil)
   ((mul_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (mul_finites_is_finite formula-decl nil ieee754_mul nil))
   shostak))
 (finite?_double_div 0
  (finite?_double_div-1 nil 3884080276
   ("" (skeep)
    (("" (rewrite "div_def")
      (("" (rewrite "div_finites_is_finite") nil nil)) nil))
    nil)
   ((div_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero?_double const-decl "bool" ieee754_double_base nil)
    (div_finites_is_finite formula-decl nil ieee754_div nil))
   shostak))
 (finite?_double_neg 0
  (finite?_double_neg-1 nil 3884088332
   ("" (skeep)
    (("" (use "neg_def")
      (("" (replace -1)
        (("" (split)
          (("1" (flatten)
            (("1" (lemma "neg_finites_is_finite")
              (("1" (inst -1 "f") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (use "finite_neg_is_finite") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_def formula-decl nil ieee754_double_base nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (neg_finites_is_finite formula-decl nil ieee754_neg nil)
    (finite_neg_is_finite formula-decl nil ieee754_neg nil))
   shostak))
 (double__finite?_projs_finite?_add 0
  (double__finite?_projs_finite?_add-1 nil 3884095359
   ("" (skeep)
    (("" (rewrite "add_def")
      (("" (rewrite "finite?_projs_finite?_add") nil nil)) nil))
    nil)
   ((add_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (finite?_projs_finite?_add formula-decl nil ieee754_add nil))
   shostak))
 (double__finite?_projs_finite?_sub 0
  (double__finite?_projs_finite?_sub-1 nil 3884095423
   ("" (skeep)
    (("" (rewrite "sub_def")
      (("" (rewrite "finite?_projs_finite?_sub") nil nil)) nil))
    nil)
   ((sub_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (finite?_projs_finite?_sub formula-decl nil ieee754_sub nil))
   shostak))
 (double__finite?_projs_finite?_mul 0
  (double__finite?_projs_finite?_mul-1 nil 3884095423
   ("" (skeep)
    (("" (rewrite "mul_def")
      (("" (rewrite "finite?_projs_finite?_mul") nil nil)) nil))
    nil)
   ((mul_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (finite?_projs_finite?_mul formula-decl nil ieee754_mul nil))
   shostak))
 (double__finite?_projs_finite?_div 0
  (double__finite?_projs_finite?_div-1 nil 3884095423
   ("" (skeep)
    (("" (rewrite "div_def")
      (("" (rewrite "finite?_projs_finite?_div")
        (("1" (expand "safe_proj") (("1" (propax) nil nil)) nil)
         ("2" (typepred "f2")
          (("2" (rewrite "nzfinite?_def")
            (("2" (expand "/=")
              (("2" (expand "zero?_double")
                (("2" (lemma "only_zeros_proj_zero")
                  (("2" (inst -1 "f2")
                    (("2" (rewrite "pZero_def")
                      (("2" (rewrite "nZero_def")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_def formula-decl nil ieee754_double_base nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (binary64 type-eq-decl nil ieee754_double_base nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? const-decl "bool" ieee754_data nil)
    (double type-eq-decl nil ieee754_double_base nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero?_double const-decl "bool" ieee754_double_base nil)
    (/= const-decl "boolean" notequal nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (pZero_def formula-decl nil ieee754_double_base nil)
    (nZero_def formula-decl nil ieee754_double_base nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (finite?_projs_finite?_div formula-decl nil ieee754_div nil))
   shostak)))

