(ieee754_qlt
 (qlt_finite_def 0
  (qlt_finite_def-1 nil 3884074162
   ("" (skeep)
    (("" (rewrite "qlt_correct__finite")
      (("" (flatten)
        (("" (rewrite "nzfinite?_def")
          (("" (rewrite "nzfinite?_def")
            (("" (expand "/=")
              (("" (lemma "only_zeros_proj_zero")
                (("" (copy -1)
                  (("" (inst -1 "f1")
                    (("" (inst -2 "f2")
                      (("" (assert)
                        (("" (prop)
                          (("1"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("2"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("3"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil)
                           ("4"
                            (match - "f1 = %f1" "f2 = %f2" step
                                   (then
                                    (replaces)
                                    (let
                                     ((axm
                                       (format
                                        nil
                                        "~a_correct__%f1_%f2"
                                        (subseq (label *ps*) 0 3))))
                                     (rewrite axm))))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qlt_correct__finite formula-decl nil ieee754_qlt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_qlt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qlt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qlt nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (qlt_correct__pZero_pZero formula-decl nil ieee754_qlt nil)
    (qlt_correct__pZero_nZero formula-decl nil ieee754_qlt nil)
    (qlt_correct__nZero_pZero formula-decl nil ieee754_qlt nil)
    (qlt_correct__nZero_nZero formula-decl nil ieee754_qlt nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil))
   nil)))

