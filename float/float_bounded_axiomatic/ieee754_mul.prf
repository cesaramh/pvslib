(ieee754_mul
 (mul_finite_def 0
  (mul_finite_def-1 nil 3883993431
   ("" (skeep)
    (("" (case "proj(f1) = 0 AND proj(f2) = 0")
      (("1" (flatten)
        (("1" (lemma "only_zeros_proj_zero")
          (("1" (copy -1)
            (("1" (inst -1 "f1")
              (("1" (inst -2 "f2")
                (("1" (replaces)
                  (("1" (prop)
                    (("1" (replaces)
                      (("1" (rewrite "mul_correct__pZero_pZero")
                        (("1" (assert)
                          (("1" (rewrite "round_zero") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (rewrite "mul_correct__pZero_nZero")
                        (("2" (assert)
                          (("2" (expand "safe_proj")
                            (("2" (assert)
                              (("2"
                                (lemma "round_zero")
                                (("2"
                                  (replaces :dir rl)
                                  (("2"
                                    (rewrite "proj_def_nZero")
                                    (("2"
                                      (rewrite "proj_def_pZero")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (replaces)
                      (("3" (rewrite "mul_correct__nZero_pZero")
                        (("3" (assert)
                          (("3" (expand "safe_proj")
                            (("3" (assert)
                              (("3"
                                (rewrite "proj_def_nZero")
                                (("3"
                                  (lemma "round_zero")
                                  (("3"
                                    (replaces :dir rl)
                                    (("3"
                                      (rewrite "proj_def_pZero")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (replaces)
                      (("4" (rewrite "mul_correct__nZero_nZero")
                        (("4" (assert)
                          (("4" (rewrite "round_zero") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (prop)
        (("1" (case "proj(f2) = 0")
          (("1" (lemma "only_zeros_proj_zero")
            (("1" (inst?)
              (("1" (replaces)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (replaces)
                      (("1" (rewrite "mul_correct__pfinite_pZero")
                        (("1" (rewrite "round_zero") nil nil)
                         ("2" (rewrite "mul_correct__nfinite_pZero")
                          (("1" (rewrite "round_zero" :dir rl)
                            (("1" (expand "safe_proj")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "proj_def_nZero")
                                  (("1"
                                    (rewrite "proj_def_pZero")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 4)
                            (("2" (rewrite "nfinite?_def")
                              (("2"
                                (rewrite "pfinite?_def")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (rewrite "mul_correct__pfinite_nZero")
                        (("1" (rewrite "round_zero" :dir rl)
                          (("1" (expand "safe_proj")
                            (("1" (assert)
                              (("1"
                                (rewrite "proj_def_nZero")
                                (("1"
                                  (rewrite "proj_def_pZero")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "mul_correct__nfinite_nZero")
                          (("1" (rewrite "round_zero") nil nil)
                           ("2" (hide 4)
                            (("2" (rewrite "nfinite?_def")
                              (("2"
                                (rewrite "pfinite?_def")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "mul_correct__finite")
            (("2" (hide 4)
              (("2" (rewrite "nzfinite?_def")
                (("2" (rewrite "nzfinite?_def") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (case "proj(f1) = 0")
          (("1" (lemma "only_zeros_proj_zero")
            (("1" (inst?)
              (("1" (replaces)
                (("1" (prop)
                  (("1" (replaces)
                    (("1" (rewrite "mul_correct__pZero_pfinite")
                      (("1" (case "0 * proj(f2) = 0")
                        (("1" (replaces)
                          (("1" (rewrite "round_zero") nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (rewrite "mul_correct__pZero_nfinite")
                        (("1" (case "0 * proj(f2) = 0")
                          (("1" (replaces)
                            (("1" (rewrite "round_zero" :dir rl)
                              (("1"
                                (expand "safe_proj")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "proj_def_pZero")
                                    (("1"
                                      (rewrite "proj_def_nZero")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (rewrite "nfinite?_def")
                            (("2" (rewrite "pfinite?_def")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces)
                    (("2" (rewrite "mul_correct__nZero_pfinite")
                      (("1" (case "0 * proj(f2) = 0")
                        (("1" (replaces)
                          (("1" (rewrite "round_zero" :dir rl)
                            (("1" (expand "safe_proj")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "proj_def_nZero")
                                  (("1"
                                    (rewrite "proj_def_pZero")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (rewrite "mul_correct__nZero_nfinite")
                        (("1" (case "0 * proj(f2) = 0")
                          (("1" (replaces)
                            (("1" (rewrite "round_zero") nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (rewrite "nfinite?_def")
                            (("2" (rewrite "pfinite?_def")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "mul_correct__finite")
            (("2" (hide 4)
              (("2" (rewrite "nzfinite?_def")
                (("2" (rewrite "nzfinite?_def") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "er_real" ieee754_semantics nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (finite? const-decl "bool" ieee754_data nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_mul nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_mul nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_mul nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (TRUE const-decl "bool" booleans nil)
    (mul_correct__nZero_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_pZero formula-decl nil ieee754_mul nil)
    (nzero_finite formula-decl nil ieee754_data nil)
    (zero_is_er formula-decl nil ieee754_domain nil)
    (finite_round_er formula-decl nil ieee754_semantics nil)
    (proj_def_pZero formula-decl nil ieee754_semantics nil)
    (proj_def_nZero formula-decl nil ieee754_semantics nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (mul_correct__pZero_nZero formula-decl nil ieee754_mul nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (round_zero formula-decl nil ieee754_semantics nil)
    (mul_correct__pZero_pZero formula-decl nil ieee754_mul nil)
    (mul_correct__pZero_pfinite formula-decl nil ieee754_mul nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mul_correct__pZero_nfinite formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_pfinite formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_nfinite formula-decl nil ieee754_mul nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_correct__nfinite_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__pfinite_nZero formula-decl nil ieee754_mul nil)
    (nfinite? const-decl "bool" ieee754_semantics nil)
    (mul_correct__nfinite_pZero formula-decl nil ieee754_mul nil)
    (pzero_finite formula-decl nil ieee754_data nil)
    (nfinite?_def formula-decl nil ieee754_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pfinite?_def formula-decl nil ieee754_semantics nil)
    (mul_correct__pfinite_pZero formula-decl nil ieee754_mul nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (mul_correct__finite formula-decl nil ieee754_mul nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil))
   shostak))
 (mul_finites_is_finite 0
  (mul_finites_is_finite-1 nil 3883994085
   ("" (skeep)
    (("" (case "NaN?(f1) OR NaN?(f2)")
      (("1" (lemma "mul_correct__nan")
        (("1" (inst?)
          (("1" (replaces -2)
            (("1" (rewrite "nan_not_finite") nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (case "finite?(f2)")
            (("1" (rewrite "pInf_nInf_Nan_finite" + :dir rl)
              (("1" (assert)
                (("1" (expand "/=")
                  (("1" (prop)
                    (("1" (replaces)
                      (("1" (rewrite "mul_correct__pInf_pfinite")
                        (("1" (rewrite "pinf_not_finite") nil nil)
                         ("2" (rewrite "mul_correct__pInf_nfinite")
                          (("1" (rewrite "ninf_not_finite") nil nil)
                           ("2" (case "proj(f2) = 0")
                            (("1" (lemma "only_zeros_proj_zero")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replaces)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replaces)
                                      (("1"
                                        (lemma
                                         "mul_correct__pInf_pZero")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (rewrite "nan_not_finite")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "mul_correct__pInf_nZero")
                                          (("2"
                                            (rewrite "nan_not_finite")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 4)
                              (("2"
                                (rewrite "nfinite?_def")
                                (("2"
                                  (rewrite "pfinite?_def")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (rewrite "mul_correct__nInf_pfinite")
                        (("1" (rewrite "ninf_not_finite") nil nil)
                         ("2" (rewrite "mul_correct__nInf_nfinite")
                          (("1" (rewrite "pinf_not_finite") nil nil)
                           ("2" (case "proj(f2) = 0")
                            (("1" (lemma "only_zeros_proj_zero")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replaces)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replaces)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma
                                           "mul_correct__nInf_pZero")
                                          (("1"
                                            (rewrite "nan_not_finite")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "mul_correct__nInf_nZero")
                                          (("2"
                                            (rewrite "nan_not_finite")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2)
                              (("2"
                                (rewrite "nfinite?_def")
                                (("2"
                                  (rewrite "pfinite?_def")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "pInf_nInf_Nan_finite" :dir rl)
              (("2" (rewrite "pInf_nInf_Nan_finite" :dir rl)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (replaces)
                      (("1" (rewrite "mul_correct__pInf_pInf")
                        (("1" (rewrite "pinf_not_finite") nil nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (rewrite "mul_correct__nInf_pInf")
                        (("2" (rewrite "ninf_not_finite") nil nil))
                        nil))
                      nil)
                     ("3" (replaces)
                      (("3" (rewrite "mul_correct__pInf_nInf")
                        (("3" (rewrite "ninf_not_finite") nil nil))
                        nil))
                      nil)
                     ("4" (replaces)
                      (("4" (rewrite "mul_correct__nInf_nInf")
                        (("4" (rewrite "pinf_not_finite") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "finite?(f1)")
            (("1" (rewrite "pInf_nInf_Nan_finite" + :dir rl)
              (("1" (assert)
                (("1" (prop)
                  (("1" (replaces)
                    (("1" (rewrite "mul_correct__pfinite_pInf")
                      (("1" (rewrite "pinf_not_finite") nil nil)
                       ("2" (rewrite "mul_correct__nfinite_pInf")
                        (("1" (rewrite "ninf_not_finite") nil nil)
                         ("2" (case "proj(f1) = 0")
                          (("1" (lemma "only_zeros_proj_zero")
                            (("1" (inst? -1)
                              (("1"
                                (replaces)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replaces)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma
                                         "mul_correct__pZero_pInf")
                                        (("1"
                                          (rewrite "nan_not_finite")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma
                                         "mul_correct__nZero_pInf")
                                        (("2"
                                          (rewrite "nan_not_finite")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2" (rewrite "pfinite?_def")
                              (("2"
                                (rewrite "nfinite?_def")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces)
                    (("2" (rewrite "mul_correct__pfinite_nInf")
                      (("1" (rewrite "ninf_not_finite") nil nil)
                       ("2" (rewrite "mul_correct__nfinite_nInf")
                        (("1" (rewrite "pinf_not_finite") nil nil)
                         ("2" (case "proj(f1) = 0")
                          (("1" (lemma "only_zeros_proj_zero")
                            (("1" (inst? -1)
                              (("1"
                                (replaces)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replaces)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma
                                         "mul_correct__pZero_nInf")
                                        (("1"
                                          (rewrite "nan_not_finite")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma
                                         "mul_correct__nZero_nInf")
                                        (("2"
                                          (rewrite "nan_not_finite")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2" (rewrite "nfinite?_def")
                              (("2"
                                (rewrite "pfinite?_def")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "pInf_nInf_Nan_finite" :dir rl)
              (("2" (rewrite "pInf_nInf_Nan_finite" :dir rl)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (replaces)
                      (("1" (rewrite "mul_correct__pInf_pInf")
                        (("1" (rewrite "pinf_not_finite") nil nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (rewrite "mul_correct__pInf_nInf")
                        (("2" (rewrite "ninf_not_finite") nil nil))
                        nil))
                      nil)
                     ("3" (replaces)
                      (("3" (rewrite "mul_correct__nInf_pInf")
                        (("3" (rewrite "ninf_not_finite") nil nil))
                        nil))
                      nil)
                     ("4" (replaces)
                      (("4" (rewrite "mul_correct__nInf_nInf")
                        (("4" (rewrite "pinf_not_finite") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_mul nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_mul nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_mul nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nan_not_finite formula-decl nil ieee754_data nil)
    (mul_ieee754 const-decl "[datum, datum -> datum]" ieee754_mul nil)
    (TRUE const-decl "bool" booleans nil)
    (mul_correct__nan formula-decl nil ieee754_mul nil)
    (mul_correct__nInf_nInf formula-decl nil ieee754_mul nil)
    (mul_correct__pInf_nInf formula-decl nil ieee754_mul nil)
    (mul_correct__nInf_pInf formula-decl nil ieee754_mul nil)
    (mul_correct__pInf_pInf formula-decl nil ieee754_mul nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil)
    (/= const-decl "boolean" notequal nil)
    (mul_correct__nInf_nfinite formula-decl nil ieee754_mul nil)
    (mul_correct__nInf_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__nInf_pZero formula-decl nil ieee754_mul nil)
    (nInf const-decl "datum" ieee754_data nil)
    (mul_correct__nInf_pfinite formula-decl nil ieee754_mul nil)
    (nfinite? const-decl "bool" ieee754_semantics nil)
    (mul_correct__pInf_nfinite formula-decl nil ieee754_mul nil)
    (ninf_not_finite formula-decl nil ieee754_data nil)
    (pfinite?_def formula-decl nil ieee754_semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nfinite?_def formula-decl nil ieee754_semantics nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (mul_correct__pInf_nZero formula-decl nil ieee754_mul nil)
    (nZero const-decl "datum" ieee754_data nil)
    (pInf const-decl "datum" ieee754_data nil)
    (pZero const-decl "datum" ieee754_data nil)
    (mul_correct__pInf_pZero formula-decl nil ieee754_mul nil)
    (proj const-decl "er_real" ieee754_semantics nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (pinf_not_finite formula-decl nil ieee754_data nil)
    (mul_correct__pInf_pfinite formula-decl nil ieee754_mul nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (finite? const-decl "bool" ieee754_data nil)
    (mul_correct__pfinite_pInf formula-decl nil ieee754_mul nil)
    (mul_correct__pZero_pInf formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_pInf formula-decl nil ieee754_mul nil)
    (mul_correct__nfinite_pInf formula-decl nil ieee754_mul nil)
    (mul_correct__pfinite_nInf formula-decl nil ieee754_mul nil)
    (mul_correct__pZero_nInf formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_nInf formula-decl nil ieee754_mul nil)
    (mul_correct__nfinite_nInf formula-decl nil ieee754_mul nil))
   nil))
 (finite?_projs_finite?_mul 0
  (finite?_projs_finite?_mul-1 nil 3883994123
   ("" (skeep)
    (("" (rewrite "mul_correct__finite")
      ((""
        (case "(f1 = pZero or f1 = nZero) OR (f2 = pZero or f2 = nZero)")
        (("1" (hide 1)
          (("1" (prop)
            (("1" (case "f2 = pZero OR f2 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite "mul_correct__pZero_pZero")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replaces)
                  (("2" (rewrite "mul_correct__pZero_nZero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replaces)
                (("2" (rewrite "mul_correct__pZero_pfinite")
                  (("1" (assert) nil nil)
                   ("2" (rewrite "mul_correct__pZero_nfinite")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite "only_zeros_proj_zero")
                        (("2" (rewrite "nfinite?_def")
                          (("2" (rewrite "pfinite?_def")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "f2 = pZero OR f2 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite "mul_correct__nZero_pZero")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replaces)
                  (("2" (rewrite "mul_correct__nZero_nZero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replaces)
                (("2" (rewrite "mul_correct__nZero_pfinite")
                  (("1" (assert) nil nil)
                   ("2" (rewrite "mul_correct__nZero_nfinite")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite "only_zeros_proj_zero")
                        (("2" (rewrite "nfinite?_def")
                          (("2" (rewrite "pfinite?_def")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (case "f1 = pZero OR f1 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite "mul_correct__pZero_pZero")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replaces)
                  (("2" (rewrite "mul_correct__nZero_pZero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replaces)
                (("2" (rewrite "mul_correct__pfinite_pZero")
                  (("1" (assert) nil nil)
                   ("2" (rewrite "mul_correct__nfinite_pZero")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite "only_zeros_proj_zero")
                        (("2" (rewrite "nfinite?_def")
                          (("2" (rewrite "pfinite?_def")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (case "f1 = pZero OR f1 = nZero")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite "mul_correct__pZero_nZero")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replaces)
                  (("2" (rewrite "mul_correct__nZero_nZero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replaces)
                (("2" (rewrite "mul_correct__pfinite_nZero")
                  (("1" (assert) nil nil)
                   ("2" (rewrite "mul_correct__nfinite_nZero")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 4)
                      (("2" (rewrite "only_zeros_proj_zero")
                        (("2" (rewrite "nfinite?_def")
                          (("2" (rewrite "pfinite?_def")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 3)
          (("2" (lemma "only_zeros_proj_zero")
            (("2" (copy -1)
              (("2" (inst -1 "f1")
                (("2" (inst -2 "f2")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (rewrite "nzfinite?_def") nil nil)
                           ("2" (rewrite "nzfinite?_def") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mul_correct__finite formula-decl nil ieee754_mul nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_mul nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_mul nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_mul nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (mul_correct__pfinite_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__nfinite_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__pfinite_pZero formula-decl nil ieee754_mul nil)
    (mul_correct__nfinite_pZero formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_nZero formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_pZero formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_pfinite formula-decl nil ieee754_mul nil)
    (mul_correct__nZero_nfinite formula-decl nil ieee754_mul nil)
    (nzero_finite formula-decl nil ieee754_data nil)
    (mul_correct__pZero_nZero formula-decl nil ieee754_mul nil)
    (TRUE const-decl "bool" booleans nil)
    (pzero_finite formula-decl nil ieee754_data nil)
    (mul_correct__pZero_pZero formula-decl nil ieee754_mul nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (mul_correct__pZero_pfinite formula-decl nil ieee754_mul nil)
    (nfinite?_def formula-decl nil ieee754_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pfinite?_def formula-decl nil ieee754_semantics nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (mul_correct__pZero_nfinite formula-decl nil ieee754_mul nil)
    (nfinite? const-decl "bool" ieee754_semantics nil)
    (nZero const-decl "datum" ieee754_data nil)
    (pZero const-decl "datum" ieee754_data nil))
   nil)))

