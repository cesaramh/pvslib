(IEEE_854_values
 (value_digit_TCC1 0
  (value_digit_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (value_digit subtype "((number_fields.-)(IEEE_854_values.n))"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (value_TCC1 0
  (value_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (value subtype "IEEE_854_values.Exp(IEEE_854_values.fin)"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (shift_left_TCC1 0
  (shift_left_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (shift_left subtype "0" "naturalnumbers.below(IEEE_854_values.b)")))
 (shift_left_TCC2 0
  (shift_left_TCC2-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (shift_left subtype "(number_fields.+)(IEEE_854_values.i, 1)"
    "naturalnumbers.below(IEEE_854_values.p)")))
 (normalize_TCC1 0
  (normalize_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (normalize subtype
    "(number_fields.-)(IEEE_854_values.Exp(IEEE_854_values.fin), IEEE_854_values.E_min)"
    "naturalnumber")))
 (normalize_TCC2 0
  (normalize_TCC2-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (normalize subtype "0" "naturalnumbers.below(IEEE_854_values.p)")))
 (normalize_TCC3 0
  (normalize_TCC3-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (normalize subtype
    "(number_fields.-)(IEEE_854_values.Exp(IEEE_854_values.fin), 1)"
    "Exponent")))
 (normalize_TCC4 0
  (normalize_TCC4-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (normalize termination
    "IEEE_854_values.normalize(IEEE_854_values.finite(IEEE_854_values.sign(IEEE_854_values.fin), (number_fields.-)(IEEE_854_values.Exp(IEEE_854_values.fin), 1), IEEE_854_values.shift_left(IEEE_854_values.d(IEEE_854_values.fin))))"
    "nil")))
 (normalize_idempotent 0
  (normalize_idempotent-1 nil 3321199176
   ("" (skosimp*)
    (("" (case-replace "fin!1=finite(sign(fin!1),Exp(fin!1),d(fin!1))")
      (("1" (hide -1)
        (("1"
          (case "forall (s:sign_rep),(d:digits),(n:upto(E_max-E_min)):
              normalize(normalize(finite(s,n+E_min,d)))=normalize(finite(s,n+E_min,d))")
          (("1" (inst - "sign(fin!1)" "d(fin!1)" "Exp(fin!1)-E_min")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
              (("1" (skosimp*)
                (("1" (expand "normalize") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (rewrite "normalize" +)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (rewrite "normalize") nil nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) (("2" (rewrite "fp_num_finite_eta") nil nil))
        nil))
      nil))
    nil)
   ((fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shift_left const-decl "digits" IEEE_854_values nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil))
   nil))
 (subnormal?_TCC1 0
  (subnormal?_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/= const-decl "boolean" notequal nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (value const-decl "real" IEEE_854_values nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil))
   nil
   (subnormal? subtype "0" "naturalnumbers.below(IEEE_854_values.p)")))
 (normal?_TCC1 0
  (normal?_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (normal? subtype "0" "naturalnumbers.below(IEEE_854_values.p)")))
 (max_significand_TCC1 0
  (max_significand_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (max_significand subtype "(number_fields.-)(IEEE_854_values.b, 1)"
    "naturalnumbers.below(IEEE_854_values.b)")))
 (min_significand_TCC1 0
  (min_significand_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (min_significand subtype "0"
    "naturalnumbers.below(IEEE_854_values.b)")))
 (min_significand_TCC2 0
  (min_significand_TCC2-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (min_significand subtype "1"
    "naturalnumbers.below(IEEE_854_values.b)")))
 (d_zero_TCC1 0
  (d_zero_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (d_zero subtype "0" "naturalnumbers.below(IEEE_854_values.b)")))
 (Sum_value0 0
  (Sum_value0-2 "" 3790102473
   ("" (induct-and-simplify "n") (("" (grind) nil nil)) nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sum def-decl "real" sum_hack nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (d_zero const-decl "digits" IEEE_854_values nil)
    (nat_induction formula-decl nil naturalnumbers nil))
   shostak)
  (Sum_value0-1 nil 3321199176
   ("" (induct-and-simplify "n") (("" (grind) nil)) nil)
   ((Sum def-decl "real" sum_hack nil)) nil))
 (zero_finite_d_zero 0
  (zero_finite_d_zero-1 nil 3321199176
   ("" (grind :rewrites "Sum_value0") nil nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (value const-decl "real" IEEE_854_values nil)
    (Sum_value0 formula-decl nil IEEE_854_values nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (max_fp_pos_TCC1 0
  (max_fp_pos_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (max_fp_pos subtype "IEEE_854_values.E_max" "Exponent")))
 (min_fp_pos_TCC1 0
  (min_fp_pos_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (min_fp_pos subtype "IEEE_854_values.E_min" "Exponent")))
 (pos_zero_TCC1 0
  (pos_zero_TCC1-1 nil 3321199176
   ("" (rewrite "zero_finite_d_zero") nil nil)
   ((pos const-decl "sign_rep" enumerated_type_defs nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_finite_d_zero formula-decl nil IEEE_854_values nil))
   nil
   (pos_zero subtype
    "IEEE_854_values.finite(enumerated_type_defs.pos, IEEE_854_values.E_min, IEEE_854_values.d_zero)"
    "{fin | IEEE_854_values.zero?(IEEE_854_values.fin)}")))
 (neg_zero_TCC1 0
  (neg_zero_TCC1-1 nil 3321199176
   ("" (rewrite "zero_finite_d_zero") nil nil)
   ((neg const-decl "sign_rep" enumerated_type_defs nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_finite_d_zero formula-decl nil IEEE_854_values nil))
   nil
   (neg_zero subtype
    "IEEE_854_values.finite(enumerated_type_defs.neg, IEEE_854_values.E_min, IEEE_854_values.d_zero)"
    "{fin | IEEE_854_values.zero?(IEEE_854_values.fin)}")))
 (max_pos_TCC1 0
  (max_pos_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((pos const-decl "sign_rep" enumerated_type_defs nil)
    (max_fp_pos const-decl "fp_num" IEEE_854_values nil))
   nil
   (max_pos subtype "IEEE_854_values.max_fp_pos"
    "(IEEE_854_values.finite?)")))
 (max_pos_TCC2 0
  (max_pos_TCC2-2 "" 3790102477
   ("" (expand "value")
    (("" (expand "max_fp_pos")
      (("" (expand "pos")
        (("" (rewrite "expt_x0")
          (("" (lemma "pos_times_gt")
            (("" (assert)
              (("" (inst?)
                (("" (assert)
                  (("" (lemma "expt_pos")
                    (("" (inst?)
                      ((""
                        (case "Sum(p, value_digit(max_significand)) > 0")
                        (("1" (ground) nil nil)
                         ("2" (hide -1 -2 2)
                          (("2" (expand "Sum")
                            (("2" (assert)
                              (("2"
                                (lemma "Sum_nonneg")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (rewrite "value_digit")
                                    (("2"
                                      (rewrite "max_significand")
                                      (("2"
                                        (lemma "expt_pos")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (lemma "pos_times_gt")
                                            (("2"
                                              (inst?)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_fp_pos const-decl "fp_num" IEEE_854_values nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (expt_pos formula-decl nil exponentiation nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (integer nonempty-type-from-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (max_significand const-decl "digits" IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Sum def-decl "real" sum_hack nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (value const-decl "real" IEEE_854_values nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil))
   shostak
   (max_pos subtype "IEEE_854_values.value(IEEE_854_values.max_fp_pos)"
    "posreal"))
  (max_pos_TCC2-1 nil 3321199176
   ("" (expand "value")
    (("" (expand "max_fp_pos")
      (("" (expand "pos")
        (("" (rewrite "expt_x0")
          (("" (lemma "pos_times_gt")
            (("" (assert)
              (("" (inst?)
                (("" (assert)
                  (("" (lemma "expt_pos")
                    (("" (inst?)
                      (("" (assert)
                        ((""
                          (case "Sum(p, value_digit(max_significand)) > 0")
                          (("1" (ground) nil)
                           ("2" (hide -1 -2 2)
                            (("2" (expand "Sum")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "Sum_nonneg")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (rewrite "value_digit")
                                      (("2"
                                        (rewrite "max_significand")
                                        (("2"
                                          (lemma "expt_pos")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (lemma "pos_times_gt")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (ground)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((Sum_nonneg formula-decl nil sum_hack nil)
    (Sum def-decl "real" sum_hack nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil))
   nil
   (max_pos subtype "IEEE_854_values.value(IEEE_854_values.max_fp_pos)"
    "posreal")))
 (min_pos_TCC1 0
  (min_pos_TCC1-1 nil 3321199176 ("" (tcc) nil nil)
   ((pos const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_pos const-decl "fp_num" IEEE_854_values nil))
   nil
   (min_pos subtype "IEEE_854_values.min_fp_pos"
    "(IEEE_854_values.finite?)")))
 (min_pos_TCC2 0
  (min_pos_TCC2-2 "" 3790102478
   ("" (expand "min_fp_pos")
    (("" (expand "value")
      (("" (expand "pos")
        (("" (rewrite "expt_x0")
          (("" (lemma "expt_pos")
            (("" (inst?)
              (("" (assert)
                (("" (lemma "pos_times_gt")
                  (("" (inst?)
                    (("" (assert)
                      ((""
                        (case "Sum(p, value_digit(min_significand)) > 0")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 -2 2)
                          (("2" (expand "Sum")
                            (("2" (lemma "Sum_nonneg")
                              (("2"
                                (inst?)
                                (("2"
                                  (rewrite "value_digit")
                                  (("2"
                                    (rewrite "min_significand")
                                    (("2"
                                      (lemma "expt_pos")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (pos_times_gt formula-decl nil real_props nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (min_significand const-decl "digits" IEEE_854_values nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_pos const-decl "fp_num" IEEE_854_values nil))
   shostak
   (min_pos subtype "IEEE_854_values.value(IEEE_854_values.min_fp_pos)"
    "posreal"))
  (min_pos_TCC2-1 nil 3321199176
   ("" (expand "min_fp_pos")
    (("" (expand "value")
      (("" (expand "pos")
        (("" (rewrite "expt_x0")
          (("" (lemma "expt_pos")
            (("" (inst?)
              (("1" (assert)
                (("1" (lemma "pos_times_gt")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1"
                        (case "Sum(p, value_digit(min_significand)) > 0")
                        (("1" (assert) (("1" (assert) nil)))
                         ("2" (hide -1 -2 2)
                          (("2" (expand "Sum")
                            (("2" (lemma "Sum_nonneg")
                              (("2"
                                (inst?)
                                (("2"
                                  (rewrite "value_digit")
                                  (("2"
                                    (rewrite "min_significand")
                                    (("2"
                                      (lemma "expt_pos")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))
               ("2" (assert)
                (("2" (split)
                  (("1" (assert) nil) ("2" (assert) nil))))))))))))))))
    nil)
   ((Sum_nonneg formula-decl nil sum_hack nil)
    (Sum def-decl "real" sum_hack nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil))
   nil
   (min_pos subtype "IEEE_854_values.value(IEEE_854_values.min_fp_pos)"
    "posreal")))
 (max_neg_TCC1 0
  (max_neg_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((neg const-decl "sign_rep" enumerated_type_defs nil)
    (max_fp_neg const-decl "fp_num" IEEE_854_values nil))
   nil
   (max_neg subtype "IEEE_854_values.max_fp_neg"
    "(IEEE_854_values.finite?)")))
 (max_neg_TCC2 0
  (max_neg_TCC2-1 nil 3321199176
   ("" (expand "max_fp_neg")
    (("" (expand "value")
      (("" (expand "neg")
        (("" (rewrite "expt_x1")
          (("" (lemma "expt_pos")
            (("" (inst?)
              (("" (lemma "Sum_pos")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "pos_times_gt")
                      (("" (inst?)
                        (("" (ground)
                          (("1" (inst + "0")
                            (("1" (rewrite "value_digit")
                              (("1"
                                (rewrite "expt_x0")
                                (("1"
                                  (rewrite "max_significand")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst + "0")
                            (("2" (rewrite "value_digit")
                              (("2"
                                (rewrite "expt_x0")
                                (("2"
                                  (rewrite "max_significand")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (inst + "0")
                            (("3" (rewrite "value_digit")
                              (("3"
                                (rewrite "max_significand")
                                (("3"
                                  (rewrite "expt_x0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (max_significand const-decl "digits" IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Sum def-decl "real" sum_hack nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Sum_pos formula-decl nil sum_hack nil)
    (expt_pos formula-decl nil exponentiation nil)
    (neg const-decl "sign_rep" enumerated_type_defs nil)
    (max_fp_neg const-decl "fp_num" IEEE_854_values nil))
   nil
   (max_neg subtype "IEEE_854_values.value(IEEE_854_values.max_fp_neg)"
    "negreal")))
 (min_neg_TCC1 0
  (min_neg_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((neg const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_neg const-decl "fp_num" IEEE_854_values nil))
   nil
   (min_neg subtype "IEEE_854_values.min_fp_neg"
    "(IEEE_854_values.finite?)")))
 (min_neg_TCC2 0
  (min_neg_TCC2-1 nil 3321199176
   ("" (expand "min_fp_neg")
    (("" (expand "value")
      (("" (expand "neg")
        (("" (rewrite "expt_x1")
          (("" (assert)
            (("" (lemma "expt_pos")
              (("" (inst?)
                (("" (lemma "Sum_pos")
                  (("" (inst?)
                    (("" (lemma "pos_times_gt")
                      (("" (inst?)
                        (("" (ground)
                          (("1" (inst + "p-1")
                            (("1" (rewrite "value_digit")
                              (("1"
                                (rewrite "min_significand")
                                (("1"
                                  (hide 1 3 4 5 6)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "expt_pos")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 1 3 4 5 6)
                            (("2" (inst + "p-1")
                              (("2"
                                (expand "value_digit")
                                (("2"
                                  (expand "min_significand")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 1 3 4 5 6)
                            (("3" (inst + "p-1")
                              (("3"
                                (expand "value_digit")
                                (("3"
                                  (expand "min_significand")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt_pos formula-decl nil exponentiation nil)
    (Sum_pos formula-decl nil sum_hack nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Sum def-decl "real" sum_hack nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (min_significand const-decl "digits" IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_neg const-decl "fp_num" IEEE_854_values nil))
   nil
   (min_neg subtype "IEEE_854_values.value(IEEE_854_values.min_fp_neg)"
    "negreal")))
 (max_fp_correct_TCC1 0
  (max_fp_correct_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (max_fp_correct subtype
    "((number_fields.+)(IEEE_854_values.E_max, 1))"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (max_fp_correct_TCC2 0
  (max_fp_correct_TCC2-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (max_fp_correct subtype
    "((number_fields.-)((number_fields.+)(IEEE_854_values.E_max, 1), IEEE_854_values.p))"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (max_fp_correct 0
  (max_fp_correct-2 "" 3790102483
   ("" (rewrite "max_pos")
    (("" (rewrite "max_fp_pos")
      (("" (rewrite "value")
        (("" (rewrite "pos")
          (("" (rewrite "expt_x0")
            (("" (assert)
              ((""
                (case "forall (i:upto(p)):Sum(i,
          (LAMBDA (n: nat):
             IF n < p THEN max_significand(n) * (b ^ (-n)) ELSE 0 ENDIF))
        * b ^ E_max
        = b ^ (1 + E_max) - b ^ (1 + E_max - i)")
                (("1" (inst?)
                  (("1" (expand "value_digit") (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (induct "i" 1 "upto_induction[p]")
                    (("1" (rewrite "Sum") (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (expand "Sum" +)
                        (("2" (replace -2)
                          (("2" (hide -2)
                            (("2" (assert)
                              (("2"
                                (rewrite "max_significand")
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (inst-cp - "1" "E_max - jt!1" "b")
                                    (("2"
                                      (inst - "E_max" "-jt!1" "b")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_fp_pos const-decl "fp_num" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sum def-decl "real" sum_hack nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (max_significand const-decl "digits" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (value const-decl "real" IEEE_854_values nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_pos const-decl "posreal" IEEE_854_values nil))
   shostak)
  (max_fp_correct-1 nil 3321199176
   ("" (rewrite "max_pos")
    (("" (rewrite "max_fp_pos")
      (("" (rewrite "value")
        (("" (rewrite "pos")
          (("" (rewrite "expt_x0")
            (("" (assert)
              ((""
                (case "forall (i:upto(p)):Sum(i,
          (LAMBDA (n: nat):
             IF n < p THEN max_significand(n) * (b ^ (-n)) ELSE 0 ENDIF))
        * b ^ E_max
        = b ^ (1 + E_max) - b ^ (1 + E_max - i)")
                (("1" (inst?)
                  (("1" (expand "value_digit") (("1" (propax) nil)))))
                 ("2" (hide 2)
                  (("2" (induct "i" 1 "upto_induction[p]")
                    (("1" (rewrite "Sum") (("1" (assert) nil)))
                     ("2" (skosimp*)
                      (("2" (expand "Sum" +)
                        (("2" (replace -2)
                          (("2" (hide -2)
                            (("2" (assert)
                              (("2"
                                (rewrite "max_significand")
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (inst-cp - "1" "E_max - jt!1" "b")
                                    (("2"
                                      (inst - "E_max" "-jt!1" "b")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (assert)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((Sum def-decl "real" sum_hack nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil))
   nil))
 (min_fp_correct_TCC1 0
  (min_fp_correct_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (min_fp_correct subtype
    "((number_fields.-)((number_fields.+)(IEEE_854_values.E_min, 1), IEEE_854_values.p))"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (min_fp_correct 0
  (min_fp_correct-1 nil 3321199176
   ("" (expand "min_fp_pos")
    (("" (expand "value")
      (("" (expand "pos")
        (("" (rewrite "expt_x0")
          (("" (assert)
            ((""
              (case-replace
               "Sum(p,value_digit(min_significand))= b^(1-p)")
              (("1" (hide -1)
                (("1" (lemma "expt_plus")
                  (("1" (inst - "(1 - p)" "E_min" "b")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "Sum")
                  (("2" (expand "value_digit")
                    (("2" (expand "min_significand")
                      (("2"
                        (case "forall (i:below(p)):Sum(i,
                   LAMBDA (n: nat):
                     IF n < p THEN IF n < p - 1 THEN 0 ELSE 1 ENDIF * b ^ (-n)
                     ELSE 0
                     ENDIF)
                 = 0")
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (induct-and-rewrite "i" 1 "Sum") nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((value const-decl "real" IEEE_854_values nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (min_significand const-decl "digits" IEEE_854_values nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_plus formula-decl nil exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_pos const-decl "fp_num" IEEE_854_values nil))
   nil))
 (value0 0
  (value0-2 "" 3790102485
   ("" (skosimp*)
    (("" (expand "value")
      (("" (rewrite "zero_times3")
        (("" (rewrite "zero_times3")
          (("" (lemma "expt_nonzero")
            (("" (inst? :copy? t)
              (("" (assert)
                (("" (hide -2)
                  (("" (inst?)
                    (("" (assert)
                      (("" (hide -1)
                        (("" (rewrite "Sum_zero")
                          (("" (prop)
                            (("1" (expand "d_zero")
                              (("1"
                                (apply-extensionality)
                                (("1"
                                  (expand "value_digit")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (rewrite "zero_times3")
                                      (("1"
                                        (lemma "expt_nonzero")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (expand "d_zero")
                                (("2"
                                  (expand "value_digit")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Sum_zero formula-decl nil sum_hack nil)
    (d_zero const-decl "digits" IEEE_854_values nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Sum def-decl "real" sum_hack nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak)
  (value0-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "value")
      (("" (rewrite "zero_times3")
        (("1" (rewrite "zero_times3")
          (("1" (lemma "expt_nonzero")
            (("1" (inst? :copy? t)
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (rewrite "Sum_zero")
                          (("1" (prop)
                            (("1" (expand "d_zero")
                              (("1"
                                (apply-extensionality)
                                (("1"
                                  (expand "value_digit")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (rewrite "zero_times3")
                                      (("1"
                                        (lemma "expt_nonzero")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))
                             ("2" (replace -1)
                              (("2"
                                (expand "d_zero")
                                (("2"
                                  (expand "value_digit")
                                  (("2"
                                    (propax)
                                    nil)))))))))))))))))))))))))))
         ("2" (assert) nil))))))
    nil)
   ((Sum_zero formula-decl nil sum_hack nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (Sum def-decl "real" sum_hack nil))
   nil))
 (value_of_zero 0
  (value_of_zero-2 "" 3790102486
   ("" (rewrite "value0")
    (("" (expand "pos_zero") (("" (propax) nil nil)) nil)) nil)
   ((pos_zero const-decl "{fin | zero?(fin)}" IEEE_854_values nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (value0 formula-decl nil IEEE_854_values nil))
   shostak)
  (value_of_zero-1 nil 3321199176
   ("" (rewrite "value0")
    (("" (expand "pos_zero") (("" (propax) nil)))) nil)
   nil nil))
 (normal_value 0
  (normal_value-1 nil 3321199176
   ("" (skosimp*)
    (("" (case-replace "fin!1=finite(sign(fin!1),Exp(fin!1),d(fin!1))")
      (("1" (hide -1)
        (("1"
          (case "forall (s:sign_rep),(d:digits),(n:upto(E_max-E_min)):
              value(finite(s,n+E_min,d))=value(normalize(finite(s,n+E_min,d)))")
          (("1" (inst - "sign(fin!1)" "d(fin!1)" "Exp(fin!1)-E_min")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
              (("1" (skosimp*)
                (("1" (expand "normalize") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (rewrite "normalize")
                  (("2" (lift-if)
                    (("2" (ground)
                      (("2" (inst?)
                        (("2" (replace -3 :dir rl)
                          (("2" (hide -3)
                            (("2" (expand "value")
                              (("2"
                                (expand "value_digit")
                                (("2"
                                  (case-replace
                                   "Sum(p,(LAMBDA (n: nat):
                       IF n < p THEN shift_left(d!1)(n) * (b ^ (-n))
                       ELSE 0
                       ENDIF))=b*Sum(p,(LAMBDA (n: nat): IF n < p THEN d!1(n) * (b ^ (-n)) ELSE 0 ENDIF))")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "expt_plus")
                                      (("1"
                                        (inst - "1" "E_min+jt!1" "b")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite "expt_x1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite "Sum")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "shift_left")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "forall (i:below(p)): Sum(i,
                         (LAMBDA (n: nat):
                            IF n < p THEN shift_left(d!1)(n) * (b ^ (-n)) ELSE 0 ENDIF))
                       = b
                           *
                           Sum(i+1,
                               (LAMBDA (n: nat):
                                  IF n < p THEN d!1(n) * (b ^ (-n)) ELSE 0 ENDIF))")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct
                                                   "i"
                                                   1
                                                   "below_induction[p]")
                                                  (("1"
                                                    (expand "Sum")
                                                    (("1"
                                                      (expand "Sum")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "Sum" +)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "shift_left")
                                                              (("2"
                                                                (lemma
                                                                 "expt_plus")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1"
                                                                   "-(1+jb!1)"
                                                                   "b")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_x1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "fp_num_finite_eta") nil nil))
      nil))
    nil)
   ((fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (value const-decl "real" IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Sum def-decl "real" sum_hack nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (shift_left const-decl "digits" IEEE_854_values nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil))
   nil))
 (value_positive 0
  (value_positive-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "zero?")
      (("" (expand "pos")
        (("" (ground)
          (("1" (expand "value")
            (("1" (replace -1)
              (("1" (rewrite "expt_x0")
                (("1" (assert)
                  (("1" (lemma "pos_times_ge")
                    (("1" (inst?)
                      (("1" (lemma "expt_pos")
                        (("1" (inst?)
                          (("1"
                            (case "(Sum(p, value_digit(d(fin!1))) >= 0 AND b ^ Exp(fin!1) >= 0)")
                            (("1" (assert) nil nil)
                             ("2" (split)
                              (("1"
                                (lemma "Sum_nonneg")
                                (("1" (inst?) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "value")
            (("2" (typepred "sign(fin!1)")
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (rewrite "expt_x1")
                    (("2" (lemma "expt_pos")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "Sum_nonneg")
                            (("2" (inst?)
                              (("2"
                                (lemma "pos_times_ge")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero? const-decl "bool" IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (pos_times_ge formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (value const-decl "real" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil))
   nil))
 (value_negative 0
  (value_negative-2 "" 3790102489
   ("" (assert)
    (("" (skosimp*)
      (("" (expand "neg")
        (("" (expand "zero?")
          (("" (expand "value")
            (("" (lemma "expt_pos")
              (("" (inst - "Exp(fin!1)" "b")
                (("" (lemma "Sum_nonneg")
                  (("" (inst?)
                    (("" (lemma "pos_times_ge")
                      (("" (ground)
                        (("1" (replace -1)
                          (("1" (rewrite "expt_x1")
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "sign(fin!1)")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (rewrite "expt_x0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero? const-decl "bool" IEEE_854_values nil)
    (expt_pos formula-decl nil exponentiation nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (pos_times_ge formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (Sum def-decl "real" sum_hack nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (value const-decl "real" IEEE_854_values nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (neg const-decl "sign_rep" enumerated_type_defs nil))
   shostak)
  (value_negative-1 nil 3321199176
   ("" (assert)
    (("" (skosimp*)
      (("" (expand "neg")
        (("" (expand "zero?")
          (("" (expand "value")
            (("" (lemma "expt_pos")
              (("" (inst - "Exp(fin!1)" "b")
                (("1" (lemma "Sum_nonneg")
                  (("1" (inst?)
                    (("1" (lemma "pos_times_ge")
                      (("1" (ground)
                        (("1" (replace -1)
                          (("1" (rewrite "expt_x1")
                            (("1" (assert)
                              (("1" (inst?) (("1" (assert) nil)))))))))
                         ("2" (typepred "sign(fin!1)")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (rewrite "expt_x0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil)))))))))))))))))
                     ("2" (assert) nil)))))
                 ("2" (assert)
                  (("2" (split)
                    (("1" (assert) nil)
                     ("2" (assert) nil))))))))))))))))))
    nil)
   ((Sum_nonneg formula-decl nil sum_hack nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (Sum def-decl "real" sum_hack nil)
    (neg const-decl "sign_rep" enumerated_type_defs nil))
   nil))
 (finite_cover 0
  (finite_cover-2 "" 3790102490
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (expand "subnormal?")
        (("" (ground)
          (("" (hide 2)
            ((""
              (case "forall (n:upto(E_max-E_min)),(s:sign_rep),(d:digits):
              Exp(normalize(finite(s,n+E_min,d))) = E_min or
              d(normalize(finite(s,n+E_min,d)))(0) > 0")
              (("1"
                (inst - "Exp(fin!1)-E_min" "sign(fin!1)" "d(fin!1)")
                (("1" (assert)
                  (("1" (rewrite "fp_num_finite_eta")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2 3) (("2" (ground) nil nil)) nil)) nil))
                nil)
               ("2" (hide 2 3)
                (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
                  (("1" (expand "normalize") (("1" (propax) nil nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "normalize")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normal? const-decl "bool" IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shift_left const-decl "digits" IEEE_854_values nil)
    (subnormal? const-decl "bool" IEEE_854_values nil))
   shostak)
  (finite_cover-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (expand "subnormal?")
        (("" (ground)
          (("" (hide 2)
            ((""
              (case "forall (n:upto(E_max-E_min)),(s:sign_rep),(d:digits):
              Exp(normalize(finite(s,n+E_min,d))) = E_min or
              d(normalize(finite(s,n+E_min,d)))(0) > 0")
              (("1"
                (inst - "Exp(fin!1)-E_min" "sign(fin!1)" "d(fin!1)")
                (("1" (assert)
                  (("1" (rewrite "fp_num_finite_eta")
                    (("1" (assert) nil)))))
                 ("2" (assert)
                  (("2" (hide 2 3) (("2" (ground) nil)))))))
               ("2" (hide 2 3)
                (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
                  (("1" (expand "normalize") (("1" (propax) nil)))
                   ("2" (skosimp*)
                    (("2" (rewrite "normalize")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (inst?) (("2" (assert) nil)))))))))))
                   ("3" (skosimp*) (("3" (assert) nil)))))))
               ("3" (skosimp*) (("3" (assert) nil))))))))))))))
    nil)
   ((sign_rep type-eq-decl nil enumerated_type_defs nil)) nil))
 (finite_disjoint1 0
  (finite_disjoint1-2 "" 3790102490
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (expand "zero?")
        (("" (ground)
          (("" (rewrite "normal_value")
            (("" (rewrite "value0")
              (("" (expand "d_zero") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normal? const-decl "bool" IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (value0 formula-decl nil IEEE_854_values nil)
    (d_zero const-decl "digits" IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (normal_value formula-decl nil IEEE_854_values nil)
    (zero? const-decl "bool" IEEE_854_values nil))
   shostak)
  (finite_disjoint1-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (expand "zero?")
        (("" (ground)
          (("" (rewrite "normal_value")
            (("" (rewrite "value0")
              (("" (replace -2)
                (("" (expand "d_zero")
                  (("" (assert) nil))))))))))))))))
    nil)
   nil nil))
 (finite_disjoint2 0
  (finite_disjoint2-2 "" 3790102491
   ("" (skosimp*)
    (("" (expand "subnormal?") (("" (ground) nil nil)) nil)) nil)
   ((subnormal? const-decl "bool" IEEE_854_values nil)) shostak)
  (finite_disjoint2-1 nil 3321199176
   ("" (skosimp*) (("" (expand "subnormal?") (("" (ground) nil)))) nil)
   nil nil))
 (finite_disjoint3 0
  (finite_disjoint3-2 "" 3790102491
   ("" (skosimp*)
    (("" (expand "subnormal?")
      (("" (expand "normal?") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((subnormal? const-decl "bool" IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (normal? const-decl "bool" IEEE_854_values nil))
   shostak)
  (finite_disjoint3-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "subnormal?")
      (("" (expand "normal?") (("" (ground) nil))))))
    nil)
   nil nil))
 (toggle_sign_TCC1 0
  (toggle_sign_TCC1-2 "" 3790102492
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (> const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (toggle_sign subtype "(number_fields.-)(1, IEEE_854_values.s)"
    "sign_rep"))
  (toggle_sign_TCC1-1 nil 3321199176
   ("" (skolem-typepred) (("" (ground) nil)) nil)
   ((sign_rep type-eq-decl nil enumerated_type_defs nil)) nil
   (toggle_sign subtype "(number_fields.-)(1, IEEE_854_values.s)"
    "sign_rep")))
 (toggle_sign_TCC2 0
  (toggle_sign_TCC2-2 "" 3790102493
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (toggle_sign subtype "(number_fields.-)(1, IEEE_854_values.s)"
    "sign_rep"))
  (toggle_sign_TCC2-1 nil 3321199176
   ("" (skolem-typepred) (("" (ground) nil)) nil)
   ((sign_rep type-eq-decl nil enumerated_type_defs nil)) nil
   (toggle_sign subtype "(number_fields.-)(1, IEEE_854_values.s)"
    "sign_rep")))
 (toggle_finite 0
  (toggle_finite-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((toggle_sign const-decl "fp_num" IEEE_854_values nil)) nil))
 (toggle_infinite 0
  (toggle_infinite-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((toggle_sign const-decl "fp_num" IEEE_854_values nil)) nil))
 (toggle_NaN 0
  (toggle_NaN-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((toggle_sign const-decl "fp_num" IEEE_854_values nil)) nil))
 (value_toggle_TCC1 0
  (value_toggle_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((toggle_sign const-decl "fp_num" IEEE_854_values nil)) nil
   (value_toggle subtype
    "IEEE_854_values.toggle_sign(IEEE_854_values.fin)"
    "(IEEE_854_values.finite?)")))
 (value_toggle 0
  (value_toggle-2 "" 3790102495
   ("" (skosimp*)
    (("" (expand "toggle_sign")
      (("" (expand "value")
        (("" (typepred "sign(fin!1)")
          (("" (ground)
            (("1" (replace -1)
              (("1" (rewrite "expt_x0")
                (("1" (rewrite "expt_x1") (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (rewrite "expt_x1")
                (("2" (rewrite "expt_x0") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((toggle_sign const-decl "fp_num" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_exp application-judgement "int" exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (value const-decl "real" IEEE_854_values nil))
   shostak)
  (value_toggle-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "toggle_sign")
      (("" (expand "value")
        (("" (typepred "sign(fin!1)")
          (("" (ground)
            (("1" (replace -1)
              (("1" (rewrite "expt_x0")
                (("1" (rewrite "expt_x1") (("1" (assert) nil)))))))
             ("2" (replace -1)
              (("2" (rewrite "expt_x1")
                (("2" (rewrite "expt_x0")
                  (("2" (assert) nil))))))))))))))))
    nil)
   ((sign_rep type-eq-decl nil enumerated_type_defs nil)) nil))
 (toggle_d_normalize 0
  (toggle_d_normalize-1 nil 3321199176
   ("" (skosimp*)
    ((""
      (case-replace "fin!1 = finite(sign(fin!1),Exp(fin!1),d(fin!1))")
      (("1" (expand "toggle_sign")
        (("1"
          (case "forall (s:sign_rep),(d1:digits),(n:upto(E_max-E_min)):
               d(normalize(finite(s,n+E_min,d1))) = d(normalize(finite(1-s,n+E_min,d1)))")
          (("1" (inst - "sign(fin!1)" "d(fin!1)" "Exp(fin!1)-E_min")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -1 2)
            (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
              (("1" (expand "normalize") (("1" (propax) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (expand "normalize" +)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (ground) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skolem-typepred) (("3" (ground) nil nil)) nil)
               ("4" (assert) nil nil))
              nil))
            nil)
           ("3" (hide -1 2)
            (("3" (skolem-typepred) (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "fp_num_finite_eta") nil nil))
      nil))
    nil)
   ((fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shift_left const-decl "digits" IEEE_854_values nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (toggle_sign const-decl "fp_num" IEEE_854_values nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil))
   nil))
 (toggle_Exp_normalize 0
  (toggle_Exp_normalize-1 nil 3321199176
   ("" (skosimp*)
    ((""
      (case-replace "fin!1 = finite(sign(fin!1),Exp(fin!1),d(fin!1))")
      (("1" (expand "toggle_sign")
        (("1"
          (case "forall (s:sign_rep),(d1:digits),(n:upto(E_max-E_min)):
               Exp(normalize(finite(s,n+E_min,d1))) = Exp(normalize(finite(1-s,n+E_min,d1)))")
          (("1" (inst - "sign(fin!1)" "d(fin!1)" "Exp(fin!1)-E_min")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -1 2)
            (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
              (("1" (expand "normalize") (("1" (propax) nil nil)) nil)
               ("2" (skosimp*)
                (("2" (expand "normalize" +)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (ground) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skolem-typepred) (("3" (ground) nil nil)) nil)
               ("4" (assert) nil nil))
              nil))
            nil)
           ("3" (hide -1 2)
            (("3" (skolem-typepred) (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "fp_num_finite_eta") nil nil))
      nil))
    nil)
   ((fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shift_left const-decl "digits" IEEE_854_values nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (toggle_sign const-decl "fp_num" IEEE_854_values nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil))
   nil))
 (toggle_zero? 0
  (toggle_zero?-2 "" 3790102498
   ("" (skosimp*)
    (("" (expand "zero?")
      (("" (rewrite "toggle_finite")
        (("" (rewrite "value_toggle") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((zero? const-decl "bool" IEEE_854_values nil)
    (value_toggle formula-decl nil IEEE_854_values nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (toggle_finite formula-decl nil IEEE_854_values nil))
   shostak)
  (toggle_zero?-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "zero?")
      (("" (rewrite "toggle_finite")
        (("" (rewrite "value_toggle") (("" (ground) nil))))))))
    nil)
   nil nil))
 (toggle_normal? 0
  (toggle_normal?-2 "" 3790102498
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (rewrite "toggle_d_normalize")
        (("" (rewrite "toggle_finite") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((normal? const-decl "bool" IEEE_854_values nil)
    (toggle_finite formula-decl nil IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (toggle_d_normalize formula-decl nil IEEE_854_values nil))
   shostak)
  (toggle_normal?-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "normal?")
      (("" (rewrite "toggle_d_normalize")
        (("" (rewrite "toggle_finite") (("" (assert) nil))))))))
    nil)
   nil nil))
 (toggle_subnormal? 0
  (toggle_subnormal?-2 "" 3790102499
   ("" (skosimp*)
    (("" (expand "subnormal?")
      (("" (rewrite "toggle_d_normalize")
        (("" (rewrite "toggle_Exp_normalize")
          (("" (rewrite "toggle_zero?")
            (("" (rewrite "toggle_finite") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subnormal? const-decl "bool" IEEE_854_values nil)
    (toggle_Exp_normalize formula-decl nil IEEE_854_values nil)
    (toggle_finite formula-decl nil IEEE_854_values nil)
    (toggle_zero? formula-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (toggle_d_normalize formula-decl nil IEEE_854_values nil))
   shostak)
  (toggle_subnormal?-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "subnormal?")
      (("" (rewrite "toggle_d_normalize")
        (("" (rewrite "toggle_Exp_normalize")
          (("" (rewrite "toggle_zero?")
            (("" (rewrite "toggle_finite")
              (("" (assert) nil))))))))))))
    nil)
   nil nil))
 (value_digit_le_TCC1 0
  (value_digit_le_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (value_digit_le subtype "((number_fields.-)(IEEE_854_values.j))"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (value_digit_le 0
  (value_digit_le-2 "" 3790102500
   ("" (skosimp*)
    (("" (rewrite "value_digit")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (rewrite "both_sides_times_pos_le1")
              (("1" (assert) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "expt_pos")
              (("2" (inst?)
                (("2" (rewrite "pos_times_le") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (pos_times_le formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (value_digit_le-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "value_digit")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (rewrite "both_sides_times_pos_le1")
              (("1" (assert) nil)
               ("2" (lemma "expt_pos")
                (("2" (inst?) (("2" (assert) nil)))))))))
           ("2" (flatten)
            (("2" (lemma "expt_pos")
              (("2" (inst?)
                (("1" (rewrite "pos_times_le") (("1" (assert) nil)))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil))
 (Sum_d_lt_b 0
  (Sum_d_lt_b-2 "" 3790102501
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (expand "Sum")
        (("1" (expand "value_digit")
          (("1" (rewrite "expt_x0")
            (("1" (skosimp*)
              (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (lemma "value_digit_le")
            (("2" (inst?)
              (("2" (assert)
                (("2" (case-replace "b ^ (-(1 + j!1)) * b = b^(-j!1)")
                  (("1" (hide -1) (("1" (assert) nil nil)) nil)
                   ("2" (hide -1 -2 2)
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "-(1+j!1)" "1" "b")
                        (("2" (rewrite "expt_x1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (value_digit_le formula-decl nil IEEE_854_values nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Sum def-decl "real" sum_hack nil) (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   shostak)
  (Sum_d_lt_b-1 nil 3321199176
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (expand "Sum")
        (("1" (expand "value_digit")
          (("1" (rewrite "expt_x0")
            (("1" (skosimp*)
              (("1" (lift-if) (("1" (ground) nil)))))))))))))
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (lemma "value_digit_le")
            (("2" (inst?)
              (("2" (assert)
                (("2" (case-replace "b ^ (-(1 + j!1)) * b = b^(-j!1)")
                  (("1" (hide -1) (("1" (assert) nil)))
                   ("2" (hide -1 -2 2)
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "-(1+j!1)" "1" "b")
                        (("2" (rewrite "expt_x1")
                          (("2" (assert) nil)))))))))))))))))))))))
     ("3" (skosimp*) (("3" (assert) nil))))
    nil)
   ((Sum def-decl "real" sum_hack nil)) nil))
 (Sum_d_lt1_TCC1 0
  (Sum_d_lt1_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Sum_d_lt1 subtype "0" "naturalnumbers.below(IEEE_854_values.p)")))
 (Sum_d_lt1 0
  (Sum_d_lt1-1 nil 3321199176
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (expand "Sum")
        (("1" (expand "value_digit")
          (("1" (rewrite "expt_x0")
            (("1" (case "0 < p")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "value_digit_le")
              (("2" (inst?)
                (("2" (assert)
                  (("2"
                    (case-replace "b ^ (-(1 + j!1)) * b = b^(-j!1)")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 -2 -3 2)
                      (("2" (lemma "expt_plus")
                        (("2" (inst - "-(1+j!1)" "1" "b")
                          (("2" (rewrite "expt_x1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (value_digit_le formula-decl nil IEEE_854_values nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Sum def-decl "real" sum_hack nil) (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (Sum_d_ge1 0
  (Sum_d_ge1-1 nil 3321199176
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (skosimp*)
        (("1" (rewrite "value_digit")
          (("1" (lift-if)
            (("1" (assert)
              (("1" (rewrite "expt_x0")
                (("1" (assert)
                  (("1" (lemma "Sum_nonneg")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Sum def-decl "real" sum_hack nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (value_sig_lt_b 0
  (value_sig_lt_b-2 "" 3790102504
   ("" (skosimp*)
    (("" (lemma "Sum_d_lt_b")
      (("" (inst - "d!1" "p-1")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((Sum_d_lt_b formula-decl nil IEEE_854_values nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (value_sig_lt_b-1 nil 3321199176
   ("" (skosimp*)
    (("" (lemma "Sum_d_lt_b")
      (("" (inst - "d!1" "p-1")
        (("1" (assert)
          (("1" (lemma "expt_pos")
            (("1" (inst?) (("1" (assert) nil)))))))
         ("2" (assert) nil))))))
    nil)
   nil nil))
 (value_sig_lt1 0
  (value_sig_lt1-2 "" 3790102505
   ("" (skosimp*)
    (("" (lemma "Sum_d_lt1")
      (("" (inst - "d!1" "p-1")
        (("1" (lemma "expt_pos")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((Sum_d_lt1 formula-decl nil IEEE_854_values nil)
    (expt_pos formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (value_sig_lt1-1 nil 3321199176
   ("" (skosimp*)
    (("" (lemma "Sum_d_lt1")
      (("" (inst - "d!1" "p-1")
        (("1" (lemma "expt_pos")
          (("1" (inst?) (("1" (assert) nil) ("2" (assert) nil)))))
         ("2" (assert) nil))))))
    nil)
   nil nil))
 (value_sig_ge1 0
  (value_sig_ge1-2 "" 3790102505
   ("" (skosimp*)
    (("" (lemma "Sum_d_ge1")
      (("" (inst - "d!1" "p-1")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((Sum_d_ge1 formula-decl nil IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (value_sig_ge1-1 nil 3321199176
   ("" (skosimp*)
    (("" (lemma "Sum_d_ge1")
      (("" (inst - "d!1" "p-1")
        (("1" (assert) nil) ("2" (assert) nil))))))
    nil)
   nil nil))
 (abs_value_fin 0
  (abs_value_fin-2 "" 3790102506
   ("" (skosimp*)
    (("" (expand "value")
      ((""
        (case "b ^ (Exp(fin!1)) * Sum(p, value_digit(d(fin!1))) >=0")
        (("1" (typepred "sign(fin!1)")
          (("1" (prop)
            (("1" (replace -1)
              (("1" (rewrite "expt_x0")
                (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (rewrite "expt_x1")
                (("2" (expand "abs")
                  (("2" (assert)
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "expt_pos")
            (("2" (inst?)
              (("2" (lemma "Sum_nonneg")
                (("2" (inst?)
                  (("2" (rewrite "pos_times_ge")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (expt_pos formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil))
   shostak)
  (abs_value_fin-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "value")
      ((""
        (case "b ^ (Exp(fin!1)) * Sum(p, value_digit(d(fin!1))) >=0")
        (("1" (typepred "sign(fin!1)")
          (("1" (prop)
            (("1" (replace -1)
              (("1" (rewrite "expt_x0")
                (("1" (expand "abs") (("1" (assert) nil)))))))
             ("2" (replace -1)
              (("2" (rewrite "expt_x1")
                (("2" (expand "abs")
                  (("2" (assert)
                    (("2" (lift-if) (("2" (ground) nil)))))))))))))))
         ("2" (hide 2)
          (("2" (lemma "expt_pos")
            (("2" (inst?)
              (("1" (lemma "Sum_nonneg")
                (("1" (inst?)
                  (("1" (rewrite "pos_times_ge") (("1" (assert) nil)))
                   ("2" (assert) nil)))))
               ("2" (assert) nil)))))))
         ("3" (assert) nil) ("4" (assert) nil))))))
    nil)
   ((Sum_nonneg formula-decl nil sum_hack nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (Sum def-decl "real" sum_hack nil))
   nil))
 (min_significand_min 0
  (min_significand_min-2 "" 3790102507
   ("" (skosimp*)
    (("" (expand "Sum" + 1)
      (("" (ground)
        (("" (lift-if)
          (("" (ground)
            (("" (rewrite "value_digit")
              (("" (rewrite "min_significand")
                (("" (assert)
                  ((""
                    (case-replace
                     "Sum(p - 1, value_digit(min_significand))=0")
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (lemma "Sum_pos")
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma "Sum_ge")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst - "value_digit(d!1)(i!1)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite "value_digit")
                                          (("1"
                                            (typepred "i!1")
                                            (("1"
                                              (case
                                               "d!1(i!1) * b ^ (-i!1) >= b ^ (-(p - 1))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (lemma
                                                 "ge_times_ge_pos")
                                                (("2"
                                                  (inst
                                                   -
                                                   "b ^ (-(p - 1))"
                                                   "1"
                                                   "d!1(i!1)"
                                                   "b ^ (-i!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (hide
                                                       -3
                                                       -4
                                                       -5
                                                       2
                                                       3
                                                       4
                                                       5)
                                                      (("2"
                                                        (lemma
                                                         "both_sides_expt_gt1_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "b"
                                                           "-(p-1)"
                                                           "-i!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "d!1=d_zero")
                                (("1" (propax) nil nil)
                                 ("2"
                                  (apply-extensionality)
                                  (("2"
                                    (expand "d_zero")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (hide 2 4 5 6 7)
                                        (("2"
                                          (expand "value_digit")
                                          (("2"
                                            (rewrite "pos_times_gt")
                                            (("2"
                                              (lemma "expt_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3 4)
                      (("2"
                        (case "forall (i:below(p)): Sum(i,value_digit(min_significand)) = 0")
                        (("1" (inst?) nil nil)
                         ("2" (hide 2)
                          (("2" (induct "i" 1 "below_induction[p]")
                            (("1" (expand "Sum")
                              (("1" (propax) nil nil)) nil)
                             ("2" (skosimp*)
                              (("2"
                                (rewrite "Sum" +)
                                (("2"
                                  (rewrite "value_digit")
                                  (("2"
                                    (rewrite "min_significand")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sum def-decl "real" sum_hack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (min_significand const-decl "digits" IEEE_854_values nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (Sum_pos formula-decl nil sum_hack nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sum_ge formula-decl nil sum_hack nil)
    (d!1 skolem-const-decl "digits" IEEE_854_values nil)
    (i!1 skolem-const-decl "below(p)" IEEE_854_values nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (ge_times_ge_pos formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt_pos formula-decl nil exponentiation nil)
    (pos_times_gt formula-decl nil real_props nil)
    (d_zero const-decl "digits" IEEE_854_values nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (min_significand_min-1 nil 3321199176
   ("" (skosimp*)
    (("" (expand "Sum" + 1)
      (("" (ground)
        (("" (lift-if)
          (("" (ground)
            (("" (rewrite "value_digit")
              (("" (rewrite "min_significand")
                (("" (assert)
                  ((""
                    (case-replace
                     "Sum(p - 1, value_digit(min_significand))=0")
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (lemma "Sum_pos")
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma "Sum_ge")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst - "value_digit(d!1)(i!1)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite "value_digit")
                                          (("1"
                                            (typepred "i!1")
                                            (("1"
                                              (case
                                               "d!1(i!1) * b ^ (-i!1) >= b ^ (-(p - 1))")
                                              (("1" (assert) nil)
                                               ("2"
                                                (lemma
                                                 "ge_times_ge_pos")
                                                (("2"
                                                  (inst
                                                   -
                                                   "b ^ (-(p - 1))"
                                                   "1"
                                                   "d!1(i!1)"
                                                   "b ^ (-i!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (hide
                                                       -3
                                                       -4
                                                       -5
                                                       2
                                                       3
                                                       4
                                                       5)
                                                      (("2"
                                                        (lemma
                                                         "both_sides_expt_gt1_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "b"
                                                           "-(p-1)"
                                                           "-i!1")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            nil)))))))))))))
                               ("2"
                                (case "d!1=d_zero")
                                (("1" (propax) nil)
                                 ("2"
                                  (apply-extensionality)
                                  (("2"
                                    (expand "d_zero")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (hide 2 4 5 6 7)
                                        (("2"
                                          (expand "value_digit")
                                          (("2"
                                            (rewrite "pos_times_gt")
                                            (("2"
                                              (lemma "expt_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))))
                     ("2" (hide 2 3 4)
                      (("2"
                        (case "forall (i:below(p)): Sum(i,value_digit(min_significand)) = 0")
                        (("1" (inst?) nil)
                         ("2" (hide 2)
                          (("2" (induct "i" 1 "below_induction[p]")
                            (("1" (expand "Sum") (("1" (propax) nil)))
                             ("2" (skosimp*)
                              (("2"
                                (rewrite "Sum" +)
                                (("2"
                                  (rewrite "value_digit")
                                  (("2"
                                    (rewrite "min_significand")
                                    (("2"
                                      (ground)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   ((Sum def-decl "real" sum_hack nil)
    (Sum_pos formula-decl nil sum_hack nil)
    (Sum_ge formula-decl nil sum_hack nil))
   nil))
 (sign_normal 0
  (sign_normal-1 nil 3321199176
   ("" (skosimp*)
    ((""
      (case "forall (s:sign_rep),(d:digits),(n:upto(E_max-E_min)):
                     s=sign(normalize(finite(s,n+E_min,d)))")
      (("1"
        (case-replace
         "fin!1 = finite(sign(fin!1),Exp(fin!1),d(fin!1))")
        (("1" (assert)
          (("1" (inst - "sign(fin!1)" "d(fin!1)" "Exp(fin!1)-E_min")
            (("1" (assert) nil nil)) nil))
          nil)
         ("2" (assert) (("2" (rewrite "fp_num_finite_eta") nil nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n" 1 "upto_induction[E_max-E_min]")
          (("1" (skosimp*)
            (("1" (expand "normalize") (("1" (propax) nil nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (rewrite "normalize")
              (("2" (lift-if)
                (("2" (ground) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite adt-constructor-decl
     "[[sign_rep, Exponent, digits] -> (finite?)]" IEEE_854_values nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (sign adt-accessor-decl "[(finite?) -> sign_rep]" IEEE_854_values
          nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (fp_num_finite_eta formula-decl nil IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shift_left const-decl "digits" IEEE_854_values nil))
   nil))
 (value_normal_TCC1 0
  (value_normal_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (normal? const-decl "bool" IEEE_854_values nil))
   nil
   (value_normal subtype "IEEE_854_values.E_min"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (value_normal 0
  (value_normal-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "normal_value")
      (("" (rewrite "abs_value_fin")
        (("" (expand "normal?")
          (("" (assert)
            (("" (expand "max_pos")
              (("" (expand "value")
                (("" (expand "max_fp_pos")
                  (("" (expand "pos")
                    (("" (rewrite "expt_x0")
                      (("" (assert)
                        (("" (prop)
                          (("1" (lemma "value_sig_ge1")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "both_sides_expt_gt1_le")
                                  (("1"
                                    (inst
                                     -
                                     "b"
                                     "E_min"
                                     "(Exp(normalize(fin!1)))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "le_times_le_pos")
                                        (("1"
                                          (inst
                                           -
                                           "b^E_min"
                                           "1"
                                           "Sum(p, value_digit(d(normalize(fin!1))))"
                                           "b ^ (Exp(normalize(fin!1)))")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "expt_pos")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "both_sides_expt_gt1_le")
                                  (("2"
                                    (inst
                                     -
                                     "b"
                                     "(Exp(normalize(fin!1)))"
                                     "E_max")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "le_times_le_pos")
                                        (("2"
                                          (inst
                                           -
                                           "b ^ (Exp(normalize(fin!1)))"
                                           "Sum(p, value_digit(d(normalize(fin!1))))"
                                           "Sum(p, value_digit(max_significand))"
                                           " b ^ E_max")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1 2)
                                              (("1"
                                                (rewrite "Sum_le")
                                                (("1"
                                                  (hide -1 2)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (expand
                                                       "value_digit")
                                                      (("1"
                                                        (lemma
                                                         "expt_pos")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             "both_sides_times_pos_le1")
                                                            (("1"
                                                              (expand
                                                               "max_significand")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "expt_pos")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "Sum_nonneg")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normal_value formula-decl nil IEEE_854_values nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (normal? const-decl "bool" IEEE_854_values nil)
    (max_pos const-decl "posreal" IEEE_854_values nil)
    (max_fp_pos const-decl "fp_num" IEEE_854_values nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (Sum def-decl "real" sum_hack nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (value_sig_ge1 formula-decl nil IEEE_854_values nil)
    (fin!1 skolem-const-decl "(finite?)" IEEE_854_values nil)
    (max_significand const-decl "digits" IEEE_854_values nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (Sum_le formula-decl nil sum_hack nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (expt_pos formula-decl nil exponentiation nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (value const-decl "real" IEEE_854_values nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (abs_value_fin formula-decl nil IEEE_854_values nil))
   nil))
 (value_subnormal_TCC1 0
  (value_subnormal_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (min_fp_pos const-decl "fp_num" IEEE_854_values nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (value const-decl "real" IEEE_854_values nil)
    (min_pos const-decl "posreal" IEEE_854_values nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (/= const-decl "boolean" notequal nil)
    (subnormal? const-decl "bool" IEEE_854_values nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil))
   nil
   (value_subnormal subtype "IEEE_854_values.E_min"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (value_subnormal 0
  (value_subnormal-2 "" 3790102511
   ("" (skosimp*)
    (("" (rewrite "normal_value")
      (("" (rewrite "abs_value_fin")
        (("" (expand "min_pos")
          (("" (expand "value")
            (("" (expand "min_fp_pos")
              (("" (expand "pos")
                (("" (rewrite "expt_x0")
                  (("" (assert)
                    (("" (expand "subnormal?")
                      (("" (ground)
                        (("1" (expand "zero?")
                          (("1" (lemma "both_sides_times_pos_le1")
                            (("1"
                              (inst - "b ^ (Exp(normalize(fin!1)))"
                               "Sum(p, value_digit(min_significand))"
                               "Sum(p, value_digit(d(normalize(fin!1))))")
                              (("1"
                                (ground)
                                (("1"
                                  (hide 2 3)
                                  (("1"
                                    (rewrite "normal_value")
                                    (("1"
                                      (rewrite "value0")
                                      (("1"
                                        (rewrite "min_significand_min")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "value_sig_lt1")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "expt_pos")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (lemma "both_sides_times_pos_lt1")
                                    (("2"
                                      (inst
                                       -
                                       "b ^ (Exp(normalize(fin!1)))"
                                       "Sum(p, value_digit(d(normalize(fin!1))))"
                                       "1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normal_value formula-decl nil IEEE_854_values nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (min_pos const-decl "posreal" IEEE_854_values nil)
    (min_fp_pos const-decl "fp_num" IEEE_854_values nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (subnormal? const-decl "bool" IEEE_854_values nil)
    (value_sig_lt1 formula-decl nil IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (Exponent type-eq-decl nil IEEE_854_values nil)
    (Exp adt-accessor-decl "[(finite?) -> Exponent]" IEEE_854_values
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (min_significand const-decl "digits" IEEE_854_values nil)
    (d adt-accessor-decl "[(finite?) -> digits]" IEEE_854_values nil)
    (value0 formula-decl nil IEEE_854_values nil)
    (min_significand_min formula-decl nil IEEE_854_values nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (value const-decl "real" IEEE_854_values nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (normalize def-decl "(finite?)" IEEE_854_values nil)
    (abs_value_fin formula-decl nil IEEE_854_values nil))
   shostak)
  (value_subnormal-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "normal_value")
      (("" (rewrite "abs_value_fin")
        (("" (expand "min_pos")
          (("" (expand "value")
            (("" (expand "min_fp_pos")
              (("" (expand "pos")
                (("" (rewrite "expt_x0")
                  (("" (assert)
                    (("" (expand "subnormal?")
                      (("" (assert)
                        (("" (ground)
                          (("1" (expand "zero?")
                            (("1" (lemma "both_sides_times_pos_le1")
                              (("1"
                                (inst
                                 -
                                 "b ^ (Exp(normalize(fin!1)))"
                                 "Sum(p, value_digit(min_significand))"
                                 "Sum(p, value_digit(d(normalize(fin!1))))")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide 2 3)
                                    (("1"
                                      (rewrite "normal_value")
                                      (("1"
                                        (rewrite "value0")
                                        (("1"
                                          (rewrite
                                           "min_significand_min")
                                          nil)))))))))
                                 ("2"
                                  (lemma "expt_pos")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil)))))))))))
                           ("2" (lemma "value_sig_lt1")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "expt_pos")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (lemma
                                         "both_sides_times_pos_lt1")
                                        (("2"
                                          (inst
                                           -
                                           "b ^ (Exp(normalize(fin!1)))"
                                           "Sum(p, value_digit(d(normalize(fin!1))))"
                                           "1")
                                          (("1" (assert) nil)
                                           ("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   ((Sum def-decl "real" sum_hack nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil))
   nil))
 (value_nonzero 0
  (value_nonzero-2 "" 3790102512
   ("" (skosimp*)
    (("" (lemma "value_normal")
      (("" (inst?)
        (("" (lemma "value_subnormal")
          (("" (inst?)
            (("" (lemma "finite_cover")
              (("" (inst?)
                (("" (ground)
                  (("1" (expand "min_pos")
                    (("1" (rewrite "min_fp_correct")
                      (("1" (lemma "both_sides_expt_gt1_le")
                        (("1" (inst - "b" "(1 + E_min - p)" "E_min")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "both_sides_expt_gt1_le")
                    (("2" (rewrite "max_fp_correct")
                      (("2" (inst - "b" "E_min" "E_max")
                        (("2" (ground)
                          (("2"
                            (case "b^E_max < b ^ (1 + E_max) - b ^ (1 + E_max - p)")
                            (("1" (ground) nil nil)
                             ("2" (hide -1 -2 -3 -4 -5 2 3 4)
                              (("2"
                                (lemma "exponent_adjust")
                                (("2"
                                  (inst - "b" "E_max" "p-1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((value_normal formula-decl nil IEEE_854_values nil)
    (value_subnormal formula-decl nil IEEE_854_values nil)
    (finite_cover formula-decl nil IEEE_854_values nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (min_fp_correct formula-decl nil IEEE_854_values nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" IEEE_854_values
     nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (min_pos const-decl "posreal" IEEE_854_values nil)
    (max_fp_correct formula-decl nil IEEE_854_values nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (exponent_adjust formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_num type-decl nil IEEE_854_values nil))
   shostak)
  (value_nonzero-1 nil 3321199176
   ("" (skosimp*)
    (("" (lemma "value_normal")
      (("" (inst?)
        (("" (lemma "value_subnormal")
          (("" (inst?)
            (("" (lemma "finite_cover")
              (("" (inst?)
                (("" (ground)
                  (("1" (expand "min_pos")
                    (("1" (rewrite "min_fp_correct")
                      (("1" (lemma "both_sides_expt_gt1_le")
                        (("1" (inst - "b" "(1 + E_min - p)" "E_min")
                          (("1" (ground) nil)))))))))
                   ("2" (lemma "both_sides_expt_gt1_le")
                    (("2" (rewrite "max_fp_correct")
                      (("2" (inst - "b" "E_min" "E_max")
                        (("2" (ground)
                          (("2"
                            (case "b^E_max < b ^ (1 + E_max) - b ^ (1 + E_max - p)")
                            (("1" (ground) nil)
                             ("2" (hide -1 -2 -3 -4 -5 2 3 4)
                              (("2"
                                (lemma "exponent_adjust")
                                (("2"
                                  (inst - "b" "E_max" "p-1")
                                  (("2"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (scale_value_TCC1 0
  (scale_value_TCC1-2 "" 3790102512 ("" (tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (scale_value subtype "IEEE_854_values.m"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}"))
  (scale_value_TCC1-1 nil 3321199176
   ("" (tcc)
    (("1" (rewrite "pos_times_ge")
      (("1" (assert)
        (("1" (lemma "expt_pos")
          (("1" (expand "^")
            (("1" (inst?) (("1" (assert) nil)))))))))))
     ("2" (lemma "expt_pos")
      (("2" (expand "^")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "expt_pos")
              (("2" (assert)
                (("2" (inst -1 "-n!1" "b")
                  (("2" (assert)
                    (("2" (lemma "pos_times_gt")
                      (("2"
                        (inst -1 "d!1(n!1)"
                         "expt(b, m!1) * (1 / (b * expt(b, -(-n!1) - 1)))")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (lemma "pos_times_gt")
                              (("1"
                                (inst
                                 -1
                                 "expt(b, m!1)"
                                 "(1 / (b * expt(b, -(-n!1) - 1)))")
                                (("1" (assert) nil)
                                 ("2"
                                  (lemma "zero_times3")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "expt_nonzero_aux")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))
                         ("2" (lemma "zero_times3")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "zero_times3")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "expt_nonzero_aux")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil
   (scale_value subtype "IEEE_854_values.m"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (scaled_Sum_int 0
  (scaled_Sum_int-1 nil 3321199176
   ("" (skolem!)
    (("" (induct "m" 1 "upto_induction[n!1+1]")
      (("1" (rewrite "Sum")
        (("1" (expand "integer?") (("1" (propax) nil nil)) nil)) nil)
       ("2" (skosimp*)
        (("2" (rewrite "Sum" +)
          (("2" (rewrite "scale_value")
            (("2" (rewrite "value_digit")
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (case "FORALL (i,j:int): integer?(i+j)")
                    (("1" (inst?)
                      (("1" (hide -3 2)
                        (("1" (rewrite "associative_mult" :dir rl)
                          (("1" (rewrite "expt_plus" :dir rl)
                            (("1"
                              (case "FORALL (i,j:int): integer?(i*j)")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "integer?")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (case
                                       "forall (n:nat): integer?(b^n)")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "integer?")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "integer?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "integer?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "integer?")
                        (("2" (propax) nil nil)) nil))
                      nil)
                     ("2" (expand "integer?" 1)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (integer? const-decl "bool" integers nil)
    (Sum def-decl "real" sum_hack nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "nat" IEEE_854_values nil)
    (jt!1 skolem-const-decl "upto(n!1 + 1)" IEEE_854_values nil)
    (d!1 skolem-const-decl "digits" IEEE_854_values nil)
    (associative_mult formula-decl nil number_fields nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (scale_value_p_TCC1 0
  (scale_value_p_TCC1-1 nil 3321199176 ("" (tcc :defs !) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scale_value_p subtype "(number_fields.-)(IEEE_854_values.p, 1)"
    "nat")))
 (scale_value_p_TCC2 0
  (scale_value_p_TCC2-2 "" 3790102515
   ("" (skosimp*)
    (("" (case "integer?(scale_value(d!1, p - 1)(n!1))")
      (("1" (expand "integer?") (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (rewrite "scale_value")
          (("2" (rewrite "value_digit")
            (("2" (lift-if)
              (("2" (ground)
                (("1"
                  (case-replace
                   "(d!1(n!1) * b ^ (p - 1) * b ^ (-n!1))=(d!1(n!1) * b ^ (p - 1 - n!1))")
                  (("1" (hide -1)
                    (("1" (case "FORALL (i,j:int): integer?(i*j)")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "^") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "integer?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "expt_plus")
                    (("2" (inst?)
                      (("2" (inst -1 "-n!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "integer?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (integer? const-decl "bool" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (n!1 skolem-const-decl "nat" IEEE_854_values nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil))
   shostak
   (scale_value_p subtype
    "IEEE_854_values.scale_value(IEEE_854_values.d, (number_fields.-)(IEEE_854_values.p, 1))(IEEE_854_values.n)"
    "nat"))
  (scale_value_p_TCC2-1 nil 3321199176
   ("" (skosimp*)
    (("" (case "integer?(scale_value(d!1, p - 1)(n!1))")
      (("1" (expand "integer?") (("1" (assert) nil)))
       ("2" (hide 2)
        (("2" (rewrite "scale_value")
          (("2" (rewrite "value_digit")
            (("2" (lift-if)
              (("2" (ground)
                (("1"
                  (case-replace
                   "(d!1(n!1) * b ^ (p - 1) * b ^ (-n!1))=(d!1(n!1) * b ^ (p - 1 - n!1))")
                  (("1" (hide -1)
                    (("1" (case "FORALL (i,j:int): integer?(i*j)")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "^")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "FORALL (n:nat): integer_pred(expt(b, n))")
                                  (("1" (inst?) nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (induct "n")
                                      (("2"
                                        (skosimp*)
                                        nil)))))))))))))))))
                       ("2" (expand "integer?")
                        (("2" (propax) nil)))))))
                   ("2" (lemma "expt_plus")
                    (("2" (inst?)
                      (("2" (inst -1 "-n!1")
                        (("2" (assert) nil)))))))))
                 ("2" (expand "integer?")
                  (("2" (propax) nil)))))))))))))
       ("3" (assert) nil))))
    nil)
   nil nil
   (scale_value_p subtype
    "IEEE_854_values.scale_value(IEEE_854_values.d, (number_fields.-)(IEEE_854_values.p, 1))(IEEE_854_values.n)"
    "nat")))
 (scaled_Sum_i_TCC1 0
  (scaled_Sum_i_TCC1-1 nil 3321199178 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (scaled_Sum_i subtype "(IEEE_854_values.i)"
    "{i: integers.int | booleans.OR(IEEE_854_values.b /= 0, reals.>=(i, 0))}")))
 (scaled_Sum_i 0
  (scaled_Sum_i-2 "" 3790102516
   ("" (induct "n")
    (("1" (expand "Sum") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "Sum" +)
        (("2" (inst?)
          (("2" (rewrite "scale_value") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Sum def-decl "real" sum_hack nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (scaled_Sum_i-1 nil 3321199176
   ("" (induct "n")
    (("1" (expand "Sum") (("1" (propax) nil)))
     ("2" (skosimp*)
      (("2" (expand "Sum" +)
        (("2" (inst?)
          (("2" (rewrite "scale_value") (("2" (assert) nil))))))))))
    nil)
   ((Sum def-decl "real" sum_hack nil)) nil))
 (scaled_Sum 0
  (scaled_Sum-2 "" 3790102516
   ("" (skosimp*)
    (("" (rewrite "scaled_Sum_i")
      (("" (rewrite "scale_value_p")
        (("" (replace-eta "scale_value(d!1, (p - 1))") nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scaled_Sum_i formula-decl nil IEEE_854_values nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scale_value_p const-decl "nat" IEEE_854_values nil))
   shostak)
  (scaled_Sum-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "scaled_Sum_i")
      (("" (rewrite "scale_value_p")
        (("" (replace-eta "scale_value(d!1, (p - 1))") nil))))))
    nil)
   nil nil))
 (floor_Sum 0
  (floor_Sum-2 "" 3790102518
   ("" (skosimp*)
    (("" (rewrite "scaled_Sum_i")
      (("" (lemma "Sum_split")
        (("" (inst - "scale_value(d!1, i!1)" "p" "i!1+1")
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "floor_plus_int")
                ((""
                  (inst - "Sum(i!1 + 1, scale_value(d!1, i!1))"
                   "Sum(p - (i!1 + 1),
                  LAMBDA (k: nat):
                    scale_value(d!1, i!1)(k + (i!1 + 1)))")
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (lemma "floor_Sum_mant")
                          (("1" (inst?)
                            (("1" (hide 2)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (rewrite "scale_value")
                                  (("1"
                                    (rewrite "value_digit")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "expt_plus")
                                          (("1"
                                            (inst
                                             -
                                             "(-(1 + i!1 + i!2))"
                                             "i!1"
                                             "b")
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_le1")
                                              (("1"
                                                (inst
                                                 -
                                                 "b ^ (-i!2 - 1)"
                                                 "d!1(1 + i!1 + i!2)"
                                                 "(b-1)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "pos_times_le")
                                          (("2"
                                            (inst
                                             -
                                             "(b-1)"
                                             "b ^ (-i!2 - 1)")
                                            (("2"
                                              (lemma "expt_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "scaled_Sum_int")
                      (("2" (expand "integer?") (("2" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scaled_Sum_i formula-decl nil IEEE_854_values nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sum def-decl "real" sum_hack nil)
    (i!1 skolem-const-decl "below(p)" IEEE_854_values nil)
    (d!1 skolem-const-decl "digits" IEEE_854_values nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (floor_Sum_mant formula-decl nil sum_lemmas nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pos_times_le formula-decl nil real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (mant_digit_fun type-eq-decl nil sum_lemmas nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (scaled_Sum_int formula-decl nil IEEE_854_values nil)
    (integer? const-decl "bool" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Sum_split formula-decl nil sum_hack nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)
  (floor_Sum-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "scaled_Sum_i")
      (("" (lemma "Sum_split")
        (("" (inst - "scale_value(d!1, i!1)" "p" "i!1+1")
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "floor_plus_int")
                ((""
                  (inst - "Sum(i!1 + 1, scale_value(d!1, i!1))"
                   "Sum(p - (i!1 + 1),
                  LAMBDA (k: nat):
                    scale_value(d!1, i!1)(k + (i!1 + 1)))")
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (lemma "floor_Sum_mant")
                          (("1" (inst?)
                            (("1" (hide 2)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (rewrite "scale_value")
                                  (("1"
                                    (rewrite "value_digit")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "expt_plus")
                                          (("1"
                                            (inst
                                             -
                                             "(-(1 + i!1 + i!2))"
                                             "i!1"
                                             "b")
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_le1")
                                              (("1"
                                                (inst
                                                 -
                                                 "b ^ (-i!2 - 1)"
                                                 "d!1(1 + i!1 + i!2)"
                                                 "(b-1)")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (hide -1 -2 2)
                                                  (("2"
                                                    (lemma "expt_pos")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))
                                         ("2"
                                          (lemma "pos_times_le")
                                          (("2"
                                            (inst
                                             -
                                             "(b-1)"
                                             "b ^ (-i!2 - 1)")
                                            (("2"
                                              (lemma "expt_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))))))
                   ("2" (hide 2)
                    (("2" (lemma "scaled_Sum_int")
                      (("2" (expand "integer?")
                        (("2" (inst?) nil))))))))))))))))))))))
    nil)
   ((Sum def-decl "real" sum_hack nil)
    (floor_Sum_mant formula-decl nil sum_lemmas nil)
    (mant_digit_fun type-eq-decl nil sum_lemmas nil)
    (Sum_split formula-decl nil sum_hack nil))
   nil))
 (mod_Sum_TCC1 0
  (mod_Sum_TCC1-2 "" 3790102518
   ("" (skosimp*)
    (("" (lemma "scaled_Sum_int")
      (("" (expand "integer?") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((scaled_Sum_int formula-decl nil IEEE_854_values nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (integer? const-decl "bool" integers nil))
   shostak
   (mod_Sum subtype
    "sum_hack.Sum((number_fields.+)(IEEE_854_values.i, 1), IEEE_854_values.scale_value(IEEE_854_values.d, IEEE_854_values.i))"
    "int"))
  (mod_Sum_TCC1-1 nil 3321199176
   ("" (skosimp*)
    (("" (lemma "scaled_Sum_int")
      (("" (expand "integer?") (("" (inst?) nil))))))
    nil)
   nil nil
   (mod_Sum subtype
    "sum_hack.Sum((number_fields.+)(IEEE_854_values.i, 1), IEEE_854_values.scale_value(IEEE_854_values.d, IEEE_854_values.i))"
    "int")))
 (mod_Sum 0
  (mod_Sum-1 nil 3321199176
   ("" (skosimp*)
    (("" (rewrite "Sum")
      (("" (rewrite "scale_value")
        (("" (rewrite "value_digit")
          ((""
            (case-replace
             "(d!1(i!1) * b ^ (-i!1) * b ^ i!1) = d!1(i!1) * (b ^ (-i!1) * b ^ i!1)")
            (("1" (hide -1)
              (("1" (lemma "expt_plus")
                (("1" (inst?)
                  (("1" (replace -1 :dir rl)
                    (("1" (hide -1)
                      (("1" (rewrite "expt_x0")
                        (("1" (assert)
                          (("1" (lemma "mod_of_mod")
                            (("1" (inst?)
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case-replace
                                     "mod(Sum(i!1, scale_value(d!1, i!1)),b) = 0")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "mod_lt_nat")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "forall (j:upto(i!1)): mod(Sum(j,scale_value(d!1,i!1)),b) = 0")
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (induct
                                             "j"
                                             1
                                             "upto_induction[i!1]")
                                            (("1"
                                              (expand "Sum")
                                              (("1"
                                                (rewrite "mod_zero")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "Sum" +)
                                                (("2"
                                                  (rewrite
                                                   "scale_value")
                                                  (("2"
                                                    (rewrite
                                                     "value_digit")
                                                    (("2"
                                                      (case-replace
                                                       "d!1(jt!1) * b ^ (-jt!1) * b ^ i!1 = d!1(jt!1) * (b ^ (-jt!1) * b ^ i!1)")
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "expt_plus")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "mod_of_mod")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (case-replace
                                                                               "d!1(jt!1) * b ^ ((-jt!1) + i!1) = (d!1(jt!1) * b ^ ((-jt!1) + i!1-1))*b")
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mod_sum")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0"
                                                                                     "b"
                                                                                     "_")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "mod_zero")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "closed_times")
                                                                                          (("2"
                                                                                            (case
                                                                                             "forall (n:nat):integer_pred(b^n)")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (case
                                                                                   "b ^ ((-jt!1) + i!1 - 1) * b = b^(i!1-jt!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "expt_plus")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1-jt!1"
                                                                                         "(-1)"
                                                                                         "b")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "expt_inverse")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "expt_x1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "scaled_Sum_int")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "integer?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("3"
                                                                        (rewrite
                                                                         "closed_times")
                                                                        (("3"
                                                                          (case
                                                                           "forall (n:nat):integer_pred(b^n)")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3"
                                                (lemma
                                                 "scaled_Sum_int")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "integer?")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (lemma "scaled_Sum_int")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (expand "integer?")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "scaled_Sum_int")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (expand "integer?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "scaled_Sum_int")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "integer?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Sum def-decl "real" sum_hack nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854_values nil)
    (below type-eq-decl nil naturalnumbers nil)
    (b formal-const-decl "above(1)" IEEE_854_values nil)
    (digits type-eq-decl nil IEEE_854_values nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scale_value const-decl "nonneg_real" IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (value_digit const-decl "nonneg_real" IEEE_854_values nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "below(p)" IEEE_854_values nil)
    (d!1 skolem-const-decl "digits" IEEE_854_values nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (scaled_Sum_int formula-decl nil IEEE_854_values nil)
    (integer? const-decl "bool" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_sum formula-decl nil mod nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (closed_times formula-decl nil integers nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (jt!1 skolem-const-decl "upto(i!1)" IEEE_854_values nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mod_zero formula-decl nil mod nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mod_of_mod formula-decl nil mod nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)))

