(comparison1
 (n_value_TCC1 0
  (n_value_TCC1-1 nil 3507032124 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (n_value subtype "((number_fields.+)(comparison1.E_max, 1))"
    "{i: integers.int | booleans.OR(comparison1.b /= 0, reals.>=(i, 0))}")))
 (n_value_TCC2 0
  (n_value_TCC2-2 "" 3790102598
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (n_value subtype "comparison1.num"
    "(IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].finite?)"))
  (n_value_TCC2-1 nil 3507032124
   ("" (skolem-typepred) (("" (ground) nil)) nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil
   (n_value subtype "comparison1.num"
    "(IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].finite?)")))
 (fp_compare_TCC1 0
  (fp_compare_TCC1-1 nil 3507032124 ("" (tcc :defs !) nil nil) nil nil
   (fp_compare subtype "comparison1.fp1"
    "{fp: IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].fp_num | booleans.OR(IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].finite?(fp), IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].infinite?(fp))}")))
 (fp_compare_TCC2 0
  (fp_compare_TCC2-1 nil 3507032124 ("" (tcc :defs !) nil nil) nil nil
   (fp_compare subtype "comparison1.fp2"
    "{fp: IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].fp_num | booleans.OR(IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].finite?(fp), IEEE_854_values[comparison1.b, comparison1.p, comparison1.E_max, comparison1.E_min].infinite?(fp))}")))
 (posinf_ge 0
  (posinf_ge-2 "" 3790102599
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (expand "pos")
        (("1" (lemma "value_nonzero")
          (("1" (inst?)
            (("1" (hide 2)
              (("1" (expand "fp_compare")
                (("1" (assert)
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (expand "n_value")
                        (("1" (rewrite "expt_x0")
                          (("1" (ground)
                            (("1" (case "max_pos < b^(1+E_max)")
                              (("1"
                                (expand "abs")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (hide -1 -2 -3 2)
                                (("2"
                                  (lemma "max_fp_correct")
                                  (("2"
                                    (replace -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "n_value")
                      (("2" (rewrite "expt_x0")
                        (("2" (expand "zero?")
                          (("2" (assert)
                            (("2" (lemma "expt_pos")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "pos")
        (("2" (expand "fp_compare")
          (("2" (assert)
            (("2" (lift-if)
              (("2" (ground)
                (("2" (hide -1 1 2 3)
                  (("2" (expand "n_value")
                    (("2" (typepred "i_sign(num!1)")
                      (("2" (ground)
                        (("2" (replace -1)
                          (("2" (rewrite "expt_x0")
                            (("2" (rewrite "expt_x1")
                              (("2"
                                (lemma "expt_pos")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (rewrite
                                     "both_sides_times_pos_gt1")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((value_nonzero formula-decl nil IEEE_854_values nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (expt_pos formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (max_pos const-decl "posreal" IEEE_854_values nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max_fp_correct formula-decl nil IEEE_854_values nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (n_value const-decl "real" comparison1 nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (num!1 skolem-const-decl
     "{fp: fp_num | finite?(fp) OR infinite?(fp)}" comparison1 nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (i_sign adt-accessor-decl "[(infinite?) -> sign_rep]"
     IEEE_854_values nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (posinf_ge-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (expand "pos")
        (("1" (lemma "value_nonzero")
          (("1" (inst?)
            (("1" (hide 2)
              (("1" (expand "fp_compare")
                (("1" (assert)
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (expand "n_value")
                        (("1" (rewrite "expt_x0")
                          (("1" (ground)
                            (("1" (case "max_pos < b^(1+E_max)")
                              (("1"
                                (expand "abs")
                                (("1" (lift-if) (("1" (ground) nil)))))
                               ("2"
                                (hide -1 -2 -3 2)
                                (("2"
                                  (lemma "max_fp_correct")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "expt_pos")
                                        (("2"
                                          (inst-cp - "1+E_max" "b")
                                          (("2"
                                            (inst - "1+E_max-p" "b")
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))
                     ("2" (expand "n_value")
                      (("2" (rewrite "expt_x0")
                        (("2" (expand "zero?")
                          (("2" (assert)
                            (("2" (lemma "expt_pos")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  nil)))))))))))))))))))))))))))
       ("2" (expand "pos")
        (("2" (expand "fp_compare")
          (("2" (assert)
            (("2" (lift-if)
              (("2" (ground)
                (("2" (hide -1 1 2 3)
                  (("2" (expand "n_value")
                    (("2" (typepred "i_sign(num!1)")
                      (("2" (ground)
                        (("2" (replace -1)
                          (("2" (rewrite "expt_x0")
                            (("2" (rewrite "expt_x1")
                              (("2"
                                (lemma "expt_pos")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (rewrite
                                     "both_sides_times_pos_gt1")
                                    nil))))))))))))))))))))))))))))))))
    nil)
   ((value_nonzero formula-decl nil IEEE_854_values nil)
    (zero? const-decl "bool" IEEE_854_values nil)
    (max_pos const-decl "posreal" IEEE_854_values nil)
    (max_fp_correct formula-decl nil IEEE_854_values nil)
    (pos const-decl "sign_rep" enumerated_type_defs nil)
    (i_sign adt-accessor-decl "[(infinite?) -> sign_rep]"
     IEEE_854_values nil)
    (sign_rep type-eq-decl nil enumerated_type_defs nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (NaN_unordered 0
  (NaN_unordered-2 "" 3790102600
   ("" (skosimp*)
    (("" (expand "fp_compare")
      (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((fp_compare const-decl "comparison_code" comparison1 nil)) shostak)
  (NaN_unordered-1 nil 3507032124
   ("" (skosimp*)
    (("" (expand "fp_compare")
      (("" (assert) (("" (lift-if) (("" (ground) nil))))))))
    nil)
   nil nil))
 (eq_def 0
  (eq_def-2 "" 3790102601
   ("" (skolem-typepred)
    (("" (expand "eq?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((eq? const-decl "bool" comparison1 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (eq_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "eq?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (ne_def 0
  (ne_def-2 "" 3790102601
   ("" (skolem-typepred)
    (("" (expand "ne?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((ne? const-decl "bool" comparison1 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (ne_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "ne?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (gt_def 0
  (gt_def-2 "" 3790102602
   ("" (skolem-typepred)
    (("" (expand "gt?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((gt? const-decl "bool" comparison1 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (gt_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "gt?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (ge_def 0
  (ge_def-2 "" 3790102603
   ("" (skolem-typepred)
    (("" (expand "ge?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((ge? const-decl "bool" comparison1 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (ge_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "ge?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (lt_def 0
  (lt_def-2 "" 3790102603
   ("" (skolem-typepred)
    (("" (expand "lt?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((lt? const-decl "bool" comparison1 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (lt_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "lt?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (le_def 0
  (le_def-2 "" 3790102604
   ("" (skolem-typepred)
    (("" (expand "le?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((le? const-decl "bool" comparison1 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fp_compare const-decl "comparison_code" comparison1 nil)
    (infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil)
    (E_min formal-const-decl "{i: integer | E_max > i}" comparison1
     nil)
    (E_max formal-const-decl "integer" comparison1 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (p formal-const-decl "above(1)" comparison1 nil)
    (b formal-const-decl "above(1)" comparison1 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (le_def-1 nil 3507032124
   ("" (skolem-typepred)
    (("" (expand "le?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   ((infinite? adt-recognizer-decl "[fp_num -> boolean]"
     IEEE_854_values nil)
    (finite? adt-recognizer-decl "[fp_num -> boolean]" IEEE_854_values
     nil)
    (fp_num type-decl nil IEEE_854_values nil))
   nil))
 (un_def 0
  (un_def-2 "" 3790102604
   ("" (skosimp*)
    (("" (expand "un?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((un? const-decl "bool" comparison1 nil)
    (fp_compare const-decl "comparison_code" comparison1 nil))
   shostak)
  (un_def-1 nil 3507032124
   ("" (skosimp*)
    (("" (expand "un?")
      (("" (expand "fp_compare")
        (("" (lift-if) (("" (ground) nil))))))))
    nil)
   nil nil)))

