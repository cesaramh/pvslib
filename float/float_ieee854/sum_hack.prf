(sum_hack
 (Sum_TCC1 0
  (Sum_TCC1-1 nil 3321196682 ("" (tcc :defs !) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (Sum subtype "(number_fields.-)(sum_hack.j, 1)" "nat")))
 (Sum_TCC2 0
  (Sum_TCC2-1 nil 3321196682 ("" (tcc :defs !) nil nil) nil nil
   (Sum termination
    "sum_hack.Sum((number_fields.-)(sum_hack.j, 1), sum_hack.F)"
    "nil")))
 (Sum_nonneg 0
  (Sum_nonneg-1 nil 3321196682
   ("" (induct-and-rewrite "j" 1 "Sum") nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Sum def-decl "real" sum_hack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Sum_zero 0
  (Sum_zero-1 nil 3321196682
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (assert) (("1" (skosimp*) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (prop)
            (("1" (skosimp*)
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (inst?) (("2" (assert) nil nil)) nil)
             ("3" (typepred "F1!1(j!1)")
              (("3" (lemma "Sum_nonneg")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil)
             ("4" (skosimp*) (("4" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i!1 skolem-const-decl "below(1 + j!1)" sum_hack nil)
    (j!1 skolem-const-decl "nat" sum_hack nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Sum def-decl "real" sum_hack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Sum_pos 0
  (Sum_pos-2 "" 3790102524
   ("" (induct "j")
    (("1" (expand "Sum") (("1" (skosimp*) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (lemma "Sum_nonneg")
            (("2" (inst?)
              (("2" (prop)
                (("1" (skosimp*) (("1" (inst?) nil nil)) nil)
                 ("2" (assert) nil nil)
                 ("3" (inst + "j!1") (("3" (assert) nil nil)) nil)
                 ("4" (skosimp*)
                  (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i!1 skolem-const-decl "below(1 + j!1)" sum_hack nil)
    (j!1 skolem-const-decl "nat" sum_hack nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Sum def-decl "real" sum_hack nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (Sum_pos-1 nil 3321196682
   ("" (induct "j")
    (("1" (expand "Sum")
      (("1" (skosimp*) (("1" (ground) (("1" (skosimp*) nil)))))))
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (lemma "Sum_nonneg")
            (("2" (inst?)
              (("2" (prop)
                (("1" (skosimp*) (("1" (inst?) nil)))
                 ("2" (assert) nil)
                 ("3" (inst + "j!1") (("3" (assert) nil)))
                 ("4" (skosimp*)
                  (("4" (inst?) (("4" (assert) nil))))))))))))))))))
    nil)
   nil nil))
 (Sum_le 0
  (Sum_le-2 "" 3790102524
   ("" (induct "j")
    (("1" (expand "Sum") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "Sum" +)
        (("2" (inst - "F1!1 " "F2!1")
          (("2" (prop)
            (("1" (inst?) (("1" (assert) nil nil)) nil)
             ("2" (skosimp*) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (Sum_le-1 nil 3321196682
   ("" (induct "j")
    (("1" (expand "Sum") (("1" (propax) nil)))
     ("2" (skosimp*)
      (("2" (expand "Sum" +)
        (("2" (inst - "F1!1 " "F2!1")
          (("2" (prop)
            (("1" (inst?) (("1" (assert) nil)))
             ("2" (skosimp*) (("2" (inst?) nil))))))))))))
    nil)
   nil nil))
 (Sum_ge1 0
  (Sum_ge1-2 "" 3790102525
   ("" (induct "j")
    (("1" (skosimp*) nil nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "Sum_nonneg")
              (("2" (inst?)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sum_nonneg formula-decl nil sum_hack nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j!1 skolem-const-decl "nat" sum_hack nil)
    (i!1 skolem-const-decl "below(1 + j!1)" sum_hack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (Sum_ge1-1 nil 3321196682
   ("" (induct "j")
    (("1" (skosimp*) nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "Sum_nonneg")
              (("2" (inst?)
                (("2" (inst?) (("2" (assert) nil))))))))))))))))
    nil)
   nil nil))
 (Sum_ge 0
  (Sum_ge-2 "" 3790102526
   ("" (induct "j")
    (("1" (skosimp*) nil nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst - "F1!1" "pz!1")
          (("2" (prop)
            (("1" (assert) nil nil)
             ("2" (inst?)
              (("2" (assert)
                (("2" (lemma "Sum_nonneg")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j!1 skolem-const-decl "nat" sum_hack nil)
    (i!1 skolem-const-decl "below(1 + j!1)" sum_hack nil)
    (Sum_nonneg formula-decl nil sum_hack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Sum def-decl "real" sum_hack nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (Sum_ge-1 nil 3321196682
   ("" (induct "j")
    (("1" (skosimp*) nil)
     ("2" (skosimp*)
      (("2" (rewrite "Sum")
        (("2" (inst - "F1!1" "pz!1")
          (("2" (prop)
            (("1" (assert) nil)
             ("2" (inst?)
              (("2" (assert)
                (("2" (ground)
                  (("2" (lemma "Sum_nonneg")
                    (("2" (inst?)
                      (("2" (assert) nil))))))))))))))))))))
    nil)
   nil nil))
 (Sum_split_TCC1 0
  (Sum_split_TCC1-1 nil 3321196682 ("" (tcc) nil nil) nil nil
   (Sum_split subtype "(number_fields.-)(sum_hack.j, sum_hack.i)"
    "nat")))
 (Sum_split 0
  (Sum_split-1 nil 3321196682
   ("" (induct "j")
    (("1" (skosimp*)
      (("1" (expand "Sum") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (typepred "i!1")
        (("2" (expand "Sum" + (1 3))
          (("2" (lift-if)
            (("2" (ground)
              (("1" (case-replace "i!1=j!1+1")
                (("1" (expand "Sum" + 2) (("1" (propax) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (inst - "F!1" "i!1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Sum def-decl "real" sum_hack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)))

