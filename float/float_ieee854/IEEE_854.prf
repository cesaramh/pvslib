(IEEE_854
 (Significand_size_TCC1 0
  (Significand_size_TCC1-1 nil 3321206276 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (Significand_size subtype "((number_fields.-)(IEEE_854.p, 1))"
    "{i: integers.int | booleans.OR(IEEE_854.b /= 0, reals.>=(i, 0))}")))
 (Exponent_balance_TCC1 0
  (Exponent_balance_TCC1-1 nil 3321206276 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (Exponent_balance subtype
    "((number_fields.+)(IEEE_854.E_max, IEEE_854.E_min))"
    "{i: integers.int | booleans.OR(IEEE_854.b /= 0, reals.>=(i, 0))}")))
 (Exponent_balance_TCC2 0
  (Exponent_balance_TCC2-1 nil 3321206276 ("" (tcc :defs !) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Exponent_balance subtype
    "((number_fields.+)((number_fields.+)(IEEE_854.E_max, IEEE_854.E_min), 1))"
    "{i: integers.int | booleans.OR(IEEE_854.b /= 0, reals.>=(i, 0))}")))
 (Exponent_balance 0
  (Exponent_balance-2 "" 3790102448
   ("" (lemma "E_balance")
    (("" (lemma "expt_x1")
      (("" (inst?)
        (("" (lemma "expt_x0")
          (("" (inst?)
            (("" (ground)
              (("" (lemma "expt_plus")
                (("" (inst - "1" "E_max+E_min" "b")
                  (("" (assert)
                    (("" (typepred "b")
                      (("" (case "forall (i:above(1)): 4<=i*i")
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (induct "i" 1 "above_induction[1]")
                          (("1" (assert) nil nil)
                           ("2" (skosimp*) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_x1 formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (E_min formal-const-decl "integer" IEEE_854 nil)
    (E_max formal-const-decl "integer" IEEE_854 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (b formal-const-decl "above(1)" IEEE_854 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (E_balance formula-decl nil IEEE_854 nil))
   shostak)
  (Exponent_balance-1 nil 3321206276
   ("" (lemma "E_balance")
    (("" (lemma "expt_x1")
      (("" (inst?)
        (("" (lemma "expt_x0")
          (("" (inst?)
            (("" (ground)
              (("" (lemma "expt_plus")
                (("" (inst - "1" "E_max+E_min" "b")
                  (("" (assert)
                    (("" (typepred "b")
                      (("" (case "forall (i:above(1)): 4<=i*i")
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (induct "i" 1 "above_induction[1]")
                          (("1" (assert) nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil))
 (E_max_gt_E_min 0
  (E_max_gt_E_min-1 nil 3321206276
   ("" (lemma "Exponent_range")
    (("" (grind-reals) (("" (cross-mult -1) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (p formal-const-decl "above(1)" IEEE_854 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (E_max formal-const-decl "integer" IEEE_854 nil)
    (E_min formal-const-decl "integer" IEEE_854 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (Exponent_range formula-decl nil IEEE_854 nil))
   nil))
 (HUG_example 0
  (HUG_example-1 nil 3321206276 ("" (ground) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ex754_2 0
  (ex754_2-1 nil 3321206276 ("" (assert) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (ex754_3 0
  (ex754_3-1 nil 3321206276 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   nil))
 (E_min_neg 0
  (E_min_neg-1 nil 3321206276
   ("" (lemma "E_balance")
    (("" (lemma "Exponent_range")
      (("" (ground)
        (("1" (cross-mult -3) nil nil) ("2" (cross-mult -2) nil nil))
        nil))
      nil))
    nil)
   ((Exponent_range formula-decl nil IEEE_854 nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (E_min formal-const-decl "integer" IEEE_854 nil)
    (E_max formal-const-decl "integer" IEEE_854 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p formal-const-decl "above(1)" IEEE_854 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (E_balance formula-decl nil IEEE_854 nil))
   nil))
 (E_max_pos 0
  (E_max_pos-1 nil 3321206276
   ("" (lemma "E_balance")
    (("" (lemma "Exponent_range")
      (("" (ground)
        (("1" (cross-mult -3) nil nil) ("2" (cross-mult -2) nil nil))
        nil))
      nil))
    nil)
   ((Exponent_range formula-decl nil IEEE_854 nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (E_min formal-const-decl "integer" IEEE_854 nil)
    (E_max formal-const-decl "integer" IEEE_854 nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p formal-const-decl "above(1)" IEEE_854 nil)
    (above nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (E_balance formula-decl nil IEEE_854 nil))
   nil))
 (IMP_IEEE_854_defs_TCC1 0
  (IMPORTING1_TCC1-1 nil 3321206276
   ("" (rewrite "E_max_gt_E_min") nil nil)
   ((E_max_gt_E_min formula-decl nil IEEE_854 nil)) nil
   (IMP_IEEE_854_defs subtype "IEEE_854.E_min"
    "{i: integers.integer | reals.>(IEEE_854.E_max, i)}"))))

