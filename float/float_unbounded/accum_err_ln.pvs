accum_err_ln[
  radix : above(1),
  (IMPORTING float[radix])
  b     : Format,
  round: ClosestRoundingPred[radix](b),
  RtoF : { RtoF: CanonicRoundingFun(b,round) |
                 exact_rep_conservation[radix](b,round)(RtoF) }
]: THEORY
BEGIN
  ASSUMING

    round_even_closest: ASSUMPTION
      FORALL(x:real,f:(Fbounded?(b))): round(x,f) IMPLIES EvenClosest?(b)(x,f)

    round_rounded_mode: ASSUMPTION
      rounded_mode?(b)(round)

  ENDASSUMING

  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING std_ln[radix,b,round,RtoF],
  	    reals@abs_lems,
            interval_arith@interval_mps
	
  ln_aerr_bound((r1),e1|0<r1-e1): nonneg_real =
   - ln(1 - e1/r1)

  ln_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1  AND
    0<r1-e1
    IMPLIES abs(ln(FtoR(f1))-ln(r1)) <= ln_aerr_bound(r1,e1)

  ln_ulp_bound((r1),e1|r1-e1>0): real =
    max(abs(ln(r1-e1)),abs(ln(r1+e1)))

  Fln_accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    0<r1-e1
    IMPLIES abs(ln(FtoR(f1))) <= ln_ulp_bound(r1,e1)  

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b),
	      LAMBDA(f1): FtoR(f1)>0, Fln,
	      LAMBDA(r1): r1>0, ln,
	      LAMBDA(r1,e1): r1-e1>0,
	      ln_aerr_bound,
	      LAMBDA(r1,e1): r1-e1>0,
	      ln_ulp_bound] AS ln_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    0<r1-e1
    IMPLIES abs(FtoR(Fln(f1)) - ln(r1))
            <= ln_aerr_bound(r1,e1)
	       + ulp(b)(ln_ulp_bound(r1,e1)) / 2    

END accum_err_ln
