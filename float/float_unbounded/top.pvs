%
% # A High-level Formalization of Floating Point numbers in PVS
%  
% This formalization was initiated by Sylvie Boldo (ENS-Lyon) [1,2]
% while visiting the National Institute of Aerospace (NIA) * in late 2005.
% It was augmented by Mariano Moscato (NIA, 2016) in order to  
% provide support for roundoff error calculations, serving as the formal
% support for the certificates generated by PRECiSA [3].
%
% In mid 2019, Mariano Moscato introduced an extension of this formalization
% that incorporates special values (such as infinities,
% NaNs, and signed zeros) to the representation. This extension is
% parametric on the following values, which determine an specific
% representation format (see [2] for details).
%
% * `radix` integer greater than 0
% * `precision` integer greater than 0
% * `dExp` integer greater than `2*(precision-1) - 1`
%
% Note that formats equivalent to the ones defined by the IEEE 754
% standard can be set by using the values shown in the table below. 
%
% |             | single precision | double precision |
% | ----------- | ---------------- | ---------------- |
% | `radix`     | 2                | 2                |
% | `precision` | 24               | 53               |
% | `dExp`      | 149              | 1074             |
%
% Instantiations for these formats are provided in the theories `single`
% and `double`. These theories should serve as the entry point to users
% needing to manipulate a particular format. 
%
% ## Core of the extension
%
% The basic declarations such as the datatype denoting floating-point
% numbers, the set of reals being exactly represented by them, and the
% projection and rounding functions are defined in the theories:
% `extended_float`, `extended_float_exactly_representable_reals`, and
% `extended_float_rounding__<*>`. 
%
% Each supported operation is defined in a separate theory:
%
% * `extended_float_qlt`  : quiet less-than comparison
% * `extended_float_qgt`  : quiet greater-than comparison
% * `extended_float_qle`  : quiet less-or-equal-than comparison
% * `extended_float_qge`  : quiet greater-or-equal-than comparison
% * `extended_float_qeq`  : quiet equal-to comparison
% * `extended_float_qun`  : quiet unordered comparison
% * `extended_float_add`  : addition
% * `extended_float_sub`  : subtraction
% * `extended_float_mul`  : multiplication
% * `extended_float_div`  : division
% * `extended_float_max`  : maximum of two values
% * `extended_float_min`  : minimum of two values
% * `extended_float_sqt`  : square root
% * `extended_float_abs`  : absolute value
%
% These theories depends on `ieee754_operation_scheme__binary`,
% `ieee754_operation_scheme__unary`, and
% `ieee754_predicate_scheme__binary`, which defines how an arbitrary
% function or predicate on floating-points should be defined according 
% to the IEEE754 standard. 
%
% ## Interpretation of the Axiomatic IEEE 754 Formalization
%
% The theory-interpretation feature provided by PVS [4] is used to prove
% that the single and double precision instantiations (`single` and
% `double`) are correct implementations of the model determined by the
% axiomatic formalization of floating-point numbers acompaning this
% library. The interpretation is performed by levels. For example:
%
% * single__interprets__ieee754_data proves that
%   extended_float[2,24,149] can be used to interpret ieee754_data,
% * single__interprets__ieee754_semantics proves that
%   extended_float_rounding[2,24,149] can be used to interpret
%   ieee754_semantics,
% * For each operation op, single__interprets__ieee754_semantics
%   proves that extended_float_op[2,24,149] can be used to interpret
%   ieee754_op,
% * single__interprets__ieee754_top proves that
%   extended_float[2,24,149] can be used to interpret ieee754_top.
%
% ## Last Documentation Update
%
% May, 2019.
%
% ## References
%
% [1] S. Boldo, Preuves formelles en arithmetiques a virgule flottante, 
%     PhD. Thesis, Ecole Normale Superieure de Lyon, 2004.
%     http://www.ens-lyon.fr/LIP/Pub/Rapports/PhD/PhD2004/PhD2004-05.pdf
%
% [2] Sylvie Boldo and César Muñoz. (2006). A High-Level Formalization
%     of Floating-Point Numbers in PVS. Contractor Report NASA/CR-2006-214298.
%     NASA Langley Research Center, Hampton VA 23681-2199, USA.
%
% [3] Moscato, M., Titolo, L., Dutle, A., & Munoz, C. A. (2017, September).
%     Automatic estimation of verified floating-point round-off errors via static
%     analysis. In International Conference on Computer Safety, Reliability, and
%     Security (pp. 213-229). Springer, Cham.
%
% [4] Owre, Sam, Natarajan Shankar, and Ricky W. Butler. (2001). Theory
%     interpretations in PVS. ContractorReport NASA/CR-2001-211024. NASA
%     Langley Research Center, Hampton VA23681-2199, USA.
%
% ---
%
% [*] This work has been partially funded by
%     * NASA LaRC under the Research Cooperative Agreement No. NCC-1-02043
%       awarded to the National Institute of Aerospace
%     * French CNRS under PICS 2533
%       awarded to the Laboratoire de l'Informatique du Parallelisme
%
top: THEORY
BEGIN

  IMPORTING %
  	    % Basic High-level model
	    %

            float, axpy, % (SB)

                              % (MM)
	    float_props_rounding,
	                      % Correctly rounded operations.
	    unop_em_scheme,   % Scheme to define correctly rounded binary ops.
	    binop_em_scheme,  % Scheme to define correctly rounded unary ops.
	    cr_add,           %  Addition       
	    cr_sub,           %  Subtraction    
	    std_mul,	      %  Multiplication 
	    std_mul_props,    %   
	    cr_div,           %  Division       
	    cr_exp,           %  Exponentiation
	    cr_mod,           %  Modulo operation
	    cr_neg,           %  Additive Inverse 
	    cr_flr,           %  Floor operation
	    cr_sqt,           %  Square Root    
	    cr_sin,           %  Sine operation
	    cr_abs,           %  Absolute Value operation
	    std_cos,          %  Cosine operation
	    std_atn,          %  Arc-tangent operation
	    std_exp,          %  Natural Exponent operation

                              % Schemes to calculate accumulated round-off 
            accum_err_op2sch, %   error bounds for binary operations and
            accum_err_op1sch, %   for unary operations.
            accum_err_exact_op2sch, 
            accum_err_op1sch_exact, 
	                      % Instantiations of the aforementioned schemes.
            accum_err_neg,    %  Additive Inverse
            accum_err_abs,    %  Absolute Value function
            accum_err_add,    %  Addition
            accum_err_sub,    %  Subtraction
	    accum_err_mul,    %  Multiplication
	    aerr_mul_props,   %  Multiplication properties
	    accum_err_div,    %  Division
	    accum_err_sqt,    %  Square Root
	    accum_err_flr,    %  Floor operation
	    accum_err_flr_t,  %  Floor operation properties
	    accum_err_sin,    %  Sine
	    accum_err_cos,    %  Cosine
	    accum_err_atn,    %  Arc-tangent
	    accum_err_exp,    %  Natural exponential function

                              % IEEE 754 instantiation of the high level spec.
            ieee754sp,        %  Single precision (types and operations)
	    ieee754sp_add,    %  Addition        
	    ieee754sp_sub,    %  Subtraction     
	    ieee754sp_mul,    %  Multiplication  
	    ieee754sp_div,    %  Division        
	    ieee754sp_sqt,    %  Square Root     
	    ieee754sp_flr,    %  Floor operation 
	    ieee754sp_neg,    %  Additive Inverse
	    ieee754sp_abs,    %  Absolute Value        
	    ieee754sp_mod,    %  Modulo operation
	    ieee754sp_sin,    %  Sin operation
	    ieee754sp_cos,    %  Cos operation
	    ieee754sp_atn,    %  Arc-tangent operation
	    ieee754sp_exp,    %  Natural exponential function
	    ieee754sp_ln,     %  Natural logarithm function
	    top_ieee754sp,    %
	    float32,         %
	                      %  Accumulated error calculation for:
            aerr754sp_add,    %   Addition
            aerr754sp_sub,    %   Subtraction
	    aerr754sp_mul,    %   Multiplication
	    aerr754sp_div,    %   Division
	    aerr754sp_sqt,    %   Square Root
	    aerr754sp_flr,    %   Floor operation
	    aerr754sp_neg,    %   Additive Inverse
	    aerr754sp_abs,    %   Absolute Value        
	    aerr754sp_sin,    %   Sine
	    aerr754sp_cos,    %   Cosine
	    aerr754sp_atn,    %   Arc-tangent
	    aerr754sp_exp,    %   Natural exponential function
	    aerr754sp_ln,     %   Natural logarithm function
	    aerr754sp,        %   (Convenience theory, imports previous)
	                      
            ieee754dp,        %  Double precision (types and operations)
	    ieee754dp_add,    %  Addition        
	    ieee754dp_sub,    %  Subtraction     
	    ieee754dp_mul,    %  Multiplication  
	    ieee754dp_div,    %  Division        
	    ieee754dp_sqt,    %  Square Root     
	    ieee754dp_flr,    %  Floor operation 
	    ieee754dp_neg,    %  Additive Inverse
	    ieee754dp_abs,    %  Absolute Value        
	    ieee754dp_mod,    %  Modulo operation
	    ieee754dp_sin,    %  Sin operation
	    ieee754dp_cos,    %  Cos operation
	    ieee754dp_atn,    %  Arc-tangent operation
	    ieee754dp_exp,    %  Natural exponential function
	    ieee754dp_ln,     %  Natural logarithm function
	    top_ieee754dp,    %
	    double64,         %
	                      %  Accumulated error calculation for:
            aerr754dp_add,    %   Addition
            aerr754dp_sub,    %   Subtraction
	    aerr754dp_mul,    %   Multiplication
	    aerr754dp_div,    %   Division
	    aerr754dp_sqt,    %   Square Root
	    aerr754dp_flr,    %   Floor operation
	    aerr754dp_neg,    %   Additive Inverse
	    aerr754dp_abs,    %   Absolute Value        
	    aerr754dp_sin,    %   Sine
	    aerr754dp_cos,    %   Cosine
	    aerr754dp_atn,    %   Arc-tangent
	    aerr754dp_exp,    %   Natural exponential function
	    aerr754dp_ln,     %   Natural logarithm function
	    aerr754dp,        %   (Convenience theory, imports previous)
	                      
 	    % Safe version
	    total_ieee754sp,
	    total_ieee754dp,
	    
            % Equivalence to the float_ieee854 formalization, see top__float_ieee854 (SB)
			
% TODO this one goes here?
  %          IEEE_link,

            % Strategies
	    strategies

END top
