double64: THEORY
BEGIN

  IMPORTING top_ieee754dp

  double64: TYPE = unb_double
  double: TYPE = double64

  CONVERSION RtoD
  CONVERSION- FtoR

  x,y: VAR double64
  nzy: VAR { y: double64 | DtoR(y) /= 0 }
  nnx: VAR { x: double64 | DtoR(x) >= 0 }
  px:  VAR { x: double64 | DtoR(x) > 0 }

  add_d64(x,y)  : MACRO double64 = Dadd(x,y)
  sub_d64(x,y)  : MACRO double64 = Dsub(x,y)
  neg_d64(x)    : MACRO double64 = Dneg(x)
  mul_d64(x,y)  : MACRO double64 = Dmul(x,y)
  div_d64(x,nzy): MACRO double64 = Ddiv(x,nzy)
  mod_d64(x,nzy): MACRO double64 = Dmod(x,nzy)
  
  ;+(x,y)  : MACRO double64 = Dadd(x,y)
  ;-(x,y)  : MACRO double64 = Dsub(x,y)
  ;-(x)    : MACRO double64 = Dneg(x)
  ;*(x,y)  : MACRO double64 = Dmul(x,y)
  ;/(x,nzy): MACRO double64 = Ddiv(x,nzy)
  floor(x) : MACRO double64 = Dfloor(x)

  ;< (x,y) : MACRO bool = Flt?(x,y)
  ;<=(x,y) : MACRO bool = Fle?(x,y)
  ;> (x,y) : MACRO bool = Flt?(x,y)
  ;>=(x,y) : MACRO bool = Fle?(x,y)

  r: VAR real

  ;< (x,r) : MACRO bool = Flt?(x,RtoD(r))
  ;<=(x,r) : MACRO bool = Fle?(x,RtoD(r))
  ;> (x,r) : MACRO bool = Flt?(x,RtoD(r))
  ;>=(x,r) : MACRO bool = Fle?(x,RtoD(r))
  ;/=(x,r) : MACRO bool = x /= RtoD(r)
  ;/=(r,y) : MACRO bool = RtoD(r) /= y

  abs_d64(x)    : MACRO double64 = Dabs(x)
  flr_d64(x)    : MACRO double64 = Dfloor(x)
  sqt_d64(nnx)  : MACRO double64 = Dabs(nnx)
  exp_d64(x)    : MACRO double64 = Dexp(x)
  lgn_d64(px)   : MACRO double64 = Dln(px)
  sin_d64(x)    : MACRO double64 = Dsin(x)
  cos_d64(x)    : MACRO double64 = Dcos(x)
  atn_d64(x)    : MACRO double64 = Datan(x)

  % useful rewrites to improve automaticity of TCC proofs
  AUTO_REWRITE+ DtoR_RtoD_int_exactly_representable
  AUTO_REWRITE+ abs
  
END double64
