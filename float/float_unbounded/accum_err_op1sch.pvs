accum_err_op1sch[
   F: TYPE,

   F2R : [F->real],
   R2F : [real->F],
   ulp : [real->nonneg_real],

   fF_pre?  : [F->bool],
   fF       : [(fF_pre?)-> F],

   fR_pre?  : [real->bool],
   fR       : [(fR_pre?)-> real],
  
   fun_bound_pre : [real,nonneg_real->bool],
   fun_bound     : [r1:real,{e1:nonneg_real|fun_bound_pre(r1,e1)}->real],
   ulp_bound_pre : [real,nonneg_real->bool],
   ulp_bound     : [r1:real,{e1:nonneg_real|ulp_bound_pre(r1,e1)}->real]
]: THEORY
BEGIN
  ASSUMING
    f1,f2: VAR F
    r1,r2: VAR real
    e1,e2: VAR nonneg_real

    ulp_abs: ASSUMPTION
      ulp(abs(r1))=ulp(r1)
    
    ulp_monotone: ASSUMPTION
      0 <= r1 AND r1 <= r2
      IMPLIES ulp(r1) <= ulp(r2)
    
    fR_err: ASSUMPTION
      abs(F2R(f1)-r1) <= e1 AND
      fR_pre?(r1)           AND
      fR_pre?(F2R(f1))      AND
      fun_bound_pre(r1,e1)
      IMPLIES abs(fR(F2R(f1))-fR(r1)) <= fun_bound(r1,e1)

    fF_correctly_rounded: ASSUMPTION 
      fR_pre?(F2R(f1))      AND
      fF_pre?(f1)
      IMPLIES 
        abs(F2R(fF(f1)) - fR(F2R(f1))) <= ulp(fR(F2R(f1)))/2
    
    f_ulp_bound: ASSUMPTION
      abs(F2R(f1)-r1) <= e1 AND
      fR_pre?(F2R(f1))      AND
      ulp_bound_pre(r1,e1)
      IMPLIES abs(fR(F2R(f1))) <= ulp_bound(r1,e1)

  ENDASSUMING

  IMPORTING reals@abs_lems
    
  accumulated_error: LEMMA  
    abs(F2R(f1)-r1) <= e1 AND
    fF_pre?(f1)           AND
    fR_pre?(r1)           AND
    fR_pre?(F2R(f1))      AND
    fun_bound_pre(r1,e1)  AND
    ulp_bound_pre(r1,e1)
    IMPLIES abs(F2R(fF(f1)) - fR(r1))
            <= fun_bound(r1,e1)
	       + ulp(ulp_bound(r1,e1)) / 2

END accum_err_op1sch
