accum_err_sqt[
  radix : above(1),
  (IMPORTING float[radix])
  b     : Format,
  round: ClosestRoundingPred[radix](b),
  RtoF : { RtoF: CanonicRoundingFun(b,round) |
                 exact_rep_conservation[radix](b,round)(RtoF) }
]: THEORY
BEGIN
  ASSUMING

    round_even_closest: ASSUMPTION
      FORALL(x:real,f:(Fbounded?(b))): round(x,f) IMPLIES EvenClosest?(b)(x,f)

    round_rounded_mode: ASSUMPTION
      rounded_mode?(b)(round)

  ENDASSUMING

  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING cr_sqt[radix,b,round,RtoF],
  	    reals@abs_lems,
            interval_arith@interval_mps

  sqt_aerr_bound(r1,e1): nonneg_real = sqrt(e1)

  sqrt_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1 AND
    r1 >= 0 AND
    FtoR(f1) >= 0
    IMPLIES abs(sqrt(FtoR(f1))-sqrt(r1)) <= sqt_aerr_bound(r1,e1)

  sqt_ulp_bound(r1,(e1|r1>=0)): real = sqrt(r1+e1)

  Fsqrt_accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    r1 >= 0 AND
    FtoR(f1) >= 0
    IMPLIES abs(sqrt(FtoR(f1))) <= sqt_ulp_bound(r1,e1)  

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b),
	      LAMBDA(f1): FtoR(f1)>=0, Fsqrt,
	      LAMBDA(r1): r1>=0, sqrt,
	      LAMBDA(r1,e1): TRUE,
	      sqt_aerr_bound,
	      LAMBDA(r1,e1):  r1>=0,
	      sqt_ulp_bound] AS sqt_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    r1 >= 0 AND
    FtoR(f1) >= 0
    IMPLIES abs(FtoR(Fsqrt(f1)) - sqrt(r1))
            <= sqt_aerr_bound(r1,e1)
	       + ulp(b)(sqt_ulp_bound(r1,e1)) / 2    

END accum_err_sqt
