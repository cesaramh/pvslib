(accum_err_flr_t
 (floor_accum_err 0
  (floor_accum_err-1 nil 3682178933
   ("" (expand "flr_t_aerr_bound")
    (("" (skeep)
      (("" (lemma "interval_as_absdif")
        (("" (inst? -1 :where 1)
          (("" (replace -1 :hide? t)
            (("" (use "interval_as_absdif")
              (("" (lemma "Floor_inclusion")
                (("" (inst -1 "[|FtoR(f1) - e1, FtoR(f1) + e1|]" "r1")
                  (("" (assert)
                    (("" (assert)
                      (("" (hide -2)
                        (("" (expand "Floor")
                          (("" (expand "[||]")
                            (("" (expand "##") (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_flr_t nil)
    (float type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_flr_t nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Floor const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Floor_inclusion formula-decl nil interval interval_arith)
    (interval_as_absdif formula-decl nil interval interval_arith)
    (flr_t_aerr_bound const-decl "real" accum_err_flr_t nil))
   nil))
 (flr_prf_TCC1 0
  (flr_prf_TCC1-2 nil 3711216455
   ("" (skeep) (("" (use "floor_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((floor_accum_err formula-decl nil accum_err_flr_t nil)
    (b formal-const-decl "Format" accum_err_flr_t nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_flr_t nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (flr_prf assuming
    "accum_err_op1sch_exact[(float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), restrict[float[radix], (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), real].restrict(float[accum_err_flr_t.radix].FtoR), LAMBDA (f1): booleans.TRUE, restrict[float[radix], {f1: (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)) | booleans.TRUE}, (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b))].restrict(cr_flr[accum_err_flr_t.radix, accum_err_flr_t.b, accum_err_flr_t.round, accum_err_flr_t.RtoF].Ffloor), LAMBDA (r1): booleans.TRUE, floor_ceil.floor, LAMBDA (r1, e1): booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.e1, accum_err_flr_t.r1))), LAMBDA (r1, (e1: nonneg_real | booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.r1, accum_err_flr_t.e1))))): accum_err_flr_t.flr_t_aerr_bound(accum_err_flr_t.r1, e1)].accum_err_op1sch_exact"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1), accum_err_op1sch_exact.r1)), accum_err_op1sch_exact.e1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.r1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fun_bound_pre(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.fR(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fR(accum_err_op1sch_exact.r1))), accum_err_op1sch_exact.fun_bound(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))"))
  (flr_prf_TCC1-1 nil 3682180774
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (hide 2)
        (("" (skeep)
          (("" (use "round_even_closest") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil))
   nil
   (flr_prf assuming
    "accum_err_op1sch_exact[(float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), restrict[float[radix], (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), real].restrict(float[accum_err_flr_t.radix].FtoR), LAMBDA (f1): booleans.TRUE, restrict[float[radix], {f1: (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)) | booleans.TRUE}, (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b))].restrict(cr_flr[accum_err_flr_t.radix, accum_err_flr_t.b, accum_err_flr_t.round, accum_err_flr_t.RtoF].Ffloor), LAMBDA (r1): booleans.TRUE, floor_ceil.floor, LAMBDA (r1, e1): booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.e1, accum_err_flr_t.r1))), LAMBDA (r1, (e1: nonneg_real | booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.r1, accum_err_flr_t.e1))))): accum_err_flr_t.flr_t_aerr_bound(accum_err_flr_t.r1, e1)].accum_err_op1sch_exact"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1), accum_err_op1sch_exact.r1)), accum_err_op1sch_exact.e1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.r1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fun_bound_pre(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.fR(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fR(accum_err_op1sch_exact.r1))), accum_err_op1sch_exact.fun_bound(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))")))
 (flr_prf_TCC2 0
  (flr_prf_TCC2-1 nil 3682180774
   ("" (skeep) (("" (use "Ffloor_no_rounding_error") nil nil)) nil)
   ((Ffloor_no_rounding_error formula-decl nil cr_flr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_flr_t nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_flr_t nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_flr_t
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_flr_t nil))
   nil
   (flr_prf assuming
    "accum_err_op1sch_exact[(float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), restrict[float[radix], (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)), real].restrict(float[accum_err_flr_t.radix].FtoR), LAMBDA (f1): booleans.TRUE, restrict[float[radix], {f1: (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b)) | booleans.TRUE}, (float[accum_err_flr_t.radix].Fbounded?(accum_err_flr_t.b))].restrict(cr_flr[accum_err_flr_t.radix, accum_err_flr_t.b, accum_err_flr_t.round, accum_err_flr_t.RtoF].Ffloor), LAMBDA (r1): booleans.TRUE, floor_ceil.floor, LAMBDA (r1, e1): booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.e1, accum_err_flr_t.r1))), LAMBDA (r1, (e1: nonneg_real | booleans.AND(floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.-)(accum_err_flr_t.r1, accum_err_flr_t.e1)), floor_ceil.floor(accum_err_flr_t.r1) = floor_ceil.floor((number_fields.+)(accum_err_flr_t.r1, accum_err_flr_t.e1))))): accum_err_flr_t.flr_t_aerr_bound(accum_err_flr_t.r1, e1)].accum_err_op1sch_exact"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fF_pre?(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.fF(accum_err_op1sch_exact.f1)) = accum_err_op1sch_exact.fR(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)))")))
 (accum_err_bound 0
  (accum_err_bound-2 "" 3790103354
   ("" (skeep)
    (("" (use "flr_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch_exact nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_flr_t nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_flr_t nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (TRUE const-decl "bool" booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_flr_t
           nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_flr_t nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(floor(FtoR(f1)), f2)}" cr_flr nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (flr_t_aerr_bound const-decl "real" accum_err_flr_t nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (accum_err_bound-1 nil 3682180898
   ("" (skeep)
    (("" (use "flr_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (propax) nil nil)
         ("7" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch_exact nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(floor(FtoR(f1)), f2)}" cr_flr nil))
   shostak)))

