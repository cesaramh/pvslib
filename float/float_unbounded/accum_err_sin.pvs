accum_err_sin[
  radix : above(1),
  (IMPORTING float[radix])
  b     : Format,
  round: ClosestRoundingPred[radix](b),
  RtoF : { RtoF: CanonicRoundingFun(b,round) |
                 exact_rep_conservation[radix](b,round)(RtoF) }
]: THEORY
BEGIN
  ASSUMING

    round_even_closest: ASSUMPTION
      FORALL(x:real,f:(Fbounded?(b))): round(x,f) IMPLIES EvenClosest?(b)(x,f)

    round_rounded_mode: ASSUMPTION
      rounded_mode?(b)(round)

  ENDASSUMING

  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING cr_sin[radix,b,round,RtoF],
  	    reals@abs_lems,
            interval_arith@interval_mps,
	    trig_fp_bounds

  sin_aerr_bound(r1,e1): nonneg_real = min(2, e1)

  sin_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(sin(FtoR(f1))-sin(r1)) <= sin_aerr_bound(r1,e1)

  sin_ulp_bound(r1,e1): real = abs(sin(r1))+min(2,e1)

  Fsin_accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(sin(FtoR(f1))) <= sin_ulp_bound(r1,e1)  

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b),
	      LAMBDA(f1): TRUE, Fsin,
	      LAMBDA(r1): TRUE, sin,
	      LAMBDA(r1,e1): TRUE,
	      sin_aerr_bound,
	      LAMBDA(r1,e1): TRUE,
	      sin_ulp_bound] AS sin_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(FtoR(Fsin(f1)) - sin(r1))
            <= sin_aerr_bound(r1,e1)
	       + ulp(b)(sin_ulp_bound(r1,e1)) / 2    

END accum_err_sin
