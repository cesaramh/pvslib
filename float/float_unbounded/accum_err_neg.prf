(accum_err_neg
 (neg_accum_err 0
  (neg_accum_err-1 nil 3698586195
   ("" (skeep)
    (("" (expand "neg_aerr_bound")
      (("" (assert)
        (("" (expand "abs")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_aerr_bound const-decl "real" accum_err_neg nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (aelemmath_exact_neg_TCC1 0
  (aelemmath_exact_neg_TCC1-1 nil 3698591358
   ("" (skeep) (("" (use "neg_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((neg_accum_err formula-decl nil accum_err_neg nil)
    (b formal-const-decl "Format" accum_err_neg nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_neg nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil
   (aelemmath_exact_neg assuming
    "accum_err_op1sch_exact[(float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)), restrict[float[radix], (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)), real].restrict(float[accum_err_neg.radix].FtoR), LAMBDA (f1): booleans.TRUE, restrict[float[radix], {f1: (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)) | booleans.TRUE}, (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b))].restrict(cr_neg[accum_err_neg.radix, accum_err_neg.b, accum_err_neg.round, accum_err_neg.RtoF].Fneg), LAMBDA (r1): booleans.TRUE, LAMBDA (r1): (number_fields.-)(accum_err_neg.r1), LAMBDA (r1, e1): booleans.TRUE, accum_err_neg.neg_aerr_bound].accum_err_op1sch_exact"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1), accum_err_op1sch_exact.r1)), accum_err_op1sch_exact.e1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.r1), booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fun_bound_pre(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch_exact.fR(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fR(accum_err_op1sch_exact.r1))), accum_err_op1sch_exact.fun_bound(accum_err_op1sch_exact.r1, accum_err_op1sch_exact.e1)))")))
 (aelemmath_exact_neg_TCC2 0
  (aelemmath_exact_neg_TCC2-1 nil 3698591358
   ("" (skeep) (("" (use "Fneg_exact") nil nil)) nil)
   ((Fneg_exact formula-decl nil cr_neg nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_neg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_neg nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_neg
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_neg nil))
   nil
   (aelemmath_exact_neg assuming
    "accum_err_op1sch_exact[(float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)), restrict[float[radix], (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)), real].restrict(float[accum_err_neg.radix].FtoR), LAMBDA (f1): booleans.TRUE, restrict[float[radix], {f1: (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b)) | booleans.TRUE}, (float[accum_err_neg.radix].Fbounded?(accum_err_neg.b))].restrict(cr_neg[accum_err_neg.radix, accum_err_neg.b, accum_err_neg.round, accum_err_neg.RtoF].Fneg), LAMBDA (r1): booleans.TRUE, LAMBDA (r1): (number_fields.-)(accum_err_neg.r1), LAMBDA (r1, e1): booleans.TRUE, accum_err_neg.neg_aerr_bound].accum_err_op1sch_exact"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch_exact.fR_pre?(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.fF_pre?(accum_err_op1sch_exact.f1)), accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.fF(accum_err_op1sch_exact.f1)) = accum_err_op1sch_exact.fR(accum_err_op1sch_exact.F2R(accum_err_op1sch_exact.f1)))")))
 (accum_err_neg 0
  (accum_err_neg-1 nil 3698591394
   ("" (skeep*)
    (("" (use "aelemmath_exact_neg.accumulated_error") (("" (assert) nil nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch_exact nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_neg nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_neg nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_neg
           nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_neg nil)
    (Fneg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(-(FtoR(f1)), f2)}"
     cr_neg nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (neg_aerr_bound const-decl "real" accum_err_neg nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak)))

