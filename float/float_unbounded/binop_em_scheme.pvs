%
% Generic scheme to define correctly rounded binary operations.
%
binop_em_scheme[

  radix :above(1),
  (IMPORTING float[radix])
  b     : Format,
  round : ClosestRoundingPred(b),
  RtoF  : CanonicRoundingFun(b,round),
  
  s? : [real->bool],
  t? : [real->[real->bool]],
  g: [x:(s?),y:(t?(x))->real]
  
]: THEORY
BEGIN
  f1,f2: VAR float

  Fg((f1|s?(FtoR(f1))),(f2|t?(FtoR(f1))(FtoR(f2)))) : 
	      { f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1),FtoR(f2)),f3)} =
     RtoF(g(FtoR(f1),FtoR(f2)))

  Fg_bounded: LEMMA
   FORALL((f1|s?(FtoR(f1))),(f2|t?(FtoR(f1))(FtoR(f2)))):
    Fbounded?(b)(Fg(f1,f2))

  Fg_error: LEMMA
   FORALL((f1|s?(FtoR(f1))),(f2|t?(FtoR(f1))(FtoR(f2)))):
    abs(FtoR(Fg(f1,f2)) - g(FtoR(f1),FtoR(f2))) <= Fulp(b)(Fg(f1,f2))/2

END binop_em_scheme
