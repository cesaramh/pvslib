accum_err_flr[
  radix : above(1),
  (IMPORTING float[radix])
  b     : Format,
  round: ClosestRoundingPred[radix](b),
  RtoF : { RtoF: CanonicRoundingFun(b,round) |
                 exact_rep_conservation[radix](b,round)(RtoF) }
]: THEORY
BEGIN
  ASSUMING

    round_even_closest: ASSUMPTION
      FORALL(x:real,f:(Fbounded?(b))): round(x,f) IMPLIES EvenClosest?(b)(x,f)

    round_rounded_mode: ASSUMPTION
      rounded_mode?(b)(round)

  ENDASSUMING

  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING cr_flr[radix,b,round,RtoF],
  	    reals@abs_lems,
            interval_arith@interval_mps

  flr_aerr_bound(r1,e1): real = e1+1

  floor_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1
    IMPLIES abs(floor(FtoR(f1))-floor(r1)) <= flr_aerr_bound(r1,e1)

  IMPORTING accum_err_op1sch_exact
   [(Fbounded?(b)), FtoR, 
   LAMBDA(f1): TRUE, cr_flr.Ffloor,
   LAMBDA(r1): TRUE, floor,
   LAMBDA(r1,e1): TRUE,
   flr_aerr_bound] AS flr_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(FtoR(Ffloor(f1)) - floor(r1))
            <= flr_aerr_bound(r1,e1)

END accum_err_flr
