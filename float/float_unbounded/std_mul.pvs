% Definition of Multiplication operation following the IEEE 754 standard.
% According to the standard, every operation must be performed as if it first
% produced an intermediate result correct to infinite precision and with
% unbounded range, and then rounded to fit the target format, if necessary.
%
std_mul[radix : above(1),
       (IMPORTING float[radix])
       b     : Format,
       round : ClosestRoundingPred(b),
       RtoF  : CanonicRoundingFun(b,round) ]: THEORY
BEGIN

  IMPORTING binop_em_scheme

  f1,f2:    VAR float
  x1,x2,x3: VAR real

  trivial1(x1):     MACRO bool = TRUE    
  trivial2(x1)(x2): MACRO bool = TRUE    

  Fmul(f1,f2): {f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1)*FtoR(f2),f3)} =
    Fg[radix,b,round,RtoF,trivial1,trivial2,*](f1,f2)

  Fmul_bounded: LEMMA Fbounded?(b)(Fmul(f1,f2))
  AUTO_REWRITE+ Fmul_bounded
  
  Fmul_error: LEMMA 
    abs(FtoR(Fmul(f1,f2)) - (FtoR(f1)*FtoR(f2))) <= Fulp(b)(Fmul(f1,f2))/2
    
  %|- F*_error_ulp : PROOF
  %|- (then (skeep)(lemma "closest_ulp")(inst?)
  %|-   (spread (split -1)
  %|-    ((then (propax))
  %|-     (then (invoke (typepred "%1") (! 1 1))(use "FcanonicBounded")(assert))
  %|-     (then (invoke (typepred "%1") (! 1 2))))))
  %|- QED F*_error_ulp
    Fmul_error_ulp: LEMMA 
    abs( FtoR(Fmul(f1,f2)) - (FtoR(f1)*FtoR(f2)) )
    	 <= ulp(b) (FtoR(f1)*FtoR(f2)) / 2

  Fmul_commutative: LEMMA
    Fmul(f1,f2) = Fmul(f2,f1)

END std_mul
