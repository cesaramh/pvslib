accum_err_atn[
  radix : above(1),
  (IMPORTING float[radix])
  b     : Format,
  round: ClosestRoundingPred[radix](b),
  RtoF : { RtoF: CanonicRoundingFun(b,round) |
                 exact_rep_conservation[radix](b,round)(RtoF) }
]: THEORY
BEGIN
  ASSUMING

    round_even_closest: ASSUMPTION
      FORALL(x:real,f:(Fbounded?(b))): round(x,f) IMPLIES EvenClosest?(b)(x,f)

    round_rounded_mode: ASSUMPTION
      rounded_mode?(b)(round)

  ENDASSUMING

  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING std_atn[radix,b,round,RtoF],
  	    reals@abs_lems,
            interval_arith@interval_mps,
	    trig_fp_bounds

  atn_aerr_bound(r1,e1): nonneg_real = e1

  atn_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(atan(FtoR(f1))-atan(r1)) <= atn_aerr_bound(r1,e1)

  atn_ulp_bound(r1,e1): real = atan(abs(r1)+e1)

  Fatn_accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(atan(FtoR(f1))) <= atn_ulp_bound(r1,e1)  

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b),
	      LAMBDA(f1): TRUE, Fatn,
	      LAMBDA(r1): TRUE, atan,
	      LAMBDA(r1,e1): TRUE,
	      atn_aerr_bound,
	      LAMBDA(r1,e1): TRUE,
	      atn_ulp_bound] AS atn_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 
    IMPLIES abs(FtoR(Fatn(f1)) - atan(r1))
            <= atn_aerr_bound(r1,e1)
	       + ulp(b)(atn_ulp_bound(r1,e1)) / 2

  % Tighter bound

  atn_t_aerr_bound_pre(r1,e1): MACRO bool = e1 < abs(r1)

  atn_t_aerr_bound(r1,e1): nonneg_real = e1 / (1 + min((r1-e1)^2,(r1 + e1)^2))

  atn_t_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1 AND
    e1 < abs(r1)
    IMPLIES abs(atan(FtoR(f1))-atan(r1)) <= atn_t_aerr_bound(r1,e1)

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b),
	      LAMBDA(f1): TRUE, Fatn,
	      LAMBDA(r1): TRUE, atan,
	      atn_t_aerr_bound_pre,	
	      LAMBDA(r1,(e1|atn_t_aerr_bound_pre(r1,e1))):atn_t_aerr_bound(r1,e1),
	      LAMBDA(r1,e1): TRUE,
	      atn_ulp_bound] AS atn_t_prf

  accum_err_bound_t: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    e1 < abs(r1)
    IMPLIES abs(FtoR(Fatn(f1)) - atan(r1))
            <= atn_t_aerr_bound(r1,e1)
	       + ulp(b)(atn_ulp_bound(r1,e1)) / 2

END accum_err_atn
