%
% This theory defines the binary format binary32.
% The objective of this theory is to redefine names in a more user-friendly way.
%
ieee754_single_base : THEORY
BEGIN

  IMPORTING ieee754_format_parameters

  ieee754_single_radix     : MACRO ieee754_radix = 2
  ieee754_single_precision : MACRO ieee754_precision(ieee754_single_radix) = 24
  ieee754_single_maxExp    : MACRO ieee754_maxExp(ieee754_single_radix,ieee754_single_precision) = 127
  ieee754_single_minExp    : MACRO ieee754_minExp(ieee754_single_radix,ieee754_single_precision) = -126

  ieee754_single_exponent_size : MACRO posint = 8

  %
  %
  %

  IMPORTING ieee754_semantics[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS single_sem_th

  er_ub_value: LEMMA er_ub = 340282346638528859811704183484516925440

  er_lb_value: LEMMA er_lb = -340282346638528859811704183484516925440

  binary32 : TYPE = datum
  single   : TYPE = binary32

  NaN?_single   : MACRO [ binary32 -> bool ] = NaN?
  finite?_single: MACRO [ binary32 -> bool ] = finite?
  number?_single: MACRO [ binary32 -> bool ] = number?

  %
  % Projection and Rounding
  %

  proj_single : MACRO [ (finite?_single) -> real ] = proj
  proj_def: AXIOM FORALL(x: (finite?_single)): proj_single(x) = proj(x)
  StoR(x: (finite?_single)) : MACRO real = proj_single(x) % @M3 Kept for backward compatibility

  safe_proj_single : MACRO [ binary32 -> real ] = safe_proj
  safe_proj_def: AXIOM FORALL(x: binary32): safe_proj_single(x) = safe_proj(x)

  round_single : MACRO [ real -> binary32 ] = round
  round_def: AXIOM FORALL(r: real): round_single(r) = round(r)

  RtoS(r: real) : MACRO binary32 = round_single(r) % @M3 Kept for backward compatibility
  ItoS(i: integer): MACRO binary32 = round_single(i)

  % instantiate operators
  IMPORTING ieee754_qlt[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qlt_single
  IMPORTING ieee754_qle[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qle_single
  IMPORTING ieee754_qgt[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qgt_single
  IMPORTING ieee754_qge[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qge_single
  IMPORTING ieee754_qeq[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qeq_single
  IMPORTING ieee754_qun[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS qun_single
  %
  IMPORTING ieee754_add[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS add_single
  IMPORTING ieee754_sub[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS sub_single
  IMPORTING ieee754_mul[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS mul_single
  IMPORTING ieee754_max[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS max_single
  IMPORTING ieee754_min[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS min_single
  IMPORTING ieee754_div[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS div_single
  %
  IMPORTING ieee754_abs[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS abs_single
  IMPORTING ieee754_sqt[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS sqt_single
  IMPORTING ieee754_neg[ieee754_single_radix,ieee754_single_precision,ieee754_single_maxExp] AS neg_single

  x,y: VAR binary32

  % special values

  pInf_single  : binary32
  nInf_single  : binary32
  pZero_single : binary32
  nZero_single : binary32

  zero?_single(x: binary32): bool = (x=pZero_single OR x=nZero_single)
  positive_infinite?_single(x: binary32): bool = (x=pInf_single)
  negative_infinite?_single(x: binary32): bool = (x=nInf_single)
  infinite?_single(x: binary32): bool = (x=pInf_single OR x=nInf_single)

  % operations

  add_single (x,y: binary32): binary32
  sub_single (x,y: binary32): binary32
  mul_single (x,y: binary32): binary32
  div_single (x,y: binary32): binary32
  min_single (x,y: binary32): binary32
  max_single (x,y: binary32): binary32
  abs_single   (x: binary32): binary32
  sqrt_single  (x: binary32): binary32
  neg_single   (x: binary32): binary32

  ;+(x,y: binary32) : MACRO binary32 = add_single(x,y)
  ;-(x,y: binary32) : MACRO binary32 = sub_single(x,y)
  ;*(x,y: binary32) : MACRO binary32 = mul_single(x,y)
  ;/(x,y: binary32) : MACRO binary32 = div_single(x,y)
  ;-( x : binary32) : MACRO binary32 = neg_single(x)

  Sadd(x,y: binary32) : MACRO binary32 = add_single(x,y)
  Ssub(x,y: binary32) : MACRO binary32 = sub_single(x,y)
  Smul(x,y: binary32) : MACRO binary32 = mul_single(x,y)
  Sdiv(x,y: binary32) : MACRO binary32 = div_single(x,y)
  Smin(x,y: binary32) : MACRO binary32 = min_single(x,y)
  Smax(x,y: binary32) : MACRO binary32 = max_single(x,y)
  Sabs( x : binary32) : MACRO binary32 = abs_single(x)
  Ssqt( x : binary32) : MACRO binary32 = sqrt_single(x)
  Sneg( x : binary32) : MACRO binary32 = neg_single(x)

  % Additional Operators
  %

  qlt_single(x,y: binary32): bool
  qle_single(x,y: binary32): bool
  qgt_single(x,y: binary32): bool
  qge_single(x,y: binary32): bool
  qeq_single(x,y: binary32): bool
  qun_single(x,y: binary32): bool

  Sqlt(x,y: binary32): MACRO bool = qlt_single(x,y)
  Sqle(x,y: binary32): MACRO bool = qle_single(x,y)
  Sqgt(x,y: binary32): MACRO bool = qgt_single(x,y)
  Sqge(x,y: binary32): MACRO bool = qge_single(x,y)
  Sqeq(x,y: binary32): MACRO bool = qeq_single(x,y)
  Squn(x,y: binary32): MACRO bool = qun_single(x,y)

  positive?_single(x: binary32): bool = qle_single(pZero, x)
  negative?_single(x: binary32): bool = qle_single(x, nZero)

  % definitions

  pInf_def: AXIOM pInf_single = pInf
  nInf_def: AXIOM nInf_single = nInf
  pZero_def: AXIOM pZero_single = pZero
  nZero_def: AXIOM nZero_single = nZero

  add_def  : AXIOM add_single(x,y) = add_ieee754(x,y)
  sub_def  : AXIOM sub_single(x,y) = sub_ieee754(x,y)
  mul_def  : AXIOM mul_single(x,y) = mul_ieee754(x,y)
  div_def  : AXIOM div_single(x,y) = div_ieee754(x,y)
  min_def  : AXIOM min_single(x,y) = min_ieee754(x,y)
  max_def  : AXIOM max_single(x,y) = max_ieee754(x,y)
  abs_def  : AXIOM abs_single(x)   = abs_ieee754(x)
  sqrt_def : AXIOM sqrt_single(x)  = sqt_ieee754(x)
  neg_def  : AXIOM neg_single(x)   = neg_ieee754(x)

  qlt_def: AXIOM qlt_single(x,y) = qlt_ieee754(x,y)
  qle_def: AXIOM qle_single(x,y) = qle_ieee754(x,y)
  qgt_def: AXIOM qgt_single(x,y) = qgt_ieee754(x,y)
  qge_def: AXIOM qge_single(x,y) = qge_ieee754(x,y)
  qeq_def: AXIOM qeq_single(x,y) = qeq_ieee754(x,y)
  qun_def: AXIOM qun_single(x,y) = qun_ieee754(x,y)

  %
  % Unit in the Last Place
  %

  ulp_single (r: real): macro nonneg_real = ulp(r)
  Sulp       (r: real): macro nonneg_real = ulp_single(r)
  
  min_ulp_single: macro nonneg_real = min_ulp

  %
  % Synonims for operator proporties
  %

  add_single_finite_def
  : THEOREM FORALL(f1,f2: (finite?_single))
    : safe_proj_single(add_single(f1, f2)) =
      safe_proj_single(round_single(safe_proj_single(f1) + safe_proj_single(f2)))

  sub_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : safe_proj_single(sub_single(f1, f2)) =
      safe_proj_single(round_single(safe_proj_single(f1) - safe_proj_single(f2)))

  mul_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : safe_proj_single(mul_single(f1, f2)) =
      safe_proj_single(round_single(safe_proj_single(f1) * safe_proj_single(f2)))

  div_single_finite_def
  : CONJECTURE  FORALL(f1: (finite?_single),f2: single | (finite?_single(f2) AND NOT zero?_single(f2)))
    : safe_proj_single(div_single(f1, f2)) =
      safe_proj_single(round_single(safe_proj_single(f1) / safe_proj_single(f2)))

  qeq_single_finite_equiv
  : conjecture
    ∀(f1: (finite?_single), f2: single): qeq_single(f1, f2) ⇒ finite?_single(f2)

  qeq_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : qeq_single(f1, f2) =
      (safe_proj_single(f1) = safe_proj_single(f2))

  qge_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : qge_single(f1, f2) =
      (safe_proj_single(f1) >= safe_proj_single(f2))

  qgt_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : qgt_single(f1, f2) =
      (safe_proj_single(f1) > safe_proj_single(f2))

  qle_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : qle_single(f1, f2) =
      (safe_proj_single(f1) <= safe_proj_single(f2))

  qle_single_finite_safe_def
  : CONJECTURE ∀(f1,f2: (number?_single))
    : qle_single(f1, f2) =
      (safe_proj_single(f1) <= safe_proj_single(f2))

  qlt_single_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_single))
    : qlt_single(f1, f2) =
      (safe_proj_single(f1) < safe_proj_single(f2))

  neg_single_finite_def
  : CONJECTURE  FORALL(f: (finite?_single))
    : safe_proj_single(neg_single(f)) = -safe_proj_single(f)

  %
  %
  %

  finite?_single_add
  : CONJECTURE  FORALL(f1, f2: single)
    : finite?_single(add_single(f1,f2)) => finite?_single(f1) AND finite?_single(f2)

  finite?_single_sub
  : CONJECTURE  FORALL(f1, f2: single)
    : finite?_single(sub_single(f1,f2)) => finite?_single(f1) AND finite?_single(f2)

  finite?_single_mul
  : CONJECTURE  FORALL(f1, f2: single)
    : finite?_single(mul_single(f1,f2)) => finite?_single(f1) AND finite?_single(f2)

  finite?_single_div
  : CONJECTURE  FORALL(f1: single, f2: single | NOT zero?_single(f2))
    : finite?_single(div_single(f1,f2)) => finite?_single(f1) AND NOT safe_proj_single(f2) = 0 AND NOT NaN?_single(f2)

  finite?_single_neg
  : CONJECTURE  FORALL(f: single)
    : finite?_single(neg_single(f)) => finite?_single(f)

  %
  %
  %

  single__finite?_projs_finite?_add
  : CONJECTURE
    ∀(f1,f2: (finite?_single)): finite?_single(round_single(proj(f1) + proj(f2))) => finite?_single(add_single(f1,f2))

  single__finite?_projs_finite?_sub
  : CONJECTURE
    ∀(f1,f2: (finite?_single)): finite?_single(round_single(proj(f1) - proj(f2))) => finite?_single(sub_single(f1,f2))

  single__finite?_projs_finite?_mul
  : CONJECTURE
    ∀(f1,f2: (finite?_single)): finite?_single(round_single(proj(f1) * proj(f2))) => finite?_single(mul_single(f1,f2))

  single__finite?_projs_finite?_div
  : CONJECTURE
    ∀(f1:(finite?_single) ,f2: single |(finite?_single(f2) AND NOT zero?_single(f2)))
    : finite?_single(round_single(safe_proj_single(f1) / safe_proj_single(f2))) => finite?_single(div_single(f1,f2))

END ieee754_single_base
