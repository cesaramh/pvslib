(ieee754_add
 (add_finite_def 0
  (add_finite_def-1 nil 3883987843
   ("" (skeep)
    (("" (case "safe_proj(f1) /= 0 OR safe_proj(f2) /= 0")
      (("1" (rewrite "add_correct__finite")
        (("1" (expand "safe_proj") (("1" (propax) nil nil)) nil)
         ("2" (hide 2)
          (("2" (expand "safe_proj")
            (("2" (rewrite "nzfinite?_def")
              (("2" (rewrite "nzfinite?_def")
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1 1)
          (("2" (replace -2 1)
            (("2" (expand "safe_proj" -)
              (("2" (lemma "only_zeros_proj_zero")
                (("2" (copy -1)
                  (("2" (inst -1 f1)
                    (("2" (inst -2 f2)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (replaces)
                            (("1" (rewrite add_correct__pZero_pZero)
                              (("1" (rewrite round_zero) nil nil))
                              nil))
                            nil)
                           ("2" (replaces)
                            (("2" (rewrite "add_correct__pZero_nZero")
                              (("2" (rewrite round_zero) nil nil))
                              nil))
                            nil)
                           ("3" (replaces)
                            (("3" (rewrite "add_correct__nZero_pZero")
                              (("3"
                                (expand "safe_proj")
                                (("3"
                                  (assert)
                                  (("3"
                                    (rewrite "round_zero")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (replaces)
                            (("4" (rewrite "add_correct__nZero_nZero")
                              (("4"
                                (expand "safe_proj")
                                (("4"
                                  (assert)
                                  (("4"
                                    (rewrite proj_def_nZero)
                                    (("4"
                                      (lemma "round_zero")
                                      (("4"
                                        (replaces :dir rl)
                                        (("4"
                                          (rewrite proj_def_pZero)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite? const-decl "bool" ieee754_data nil)
    (safe_proj const-decl "real" ieee754_semantics nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_add nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_add nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_add nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (add_correct__finite formula-decl nil ieee754_add nil)
    (add_correct__pZero_pZero formula-decl nil ieee754_add nil)
    (round_zero formula-decl nil ieee754_semantics nil)
    (TRUE const-decl "bool" booleans nil)
    (add_correct__pZero_nZero formula-decl nil ieee754_add nil)
    (add_correct__nZero_pZero formula-decl nil ieee754_add nil)
    (pzero_finite formula-decl nil ieee754_data nil)
    (finite_round_er formula-decl nil ieee754_semantics nil)
    (add_correct__nZero_nZero formula-decl nil ieee754_add nil)
    (nzero_finite formula-decl nil ieee754_data nil)
    (proj_def_pZero formula-decl nil ieee754_semantics nil)
    (proj_def_nZero formula-decl nil ieee754_semantics nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil))
   nil))
 (add_finites_is_finite 0
  (add_finites_is_finite-1 nil 3884087924
   ("" (skeep)
    (("" (case "NaN?(f1) OR NaN?(f2)")
      (("1" (hide 1)
        (("1" (lemma "add_correct__nan")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replace -2 -1)
                (("1" (lemma "pInf_nInf_Nan_finite")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (rewrite pInf_nInf_Nan_finite :dir rl)
            (("1" (case "finite?(f2)")
              (("1" (prop)
                (("1" (replaces)
                  (("1" (rewrite "add_correct__pInf_finite")
                    (("1" (hide-all-but (-2))
                      (("1" (rewrite "pInf_nInf_Nan_finite" :dir rl)
                        nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces)
                  (("2" (rewrite add_correct__nInf_finite)
                    (("2" (hide-all-but -2)
                      (("2" (rewrite "pInf_nInf_Nan_finite" :dir rl)
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite pInf_nInf_Nan_finite 1 :dir rl)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (replaces)
                      (("1" (rewrite add_correct__pInf_pInf)
                        (("1" (rewrite pInf_nInf_Nan_finite :dir rl)
                          nil nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (lemma add_correct__nInf_pInf)
                        (("2" (rewrite pInf_nInf_Nan_finite :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (replaces)
                      (("3" (lemma add_correct__pInf_nInf)
                        (("3" (rewrite pInf_nInf_Nan_finite :dir rl)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (replaces)
                      (("4" (rewrite add_correct__nInf_nInf)
                        (("4" (rewrite pInf_nInf_Nan_finite :dir rl)
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "finite?(f1)")
            (("1" (rewrite "pInf_nInf_Nan_finite" 1 :dir rl)
              (("1" (assert)
                (("1" (prop)
                  (("1" (replaces)
                    (("1" (rewrite add_correct__finite_pInf)
                      (("1" (rewrite pInf_nInf_Nan_finite -2 :dir rl)
                        nil nil))
                      nil))
                    nil)
                   ("2" (replaces)
                    (("2" (rewrite add_correct__finite_nInf)
                      (("2" (hide-all-but -2)
                        (("2" (rewrite pInf_nInf_Nan_finite :dir rl)
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite pInf_nInf_Nan_finite :dir rl)
              (("2" (rewrite pInf_nInf_Nan_finite :dir rl)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (replaces)
                      (("1" (rewrite add_correct__pInf_pInf)
                        (("1" (rewrite pInf_nInf_Nan_finite :dir rl)
                          nil nil))
                        nil))
                      nil)
                     ("2" (replaces)
                      (("2" (lemma add_correct__pInf_nInf)
                        (("2" (rewrite pInf_nInf_Nan_finite :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (replaces)
                      (("3" (lemma add_correct__nInf_pInf)
                        (("3" (rewrite pInf_nInf_Nan_finite :dir rl)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (replaces)
                      (("4" (rewrite add_correct__nInf_nInf)
                        (("4" (rewrite pInf_nInf_Nan_finite :dir rl)
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_add nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_add nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_add nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add_correct__nan formula-decl nil ieee754_add nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil)
    (add_ieee754 const-decl "[datum, datum -> datum]" ieee754_add nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nInf const-decl "datum" ieee754_data nil)
    (add_correct__nInf_finite formula-decl nil ieee754_add nil)
    (TRUE const-decl "bool" booleans nil)
    (pInf const-decl "datum" ieee754_data nil)
    (add_correct__pInf_finite formula-decl nil ieee754_add nil)
    (add_correct__nInf_nInf formula-decl nil ieee754_add nil)
    (add_correct__pInf_nInf formula-decl nil ieee754_add nil)
    (add_correct__nInf_pInf formula-decl nil ieee754_add nil)
    (add_correct__pInf_pInf formula-decl nil ieee754_add nil)
    (add_correct__finite_pInf formula-decl nil ieee754_add nil)
    (add_correct__finite_nInf formula-decl nil ieee754_add nil))
   nil))
 (finite?_projs_finite?_add 0
  (finite?_projs_finite?_add-1 nil 3883988260
   ("" (skeep)
    (("" (rewrite "add_correct__finite")
      (("" (flatten)
        ((""
          (case "(f1 = pZero or f1 = nZero) and (f2 = pZero or f2 = nZero)")
          (("1" (prop)
            (("1" (replace -1 :hide? t)
              (("1" (replace -1 :hide? t)
                (("1" (rewrite "add_correct__pZero_pZero")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -1 :hide? t)
              (("2" (replace -1 :hide? t)
                (("2" (rewrite "add_correct__pZero_nZero")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (replace -1 :hide? t)
              (("3" (replace -1 :hide? t)
                (("3" (rewrite "add_correct__nZero_finite")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil)
             ("4" (replace -1 :hide? t)
              (("4" (replace -1 :hide? t)
                (("4" (rewrite "add_correct__nZero_finite")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "nzfinite?_def")
            (("2" (rewrite "nzfinite?_def")
              (("2" (expand "/=")
                (("2" (rewrite "only_zeros_proj_zero")
                  (("1" (rewrite "only_zeros_proj_zero") nil nil)
                   ("2" (rewrite "only_zeros_proj_zero") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_correct__finite formula-decl nil ieee754_add nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_add nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_add nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_add nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (finite? const-decl "bool" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pZero const-decl "datum" ieee754_data nil)
    (nZero const-decl "datum" ieee754_data nil)
    (nzero_finite formula-decl nil ieee754_data nil)
    (add_correct__nZero_finite formula-decl nil ieee754_add nil)
    (add_correct__pZero_nZero formula-decl nil ieee754_add nil)
    (add_correct__pZero_pZero formula-decl nil ieee754_add nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pzero_finite formula-decl nil ieee754_data nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (finite_round_er formula-decl nil ieee754_semantics nil)
    (/= const-decl "boolean" notequal nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil))
   nil)))

