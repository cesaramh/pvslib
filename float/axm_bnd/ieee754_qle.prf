(ieee754_qle
 (qle_pInf_is_top 0
  (qle_pInf_is_top-1 nil 3909570993
   ("" (skeep)
    (("" (typepred "f")
      (("" (use "pInf_nInf_Nan_finite")
        (("" (assert)
          (("" (flatten)
            (("" (split)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (use "expand_finite?")
                    (("1" (split)
                      (("1" (use "qle_correct__nfinite_pInf") nil nil)
                       ("2" (use "qle_correct__pfinite_pInf") nil nil)
                       ("3" (replace -1)
                        (("3" (use "qle_correct__nZero_pInf")
                          (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (replace -1)
                        (("4" (use "qle_correct__pZero_pInf")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "/=")
                  (("2" (replace -1)
                    (("2" (use "qle_correct__pInf_pInf")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "/=")
                  (("3" (replace -1)
                    (("3" (use "qle_correct__nInf_pInf")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qle nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qle nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_qle nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (qle_correct__nfinite_pInf formula-decl nil ieee754_qle nil)
    (nfinite? const-decl "bool" ieee754_semantics nil)
    (qle_correct__pfinite_pInf formula-decl nil ieee754_qle nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (qle_correct__nZero_pInf formula-decl nil ieee754_qle nil)
    (qle_correct__pZero_pInf formula-decl nil ieee754_qle nil)
    (finite? const-decl "bool" ieee754_data nil)
    (expand_finite? formula-decl nil ieee754_data_props nil)
    (/= const-decl "boolean" notequal nil)
    (qle_correct__pInf_pInf formula-decl nil ieee754_qle nil)
    (qle_correct__nInf_pInf formula-decl nil ieee754_qle nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil))
   shostak))
 (qle_nInf_is_bottom 0
  (qle_nInf_is_bottom-1 nil 3909578197
   ("" (skeep)
    (("" (typepred "f")
      (("" (use "pInf_nInf_Nan_finite")
        (("" (assert)
          (("" (flatten)
            (("" (split)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (use "expand_finite?")
                    (("1" (split)
                      (("1" (use "qle_correct__nInf_nfinite") nil nil)
                       ("2" (use "qle_correct__nInf_pfinite") nil nil)
                       ("3" (replace -1)
                        (("3" (use "qle_correct__nInf_nZero")
                          (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (replace -1)
                        (("4" (use "qle_correct__nInf_pZero")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "/=")
                  (("2" (replace -1)
                    (("2" (use "qle_correct__nInf_pInf")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "/=")
                  (("3" (replace -1)
                    (("3" (use "qle_correct__nInf_nInf")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (PRED type-eq-decl nil defined_types nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qle nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qle nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_qle nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (qle_correct__nInf_nfinite formula-decl nil ieee754_qle nil)
    (nfinite? const-decl "bool" ieee754_semantics nil) nil
    (qle_correct__nInf_pfinite formula-decl nil ieee754_qle nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (qle_correct__nInf_nZero formula-decl nil ieee754_qle nil)
    (qle_correct__nInf_pZero formula-decl nil ieee754_qle nil)
    (finite? const-decl "bool" ieee754_data nil)
    (expand_finite? formula-decl nil ieee754_data_props nil)
    (/= const-decl "boolean" notequal nil)
    (qle_correct__nInf_pInf formula-decl nil ieee754_qle nil)
    (qle_correct__nInf_nInf formula-decl nil ieee754_qle nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil))
   shostak))
 (qle_finite_def 0
  (qle_finite_def-1 nil 3884072063
   ("" (skeep)
    (("" (rewrite "qle_correct__finite")
      (("" (prop)
        (("" (rewrite nzfinite?_def)
          (("" (rewrite nzfinite?_def)
            (("" (expand /=)
              (("" (assert)
                (("" (lemma only_zeros_proj_zero)
                  (("" (copy -1)
                    (("" (inst -1 f1)
                      (("" (inst -2 f2)
                        (("" (replaces)
                          (("" (prop)
                            (("1"
                              (match - "f1 = %f1" "f2 = %f2" step
                                     (then
                                      (replaces)
                                      (let
                                       ((axm
                                         (format
                                          nil
                                          "~a_correct__%f1_%f2"
                                          (subseq (label *ps*) 0 3))))
                                       (rewrite axm))))
                              nil nil)
                             ("2"
                              (match - "f1 = %f1" "f2 = %f2" step
                                     (then
                                      (replaces)
                                      (let
                                       ((axm
                                         (format
                                          nil
                                          "~a_correct__%f1_%f2"
                                          (subseq (label *ps*) 0 3))))
                                       (rewrite axm))))
                              nil nil)
                             ("3"
                              (match - "f1 = %f1" "f2 = %f2" step
                                     (then
                                      (replaces)
                                      (let
                                       ((axm
                                         (format
                                          nil
                                          "~a_correct__%f1_%f2"
                                          (subseq (label *ps*) 0 3))))
                                       (rewrite axm))))
                              nil nil)
                             ("4"
                              (match - "f1 = %f1" "f2 = %f2" step
                                     (then
                                      (replaces)
                                      (let
                                       ((axm
                                         (format
                                          nil
                                          "~a_correct__%f1_%f2"
                                          (subseq (label *ps*) 0 3))))
                                       (rewrite axm))))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qle_correct__pZero_pZero formula-decl nil ieee754_qle nil)
    (qle_correct__pZero_nZero formula-decl nil ieee754_qle nil)
    (qle_correct__nZero_pZero formula-decl nil ieee754_qle nil)
    (qle_correct__nZero_nZero formula-decl nil ieee754_qle nil)
    (TRUE const-decl "bool" booleans nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (/= const-decl "boolean" notequal nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (finite? const-decl "bool" ieee754_data nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qle nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qle nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "ieee754_radix" ieee754_qle nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (qle_correct__finite formula-decl nil ieee754_qle nil))
   nil))
 (qle_finite_safe_def 0
  (qle_finite_safe_def-1 nil 3890834409
   ("" (skeep)
    (("" (expand "safe_proj")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten)
                  (("1" (lemma "qle_correct__finite")
                    (("1" (inst -1 "f1" "f2")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (use "nzfinite?_def")
                            (("1" (assert)
                              (("1"
                                (expand "/=")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (use "only_zeros_proj_zero")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -1 :hide? T)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (use
                                               "qle_correct__finite")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 1)
                                                (("2"
                                                  (use "nzfinite?_def")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "/=")
                                                      (("2"
                                                        (use
                                                         "only_zeros_proj_zero")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "qle_correct__pZero_pZero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "qle_correct__pZero_nZero")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (use "nzfinite?_def")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (use
                                                     "only_zeros_proj_zero")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (use
                                                             "qle_correct__nZero_pZero")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           T)
                                                          (("2"
                                                            (use
                                                             "qle_correct__nZero_nZero")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (replace -1 :hide? T)
                          (("1" (use "qle_pInf_is_top")
                            (("1" (assert)
                              (("1"
                                (use "er_upper_bound")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1 3)
                                  (("1"
                                    (use "expand_finite?")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (rewrite
                                           "qle_correct__nfinite_nInf")
                                          (("1"
                                            (use "er_lower_bound")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "qle_correct__pfinite_nInf")
                                          (("2"
                                            (use "er_lower_bound")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (rewrite
                                             "qle_correct__nZero_nInf")
                                            (("3"
                                              (use "er_lower_bound")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (rewrite
                                             "qle_correct__pZero_nInf")
                                            (("4"
                                              (use "er_lower_bound")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (typepred "f2")
                                (("2"
                                  (use "pInf_nInf_Nan_finite")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split)
              (("1" (flatten)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (replace -2)
                        (("1" (use "expand_finite?")
                          (("1" (split)
                            (("1" (rewrite "qle_correct__pInf_nfinite")
                              (("1"
                                (lemma "er_upper_bound")
                                (("1"
                                  (inst -1 "proj(f2)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "qle_correct__pInf_pfinite")
                              (("2"
                                (lemma "er_upper_bound")
                                (("2"
                                  (inst -1 "proj(f2)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (use "qle_correct__pInf_nZero")
                                (("3"
                                  (lemma "er_upper_bound")
                                  (("3"
                                    (inst -1 "proj(f2)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (replace -1)
                              (("4"
                                (use "qle_correct__pInf_pZero")
                                (("4"
                                  (lemma "er_upper_bound")
                                  (("4"
                                    (inst -1 "proj(f2)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (replace -1 :hide? t)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (rewrite "qle_correct__pInf_pInf")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (rewrite "qle_correct__pInf_nInf")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "er_lower_bound")
                                        (("1"
                                          (inst -1 "er_ub")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 :hide? t)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "f2")
                                    (("2"
                                      (use "pInf_nInf_Nan_finite")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (replace -1 :hide? t)
                      (("1" (hide 2 3)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (use "qle_nInf_is_bottom")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "er_lower_bound")
                                    (("1"
                                      (inst -1 "proj(f2)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite
                                       "qle_correct__nInf_pInf")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "er_lower_bound")
                                          (("1"
                                            (inst -1 "er_ub")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite
                                           "qle_correct__nInf_nInf")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "er_lower_bound")
                                        (("2"
                                          (inst -1 "er_ub")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "qle_nInf_is_bottom")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "f1")
                    (("2" (use "pInf_nInf_Nan_finite")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((safe_proj const-decl "real" ieee754_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (proj const-decl "er_real" ieee754_semantics nil)
    (er_upper_bound formula-decl nil ieee754_domain nil)
    (qle_pInf_is_top formula-decl nil ieee754_qle nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (qle_correct__pZero_nInf formula-decl nil ieee754_qle nil)
    (nZero const-decl "datum" ieee754_data nil)
    (qle_correct__nZero_nInf formula-decl nil ieee754_qle nil)
    (pfinite? const-decl "bool" ieee754_semantics nil)
    (qle_correct__pfinite_nInf formula-decl nil ieee754_qle nil)
    (qle_correct__nfinite_nInf formula-decl nil ieee754_qle nil)
    (nfinite? const-decl "bool" ieee754_semantics nil)
    (er_lower_bound formula-decl nil ieee754_domain nil)
    (expand_finite? formula-decl nil ieee754_data_props nil)
    (pInf_nInf_Nan_finite formula-decl nil ieee754_data nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" ieee754_qle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" ieee754_qle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" ieee754_qle nil)
    (datum nonempty-type-decl nil ieee754_data nil)
    (finite? const-decl "bool" ieee754_data nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (NaN? const-decl "PRED[datum]" ieee754_data nil)
    (nzfinite? const-decl "bool" ieee754_semantics nil)
    (f2 skolem-const-decl
     "(LAMBDA (f: datum[b, p, emax]): NOT NaN?(f))" ieee754_qle nil)
    (f1 skolem-const-decl
     "(LAMBDA (f: datum[b, p, emax]): NOT NaN?(f))" ieee754_qle nil)
    (qle_correct__nZero_nZero formula-decl nil ieee754_qle nil)
    (qle_correct__nZero_pZero formula-decl nil ieee754_qle nil)
    (nzero_finite formula-decl nil ieee754_data nil)
    (pZero const-decl "datum" ieee754_data nil)
    (qle_correct__pZero_nZero formula-decl nil ieee754_qle nil)
    (qle_correct__pZero_pZero formula-decl nil ieee754_qle nil)
    (pzero_finite formula-decl nil ieee754_data nil)
    (only_zeros_proj_zero formula-decl nil ieee754_semantics nil)
    (/= const-decl "boolean" notequal nil)
    (nzfinite?_def formula-decl nil ieee754_semantics nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (qle_correct__finite formula-decl nil ieee754_qle nil)
    (er_ub const-decl "er_real" ieee754_domain nil)
    (qle_correct__pInf_nInf formula-decl nil ieee754_qle nil)
    (qle_correct__pInf_pInf formula-decl nil ieee754_qle nil)
    (qle_correct__pInf_pZero formula-decl nil ieee754_qle nil)
    (qle_correct__pInf_nZero formula-decl nil ieee754_qle nil)
    (qle_correct__pInf_pfinite formula-decl nil ieee754_qle nil)
    (qle_correct__pInf_nfinite formula-decl nil ieee754_qle nil)
    (qle_correct__nInf_nInf formula-decl nil ieee754_qle nil)
    (qle_correct__nInf_pInf formula-decl nil ieee754_qle nil)
    (qle_nInf_is_bottom formula-decl nil ieee754_qle nil))
   shostak)))

