%
% This theory defines the binary format binary64.
% The objective of this theory is to redefine names in a more user-friendly way.
%
ieee754_double_base : THEORY
BEGIN

  IMPORTING ieee754_format_parameters

  ieee754_double_radix     : MACRO ieee754_radix = 2
  ieee754_double_precision : MACRO ieee754_precision(ieee754_double_radix) = 53
  ieee754_double_maxExp    : MACRO ieee754_maxExp(ieee754_double_radix,ieee754_double_precision) = 1023
  ieee754_double_minExp    : MACRO ieee754_minExp(ieee754_double_radix,ieee754_double_precision) = -1022

  ieee754_double_exponent_size : MACRO posint = 11

  %
  %
  %

  IMPORTING ieee754_semantics[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS double_sem_th

  er_ub_value: LEMMA er_ub = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368

  er_lb_value: LEMMA er_lb = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368

  binary64 : TYPE = datum
  double   : TYPE = binary64

  NaN?_double   : MACRO [ binary64 -> bool ] = NaN?
  finite?_double: MACRO [ binary64 -> bool ] = finite?
  number?_double: MACRO [ binary64 -> bool ] = number?

  %
  % Projection and Rounding
  %

  proj_double : MACRO [ (finite?_double) -> real ] = proj
  proj_def: AXIOM FORALL(x: (finite?_double)): proj_double(x) = proj(x)
  DtoR(x: (finite?_double)) : MACRO real = proj_double(x) % @M3 Kept for backward compatibility

  safe_proj_double : MACRO [ binary64 -> real ] = safe_proj
  safe_proj_def: AXIOM FORALL(x: binary64): safe_proj_double(x) = safe_proj(x)

  round_double : MACRO [ real -> binary64 ] = round
  round_def: AXIOM FORALL(r: real): round_double(r) = round(r)

  RtoD(r: real) : MACRO binary64 = round_double(r) % @M3 Kept for backward compatibility
  ItoD(i: integer): MACRO binary64 = round_double(i)

  % instantiate operators
  IMPORTING ieee754_qlt[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qlt_double
  IMPORTING ieee754_qle[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qle_double
  IMPORTING ieee754_qgt[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qgt_double
  IMPORTING ieee754_qge[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qge_double
  IMPORTING ieee754_qeq[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qeq_double
  IMPORTING ieee754_qun[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS qun_double
  %
  IMPORTING ieee754_add[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS add_double
  IMPORTING ieee754_sub[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS sub_double
  IMPORTING ieee754_mul[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS mul_double
  IMPORTING ieee754_max[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS max_double
  IMPORTING ieee754_min[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS min_double
  IMPORTING ieee754_div[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS div_double
  %
  IMPORTING ieee754_abs[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS abs_double
  IMPORTING ieee754_sqt[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS sqt_double
  IMPORTING ieee754_neg[ieee754_double_radix,ieee754_double_precision,ieee754_double_maxExp] AS neg_double

  x,y: VAR binary64

  % special values

  pInf_double  : binary64
  nInf_double  : binary64
  pZero_double : binary64
  nZero_double : binary64

  zero?_double(x: binary64): bool = (x=pZero_double OR x=nZero_double)
  positive_infinite?_double(x: binary64): bool = (x=pInf_double)
  negative_infinite?_double(x: binary64): bool = (x=nInf_double)
  infinite?_double(x: binary64): bool = (x=pInf_double OR x=nInf_double)

  % operations

  add_double (x,y: binary64): binary64
  sub_double (x,y: binary64): binary64
  mul_double (x,y: binary64): binary64
  div_double (x,y: binary64): binary64
  min_double (x,y: binary64): binary64
  max_double (x,y: binary64): binary64
  abs_double   (x: binary64): binary64
  sqrt_double  (x: binary64): binary64
  neg_double   (x: binary64): binary64

  ;+(x,y: binary64) : MACRO binary64 = add_double(x,y)
  ;-(x,y: binary64) : MACRO binary64 = sub_double(x,y)
  ;*(x,y: binary64) : MACRO binary64 = mul_double(x,y)
  ;/(x,y: binary64) : MACRO binary64 = div_double(x,y)
  ;-( x : binary64) : MACRO binary64 = neg_double(x)

  Dadd(x,y: binary64) : MACRO binary64 = add_double(x,y)
  Dsub(x,y: binary64) : MACRO binary64 = sub_double(x,y)
  Dmul(x,y: binary64) : MACRO binary64 = mul_double(x,y)
  Ddiv(x,y: binary64) : MACRO binary64 = div_double(x,y)
  Dmin(x,y: binary64) : MACRO binary64 = min_double(x,y)
  Dmax(x,y: binary64) : MACRO binary64 = max_double(x,y)
  Dabs( x : binary64) : MACRO binary64 = abs_double(x)
  Dsqt( x : binary64) : MACRO binary64 = sqrt_double(x)
  Dneg( x : binary64) : MACRO binary64 = neg_double(x)

  % Additional Operators
  %

  qlt_double(x,y: binary64): bool
  qle_double(x,y: binary64): bool
  qgt_double(x,y: binary64): bool
  qge_double(x,y: binary64): bool
  qeq_double(x,y: binary64): bool
  qun_double(x,y: binary64): bool

  Dqlt(x,y: binary64): MACRO bool = qlt_double(x,y)
  Dqle(x,y: binary64): MACRO bool = qle_double(x,y)
  Dqgt(x,y: binary64): MACRO bool = qgt_double(x,y)
  Dqge(x,y: binary64): MACRO bool = qge_double(x,y)
  Dqeq(x,y: binary64): MACRO bool = qeq_double(x,y)
  Dqun(x,y: binary64): MACRO bool = qun_double(x,y)

  positive?_double(x: binary64): bool = qle_double(pZero, x)
  negative?_double(x: binary64): bool = qle_double(x, nZero)

  % definitions

  pInf_def: AXIOM pInf_double = pInf
  nInf_def: AXIOM nInf_double = nInf
  pZero_def: AXIOM pZero_double = pZero
  nZero_def: AXIOM nZero_double = nZero

  add_def  : AXIOM add_double(x,y) = add_ieee754(x,y)
  sub_def  : AXIOM sub_double(x,y) = sub_ieee754(x,y)
  mul_def  : AXIOM mul_double(x,y) = mul_ieee754(x,y)
  div_def  : AXIOM div_double(x,y) = div_ieee754(x,y)
  min_def  : AXIOM min_double(x,y) = min_ieee754(x,y)
  max_def  : AXIOM max_double(x,y) = max_ieee754(x,y)
  abs_def  : AXIOM abs_double(x)   = abs_ieee754(x)
  sqrt_def : AXIOM sqrt_double(x)  = sqt_ieee754(x)
  neg_def  : AXIOM neg_double(x)   = neg_ieee754(x)

  qlt_def: AXIOM qlt_double(x,y) = qlt_ieee754(x,y)
  qle_def: AXIOM qle_double(x,y) = qle_ieee754(x,y)
  qgt_def: AXIOM qgt_double(x,y) = qgt_ieee754(x,y)
  qge_def: AXIOM qge_double(x,y) = qge_ieee754(x,y)
  qeq_def: AXIOM qeq_double(x,y) = qeq_ieee754(x,y)
  qun_def: AXIOM qun_double(x,y) = qun_ieee754(x,y)

  %
  % Unit in the Last Place
  %

  ulp_double (r: real): macro nonneg_real = ulp(r)
  Dulp       (r: real): macro nonneg_real = ulp_double(r)

  min_ulp_double: macro nonneg_real = min_ulp

  %
  % Synonims for operator proporties
  %

  add_double_finite_def
  : THEOREM FORALL(f1,f2: (finite?_double))
    : safe_proj_double(add_double(f1, f2)) =
      safe_proj_double(round_double(safe_proj_double(f1) + safe_proj_double(f2)))

  sub_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : safe_proj_double(sub_double(f1, f2)) =
      safe_proj_double(round_double(safe_proj_double(f1) - safe_proj_double(f2)))

  mul_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : safe_proj_double(mul_double(f1, f2)) =
      safe_proj_double(round_double(safe_proj_double(f1) * safe_proj_double(f2)))

  div_double_finite_def
  : CONJECTURE  FORALL(f1: (finite?_double),f2: double | (finite?_double(f2) AND NOT zero?_double(f2)))
    : safe_proj_double(div_double(f1, f2)) =
      safe_proj_double(round_double(safe_proj_double(f1) / safe_proj_double(f2)))

  qeq_double_finite_equiv
  : conjecture
    ∀(f1: (finite?_double), f2: double): qeq_double(f1, f2) ⇒ finite?_double(f2)

  qeq_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : qeq_double(f1, f2) =
      (safe_proj_double(f1) = safe_proj_double(f2))

  qge_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : qge_double(f1, f2) =
      (safe_proj_double(f1) >= safe_proj_double(f2))

  qgt_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : qgt_double(f1, f2) =
      (safe_proj_double(f1) > safe_proj_double(f2))

  qle_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : qle_double(f1, f2) =
      (safe_proj_double(f1) <= safe_proj_double(f2))

  qle_double_finite_safe_def
  : CONJECTURE ∀(f1,f2: (number?_double))
    : qle_double(f1, f2) =
      (safe_proj_double(f1) <= safe_proj_double(f2))

  qlt_double_finite_def
  : CONJECTURE  FORALL(f1,f2: (finite?_double))
    : qlt_double(f1, f2) =
      (safe_proj_double(f1) < safe_proj_double(f2))

  neg_double_finite_def
  : CONJECTURE  FORALL(f: (finite?_double))
    : safe_proj_double(neg_double(f)) = -safe_proj_double(f)

  %
  %
  %

  finite?_double_add
  : CONJECTURE  FORALL(f1, f2: double)
    : finite?_double(add_double(f1,f2)) => finite?_double(f1) AND finite?_double(f2)

  finite?_double_sub
  : CONJECTURE  FORALL(f1, f2: double)
    : finite?_double(sub_double(f1,f2)) => finite?_double(f1) AND finite?_double(f2)

  finite?_double_mul
  : CONJECTURE  FORALL(f1, f2: double)
    : finite?_double(mul_double(f1,f2)) => finite?_double(f1) AND finite?_double(f2)

  finite?_double_div
  : CONJECTURE  FORALL(f1: double, f2: double | NOT zero?_double(f2))
    : finite?_double(div_double(f1,f2)) => finite?_double(f1) AND NOT safe_proj_double(f2) = 0 AND NOT NaN?_double(f2)

  finite?_double_neg
  : CONJECTURE  FORALL(f: double)
    : finite?_double(neg_double(f)) <=> finite?_double(f)

  %
  %
  %

  double__finite?_projs_finite?_add
  : CONJECTURE
    ∀(f1,f2: (finite?_double)): finite?_double(round_double(proj(f1) + proj(f2))) => finite?_double(add_double(f1,f2))

  double__finite?_projs_finite?_sub
  : CONJECTURE
    ∀(f1,f2: (finite?_double)): finite?_double(round_double(proj(f1) - proj(f2))) => finite?_double(sub_double(f1,f2))

  double__finite?_projs_finite?_mul
  : CONJECTURE
    ∀(f1,f2: (finite?_double)): finite?_double(round_double(proj(f1) * proj(f2))) => finite?_double(mul_double(f1,f2))

  double__finite?_projs_finite?_div
  : CONJECTURE
    ∀(f1:(finite?_double) ,f2: double |(finite?_double(f2) AND NOT zero?_double(f2)))
    : finite?_double(round_double(safe_proj_double(f1) / safe_proj_double(f2))) => finite?_double(div_double(f1,f2))

END ieee754_double_base
