(aerr_ulp_ln
 (aerr_ulp_ln_TCC1 0
  (aerr_ulp_ln_TCC1-1 nil 3909484051
   ("" (skeep :preds? t)
    (("" (case "1 - e1 / r1 > 0")
      (("1" (assert) nil nil)
       ("2" (hide 2)
        (("2" (both-sides "*" "r1" 1)
          (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_times1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil
   (aerr_ulp_ln subtype
    "(number_fields.-)(1, number_fields./(aerr_ulp_ln.e1, aerr_ulp_ln.r1))"
    "posreal")))
 (aerr_ulp_ln_TCC2 0
  (aerr_ulp_ln_TCC2-1 nil 3909484051 ("" (subtype-tcc) nil nil) nil nil
   (aerr_ulp_ln subtype
    "(number_fields.-)(aerr_ulp_ln.r1, aerr_ulp_ln.e1)" "posreal")))
 (aerr_ulp_ln_TCC3 0
  (aerr_ulp_ln_TCC3-1 nil 3909484051
   ("" (skeep :preds? t)
    ((""
      (name-replace "Ulp_ln"
       "ulp[b, p, emax](max(abs(ln(r1 - e1)), abs(ln(r1 + e1)))) / 2")
      (("" (typepred "Ulp_ln")
        (("" (case "-ln(1 - e1 / r1)>=0")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (hide -1 -2)
              (("2" (lemma "ln_le_0")
                (("2" (inst -1 "1 - e1 / r1")
                  (("1" (assert) nil nil)
                   ("2" (hide 2) (("2" (field 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (field 1) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" aerr_ulp_ln nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" aerr_ulp_ln nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" aerr_ulp_ln nil)
    (ulp const-decl "posreal" ieee754_domain nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ln const-decl "real" ln_exp lnexp)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (e1 skolem-const-decl "{e1: nnreal | e1 < r1}" aerr_ulp_ln nil)
    (r1 skolem-const-decl "posreal" aerr_ulp_ln nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_times1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ln_le_0 formula-decl nil ln_exp lnexp)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (aerr_ulp_ln subtype
    "(number_fields.+)((number_fields.-)(ln_exp.ln((number_fields.-)(1, number_fields./(aerr_ulp_ln.e1, aerr_ulp_ln.r1)))), number_fields./(ieee754_domain[aerr_ulp_ln.b, aerr_ulp_ln.p, aerr_ulp_ln.emax].ulp(real_defs.max(real_defs.abs(ln_exp.ln((number_fields.-)(aerr_ulp_ln.r1, aerr_ulp_ln.e1))), real_defs.abs(ln_exp.ln((number_fields.+)(aerr_ulp_ln.r1, aerr_ulp_ln.e1))))), 2))"
    "nnreal"))))

