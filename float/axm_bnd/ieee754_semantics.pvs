ieee754_semantics
[ (IMPORTING ieee754_format_parameters)
  b    : ieee754_radix,
  p    : ieee754_precision(b),
  emax : ieee754_maxExp(b,p) ]
: THEORY BEGIN

  emin : negint = 1 - emax

  IMPORTING ieee754_data[b,p,emax] AS data_th

  IMPORTING ieee754_domain[b,p,emax]

  % Rounding Function
  round(x: real): datum
  CONVERSION round

  % Exactly representable reals rounds to a finite datum
  finite_round_er: AXIOM FORALL(x: er_real): finite?(round(x))
  AUTO_REWRITE+ finite_round_er

  % Rounding is injective on exactly representable inputs
  round_er_injective
  : AXIOM FORALL(x,y: er_real): round(x) = round(y) IMPLIES x = y

  % Projection Function
  proj(f: (finite?)): er_real

  % Zero projection
  proj_def_pZero: AXIOM proj(pZero) = 0
  proj_def_nZero: AXIOM proj(nZero) = 0
  only_zeros_proj_zero: AXIOM FORALL(f: (finite?)): proj(f) = 0 IMPLIES (f=pZero OR f=nZero)

  % helper predicates
  nzfinite?(f:datum): bool
  nzfinite?_def
  : AXIOM FORALL(f: datum): nzfinite?(f) = (finite?(f) AND proj(f) /= 0)

  JUDGEMENT FORALL(f: (nzfinite?)): f HAS_TYPE (finite?)

  pfinite?(f:datum): bool
  pfinite?_def
  : AXIOM FORALL(f: datum): pfinite?(f) = (finite?(f) AND proj(f) > 0)

  nfinite?(f:datum): bool
  nfinite?_def
  : AXIOM FORALL(f: datum): nfinite?(f) = (finite?(f) AND proj(f) < 0)

  % additive inverse
  add_inv(f: (finite?)): (finite?)

  add_inv_def
  : AXIOM FORALL(f:(finite?)) : proj(add_inv(f)) = -proj(f)

  % Every finite fp is the representation of an exactly representable real
  round_total_on_nzfinite
  : AXIOM FORALL(f: (nzfinite?)): EXISTS(r: er_real): f = round(r)

  round_zero
  : AXIOM pZero = round(0)

  % Rounding is the inverse of the projection on nzfinite
  round_proj: AXIOM FORALL(f: (nzfinite?)): f = round(proj(f))

  % Projection is the inverse of the rounding on exactly representable reals
  proj_round: AXIOM FORALL(x: er_real): x = proj(round(x))

  % Rounding is monotone
  round_monotone
  : AXIOM FORALL(x,y: er_real): x<=y IMPLIES proj(round(x)) <= proj(round(y))

  safe_proj(f: datum)
  : real
  = IF finite?(f)
    THEN proj(f)
    ELSIF f = pInf THEN er_ub+1
    ELSIF f = nInf THEN er_lb-1
    ELSE er_ub+2 % f is NaN
    ENDIF

  % @QED is_finite_safe_projection_er_real proved by ltitolo on Mon, 20 Nov 2023 21:24:07 GMT
  is_finite_safe_projection_er_real
  : THEOREM
    FORALL(f: datum, x: er_real)
    : safe_proj(f)=x IMPLIES finite?(f)

  safe_projection_er_real_proj
  : COROLLARY
    FORALL(f: datum, x: er_real)
    : safe_proj(f)=x IMPLIES proj(f)=x

  is_finite_safe_projection
  : COROLLARY
    FORALL(f1: (finite?), f2: datum)
    : safe_proj(f1)=safe_proj(f2) IMPLIES finite?(f2)

END ieee754_semantics
