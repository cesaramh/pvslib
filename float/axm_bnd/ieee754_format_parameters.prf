(ieee754_format_parameters
 (ieee754_radix_TCC1 0
  (ieee754_radix_TCC1-1 nil 3763480465 ("" (inst 1 "2") nil nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (ieee754_radix existence ""
    "{i: integers.posint | booleans.OR(i = 2, i = 10)}")))
 (ieee754_subtype_above_1 0
  (ieee754_subtype_above_1-1 nil 3907938763
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ieee754_subtype_above_1 subtype "ieee754_format_parameters.x"
    "integers.above(1)")))
 (ieee754_precision_TCC1 0
  (ieee754_precision_TCC1-1 nil 3763480465
   ("" (skeep :preds? t)
    (("" (split -2)
      (("1" (inst 1 "24") (("1" (assert) nil nil)) nil)
       ("2" (inst 1 "16") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (b skolem-const-decl "ieee754_radix" ieee754_format_parameters nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (ieee754_precision existence ""
    "{p: integers.posint | booleans.AND((booleans.IMPLIES(ieee754_format_parameters.b = 2, (booleans.OR(p = 24, booleans.OR(p = 53, p = 113))))), (booleans.IMPLIES(ieee754_format_parameters.b = 10, (booleans.OR(p = 16, p = 34)))))}")))
 (ieee754_precision_subtype_above_1 0
  (ieee754_precision_subtype_above_1-1 nil 3907938763
   ("" (judgement-tcc) nil nil) nil nil
   (ieee754_precision_subtype_above_1 subtype
    "ieee754_format_parameters.x" "integers.above(1)")))
 (ieee754_maxExp_TCC1 0
  (ieee754_maxExp_TCC1-1 nil 3763480465
   ("" (skeep* :preds? t)
    (("" (ground)
      (("1" (inst 2 "127") nil nil) ("2" (inst 2 "1023") nil nil)
       ("3" (inst 2 "16383") nil nil) ("4" (inst 2 "384") nil nil)
       ("5" (inst 2 "6144") nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ieee754_maxExp existence ""
    "{emax: naturalnumbers.nat | booleans.AND((booleans.IMPLIES(ieee754_format_parameters.b = 2, booleans.AND((booleans.IMPLIES(ieee754_format_parameters.p = 24, emax = 127)), booleans.AND((booleans.IMPLIES(ieee754_format_parameters.p = 53, emax = 1023)), (booleans.IMPLIES(ieee754_format_parameters.p = 113, emax = 16383)))))), (booleans.IMPLIES(ieee754_format_parameters.b = 10, booleans.AND((booleans.IMPLIES(ieee754_format_parameters.p = 16, emax = 384)), (booleans.IMPLIES(ieee754_format_parameters.p = 34, emax = 6144))))))}")))
 (ieee754_maxExp_subtype_above_1 0
  (ieee754_maxExp_subtype_above_1-1 nil 3907938763
   ("" (judgement-tcc) nil nil) nil nil
   (ieee754_maxExp_subtype_above_1 subtype
    "ieee754_format_parameters.x" "integers.above(1)")))
 (ieee754_minExp_TCC1 0
  (ieee754_minExp_TCC1-1 nil 3763480465
   ("" (skeep* :preds? t)
    (("" (ground)
      (("1" (inst 2 "-126")
        (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
       ("2" (inst 2 "-1022") (("2" (grind) nil nil)) nil)
       ("3" (inst 2 "-16382") (("3" (grind) nil nil)) nil)
       ("4" (inst 2 "-383") (("4" (grind) nil nil)) nil)
       ("5" (inst 2 "-6143") (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nonpos_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (negint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ieee754_minExp existence ""
    "{emin: integers.negint | FORALL (emax: ieee754_format_parameters.ieee754_maxExp(ieee754_format_parameters.b, ieee754_format_parameters.p)): emin = (number_fields.-)(1, emax)}"))))

