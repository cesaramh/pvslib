(aerr_ulp_exp
 (aerr_ulp_exp_TCC1 0
  (aerr_ulp_exp_TCC1-1 nil 3909499154
   ("" (skeep)
    (("" (name-replace "Ulp" "ulp[b, p, emax](exp(r1 + e1))")
      (("" (typepred "Ulp")
        (("" (expand ">=" :assert? none)
          (("" (lemma "le_times_le_pos")
            (("" (inst -1 "0" "0" "(exp(e1) - 1)" "exp(r1)")
              (("" (assert)
                (("" (hide 2)
                  (("" (use "exp_increasing")
                    (("" (expand "increasing?")
                      (("" (inst -1 "0" "e1") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_radix nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (b formal-const-decl "ieee754_radix" aerr_ulp_exp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ieee754_precision nonempty-type-eq-decl nil
     ieee754_format_parameters nil)
    (p formal-const-decl "ieee754_precision(b)" aerr_ulp_exp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ieee754_maxExp nonempty-type-eq-decl nil ieee754_format_parameters
     nil)
    (emax formal-const-decl "ieee754_maxExp(b, p)" aerr_ulp_exp nil)
    (ulp const-decl "posreal" ieee754_domain nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (exp_0 formula-decl nil ln_exp lnexp)
    (exp_increasing formula-decl nil ln_exp lnexp)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (aerr_ulp_exp subtype
    "(number_fields.+)(number_fields.*(((number_fields.-)(ln_exp.exp(aerr_ulp_exp.e1), 1)), ln_exp.exp(aerr_ulp_exp.r1)), number_fields./(ieee754_domain[aerr_ulp_exp.b, aerr_ulp_exp.p, aerr_ulp_exp.emax].ulp(ln_exp.exp((number_fields.+)(aerr_ulp_exp.r1, aerr_ulp_exp.e1))), 2))"
    "nnreal"))))

