(float (vNum_TCC1 0
        (vNum_TCC1-1 nil 3321636413 ("" (subtype-tcc) nil nil) nil nil
         (vNum subtype "Prec(float.b)"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (radix_div_vNum 0
        (radix_div_vNum-1 nil 3319366647
         ("" (judgement-tcc)
          ((""
            (case-replace
             "expt(radix, Prec(b!1)) / radix=expt(radix, Prec(b!1)-1)")
            (("1" (grind-reals) nil nil)
             ("2" (hide 2)
              (("2" (rewrite "expt_minus_aux")
                (("2" (rewrite "expt_x1_aux") nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil))
       (radix_less_vNum 0
        (radix_less_vNum-1 nil 3319366647
         ("" (judgement-tcc)
          (("" (lemma "both_sides_expt_gt1_ge_aux")
            (("" (inst -1 "radix" "Prec(b!1)-1" "0")
              (("" (grind-reals)
                (("" (rewrite "expt_x1_aux" -1) (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (FtoR_TCC1 0
        (FtoR_TCC1-1 nil 3318615387 ("" (subtype-tcc) nil nil) nil nil
         (FtoR subtype "(Fexp(float.f))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (ftor_zero_fnum 0
        (ftor_zero_fnum-1 nil 3681143479
         ("" (skeep)
          (("" (expand "FtoR")
            (("" (use "zero_times3")
              (("" (replace -1 :hide? t)
                (("" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (use "expt_nonzero") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (float_int_def 0
        (float_int_def-1 nil 3544780855 ("" (grind) nil nil) nil
         shostak))
       (Fplus_TCC1 0
        (Fplus_TCC1-1 nil 3319889173 ("" (subtype-tcc) nil nil) nil nil
         (Fplus subtype
          "((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g))))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Fplus_TCC2 0
        (Fplus_TCC2-1 nil 3319889173 ("" (subtype-tcc) nil nil) nil nil
         (Fplus subtype
          "((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g))))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Fplus_TCC3 0
        (Fplus_TCC3-1 nil 3319889173 ("" (subtype-tcc) nil nil) nil nil
         (Fplus subtype
          "(number_fields.+)(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g)))))), number_fields.*(Fnum(float.g), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g)))))))"
          "int")))
       (Fminus_TCC1 0
        (Fminus_TCC1-1 nil 3319889173 ("" (subtype-tcc) nil nil) nil
         nil
         (Fminus subtype
          "(number_fields.-)(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g)))))), number_fields.*(Fnum(float.g), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g)))))))"
          "int")))
       (sum_float_commutes 0
        (sum_float_commutes-1 nil 3545039871 ("" (grind) nil nil) nil
         shostak))
       (mult_float_commutes 0
        (mult_float_commutes-1 nil 3545039902 ("" (grind) nil nil) nil
         shostak))
       (FexptCorrect_TCC1 0
        (FexptCorrect_TCC1-1 nil 3545396627 ("" (subtype-tcc) nil nil)
         nil nil
         (FexptCorrect subtype "float.n"
          "{i: integers.int | booleans.OR(float.FtoR(float.f) /= 0, reals.>=(i, 0))}")))
       (FexptCorrect 0
        (FexptCorrect-1 nil 3545396632
         ("" (skeep)
          (("" (expand "^")
            (("" (expand "Fexpt")
              (("" (expand "FtoR")
                (("" (lemma "mult_expt")
                  (("" (case "n = 0")
                    (("1" (replace -1)
                      (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (inst - "n" _ _)
                      (("2" (expand "^" - 1)
                        (("2" (rewrite -1)
                          (("1" (lemma "expt_times")
                            (("1" (inst - "Fexp(f)" "n" "radix")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (hide -)
                                  (("1"
                                    (expand "^" + 2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (expand "expt")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (sigma_TCC1 0
        (sigma_TCC1-1 nil 3544869888 ("" (subtype-tcc) nil nil) nil nil
         (sigma subtype "(number_fields.-)(float.jj, 1)" "nat")))
       (sigma_TCC2 0
        (sigma_TCC2-1 nil 3544869888 ("" (termination-tcc) nil nil) nil
         nil
         (sigma termination
                "float.sigma(float.ii, (number_fields.-)(float.jj, 1), float.FF)"
                "nil")))
       (FDivInt_TCC1 0
        (FDivInt_TCC1-2 "" 3790102628
         ("" (skeep)
          (("" (typepred "i")
            (("" (case "radix = mod(radix,i) + i * floor(radix / i)")
              (("1" (replace -3)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1"
                      (case "FORALL (ii,jj:int): integer_pred(ii*jj)")
                      (("1" (inst - "Fnum(f)" "floor(radix/i)")
                        (("1" (assert)
                          (("1" (hide-all-but (-1 1))
                            (("1" (grind :exclude "floor") nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "mod") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak
         (FDivInt subtype
          "number_fields.*(Fnum(float.f), (number_fields./(float.radix, float.i)))"
          "int"))
        (FDivInt_TCC1-1 nil 3544783712
         ("" (skeep)
          (("" (typepred "i")
            (("" (case "radix = mod(radix,i) + i * floor(radix / i)")
              (("1" (replace -3)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1"
                        (case "FORALL (ii,jj:int): integer_pred(ii*jj)")
                        (("1" (inst - "Fnum(f)" "floor(radix/i)")
                          (("1" (assert)
                            (("1" (hide-all-but (-1 1))
                              (("1" (grind :exclude "floor") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "mod") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (FDivInt subtype
          "number_fields.*(Fnum(float.f), (number_fields./(float.radix, float.i)))"
          "int")))
       (FDivInt_def 0
        (FDivInt_def-2 "" 3790102629
         ("" (skeep)
          (("" (expand "mod")
            (("" (name "k" "floor(radix/i)")
              (("" (case "k = radix/i")
                (("1" (expand "FDivInt")
                  (("1" (replace -1 :dir rl)
                    (("1" (expand "FtoR")
                      (("1" (lemma "expt_plus")
                        (("1" (inst - "Fexp(f)-1" "1" "radix")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FDivInt_def-1 nil 3544783715
         ("" (skeep)
          (("" (expand "mod")
            (("" (name "k" "floor(radix/i)")
              (("" (case "k = radix/i")
                (("1" (expand "FDivInt")
                  (("1" (replace -1 :dir rl)
                    (("1" (expand "FtoR")
                      (("1" (lemma "expt_plus")
                        (("1" (inst - "Fexp(f)-1" "1" "radix")
                          (("1" (assert)
                            (("1" (replace -2 1)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "radix ^ (Fexp(f) - 1) = (radix ^ Fexp(f))/radix")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma "expt_plus")
                                      (("2"
                                        (inst
                                         -1
                                         "Fexp(f)"
                                         "-1"
                                         "radix")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1 :hide? t)
                                            (("2"
                                              (use "expt_inverse")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use "expt_x1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (minimum_positive_bounded_value_TCC1 0
        (minimum_positive_bounded_value_TCC1-1 nil 3764683373
         ("" (subtype-tcc) nil nil) nil nil
         (minimum_positive_bounded_value subtype
          "(number_fields.-)(dExp(float.b))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (positive_minumum_bounded_closest_to_zero 0
        (positive_minumum_bounded_closest_to_zero-1 nil 3764956638
         ("" (skeep :preds? t)
          (("" (expand "minimum_positive_bounded_value")
            (("" (expand "FtoR")
              (("" (expand "Fbounded?")
                (("" (flatten)
                  (("" (lemma "both_sides_expt_gt1_ge")
                    (("" (inst -1 "radix" "Fexp(bf)" "-dExp(b)")
                      (("1" (expand ">=")
                        (("1" (replace -1 :hide? t :dir rl)
                          (("1" (expand "abs")
                            (("1" (lift-if -1)
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "Fnum(bf) <= - 1")
                                    (("1"
                                      (expand "vNum")
                                      (("1"
                                        (mult-by -4 "-1" "-")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by
                                             -2
                                             "radix ^ Fexp(bf)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case "1<=Fnum(bf)")
                                    (("1"
                                      (lemma "le_times_le_pos")
                                      (("1"
                                        (inst
                                         -1
                                         "1"
                                         "radix ^ -dExp(b)"
                                         "radix ^ (Fexp(bf))"
                                         "Fnum(bf)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (representability_limits_for_bounded_floats_TCC1 0
        (representability_limits_for_bounded_floats_TCC1-1 nil
         3764683373 ("" (subtype-tcc) nil nil) nil nil
         (representability_limits_for_bounded_floats subtype "float.E"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (representability_limits_for_bounded_floats_TCC2 0
        (representability_limits_for_bounded_floats_TCC2-1 nil
         3764683373
         ("" (skeep :preds? t)
          (("" (case "(vNum(b) - 1) * radix ^ E > 0")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (case "vNum(b) - 1 > 0")
                (("1" (use "posreal_mult_closed")
                  (("1" (assert) nil nil)) nil)
                 ("2" (expand "vNum")
                  (("2" (hide 2)
                    (("2" (typepred "Prec(b)")
                      (("2" (typepred "radix")
                        (("2" (use "pos_expt_gt")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (flatten)
              (("3" (typepred "radix") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (representability_limits_for_bounded_floats subtype
          "number_fields.*(((number_fields.-)(float.vNum(float.b), 1)), exponentiation.^(float.radix, float.E))"
          "posreal")))
       (representability_limits_for_bounded_floats 0
        (representability_limits_for_bounded_floats-1 nil 3764955422
         ("" (skeep :preds? t)
          (("" (skoletin)
            (("" (use "positive_minumum_bounded_closest_to_zero")
              (("" (flatten)
                (("" (split -1)
                  (("1" (replace -2 :hide? t)
                    (("1" (split 1)
                      (("1" (expand "FtoR" :assert? none)
                        (("1" (expand "Fbounded?")
                          (("1" (flatten)
                            (("1" (expand "abs")
                              (("1"
                                (lift-if -3)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "radix ^ Fexp(bf) <= radix ^ E")
                                      (("1"
                                        (mult-by
                                         -1
                                         "-(vNum(b) - 1)"
                                         "-")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "-(vNum(b) - 1) <= Fnum(bf)")
                                            (("1"
                                              (mult-by
                                               -1
                                               "radix ^ Fexp(bf)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite
                                         "both_sides_expt_gt1_le")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "Fnum(bf) * radix ^ (Fexp(bf)) < 0")
                                      (("1"
                                        (rewrite "neg_times_lt")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (flatten) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (assert)
                    (("3" (replace -2 :hide? t)
                      (("3" (expand "FtoR" :assert? none)
                        (("3" (expand "Fbounded?")
                          (("3" (flatten)
                            (("3" (expand "abs")
                              (("3"
                                (lift-if -3)
                                (("3"
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "0<Fnum(bf) * radix ^ (Fexp(bf))")
                                      (("1"
                                        (rewrite "pos_times_lt")
                                        (("1"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "Fnum(bf) <= vNum(b) - 1")
                                      (("1"
                                        (case
                                         "radix ^ Fexp(bf) <= radix ^ E")
                                        (("1"
                                          (lemma "le_times_le_pos")
                                          (("1"
                                            (inst
                                             -1
                                             "Fnum(bf)"
                                             "radix ^ Fexp(bf)"
                                             "radix ^ E"
                                             "vNum(b) - 1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "both_sides_expt_gt1_le")
                                          nil
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (hathatln_TCC1 0
        (hathatln_TCC1-2 "" 3790102633
         ("" (grind-reals)
          (("" (both-sides-f -1 "exp")
            (("" (rewrite "exp_ln" -1) (("" (grind-reals) nil nil))
              nil))
            nil))
          nil)
         ((ln const-decl "real" ln_exp lnexp)
          (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
          (exp_0 formula-decl nil ln_exp lnexp)
          (exp_ln formula-decl nil ln_exp lnexp))
         shostak (hathatln subtype "ln_exp.ln(float.radix)" "nznum"))
        (hathatln_TCC1-1 nil 3318954543
         ("" (grind-reals)
          (("" (wrap-formula -1 "exp")
            (("1" (rewrite "exp_ln" -1) (("1" (grind-reals) nil nil))
              nil)
             ("2" (grind-reals) nil nil))
            nil))
          nil)
         nil nil (hathatln subtype "ln_exp.ln(float.radix)" "nznum")))
       (hathatln_TCC2 0
        (hathatln_TCC2-1 nil 3318954543 ("" (subtype-tcc) nil nil)
         ((ln const-decl "real" ln_exp lnexp)) nil
         (hathatln subtype
          "((number_fields.-)((number_fields./(ln_exp.ln(float.r), ln_exp.ln(float.radix)))))"
          "{r: reals.real | booleans.OR(float.radix /= 0, r /= 0)}")))
       (hathatln 0
        (hathatln-1 nil 3318954554
         ("" (skeep)
          (("" (expand "^^")
            (("" (case "radix=0")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2"
                  (case-replace
                   "-(ln(r) / ln(radix)) * ln(radix) = -ln(r)")
                  (("1" (hide -1)
                    (("1" (rewrite "exp_neg")
                      (("1" (rewrite "exp_ln") nil nil)) nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((^^ const-decl "nnreal" expt lnexp)
          (exp_ln formula-decl nil ln_exp lnexp)
          (exp_neg formula-decl nil ln_exp lnexp)
          (ln const-decl "real" ln_exp lnexp))
         shostak))
       (hathat_int_TCC1 0
        (hathat_int_TCC1-1 nil 3319195930 ("" (subtype-tcc) nil nil)
         nil nil
         (hathat_int subtype "float.e1"
          "{r: reals.real | booleans.OR(float.radix /= 0, r /= 0)}")))
       (hathat_int_TCC2 0
        (hathat_int_TCC2-1 nil 3545651010 ("" (subtype-tcc) nil nil)
         nil nil
         (hathat_int subtype "float.e1"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (hathat_int 0
        (hathat_int-1 nil 3319197088
         ("" (skeep)
          (("" (expand "^")
            (("" (case "e1 >= 0")
              (("1" (grind-reals)
                (("1" (rewrite "hathat_nat")
                  (("1" (expand "^") (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (grind-reals)
                (("2" (lemma "hathat_diff")
                  (("2" (inst -1 "radix" "-e1" "0")
                    (("2" (case-replace "0--e1=e1")
                      (("1" (rewrite -2)
                        (("1" (rewrite "hathat_nat")
                          (("1" (expand "^")
                            (("1" (grind-reals) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -1 2 3) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((hathat_to_0 formula-decl nil expt lnexp)
          (hathat_diff formula-decl nil expt lnexp)
          (hathat_nat formula-decl nil expt lnexp))
         shostak))
       (Fsucc_TCC1 0
        (Fsucc_TCC1-1 nil 3321636413
         ("" (skeep)
          (("" (lemma "radix_div_vNum") (("" (inst?) nil nil)) nil))
          nil)
         nil nil
         (Fsucc subtype
          "number_fields./(float.vNum(float.b), float.radix)" "int")))
       (Fpred_TCC1 0
        (Fpred_TCC1-1 nil 3319211903
         ("" (skeep)
          (("" (case-replace "-vNum(b) / radix = -(vNum(b)/radix)")
            (("1" (hide -1)
              (("1" (lemma "integers.closed_neg")
                (("1" (inst?)
                  (("1" (hide 2)
                    (("1" (lemma "radix_div_vNum")
                      (("1" (inst -1 "b") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         nil nil
         (Fpred subtype
          "number_fields./((number_fields.-)(float.vNum(float.b)), float.radix)"
          "int")))
       (Fnormalize_TCC1 0
        (Fnormalize_TCC1-1 nil 3318871237 ("" (subtype-tcc) nil nil)
         nil nil
         (Fnormalize subtype
          "(number_fields.-)(float.vNum(float.b), real_defs.abs(Fnum(float.f)))"
          "naturalnumber")))
       (Fnormalize_TCC2 0
        (Fnormalize_TCC2-1 nil 3318871237 ("" (subtype-tcc) nil nil)
         nil nil
         (Fnormalize subtype
          "(# Fnum := 0, Fexp := (number_fields.-)(dExp(float.b)) #)"
          "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
       (Fnormalize_TCC3 0
        (Fnormalize_TCC3-1 nil 3318871237 ("" (subtype-tcc) nil nil)
         nil nil
         (Fnormalize subtype "float.f"
          "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
       (Fnormalize_TCC4 0
        (Fnormalize_TCC4-1 nil 3318871237 ("" (subtype-tcc) nil nil)
         nil nil
         (Fnormalize subtype
          "(# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #)"
          "(float.Fbounded?(float.b))")))
       (Fnormalize_TCC5 0
        (Fnormalize_TCC5-2 "" 3790102642
         ("" (skosimp)
          (("" (grind-reals)
            (("" (expand "abs" 4 2)
              (("" (both-sides-f 2 "abs")
                (("1" (expand "abs" 1 2)
                  (("1" (cancel-by 4 "abs(Fnum(f!1))") nil nil)) nil)
                 ("2" (expand "abs" -1 2)
                  (("2" (cancel-by 4 "abs(Fnum(f!1))") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak
         (Fnormalize termination
          "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
          "nil"))
        (Fnormalize_TCC5-1 nil 3318871660
         ("" (skosimp)
          (("" (grind-reals)
            (("" (expand "abs" 4 2)
              (("" (wrap-formula 2 "abs")
                (("" (expand "abs" 1 2)
                  (("" (cancel-by 4 "abs(Fnum(f!1))")
                    (("" (hide-all-but (-1 3)) (("" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (Fnormalize termination
          "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
          "nil")))
       (Fnormalize_TCC6 0
        (Fnormalize_TCC6-2 "" 3790102643
         ("" (skosimp)
          (("" (split)
            (("1"
              (typepred
               "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
              (("1" (replaces -2)
                (("1" (expand "FtoR")
                  (("1" (rewrite "expt_div" :dir rl)
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2"
              (typepred
               "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
              (("2" (assert) nil nil)) nil))
            nil))
          nil)
         nil shostak
         (Fnormalize subtype
          "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
          "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}"))
        (Fnormalize_TCC6-1 nil 3319287157
         ("" (skosimp)
          (("" (split)
            (("1"
              (typepred
               "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
              (("1" (replaces -2)
                (("1" (expand "FtoR")
                  (("1" (rewrite "expt_div" :dir rl)
                    (("1" (rewrite "expt_x1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (typepred
               "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
              (("2" (assert) nil nil)) nil))
            nil))
          nil)
         nil nil
         (Fnormalize subtype
          "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
          "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
       (Fulp_TCC1 0
        (Fulp_TCC1-1 nil 3318887371 ("" (subtype-tcc) nil nil) nil nil
         (Fulp subtype "(Fexp(float.Fnormalize(float.b)(float.f)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Fulp_posreal_j 0
        (Fulp_posreal_j-1 nil 3670176754 ("" (judgement-tcc) nil nil)
         nil nil
         (Fulp_posreal_j subtype "float.Fulp(float.b)(float.f)"
          "posreal")))
       (exact_rep_conservation_TCC1 0
        (exact_rep_conservation_TCC1-1 nil 3698090985
         ("" (subtype-tcc) nil nil) nil nil
         (exact_rep_conservation subtype "float.n"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (FoppBounded 0
        (FoppBounded-1 nil 3319899604
         ("" (skeep)
          (("" (expand* "Fbounded?" "Fopp")
            (("" (flatten)
              (("" (split)
                (("1" (expand "abs") (("1" (grind-reals) nil nil)) nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (rounded_opp?_TCC1 0
        (rounded_opp?_TCC1-1 nil 3877716003
         ("" (skeep) (("" (rewrite "FoppBounded") nil nil)) nil) nil
         nil
         (rounded_opp? subtype "float.Fopp(float.p)"
          "(float.Fbounded?(float.b))")))
       (FcanonicOpp 0
        (FcanonicOpp-2 "" 3790102647
         ("" (skeep)
          (("" (split)
            (("1" (skosimp*)
              (("1" (expand "Fcanonic?")
                (("1" (split)
                  (("1" (case "Fnormal?(b)(Fopp(f))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fnormal?" "Fbounded?" "Fopp")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(-(Fnum(f)))=abs(Fnum(f))")
                              (("1"
                                (hide -1 -2 -3 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3"
                              (case-replace
                               "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                              (("3"
                                (hide -1 -2 -3 2)
                                (("3"
                                  (expand "abs")
                                  (("3" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "Fsubnormal?(b)(Fopp(f))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fopp" "Fsubnormal?" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(-(Fnum(f)))=abs(Fnum(f))")
                              (("1"
                                (hide -1 -2 -3 -4 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4"
                              (case-replace
                               "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                              (("4"
                                (hide -1 -2 -3 -4 2)
                                (("4"
                                  (expand "abs")
                                  (("4" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "Fcanonic?")
                (("2" (split)
                  (("1" (case "Fnormal?(b)(f)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fnormal?" "Fopp" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(Fnum(f))=abs(-(Fnum(f)))")
                              (("1"
                                (hide -1 -2 -3 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3"
                              (case-replace
                               "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                              (("3"
                                (hide -1 -2 -3 2)
                                (("3"
                                  (expand "abs")
                                  (("3" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case " Fsubnormal?(b)(f)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fsubnormal?" "Fopp" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(Fnum(f))=abs(-(Fnum(f)))")
                              (("1"
                                (hide -1 -2 -3 -4 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4"
                              (case-replace
                               "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                              (("4"
                                (hide -1 -2 -3 -4 2)
                                (("4"
                                  (expand "abs")
                                  (("4" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FcanonicOpp-1 nil 3319221457
         ("" (skeep)
          (("" (split)
            (("1" (skosimp*)
              (("1" (expand "Fcanonic?")
                (("1" (split)
                  (("1" (case "Fnormal?(b)(Fopp(f))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fnormal?" "Fbounded?" "Fopp")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(-(Fnum(f)))=abs(Fnum(f))")
                              (("1"
                                (hide -1 -2 -3 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3"
                              (case-replace
                               "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                              (("3"
                                (hide -1 -2 -3 2)
                                (("3"
                                  (expand "abs")
                                  (("3"
                                    (grind-reals)
                                    (("1"
                                      (case "-(radix * (Fnum(f))) > 0")
                                      (("1" (grind-reals) nil nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (cancel-by 1 "radix")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 2)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (cancel-by 1 "radix")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "Fsubnormal?(b)(Fopp(f))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fopp" "Fsubnormal?" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(-(Fnum(f)))=abs(Fnum(f))")
                              (("1"
                                (hide -1 -2 -3 -4 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4"
                              (case-replace
                               "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                              (("4"
                                (hide -1 -2 -3 -4 2)
                                (("4"
                                  (expand "abs")
                                  (("4"
                                    (grind-reals)
                                    (("1"
                                      (flip-ineq -1)
                                      (("1"
                                        (cancel-by 1 "radix")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 2)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (cancel-by 1 "radix")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "Fcanonic?")
                (("2" (split)
                  (("1" (case "Fnormal?(b)(f)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fnormal?" "Fopp" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(Fnum(f))=abs(-(Fnum(f)))")
                              (("1"
                                (hide -1 -2 -3 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3"
                              (case-replace
                               "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                              (("3"
                                (hide -1 -2 -3 2)
                                (("3"
                                  (expand "abs")
                                  (("3"
                                    (grind-reals)
                                    (("1"
                                      (flip-ineq -2)
                                      (("1"
                                        (cancel-by 1 "radix")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 1)
                                      (("2"
                                        (cancel-by 1 "radix")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case " Fsubnormal?(b)(f)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand* "Fsubnormal?" "Fopp" "Fbounded?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1"
                              (case-replace
                               "abs(Fnum(f))=abs(-(Fnum(f)))")
                              (("1"
                                (hide -1 -2 -3 -4 2)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4"
                              (case-replace
                               "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                              (("4"
                                (hide -1 -2 -3 -4 2)
                                (("4"
                                  (expand "abs")
                                  (("4"
                                    (grind-reals)
                                    (("1"
                                      (flip-ineq -2)
                                      (("1"
                                        (cancel-by 1 "radix")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 1)
                                      (("2"
                                        (cancel-by 1 "radix")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FcanonicBounded 0
        (FcanonicBounded-1 nil 3319221336
         ("" (skeep)
          (("" (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?")
            (("" (split)
              (("1" (flatten) nil nil) ("2" (flatten) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (canonic_bounded_j 0
        (canonic_bounded_j-1 nil 3681643759
         ("" (skeep)
          (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil))
          nil)
         nil nil
         (canonic_bounded_j subtype "float.x"
          "(float.Fbounded?(float.b))")))
       (FpredCanonic 0
        (FpredCanonic-1 nil 3319212045
         ("" (skeep)
          (("" (expand "Fpred")
            (("" (grind-reals)
              (("1" (expand "Fcanonic?" 1 1)
                (("1"
                  (case "Fnormal?(b)((# Fnum := -(vNum(b) / radix), Fexp := 1 + Fexp(f) #))")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (expand* "Fnormal?" "Fbounded?")
                      (("2" (split)
                        (("1" (expand "abs" 1 1)
                          (("1" (lift-if)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (real-props :simple? t)
                                  (("1"
                                    (cancel-by 1 "vNum(b)")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (field 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 -2 2)
                    (("3" (rewrite "integers.closed_neg")
                      (("3" (rewrite "radix_div_vNum") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 1)
                (("2"
                  (case "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(f) - 1 #))")
                  (("1" (expand "Fcanonic?") (("1" (assert) nil nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand* "Fnormal?" "Fbounded?")
                      (("2" (split)
                        (("1" (expand "abs" 1 1)
                          (("1" (grind-reals) nil nil)) nil)
                         ("2" (case "vNum(b) * radix - radix >=0")
                          (("1" (expand "abs" 1 1)
                            (("1" (grind-reals)
                              (("1"
                                (isolate 1 r 1)
                                (("1"
                                  (case "vNum(b) >= radix")
                                  (("1"
                                    (case
                                     "vNum(b) + radix <= vNum(b) * 2")
                                    (("1"
                                      (case
                                       "vNum(b) * 2 <= vNum(b) * radix")
                                      (("1" (grind-reals) nil nil)
                                       ("2"
                                        (hide -1 -2 -3 -4 2)
                                        (("2"
                                          (cancel-by 1 "vNum(b)")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2 -3 2)
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (case
                                       "integer_pred(vNum(b) / radix)")
                                      (("1"
                                        (case "vNum(b)>=1")
                                        (("1"
                                          (grind-reals)
                                          (("1"
                                            (lemma "div_simple")
                                            (("1"
                                              (inst
                                               -1
                                               "vNum(b)"
                                               "radix")
                                              (("1"
                                                (grind-reals)
                                                (("1"
                                                  (cancel-by 1 "radix")
                                                  (("1"
                                                    (grind-reals)
                                                    (("1"
                                                      (hide 1 -3 -2 -1)
                                                      (("1"
                                                        (case
                                                         "k!1 >= 1 OR k!1 <=0")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "k!1 * radix <= 0")
                                                            (("1"
                                                              (grind-reals)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (rewrite "radix_div_vNum")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (cancel-by 1 "radix") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flip-ineq 2)
                (("3"
                  (case "abs(radix*(Fnum(f) - 1))< vNum(b) OR abs(radix*(Fnum(f) - 1)) >= vNum(b)")
                  (("1" (split)
                    (("1"
                      (case "Fsubnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                      (("1" (expand "Fcanonic?")
                        (("1" (assert) nil nil)) nil)
                       ("2" (hide 2 3)
                        (("2" (expand* "Fsubnormal?" "Fbounded?")
                          (("2" (split)
                            (("1" (mult-by 1 "radix")
                              (("1"
                                (case-replace
                                 "abs(Fnum(f) - 1) * radix=abs(radix * (Fnum(f) - 1))")
                                (("1"
                                  (case " vNum(b) <=vNum(b) * radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 -2 -3 -4 2)
                                    (("2"
                                      (div-by 1 "vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 -3 2)
                                  (("2"
                                    (rewrite "abs_mult")
                                    (("2"
                                      (expand "abs" 1 2)
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "Fbounded?(b)(f)")
                              (("1"
                                (expand "Fbounded?")
                                (("1" (flatten) nil nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                nil
                                nil))
                              nil)
                             ("3" (case "Fbounded?(b)(f)")
                              (("1"
                                (expand "Fbounded?")
                                (("1"
                                  (flatten)
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                nil
                                nil))
                              nil)
                             ("4" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                      (("1" (expand "Fcanonic?")
                        (("1" (assert) nil nil)) nil)
                       ("2" (hide 3)
                        (("2" (expand* "Fnormal?" "Fbounded?")
                          (("2" (split)
                            (("1" (case "Fbounded?(b)(f)")
                              (("1"
                                (expand "Fbounded?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2 -3 -4 -5)
                                    (("1"
                                      (expand* "abs")
                                      (("1" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                nil
                                nil))
                              nil)
                             ("2" (case "Fbounded?(b)(f)")
                              (("1"
                                (expand "Fbounded?")
                                (("1" (flatten) nil nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                nil
                                nil))
                              nil)
                             ("3" (hide -2 -3 2)
                              (("3" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 2 3) (("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil)
               ("4" (case "Fbounded?(b)(f)")
                (("1" (expand "Fbounded?")
                  (("1" (flatten)
                    (("1" (split-ineq -2)
                      (("1"
                        (case "abs(radix*(Fnum(f) - 1))< vNum(b) OR abs(radix*(Fnum(f) - 1)) >= vNum(b)")
                        (("1" (split)
                          (("1"
                            (case "Fsubnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                            (("1" (expand "Fcanonic?")
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide 4)
                              (("2"
                                (expand* "Fsubnormal?" "Fbounded?")
                                (("2"
                                  (split)
                                  (("1"
                                    (case
                                     " abs(Fnum(f) - 1) <= abs(radix * (Fnum(f) - 1))")
                                    (("1" (grind-reals) nil nil)
                                     ("2"
                                      (rewrite "abs_mult")
                                      (("2"
                                        (expand "abs" 1 2)
                                        (("2"
                                          (div-by 1 "abs(Fnum(f) - 1)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                            (("1" (expand "Fcanonic?")
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide 4)
                              (("2"
                                (expand* "Fnormal?" "Fbounded?")
                                (("2"
                                  (split)
                                  (("1"
                                    (hide -1 -2 -4 -4 3)
                                    (("1"
                                      (expand* "abs")
                                      (("1" (grind-reals) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind-reals) nil nil))
                        nil)
                       ("2"
                        (case "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                        (("1" (expand "Fcanonic?")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide 5)
                          (("2" (case "Fnormal?(b)(f)")
                            (("1" (expand* "Fnormal?" "Fbounded?")
                              (("1"
                                (split)
                                (("1"
                                  (hide -1 -3 -4 2 4)
                                  (("1"
                                    (expand* "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -3 -4 2)
                                  (("2"
                                    (expand* "abs")
                                    (("2"
                                      (grind-reals)
                                      (("1"
                                        (case "Fnum(f) <=0")
                                        (("1" (grind-reals) nil nil)
                                         ("2"
                                          (case "Fnum(f) < 1")
                                          (("1" (grind-reals) nil nil)
                                           ("2"
                                            (mult-by 1 "radix")
                                            (("2"
                                              (hide -2 2 3 4 5 6)
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "vNum(b) = radix * Fnum(f) OR vNum(b) < radix * Fnum(f)")
                                        (("1"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -2 1 3 4 5)
                                            (("2"
                                              (div-by -1 "radix")
                                              (("2"
                                                (div-by 1 "radix")
                                                (("2"
                                                  (case-replace
                                                   "(Fnum(f) * radix - radix) / radix=Fnum(f)-1")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "div_simple")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "vNum(b)"
                                                         "radix")
                                                        (("1"
                                                          (case
                                                           "(EXISTS (k:int): vNum(b) = k * radix)")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (case-replace
                                                               "vNum(b) / radix=k!1")
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("1"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind-reals)
                                                            (("2"
                                                              (rewrite
                                                               "radix_div_vNum")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (field)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 4 5)
                              (("2"
                                (expand "Fcanonic?")
                                (("2"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (expand "Fsubnormal?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FcanonicBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_log_compute_TCC1 0
        (RND_log_compute_TCC1-1 nil 3543227658
         ("" (subtype-tcc) nil nil) nil nil
         (RND_log_compute subtype
          "((number_fields.-)((number_fields.-)(dExp(float.b)), 1))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_log_compute_TCC2 0
        (RND_log_compute_TCC2-1 nil 3543227658
         ("" (skeep)
          (("" (assert)
            (("" (case "x*radix/vNum(b) > 0")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (cross-mult 1)
                  (("2" (lemma "posreal_times_posreal_is_posreal")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_log_compute subtype
          "number_fields./(number_fields.*(float.x, float.radix), float.vNum(float.b))"
          "posreal")))
       (RND_log_compute_TCC3 0
        (RND_log_compute_TCC3-1 nil 3543227658
         ("" (skosimp*) (("" (assert) nil nil)) nil) nil nil
         (RND_log_compute subtype
          "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_log_compute_TCC4 0
        (RND_log_compute_TCC4-2 "" 3790102657
         ("" (skeep)
          (("" (expand "vNum")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (mult-by -1 "radix ^ (1 + dExp(b) - Prec(b))")
                (("" (rewrite "expt_plus" :dir rl) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak
         (RND_log_compute subtype
          "number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))))"
          "{x: reals.real | reals.>=(x, 1)}"))
        (RND_log_compute_TCC4-1 nil 3543227658
         ("" (skeep)
          (("" (expand "vNum")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (mult-by -1 "radix ^ (1 + dExp(b) - Prec(b))")
                (("" (rewrite "expt_plus" :dir rl)
                  (("" (case "dExp(b) + -dExp(b) = 0")
                    (("1" (replace -1 :hide? t)
                      (("1" (use "expt_x0") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_log_compute subtype
          "number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))))"
          "{x: reals.real | reals.>=(x, 1)}")))
       (RND_log_compute 0
        (RND_log_compute-2 "" 3790102660
         (""
          (case "FORALL (b: Format, x: nnreal):
               x >= radix ^ (-dExp(b) - 1) * vNum(b) IMPLIES
                floor(ln(x * radix / vNum(b)) / ln(radix)) =
                 log_nat(x * radix ^ (1 + dExp(b) - Prec(b)), radix)`1 - dExp(b)")
          (("1" (skeep)
            (("1" (inst - "b" "x")
              (("1" (assert) nil nil)
               ("2" (expand "vNum")
                (("2" (typepred "radix^(Prec(b)-dExp(b)-1)")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "vNum")
                (("2" (rewrite "expt_plus" :dir rl)
                  (("2" (name "yy" "x*radix^(dExp(b) - Prec(b) + 1)")
                    (("2" (case "NOT yy>=1")
                      (("1" (hide 2)
                        (("1" (expand "yy" +)
                          (("1"
                            (mult-by 1
                             "radix ^ (Prec(b) - 1 + -dExp(b))")
                            (("1" (lemma "expt_plus")
                              (("1"
                                (inst
                                 -
                                 "1 + dExp(b) - Prec(b)"
                                 "Prec(b) - 1 + -dExp(b)"
                                 "radix")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "NOT x = yy*radix ^ (Prec(b) - 1 + -dExp(b))")
                        (("1" (hide 2)
                          (("1" (expand "yy" +)
                            (("1" (rewrite "expt_plus" :dir rl)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (replace -1 +)
                          (("2" (rewrite "ln_div")
                            (("1"
                              (case "radix ^ (Prec(b) - 1 + -dExp(b)) * radix = radix ^ (Prec(b) + -dExp(b))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "ln_mult")
                                    (("1"
                                      (rewrite "expt_plus" +)
                                      (("1"
                                        (rewrite "ln_mult")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "(ln(radix ^ -dExp(b)) + ln(yy)) / ln(radix) = (ln(yy)/ln(radix))-dExp(b)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "floor_eq_log_nat_ge_1")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "yy"
                                                     "radix")
                                                    (("1"
                                                      (case
                                                       "floor((ln(yy) / ln(radix)) - dExp(b)) = floor(ln(yy) / ln(radix)) - dExp(b)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (lemma
                                                           "floor_plus_int")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "-dExp(b)"
                                                             "ln(yy)/ln(radix)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "ln(radix^(-dExp(b)))/ln(radix) = -dExp(b)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide (2 3))
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (rewrite "ln_expt")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (inst
                                     -
                                     "Prec(b)-1+-dExp(b)"
                                     "1"
                                     "radix")
                                    (("2"
                                      (expand "^" - 3)
                                      (("2"
                                        (expand "expt")
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma
                                 "posreal_times_posreal_is_posreal")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (expand "vNum")
                (("3" (mult-by 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
                  (("3" (lemma "expt_plus")
                    (("3"
                      (inst - "1 + dExp(b) - Prec(b)"
                       "Prec(b) - 1 + -dExp(b)" "radix")
                      (("3" (assert)
                        (("3" (replace -1 :dir rl)
                          (("3" (lemma "expt_plus")
                            (("3"
                              (inst - "Prec(b)" "-dExp(b)-1" "radix")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (assert)
                (("5" (lemma "exp_ln")
                  (("5" (inst?)
                    (("5" (replace -3) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (skeep)
              (("6" (cross-mult 1)
                (("6" (assert)
                  (("6" (lemma "posreal_times_posreal_is_posreal")
                    (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide 2) (("7" (skeep) (("7" (assert) nil nil)) nil))
            nil))
          nil)
         ((exp_0 formula-decl nil ln_exp lnexp)
          (exp_ln formula-decl nil ln_exp lnexp)
          (ln_div formula-decl nil ln_exp lnexp)
          (ln_mult formula-decl nil ln_exp lnexp)
          (floor_eq_log_nat_ge_1 formula-decl nil ln_approx lnexp)
          (ln_expt formula-decl nil ln_exp lnexp)
          (ln const-decl "real" ln_exp lnexp)
          (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]"
           log_nat reals))
         shostak)
        (RND_log_compute-1 nil 3543227662
         (""
          (case "FORALL (b: Format, x: nnreal):
               x >= radix ^ (-dExp(b) - 1) * vNum(b) IMPLIES
                floor(ln(x * radix / vNum(b)) / ln(radix)) =
                 log_nat(x * radix ^ (1 + dExp(b) - Prec(b)), radix)`1 - dExp(b)")
          (("1" (skeep)
            (("1" (inst - "b" "x")
              (("1" (assert) nil nil)
               ("2" (expand "vNum")
                (("2" (typepred "radix^(Prec(b)-dExp(b)-1)")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "vNum")
                (("2" (rewrite "expt_plus" :dir rl)
                  (("2" (name "yy" "x*radix^(dExp(b) - Prec(b) + 1)")
                    (("2" (case "NOT yy>=1")
                      (("1" (hide 2)
                        (("1" (expand "yy" +)
                          (("1"
                            (mult-by 1
                             "radix ^ (Prec(b) - 1 + -dExp(b))")
                            (("1" (lemma "expt_plus")
                              (("1"
                                (inst
                                 -
                                 "1 + dExp(b) - Prec(b)"
                                 "Prec(b) - 1 + -dExp(b)"
                                 "radix")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 :dir rl :hide? t)
                                    (("1"
                                      (case "dExp(b) + -dExp(b) = 0")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (use "expt_x0")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "NOT x = yy*radix ^ (Prec(b) - 1 + -dExp(b))")
                        (("1" (hide 2)
                          (("1" (expand "yy" +)
                            (("1" (rewrite "expt_plus" :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (case "dExp(b) + -dExp(b) = 0")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (use "expt_x0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1 +)
                          (("2" (rewrite "ln_div")
                            (("1"
                              (case "radix ^ (Prec(b) - 1 + -dExp(b)) * radix = radix ^ (Prec(b) + -dExp(b))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "ln_mult")
                                    (("1"
                                      (rewrite "expt_plus" +)
                                      (("1"
                                        (rewrite "ln_mult")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "(ln(radix ^ -dExp(b)) + ln(yy)) / ln(radix) = (ln(yy)/ln(radix))-dExp(b)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "floor_eq_log_nat_ge_1")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "yy"
                                                     "radix")
                                                    (("1"
                                                      (case
                                                       "floor((ln(yy) / ln(radix)) - dExp(b)) = floor(ln(yy) / ln(radix)) - dExp(b)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (lemma
                                                           "floor_plus_int")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "-dExp(b)"
                                                             "ln(yy)/ln(radix)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "ln(radix^(-dExp(b)))/ln(radix) = -dExp(b)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide (2 3))
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (rewrite "ln_expt")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (inst
                                     -
                                     "Prec(b)-1+-dExp(b)"
                                     "1"
                                     "radix")
                                    (("2"
                                      (expand "^" - 3)
                                      (("2"
                                        (expand "expt")
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma
                                 "posreal_times_posreal_is_posreal")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (expand "vNum")
                (("3" (mult-by 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
                  (("3" (lemma "expt_plus")
                    (("3"
                      (inst - "1 + dExp(b) - Prec(b)"
                       "Prec(b) - 1 + -dExp(b)" "radix")
                      (("3" (assert)
                        (("3" (replace -1 :dir rl)
                          (("3" (lemma "expt_plus")
                            (("3"
                              (inst - "Prec(b)" "-dExp(b)-1" "radix")
                              (("3"
                                (assert)
                                (("3"
                                  (case "dExp(b) + -dExp(b) = 0")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (use "expt_x0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (assert)
                (("5" (lemma "exp_ln")
                  (("5" (inst?)
                    (("5" (replace -3) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (skeep)
              (("6" (cross-mult 1)
                (("6" (assert)
                  (("6" (lemma "posreal_times_posreal_is_posreal")
                    (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide 2) (("7" (skeep) (("7" (assert) nil nil)) nil))
            nil))
          nil)
         ((log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]"
           log_nat reals))
         nil))
       (RND_aux_TCC1 0
        (RND_aux_TCC1-1 nil 3318940757 ("" (subtype-tcc) nil nil)
         ((hat_02n formula-decl nil power_series series)) nil
         (RND_aux subtype "(dExp(float.b))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_TCC2 0
        (RND_aux_TCC2-2 "" 3790102662
         ("" (skeep)
          (("" (expand "Fcanonic?")
            ((""
              (case "Fsubnormal?(b) ((# Fnum := floor(x * radix ^ (dExp(b))), Fexp := -dExp(b) #))")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand* "Fsubnormal?")
                  (("2"
                    (case "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
                    (("1" (expand "Fbounded?")
                      (("1" (split)
                        (("1" (rewrite "abs_mult" -1)
                          (("1" (expand "abs" -1 1)
                            (("1" (mult-by 1 "radix")
                              (("1"
                                (swap
                                 "abs(floor(x * radix ^ (dExp(b))))"
                                 *
                                 "radix")
                                (("1"
                                  (case "vNum(b)<=vNum(b) * radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (div-by 1 "vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "abs_mult")
                        (("2" (expand "abs" 1 1)
                          (("2" (div-by 1 "radix")
                            (("2"
                              (case "floor(x * radix ^ (dExp(b))) >=0")
                              (("1"
                                (expand "abs" 1 1)
                                (("1"
                                  (case
                                   "x * radix ^ (dExp(b)) < vNum(b) / radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (lemma "expt_inverse")
                                      (("2"
                                        (inst -1 "dExp(b)+1" "radix")
                                        (("2"
                                          (case-replace
                                           "-(dExp(b) + 1)=-dExp(b) - 1")
                                          (("1"
                                            (rewrite -2 -3)
                                            (("1"
                                              (rewrite "expt_plus" -3)
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak
         (RND_aux subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, (dExp(float.b))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_TCC2-1 nil 3318940757
         ("" (skeep)
          (("" (expand "Fcanonic?")
            ((""
              (case "Fsubnormal?(b)
                                       ((# Fnum := floor(x * radix ^ (dExp(b))),
                                           Fexp := -dExp(b) #))")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand* "Fsubnormal?")
                  (("2"
                    (case "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
                    (("1" (expand "Fbounded?")
                      (("1" (split)
                        (("1" (rewrite "abs_mult" -1)
                          (("1" (expand "abs" -1 1)
                            (("1" (mult-by 1 "radix")
                              (("1"
                                (swap
                                 "abs(floor(x * radix ^ (dExp(b))))"
                                 *
                                 "radix")
                                (("1"
                                  (case "vNum(b)<=vNum(b) * radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (div-by 1 "vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "abs_mult")
                        (("2" (expand "abs" 1 1)
                          (("2" (div-by 1 "radix")
                            (("2"
                              (case "floor(x * radix ^ (dExp(b))) >=0")
                              (("1"
                                (expand "abs" 1 1)
                                (("1"
                                  (case
                                   "x * radix ^ (dExp(b)) < vNum(b) / radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (lemma "expt_inverse")
                                      (("2"
                                        (inst -1 "dExp(b)+1" "radix")
                                        (("2"
                                          (case-replace
                                           "-(dExp(b) + 1)=-dExp(b) - 1")
                                          (("1"
                                            (rewrite -2 -3)
                                            (("1"
                                              (rewrite "expt_plus" -3)
                                              (("1"
                                                (grind-reals)
                                                (("1"
                                                  (use "expt_x1")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, (dExp(float.b))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
          "(float.Fcanonic?(float.b))")))
       (RND_aux_TCC3 0
        (RND_aux_TCC3-2 "" 3318950531
         ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
         (RND_aux subtype
          "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}"))
        (RND_aux_TCC3-1 nil 3318940757
         ("" (skeep)
          (("" (expand "Fcanonic?")
            ((""
              (case "Fsubnormal?(b)
                  ((# Fnum := floor(x * radix ^ (dExp(b))),
                      Fexp := -dExp(b) #))")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand* "Fsubnormal?")
                  (("2"
                    (case "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
                    (("1" (expand "Fbounded?")
                      (("1" (split)
                        (("1" (rewrite "abs_mult" -1)
                          (("1" (expand "abs" -1 1)
                            (("1" (mult-by 1 "radix")
                              (("1"
                                (swap
                                 "abs(floor(x * radix ^ (dExp(b))))"
                                 *
                                 "radix")
                                (("1"
                                  (case "vNum(b)<=vNum(b) * radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (div-by 1 "vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "abs_mult")
                        (("2" (expand "abs" 1 1)
                          (("2" (expand "abs" 1 1)
                            (("2" (div-by 1 "radix")
                              (("2"
                                (case
                                 "x * radix ^ (dExp(b)) < vNum(b) / radix")
                                (("1"
                                  (grind-reals)
                                  (("1" (postpone) nil nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (div-by 1 "radix ^ (dExp(b))")
                                    (("2"
                                      (case
                                       "radix ^ (-dExp(b) - 1)=1/radix ^ (dExp(b)+1)")
                                      (("1"
                                        (rewrite -1 -2)
                                        (("1"
                                          (rewrite "expt_plus")
                                          (("1"
                                            (rewrite "expt_x1")
                                            (("1"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux subtype
          "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_TCC4 0
        (RND_aux_TCC4-2 "" 3790102664
         ("" (skeep)
          (("" (expand "vNum")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (mult-by 2 "radix ^ (Prec(b) - 1 + -dExp(b))")
                (("" (assert)
                  (("" (rewrite "expt_plus" :dir rl)
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak
         (RND_aux subtype
          "number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))))"
          "{x: reals.real | reals.>=(x, 1)}"))
        (RND_aux_TCC4-1 nil 3318940757
         ("" (skeep)
          (("" (expand "vNum")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (mult-by 2 "radix ^ (Prec(b) - 1 + -dExp(b))")
                (("" (assert)
                  (("" (rewrite "expt_plus" :dir rl)
                    (("" (assert)
                      (("" (expand ">=")
                        (("" (case "dExp(b) + -dExp(b) = 0")
                          (("1" (replace -1 :hide? t)
                            (("1" (use "expt_x0")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux subtype
          "number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))))"
          "{x: reals.real | reals.>=(x, 1)}")))
       (RND_aux_TCC5 0
        (RND_aux_TCC5-1 nil 3318940757
         ("" (skeep)
          (("" (expand "vNum")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (mult-by 1 "radix ^ (1 + dExp(b) - Prec(b))")
                (("" (rewrite "expt_plus" :dir rl)
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux subtype "((number_fields.-)(float.e))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_TCC6 0
        (owre "fix" 3399983082
         ("" (skeep)
          (("" (lemma "RND_log_compute")
            (("" (inst?)
              (("" (assert)
                (("" (replace -1 :dir rl)
                  (("" (hide -1)
                    (("" (skosimp)
                      (("" (expand "Fcanonic?")
                        (("" (assert)
                          (("" (flatten)
                            (("" (typepred "e!1")
                              ((""
                                (replace -2 :hide? t)
                                ((""
                                  (name
                                   "AA"
                                   "floor(ln(x * radix / vNum(b)) / ln(radix))")
                                  ((""
                                    (replace -1)
                                    ((""
                                      (expand "Fnormal?")
                                      ((""
                                        (expand "Fbounded?")
                                        ((""
                                          (split)
                                          (("1"
                                            (case
                                             "0<= floor(x * radix ^ (-AA))")
                                            (("1"
                                              (expand "abs" 1 1)
                                              (("1"
                                                (grind-reals)
                                                (("1"
                                                  (case
                                                   "x * radix ^ (-AA) < vNum(b)")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2 -1)
                                                    (("2"
                                                      (case
                                                       "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                                          (("1"
                                                            (case
                                                             "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (name-replace
                                                                 "WW"
                                                                 "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2
                                                               -3)
                                                              (("2"
                                                                (case-replace
                                                                 "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                                (("1"
                                                                  (field)
                                                                  (("1"
                                                                    (rewrite
                                                                     "hathatln")
                                                                    (("1"
                                                                      (field)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "ln_div")
                                                                    (("2"
                                                                      (rewrite
                                                                       "ln_div")
                                                                      (("2"
                                                                        (rewrite
                                                                         "ln_mult")
                                                                        (("2"
                                                                          (field)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (cancel-by
                                                               1
                                                               "x")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "^^")
                                                                  (("2"
                                                                    (lemma
                                                                     "exp_strict_increasing")
                                                                    (("2"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("2"
                                                                        (rewrite
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (field)
                                                                            (("2"
                                                                              (case
                                                                               "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "ln_div")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "ln_mult")
                                                                                  (("1"
                                                                                    (field)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "ln(radix)")
                                                                                      (("1"
                                                                                        (field
                                                                                         -1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "ln(radix) > 0")
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (grind-reals)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "ln_strict_increasing")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "strict_increasing?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "1"
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (grind-reals)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (case
                                                                                     "x>0")
                                                                                    (("1"
                                                                                      (grind-reals)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-reals)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -2 2)
                                                        (("2"
                                                          (rewrite
                                                           "hathat_int")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "0 <= x * radix ^ (-AA)")
                                              (("1"
                                                (hide -2 -3 2)
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2 3)
                                                (("2"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                                            (("1"
                                              (grind-reals)
                                              nil
                                              nil)
                                             ("2"
                                              (hide -2 2)
                                              (("2"
                                                (mult-by
                                                 1
                                                 "ln(radix)"
                                                 +)
                                                (("1"
                                                  (both-sides-f
                                                   1
                                                   "exp")
                                                  (("1"
                                                    (case-replace
                                                     "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                                    (("1"
                                                      (rewrite
                                                       "exp_ln")
                                                      (("1"
                                                        (div-by
                                                         1
                                                         "radix")
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "vNum(b)")
                                                          (("1"
                                                            (case-replace
                                                             " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                                            (("1"
                                                              (field)
                                                              (("1"
                                                                (rewrite
                                                                 "hathat_int")
                                                                (("1"
                                                                  (div-by
                                                                   1
                                                                   "radix")
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (case-replace
                                                                       "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (grind-reals)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -1
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "-dExp(b)"
                                                                             "-1"
                                                                             "radix")
                                                                            (("2"
                                                                              (grind-reals)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 1
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "expt_x1_aux")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                (("2"
                                                                  (case
                                                                   "radix^(-dExp(b)-1)*radix = radix^(-dExp(b)-1)*radix^1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_plus"
                                                                         :dir
                                                                         rl)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 2)
                                                      (("2"
                                                        (expand "^^")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "ln_increasing")
                                                    (("2"
                                                      (expand
                                                       "increasing?")
                                                      (("2"
                                                        (lemma
                                                         "ln_exp")
                                                        (("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 -1)
                                                  (("2"
                                                    (case
                                                     "ln(radix) > 0")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "ln_strict_increasing")
                                                        (("2"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "1"
                                                             "radix")
                                                            (("2"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "abs" 1 1)
                                            (("3"
                                              (grind-reals)
                                              (("3"
                                                (cancel-by 1 "radix")
                                                (("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (case
                                                     "vNum(b) / radix <= x * radix ^ (-AA)")
                                                    (("1"
                                                      (case
                                                       "integer_pred(vNum(b) / radix)")
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           "div_simple")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "vNum(b)"
                                                             "radix")
                                                            (("1"
                                                              (case
                                                               "(EXISTS (k:int): vNum(b) = k * radix)")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (case-replace
                                                                   " vNum(b) / radix=k!1")
                                                                  (("1"
                                                                    (grind-reals)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     2)
                                                                    (("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -3
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "radix_div_vNum")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (case
                                                         "vNum(b) / radix <= x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                        (("1"
                                                          (case
                                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                                          (("1"
                                                            (name-replace
                                                             "A1"
                                                             "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                            (("1"
                                                              (name-replace
                                                               "A2"
                                                               "vNum(b) / radix")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 -1)
                                                            (("2"
                                                              (cancel-by
                                                               1
                                                               "x")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (case-replace
                                                                   "radix ^ (-AA)=radix ^^ (-AA)")
                                                                  (("1"
                                                                    (expand
                                                                     "^^")
                                                                    (("1"
                                                                      (lemma
                                                                       "exp_increasing")
                                                                      (("1"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (div-by
                                                                               1
                                                                               "-ln(radix)"
                                                                               -)
                                                                              (("1"
                                                                                (field)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "ln(radix)>0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "ln_strict_increasing")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "strict_increasing?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1"
                                                                                         "radix")
                                                                                        (("2"
                                                                                          (grind-reals)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "hathat_int")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           2)
                                                          (("2"
                                                            (rewrite
                                                             "hathatln")
                                                            (("2"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((exp_increasing formula-decl nil ln_exp lnexp)
          (ln_increasing formula-decl nil ln_exp lnexp)
          (ln_exp formula-decl nil ln_exp lnexp)
          (increasing? const-decl "bool" real_fun_preds reals)
          (exp_ln formula-decl nil ln_exp lnexp)
          (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
          (exp_strict_increasing formula-decl nil ln_exp lnexp)
          (ln_1 formula-decl nil ln_exp lnexp)
          (ln_strict_increasing formula-decl nil ln_exp lnexp)
          (strict_increasing? const-decl "bool" real_fun_preds reals)
          (ln_div formula-decl nil ln_exp lnexp)
          (ln_mult formula-decl nil ln_exp lnexp)
          (^^ const-decl "nnreal" expt lnexp)
          (ln const-decl "real" ln_exp lnexp))
         shostak
         (RND_aux subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)(float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_TCC6-2 nil 3399983047
         (";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
          (skeep)
          ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
            (skosimp)
            ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
              (expand "Fcanonic?")
              ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                (assert)
                ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                  (flatten)
                  ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                    (typepred "e!1")
                    ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                      (replace -3 :hide? t)
                      ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                        (name "AA"
                              "floor(ln(x * radix / vNum(b)) / ln(radix))")
                        ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                          (replace -1)
                          ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                            (expand "Fnormal?")
                            ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                              (expand "Fbounded?")
                              ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                                (split)
                                (("1"
                                  (case "0<= floor(x * radix ^ (-AA))")
                                  (("1"
                                    (expand "abs" 1 1)
                                    (("1"
                                      (grind-reals)
                                      (("1"
                                        (case
                                         "x * radix ^ (-AA) < vNum(b)")
                                        (("1" (grind-reals) nil)
                                         ("2"
                                          (hide 2 -1)
                                          (("2"
                                            (case
                                             "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                                (("1"
                                                  (case
                                                   "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                                  (("1"
                                                    (hide -3 -4)
                                                    (("1"
                                                      (name-replace
                                                       "WW"
                                                       "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                      (("1"
                                                        (assert)
                                                        nil)))))
                                                   ("2"
                                                    (hide 2 -1 -2 -3)
                                                    (("2"
                                                      (case-replace
                                                       "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                      (("1"
                                                        (field)
                                                        (("1"
                                                          (rewrite
                                                           "hathatln")
                                                          (("1"
                                                            (field)
                                                            nil)))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "ln_div")
                                                          (("2"
                                                            (rewrite
                                                             "ln_div")
                                                            (("2"
                                                              (rewrite
                                                               "ln_mult")
                                                              (("2"
                                                                (field)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (cancel-by 1 "x")
                                                    (("2"
                                                      (hide -1 2)
                                                      (("2"
                                                        (expand "^^")
                                                        (("2"
                                                          (lemma
                                                           "exp_strict_increasing")
                                                          (("2"
                                                            (expand
                                                             "strict_increasing?")
                                                            (("2"
                                                              (rewrite
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (field)
                                                                  (("2"
                                                                    (case
                                                                     "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                                    (("1"
                                                                      (rewrite
                                                                       "ln_div")
                                                                      (("1"
                                                                        (rewrite
                                                                         "ln_mult")
                                                                        (("1"
                                                                          (field)
                                                                          (("1"
                                                                            (mult-by
                                                                             -1
                                                                             "ln(radix)")
                                                                            (("1"
                                                                              (field
                                                                               -1)
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (case
                                                                                 "ln(radix) > 0")
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (grind-reals)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "ln_strict_increasing")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "strict_increasing?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1"
                                                                                         "radix")
                                                                                        (("2"
                                                                                          (grind-reals)
                                                                                          nil)))))))))))))))))))
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "x>0")
                                                                          (("1"
                                                                            (grind-reals)
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind-reals)
                                                                              nil)))))))))
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (grind-reals)
                                                                        nil)))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 -2 2)
                                              (("2"
                                                (rewrite "hathat_int")
                                                nil)))))))))))))
                                   ("2"
                                    (case "0 <= x * radix ^ (-AA)")
                                    (("1"
                                      (hide -2 -3 2)
                                      (("1" (grind-reals) nil)))
                                     ("2"
                                      (hide -1 -2 2 3)
                                      (("2" (grind-reals) nil)))))))
                                 ("2"
                                  (case
                                   "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                                  (("1" (grind-reals) nil)
                                   ("2"
                                    (hide -2 2)
                                    (("2"
                                      (mult-by 1 "ln(radix)" +)
                                      (("1"
                                        (wrap-formula 1 "exp")
                                        (("1"
                                          (case-replace
                                           "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                          (("1"
                                            (rewrite "exp_ln")
                                            (("1"
                                              (div-by 1 "radix")
                                              (("1"
                                                (mult-by 1 "vNum(b)")
                                                (("1"
                                                  (case-replace
                                                   " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                                  (("1"
                                                    (field)
                                                    (("1"
                                                      (rewrite
                                                       "hathat_int")
                                                      (("1"
                                                        (div-by
                                                         1
                                                         "radix")
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                            (("1"
                                                              (hide
                                                               -2
                                                               2)
                                                              (("1"
                                                                (grind-reals)
                                                                nil)))
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 "expt_plus")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "-dExp(b)"
                                                                   "-1"
                                                                   "radix")
                                                                  (("2"
                                                                    (grind-reals)
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (grind-reals)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_x1_aux")
                                                                          nil)))))))))))))))))))))))
                                                   ("2"
                                                    (hide 2 -1 -2)
                                                    (("2"
                                                      (lemma
                                                       "expt_plus")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "-dExp(b)"
                                                         "-1"
                                                         "radix")
                                                        (("2"
                                                          (grind-reals)
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             1
                                                             2)
                                                            (("2"
                                                              (grind-reals)
                                                              (("2"
                                                                (rewrite
                                                                 "expt_x1_aux")
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (expand "^^")
                                              (("2" (propax) nil)))))))
                                         ("2"
                                          (lemma "ln_increasing")
                                          (("2"
                                            (expand "increasing?")
                                            (("2"
                                              (lemma "ln_exp")
                                              (("2"
                                                (grind-reals)
                                                nil)))))))))
                                       ("2"
                                        (hide 2 -1)
                                        (("2"
                                          (case "ln(radix) > 0")
                                          (("1"
                                            (split)
                                            (("1" (assert) nil)
                                             ("2" (propax) nil)))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "ln_strict_increasing")
                                              (("2"
                                                (expand
                                                 "strict_increasing?")
                                                (("2"
                                                  (inst -1 "1" "radix")
                                                  (("2"
                                                    (grind-reals)
                                                    nil)))))))))))))))))))
                                 ("3"
                                  (expand "abs" 1 1)
                                  (("3"
                                    (grind-reals)
                                    (("3"
                                      (cancel-by 1 "radix")
                                      (("3"
                                        (hide -1 1)
                                        (("3"
                                          (case
                                           "vNum(b) / radix <= x * radix ^ (-AA)")
                                          (("1"
                                            (case
                                             "integer_pred(vNum(b) / radix)")
                                            (("1"
                                              (hide -3 -4)
                                              (("1"
                                                (lemma "div_simple")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "vNum(b)"
                                                   "radix")
                                                  (("1"
                                                    (case
                                                     "(EXISTS (k:int): vNum(b) = k * radix)")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (case-replace
                                                         " vNum(b) / radix=k!1")
                                                        (("1"
                                                          (grind-reals)
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           2)
                                                          (("2"
                                                            (grind-reals)
                                                            nil)))))))
                                                     ("2"
                                                      (hide -3 2)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (rewrite
                                                   "radix_div_vNum")
                                                  nil)))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case
                                               "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                              (("1"
                                                (case
                                                 "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (hide 2 -1)
                                                  (("2"
                                                    (cancel-by 1 "x")
                                                    (("2"
                                                      (hide -1 1)
                                                      (("2"
                                                        (case-replace
                                                         "radix ^ (-AA)=radix ^^ (-AA)")
                                                        (("1"
                                                          (expand "^^")
                                                          (("1"
                                                            (lemma
                                                             "exp_increasing")
                                                            (("1"
                                                              (expand
                                                               "increasing?")
                                                              (("1"
                                                                (rewrite
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   2)
                                                                  (("1"
                                                                    (div-by
                                                                     1
                                                                     "-ln(radix)"
                                                                     -)
                                                                    (("1"
                                                                      (field)
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "ln(radix)>0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (lemma
                                                                           "ln_strict_increasing")
                                                                          (("2"
                                                                            (expand
                                                                             "strict_increasing?")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "1"
                                                                               "radix")
                                                                              (("2"
                                                                                (grind-reals)
                                                                                nil)))))))))))))))))))))))
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           2)
                                                          (("2"
                                                            (rewrite
                                                             "hathat_int")
                                                            nil)))))))))))))
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (rewrite "hathatln")
                                                  (("2"
                                                    (field)
                                                    nil))))))))))))))))))))))))))))))))))))))))))
          ";;; developed with shostak decision procedures")
         ((increasing? const-decl "bool" real_fun_preds reals)
          (strict_increasing? const-decl "bool" real_fun_preds reals))
         nil
         (RND_aux subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)(float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_TCC6-1 nil 3318940757
         ("" (skeep)
          ((""
            (case "Fnormal?(b)
                                   ((# Fnum
                                         := floor(x *
                                                   radix ^
                                                    (-floor(ln(x * radix / vNum(b))
                                                            /
                                                            ln(radix)))),
                                       Fexp := floor(ln(x * radix / vNum(b)) / ln(radix)) #))")
            (("1" (expand "Fcanonic?") (("1" (assert) nil nil)) nil)
             ("2" (hide 3)
              (("2"
                (name "AA"
                      "floor(ln(x * radix / vNum(b)) / ln(radix))")
                (("2" (replace -1 1)
                  (("2" (case "radix ^ (-dExp(b) - 1) * vNum(b) <= x")
                    (("1" (hide 2)
                      (("1" (expand* "Fnormal?" "Fbounded?")
                        (("1" (split)
                          (("1" (case "0<= floor(x * radix ^ (-AA))")
                            (("1" (expand "abs" 1 1)
                              (("1"
                                (grind-reals)
                                (("1"
                                  (case "x * radix ^ (-AA) < vNum(b)")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide 2 -1)
                                    (("2"
                                      (case
                                       "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (case
                                           "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                          (("1"
                                            (case
                                             "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                            (("1"
                                              (hide -3 -4)
                                              (("1"
                                                (name-replace
                                                 "WW"
                                                 "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -1 -2 -3)
                                              (("2"
                                                (case-replace
                                                 "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                (("1"
                                                  (field)
                                                  (("1"
                                                    (rewrite
                                                     "hathatln")
                                                    (("1"
                                                      (field)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite "ln_div")
                                                    (("2"
                                                      (rewrite
                                                       "ln_div")
                                                      (("2"
                                                        (rewrite
                                                         "ln_mult")
                                                        (("2"
                                                          (field)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (cancel-by 1 "x")
                                              (("2"
                                                (hide -1 2)
                                                (("2"
                                                  (expand "^^")
                                                  (("2"
                                                    (lemma
                                                     "exp_strict_increasing")
                                                    (("2"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("2"
                                                        (rewrite -1)
                                                        (("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (field)
                                                            (("2"
                                                              (case
                                                               "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                              (("1"
                                                                (rewrite
                                                                 "ln_div")
                                                                (("1"
                                                                  (rewrite
                                                                   "ln_mult")
                                                                  (("1"
                                                                    (field)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "ln(radix)")
                                                                      (("1"
                                                                        (field
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "ln(radix) > 0")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (grind-reals)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (lemma
                                                                               "ln_strict_increasing")
                                                                              (("2"
                                                                                (expand
                                                                                 "strict_increasing?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "1"
                                                                                   "radix")
                                                                                  (("2"
                                                                                    (grind-reals)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "x>0")
                                                                    (("1"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2"
                                          (rewrite "hathat_int")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "0 <= x * radix ^ (-AA)")
                              (("1"
                                (hide -2 -3 2)
                                (("1" (grind-reals) nil nil))
                                nil)
                               ("2"
                                (hide -1 -2 2 3)
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                            (("1" (grind-reals) nil nil)
                             ("2" (hide -2 2)
                              (("2"
                                (mult-by 1 "ln(radix)" +)
                                (("1"
                                  (wrap-formula 1 "exp")
                                  (("1"
                                    (case-replace
                                     "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                    (("1"
                                      (rewrite "exp_ln")
                                      (("1"
                                        (div-by 1 "radix")
                                        (("1"
                                          (mult-by 1 "vNum(b)")
                                          (("1"
                                            (case-replace
                                             " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                            (("1"
                                              (field)
                                              (("1"
                                                (rewrite "hathat_int")
                                                (("1"
                                                  (div-by 1 "radix")
                                                  (("1"
                                                    (hide -1 -2 -4)
                                                    (("1"
                                                      (case-replace
                                                       "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                      (("1"
                                                        (hide -2 2)
                                                        (("1"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -1 -2)
                                              (("2"
                                                (lemma "expt_plus")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "-dExp(b)"
                                                   "-1"
                                                   "radix")
                                                  (("2"
                                                    (grind-reals)
                                                    (("2"
                                                      (expand "^" 1 2)
                                                      (("2"
                                                        (grind-reals)
                                                        (("2"
                                                          (rewrite
                                                           "expt_x1_aux")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (expand "^^")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "ln_increasing")
                                    (("2"
                                      (expand "increasing?")
                                      (("2"
                                        (lemma "ln_exp")
                                        (("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -1)
                                  (("2"
                                    (case "ln(radix) > 0")
                                    (("1"
                                      (split)
                                      (("1" (assert) nil nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "ln_strict_increasing")
                                        (("2"
                                          (expand "strict_increasing?")
                                          (("2"
                                            (inst -1 "1" "radix")
                                            (("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "abs" 1 1)
                            (("3" (grind-reals)
                              (("3"
                                (cancel-by 1 "radix")
                                (("3"
                                  (hide -1 1)
                                  (("3"
                                    (case
                                     "vNum(b) / radix <= x * radix ^ (-AA)")
                                    (("1"
                                      (case
                                       "integer_pred(vNum(b) / radix)")
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (lemma "div_simple")
                                          (("1"
                                            (inst -1 "vNum(b)" "radix")
                                            (("1"
                                              (case
                                               "(EXISTS (k:int): vNum(b) = k * radix)")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (case-replace
                                                   " vNum(b) / radix=k!1")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -2 -3 -4 2)
                                                    (("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -3 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (rewrite "radix_div_vNum")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                        (("1"
                                          (case
                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2"
                                              (cancel-by 1 "x")
                                              (("2"
                                                (hide -1 1)
                                                (("2"
                                                  (case-replace
                                                   "radix ^ (-AA)=radix ^^ (-AA)")
                                                  (("1"
                                                    (expand "^^")
                                                    (("1"
                                                      (lemma
                                                       "exp_increasing")
                                                      (("1"
                                                        (expand
                                                         "increasing?")
                                                        (("1"
                                                          (rewrite -1)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             2)
                                                            (("1"
                                                              (div-by
                                                               1
                                                               "-ln(radix)"
                                                               -)
                                                              (("1"
                                                                (field)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "ln(radix)>0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (lemma
                                                                     "ln_strict_increasing")
                                                                    (("2"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "1"
                                                                         "radix")
                                                                        (("2"
                                                                          (grind-reals)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -2 2)
                                                    (("2"
                                                      (rewrite
                                                       "hathat_int")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 2)
                                          (("2"
                                            (rewrite "hathatln")
                                            (("2" (field) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2 3) (("3" (grind-reals) nil nil)) nil))
            nil))
          nil)
         ((increasing? const-decl "bool" real_fun_preds reals)
          (strict_increasing? const-decl "bool" real_fun_preds reals))
         nil
         (RND_aux subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)(float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))")))
       (RND_aux_alt_TCC1 0
        (RND_aux_alt_TCC1-1 nil 3544343150
         ("" (skeep)
          (("" (case "x>=0")
            (("1" (split-ineq -1) nil nil) ("2" (assert) nil nil))
            nil))
          nil)
         nil nil
         (RND_aux_alt subtype
          "number_fields./(number_fields.*(float.x, float.radix), float.vNum(float.b))"
          "posreal")))
       (RND_aux_alt_TCC2 0
        (RND_aux_alt_TCC2-2 "" 3790102683
         ("" (skosimp*)
          (("" (case "radix = 1")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         nil shostak
         (RND_aux_alt subtype "((number_fields.-)(float.e))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}"))
        (RND_aux_alt_TCC2-1 nil 3544343150
         ("" (skosimp*)
          (("" (case "radix = 1")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)
             ("2" (assert)
              (("2" (lemma "ln_eq_0")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux_alt subtype "((number_fields.-)(float.e))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_alt_TCC3 0
        (RND_aux_alt_TCC3-1 nil 3544343150
         ("" (skeep)
          (("" (lemma "RND_aux_TCC6")
            (("" (inst?)
              (("" (assert)
                (("" (skosimp*)
                  (("" (inst - "e!1")
                    (("" (ground)
                      (("" (lemma "RND_log_compute")
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((ln const-decl "real" ln_exp lnexp)) nil
         (RND_aux_alt subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(float.x, exponentiation.^(float.radix, ((number_fields.-)(float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))")))
       (RND_aux_alt_def 0
        (RND_aux_alt_def-1 nil 3544343151
         ("" (decompose-equality)
          (("" (decompose-equality)
            (("" (expand "RND_aux")
              (("" (expand "RND_aux_alt")
                (("" (lift-if)
                  (("" (ground)
                    (("" (lemma "RND_log_compute")
                      (("" (inst - "x!1" "x!2") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_Min_TCC1 0
        (RND_Min_TCC1-1 nil 3319384410 ("" (subtype-tcc) nil nil) nil
         nil (RND_Min subtype "float.x" "nonneg_real")))
       (RND_Min_TCC2 0
        (RND_Min_TCC2-1 nil 3319384410 ("" (subtype-tcc) nil nil) nil
         nil
         (RND_Min subtype "(number_fields.-)(float.x)" "nonneg_real")))
       (RND_Min_TCC3 0
        (RND_Min_TCC3-1 nil 3319384410
         ("" (skeep*)
          (("" (replace -1 :hide? t)
            (("" (lemma "FcanonicOpp")
              (("" (inst -1 "b" "RND_aux(b)(-x)")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_Min subtype "float.ofmx" "(float.Fcanonic?(float.b))")))
       (RND_Min_TCC4 0
        (RND_Min_TCC4-1 nil 3319384410
         ("" (skeep*)
          (("" (replace -1 :hide? t)
            (("" (rewrite "FpredCanonic")
              (("" (lemma "FcanonicOpp")
                (("" (inst -1 "b" "RND_aux(b)(-x)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_Min subtype "float.Fpred(float.b)(float.ofmx)"
          "(float.Fcanonic?(float.b))")))
       (RND_Max_TCC1 0
        (RND_Max_TCC1-1 nil 3319894713
         ("" (skeep)
          (("" (lemma "FcanonicOpp")
            (("" (inst -1 "b" "RND_Min(b)(-x)") (("" (assert) nil nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_Max subtype
          "float.Fopp(float.RND_Min(float.b)((number_fields.-)(float.x)))"
          "(float.Fcanonic?(float.b))")))
       (Exp_incr_1_TCC1 0
        (Exp_incr_1_TCC1-1 nil 3318763952 ("" (subtype-tcc) nil nil)
         nil nil
         (Exp_incr_1 subtype "float.e2"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Exp_incr_1 0
        (Exp_incr_1-1 nil 3318763991
         ("" (skeep)
          (("" (use "both_sides_expt_gt1_lt")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         nil shostak))
       (Exp_incr_2 0
        (Exp_incr_2-1 nil 3318865674
         ("" (skeep)
          (("" (use " both_sides_expt_gt1_lt")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         nil shostak))
       (Exp_increq_1_TCC1 0
        (Exp_increq_1_TCC1-1 nil 3318783146 ("" (subtype-tcc) nil nil)
         nil nil
         (Exp_increq_1 subtype "float.e2"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Exp_increq_1 0
        (Exp_increq_1-1 nil 3318865769
         ("" (skeep)
          (("" (use "both_sides_expt_gt1_le")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         nil shostak))
       (Exp_increq_2 0
        (Exp_increq_2-1 nil 3318865818
         ("" (skeep)
          (("" (use "both_sides_expt_gt1_le")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         nil shostak))
       (Exp_1 0
        (Exp_1-2 "" 3790102692
         ("" (skeep)
          (("" (case "0 <= e1")
            (("1" (case "e1 <= 0")
              (("1" (grind) nil nil)
               ("2" (rewrite "Exp_increq_2") nil nil))
              nil)
             ("2" (rewrite "Exp_increq_2") nil nil))
            nil))
          nil)
         nil shostak)
        (Exp_1-1 nil 3318698220
         ("" (skeep)
          (("" (case "0 <= e1")
            (("1" (case "e1 <= 0")
              (("1" (grind) nil nil)
               ("2" (rewrite "Exp_increq_2")
                (("2" (rewrite "expt_x0") (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "Exp_increq_2")
              (("2" (rewrite "expt_x0") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EqExpEq 0
        (EqExpEq-1 nil 3318696278
         ("" (skeep)
          (("" (case "e1 <= e2")
            (("1" (case "e2 <= e1")
              (("1" (grind) nil nil)
               ("2" (rewrite "Exp_increq_2") nil nil))
              nil)
             ("2" (rewrite "Exp_increq_2") nil nil))
            nil))
          nil)
         nil shostak))
       (expt_odd_TCC1 0
        (expt_odd_TCC1-1 nil 3319544683 ("" (subtype-tcc) nil nil) nil
         nil
         (expt_odd subtype "((number_fields.+)(float.n, 1))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (expt_odd 0
        (expt_odd-2 "" 3790102694
         ("" (induct "n")
          (("1" (grind-reals) nil nil)
           ("2" (rewrite "expt_x1") (("2" (grind-reals) nil nil)) nil)
           ("3" (skeep)
            (("3" (split 1)
              (("1" (skosimp*)
                (("1" (rewrite "expt_plus")
                  (("1" (grind-reals)
                    (("1" (rewrite "odd_times_odd_is_odd") nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (rewrite "expt_plus")
                  (("2" (lemma "even_or_odd")
                    (("2" (inst -1 "radix")
                      (("2" (flatten)
                        (("2" (case "even?(radix)")
                          (("1" (hide -2 -3 1)
                            (("1" (lemma "even_iff_not_odd")
                              (("1"
                                (inst -1 "(radix ^ (1 + j)) * radix")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "even?((radix ^ (1 + j)) * radix)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (rewrite
                                       "int_times_even_is_even")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (expt_odd-1 nil 3319544683
         ("" (induct "n")
          (("1" (grind-reals) (("1" (rewrite "expt_x1") nil nil)) nil)
           ("2" (rewrite "expt_x1") (("2" (grind-reals) nil nil)) nil)
           ("3" (skeep)
            (("3" (split 1)
              (("1" (skosimp*)
                (("1" (rewrite "expt_plus")
                  (("1" (rewrite "expt_x1")
                    (("1" (grind-reals)
                      (("1" (rewrite "odd_times_odd_is_odd") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (rewrite "expt_plus")
                  (("2" (rewrite "expt_x1")
                    (("2" (lemma "even_or_odd")
                      (("2" (inst -1 "radix")
                        (("2" (flatten)
                          (("2" (case "even?(radix)")
                            (("1" (hide -2 -3 1)
                              (("1"
                                (lemma "even_iff_not_odd")
                                (("1"
                                  (inst -1 "(radix ^ (1 + j)) * radix")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "even?((radix ^ (1 + j)) * radix)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (rewrite
                                         "int_times_even_is_even")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (expt_even 0
        (expt_even-2 "" 3790102696
         ("" (induct "n")
          (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)
           ("3" (skeep)
            (("3" (rewrite 1 "expt_plus")
              (("1"
                (rewrite "expt_plus" :subst
                 ("n0x" "radix" "i" "j+1" "j" "1"))
                (("1" (split 1)
                  (("1" (skosimp*)
                    (("1" (split -2)
                      (("1" (rewrite "even_times_int_is_even") nil nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (case-replace "1+j=j+1")
                      (("1" (hide -1)
                        (("1"
                          (case-replace
                           "even?((radix ^ (j + 1)) * radix)=NOT odd?((radix ^ (1 + j)) * radix)")
                          (("1"
                            (case-replace
                             "even?(radix)=NOT odd?(radix)")
                            (("1" (rewrite "odd_times_odd_is_odd")
                              (("1"
                                (lemma
                                 "odd_or_even_int"
                                 :subst
                                 ("x" "radix ^ (1 + j)"))
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "even_iff_not_odd" :subst
                               ("x" "radix"))
                              (("2" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (case-replace "1+j=j+1")
                            (("1"
                              (lemma "even_iff_not_odd" :subst
                               ("x" "((radix ^ (j + 1)) * radix)"))
                              (("1" (grind-reals) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (hide 2)
                  (("2" (case-replace "even?(radix)=NOT odd?(radix)")
                    (("1"
                      (case-replace
                       "even?(radix^(1+j))=NOT odd?(radix^(1+j))")
                      (("1" (case "odd?(radix ^ (1 + j))")
                        (("1"
                          (case-replace
                           "even?(radix^(2+j))=NOT odd?(radix^(2+j))")
                          (("1" (case-replace "2+j=1+(1+j)")
                            (("1" (rewrite "expt_plus")
                              (("1"
                                (rewrite "odd_times_odd_is_odd")
                                nil
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2"
                            (lemma "even_iff_not_odd" :subst
                             ("x" "radix ^ (2 + j)"))
                            (("2" (grind-reals) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2"
                        (lemma "even_iff_not_odd" :subst
                         ("x" "radix ^ (1 + j)"))
                        (("2" (grind-reals) nil nil)) nil))
                      nil)
                     ("2"
                      (lemma "even_iff_not_odd" :subst ("x" "radix"))
                      (("2" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (expt_even-1 nil 3319562624
         ("" (induct "n")
          (("1" (grind-reals) (("1" (rewrite "expt_x1") nil nil)) nil)
           ("2" (grind-reals) (("2" (rewrite "expt_x1") nil nil)) nil)
           ("3" (skeep)
            (("3" (rewrite 1 "expt_plus")
              (("1"
                (rewrite "expt_plus" :subst
                 ("n0x" "radix" "i" "j+1" "j" "1"))
                (("1" (rewrite "expt_x1")
                  (("1" (split 1)
                    (("1" (skosimp*)
                      (("1" (split -2)
                        (("1" (rewrite "even_times_int_is_even") nil
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (case-replace "1+j=j+1")
                        (("1" (hide -1)
                          (("1"
                            (case-replace
                             "even?((radix ^ (j + 1)) * radix)=NOT odd?((radix ^ (1 + j)) * radix)")
                            (("1"
                              (case-replace
                               "even?(radix)=NOT odd?(radix)")
                              (("1"
                                (rewrite "odd_times_odd_is_odd")
                                (("1"
                                  (lemma
                                   "odd_or_even_int"
                                   :subst
                                   ("x" "radix ^ (1 + j)"))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "even_iff_not_odd"
                                 :subst
                                 ("x" "radix"))
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil)
                             ("2" (case-replace "1+j=j+1")
                              (("1"
                                (lemma
                                 "even_iff_not_odd"
                                 :subst
                                 ("x" "((radix ^ (j + 1)) * radix)"))
                                (("1" (grind-reals) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (hide 2)
                  (("2" (case-replace "even?(radix)=NOT odd?(radix)")
                    (("1"
                      (case-replace
                       "even?(radix^(1+j))=NOT odd?(radix^(1+j))")
                      (("1" (case "odd?(radix ^ (1 + j))")
                        (("1"
                          (case-replace
                           "even?(radix^(2+j))=NOT odd?(radix^(2+j))")
                          (("1" (case-replace "2+j=1+(1+j)")
                            (("1" (rewrite "expt_plus")
                              (("1"
                                (rewrite "expt_x1")
                                (("1"
                                  (rewrite "odd_times_odd_is_odd")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2"
                            (lemma "even_iff_not_odd" :subst
                             ("x" "radix ^ (2 + j)"))
                            (("2" (grind-reals) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2"
                        (lemma "even_iff_not_odd" :subst
                         ("x" "radix ^ (1 + j)"))
                        (("2" (grind-reals) nil nil)) nil))
                      nil)
                     ("2"
                      (lemma "even_iff_not_odd" :subst ("x" "radix"))
                      (("2" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FoppCorrect 0
        (FoppCorrect-1 nil 3319368570
         ("" (skeep)
          (("" (expand* "FtoR" "Fopp") (("" (grind-reals) nil nil))
            nil))
          nil)
         nil shostak))
       (FoppFopp 0
        (FoppFopp-1 nil 3545043329
         ("" (grind) (("" (decompose-equality) nil nil)) nil) nil
         shostak))
       (Fopp_mult_left 0
        (Fopp_mult_left-1 nil 3545043536
         ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
       (Fopp_mult_right 0
        (Fopp_mult_right-1 nil 3545043574 ("" (grind) nil nil) nil
         shostak))
       (FabsCorrect 0
        (FabsCorrect-1 nil 3319889181
         ("" (skeep)
          (("" (expand* "Fabs" "FtoR")
            (("" (rewrite "abs_mult")
              (("" (expand "abs" 1 3) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FplusCorrect 0
        (FplusCorrect-1 nil 3319889234
         ("" (skeep)
          (("" (expand* "Fplus" "FtoR")
            (("" (rewrite "expt_div" :dir rl)
              (("" (rewrite "expt_div" :dir rl) (("" (field) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FplusAssociative 0
        (FplusAssociative-2 "" 3790102702
         ("" (expand "associative?")
          (("" (skeep)
            (("" (expand "Fplus" + 2)
              (("" (assert)
                (("" (expand "min")
                  (("" (assert)
                    (("" (lift-if)
                      (("" (ground)
                        (("1" (expand "Fplus" + 3)
                          (("1" (expand "min")
                            (("1" (lift-if)
                              (("1"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "Fplus" + 1)
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Fplus" + 1)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "expt_plus")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Fexp(x)-Fexp(y)"
                                                     "Fexp(y)-Fexp(z)"
                                                     "radix")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "Fplus" 2 1)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "Fplus" 2 1)
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "Fplus" 2 3)
                          (("2" (expand "min")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (expand "Fplus" 1 1)
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "Fplus")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "expt_plus")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Fexp(x)-Fexp(z)"
                                                     "Fexp(y)-Fexp(x)"
                                                     "radix")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "Fplus")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "expt_plus")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "Fexp(y)-Fexp(z)"
                                                     "Fexp(z)-Fexp(x)"
                                                     "radix")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fplus" 2 1)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "Fplus" 2 1)
                                        (("2"
                                          (expand "min")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "expt_plus")
                                              (("2"
                                                (inst
                                                 -
                                                 "Fexp(y)-Fexp(x)"
                                                 "Fexp(z)-Fexp(y)"
                                                 "radix")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FplusAssociative-1 nil 3545564973
         ("" (expand "associative?")
          (("" (skeep)
            (("" (expand "Fplus" + 2)
              (("" (assert)
                (("" (expand "min")
                  (("" (assert)
                    (("" (lift-if)
                      (("" (ground)
                        (("1" (expand "Fplus" + 3)
                          (("1" (expand "min")
                            (("1" (lift-if)
                              (("1"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "Fplus" + 1)
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Fplus" + 1)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "expt_plus")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Fexp(x)-Fexp(y)"
                                                     "Fexp(y)-Fexp(z)"
                                                     "radix")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use "expt_x0")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "Fplus" 2 1)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "Fplus" 2 1)
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use "expt_x0")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "Fplus" 2 3)
                          (("2" (expand "min")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (expand "Fplus" 1 1)
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "Fplus")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "expt_plus")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Fexp(x)-Fexp(z)"
                                                     "Fexp(y)-Fexp(x)"
                                                     "radix")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use "expt_x0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "Fplus")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "expt_plus")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "Fexp(y)-Fexp(z)"
                                                     "Fexp(z)-Fexp(x)"
                                                     "radix")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use "expt_x0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fplus" 2 1)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "Fplus" 2 1)
                                        (("2"
                                          (expand "min")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "expt_plus")
                                              (("2"
                                                (inst
                                                 -
                                                 "Fexp(y)-Fexp(x)"
                                                 "Fexp(z)-Fexp(y)"
                                                 "radix")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use "expt_x0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FmultAssociative 0
        (FmultAssociative-1 nil 3545572260 ("" (grind) nil nil) nil
         shostak))
       (FminusCorrect 0
        (FminusCorrect-1 nil 3319889348
         ("" (skeep)
          (("" (expand* "Fminus" "FtoR")
            (("" (rewrite "expt_div" :dir rl)
              (("" (rewrite "expt_div" :dir rl) (("" (field) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FmultCorrect 0
        (FmultCorrect-1 nil 3319889392
         ("" (skeep)
          (("" (expand* "Fmult" "FtoR")
            (("" (rewrite "expt_plus") (("" (field) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (Fmult_1_r 0
        (Fmult_1_r-2 "" 3790102704
         ("" (grind) (("" (decompose-equality) nil nil)) nil) nil
         shostak)
        (Fmult_1_r-1 nil 3545401225
         ("" (grind)
          (("" (decompose-equality)
            (("" (expand "divides")
              (("" (expand "divides")
                (("" (inst + "1") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fmult_1_l 0
        (Fmult_1_l-1 nil 3545401264
         ("" (grind) (("" (decompose-equality) nil nil)) nil) nil nil))
       (Fmult_2_r 0
        (Fmult_2_r-1 nil 3545401333 ("" (grind) nil nil) nil shostak))
       (Fmult_2_l 0
        (Fmult_2_l-1 nil 3545401340 ("" (grind) nil nil) nil shostak))
       (FDivKexpt_TCC1 0
        (FDivKexpt_TCC1-1 nil 3545654182 ("" (subtype-tcc) nil nil) nil
         nil
         (FDivKexpt subtype "float.i"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (FDivKexpt_TCC2 0
        (FDivKexpt_TCC2-1 nil 3545654182 ("" (subtype-tcc) nil nil) nil
         nil
         (FDivKexpt subtype "float.i"
          "{i: integers.int | booleans.OR(float.k /= 0, reals.>=(i, 0))}")))
       (FDivKexpt_TCC3 0
        (FDivKexpt_TCC3-2 nil 3697725215
         ("" (skeep)
          (("" (case "FORALL (ik,jk:int): integer_pred(ik*jk)")
            (("1" (inst?)
              (("1" (hide 2)
                (("1"
                  (case "FORALL (rp:nat): integer_pred((radix^rp)/(k^rp))")
                  (("1" (inst?) nil nil)
                   ("2" (hide 2)
                    (("2" (induct "rp")
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2"
                          (case "FORALL (ik,jk:int): integer_pred(ik*jk)")
                          (("1"
                            (case "(radix^(j+1))/(k^(j+1)) = (radix/k)*((radix^j/k^j))")
                            (("1" (replaces -1)
                              (("1"
                                (inst?)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (typepred "k")
                                    (("1"
                                      (expand "mod")
                                      (("1"
                                        (case
                                         "floor(radix/k) = radix/k")
                                        (("1"
                                          (replace -1 :dir rl)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "^" +)
                              (("2"
                                (expand "expt" + 1)
                                (("2"
                                  (expand "expt" + 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         nil nil
         (FDivKexpt subtype
          "number_fields.*(Fnum(float.f), (number_fields./((exponentiation.^(float.radix, float.i)), (exponentiation.^(float.k, float.i)))))"
          "int"))
        (FDivKexpt_TCC3-1 nil 3697724945 ("" (subtype-tcc) nil nil) nil
         nil
         (FDivKexpt subtype
          "number_fields.*(Fnum(float.f), (number_fields./((exponentiation.^(float.radix, float.i)), (exponentiation.^(float.k, float.i)))))"
          "int")))
       (FDivKexpt_def 0
        (FDivKexpt_def-1 nil 3545651846
         ("" (induct "i")
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "FDivKexpt")
                (("1" (assert)
                  (("1" (expand "FtoR")
                    (("1" (use "expt_x0") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2"
                (case "NOT FORALL (zd:nat): integer_pred((radix ^ (zd)) / (k ^ (zd)))")
                (("1" (hide (-1 2))
                  (("1" (induct "zd")
                    (("1" (grind) nil nil)
                     ("2" (skolem 1 "rk")
                      (("2" (flatten)
                        (("2"
                          (case "FORALL (ik,jk:int): integer_pred(ik*jk)")
                          (("1"
                            (inst - "(radix ^ rk) / (k ^ rk)"
                             "radix/k")
                            (("1" (expand "^")
                              (("1"
                                (expand "expt" +)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "k")
                                (("2"
                                  (expand "mod")
                                  (("2"
                                    (case "floor(radix/k) = radix/k")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (label "hyp1" -1)
                  (("2" (hide "hyp1")
                    (("2" (inst - "f" "k")
                      (("2" (expand "FDivKexpt")
                        (("2" (mult-by 1 "k")
                          (("1"
                            (case "FtoR(f) / k ^ (1 + j) * k = FtoR(f)/k^j")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "float_int_def")
                                      (("1"
                                        (inst - "k")
                                        (("1"
                                          (case
                                           "FORALL (aa:real): aa*k = aa*FtoR(float_int(k))")
                                          (("1"
                                            (rewrite -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma "FmultCorrect")
                                                (("1"
                                                  (rewrite -1 :dir rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "FtoR")
                                                        (("1"
                                                          (expand
                                                           "Fmult")
                                                          (("1"
                                                            (real-props)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "float_int")
                                                                (("1"
                                                                  (case
                                                                   "k^(1+j) = k*(k^j)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "expt_plus")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "1+j"
                                                                           "Fexp(f)-1-j"
                                                                           "radix")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "Fnum(f) * (k ^ j)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "Fexp(f)-j"
                                                                                       "j"
                                                                                       "radix")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "Fnum(f) * (k ^ j)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt"
                                                                         +
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal "hyp1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "FORALL (ik,jk:int): integer_pred(ik*jk)")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (reveal "hyp1")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "FORALL (ik,jk:int): integer_pred(ik*jk)")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma "float_int_def")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "^")
                              (("2"
                                (expand "expt" + 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (reveal "hyp1")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (case
                                   "FORALL (ik,jk:int): integer_pred(ik*jk)")
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (FabsBounded 0
        (FabsBounded-1 nil 3320082424
         ("" (skeep)
          (("" (expand* "Fbounded?" "Fabs")
            (("" (flatten)
              (("" (split)
                (("1" (grind-reals) nil nil) ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FabsCanonic 0
        (FabsCanonic-1 nil 3320082549
         ("" (skeep)
          (("" (expand "Fcanonic?")
            (("" (split)
              (("1" (case "Fnormal?(b)(Fabs(f))")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "Fnormal?")
                    (("2" (flatten)
                      (("2" (split)
                        (("1" (rewrite "FabsBounded") nil nil)
                         ("2" (expand "Fabs")
                          (("2" (expand "abs")
                            (("2" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "Fsubnormal?(b)(Fabs(f))")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "Fsubnormal?")
                    (("2" (flatten)
                      (("2" (split)
                        (("1" (rewrite "FabsBounded") nil nil)
                         ("2" (expand "Fabs") (("2" (propax) nil nil))
                          nil)
                         ("3" (expand "Fabs")
                          (("3" (expand "abs")
                            (("3" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (LeR0Fnum 0
        (LeR0Fnum-1 nil 3318679671
         ("" (skeep)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (LeFnumZERO 0
        (LeFnumZERO-1 nil 3318680805
         ("" (skosimp*)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (Lt0RFnum 0
        (Lt0RFnum-1 nil 3806169258
         ("" (skosimp*)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (LtZEROFnum 0
        (LtZEROFnum-1 nil 3806169271
         ("" (skosimp*)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (GtR0Fnum 0
        (GtR0Fnum-1 nil 3806673049
         ("" (skeep)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (GtFnumZERO 0
        (GtFnumZERO-1 nil 3806673069
         ("" (skeep)
          (("" (expand "FtoR") (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (FleCorrect 0
        (FleCorrect-1 nil 3319904574
         ("" (skeep)
          (("" (split)
            (("1" (skosimp*)
              (("1" (expand "Fle?")
                (("1" (case "FtoR(p) - FtoR(q) <= 0")
                  (("1" (assert) nil nil)
                   ("2" (rewrite "FminusCorrect" :dir rl)
                    (("2" (expand "FtoR") (("2" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "Fle?")
                (("2" (case "FtoR(Fminus(p, q)) <= 0")
                  (("1" (expand "FtoR") (("1" (grind-reals) nil nil))
                    nil)
                   ("2" (rewrite "FminusCorrect")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FtoR_monotonic 0
        (FtoR_monotonic-1 nil 3877613699
         ("" (skeep)
          (("" (expand "<=" 1 1) (("" (use "FleCorrect") nil nil))
            nil))
          nil)
         nil shostak))
       (rndf_monotone 0
        (rndf_monotone-1 nil 3681058028
         ("" (skeep)
          (("" (case "x=y")
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (typepred "round::(monotone?(b))")
              (("2" (expand "<=")
                (("2" (assert)
                  (("2" (expand "monotone?")
                    (("2" (inst?)
                      (("2" (inst -1 "RtoF(x)" "RtoF(y)")
                        (("2" (split -1)
                          (("1" (use "FleCorrect")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (typepred "RtoF")
                            (("3" (inst?) nil nil)) nil)
                           ("4" (typepred "RtoF")
                            (("4" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FltCorrect 0
        (FltCorrect-1 nil 3319904922
         ("" (skeep)
          (("" (split)
            (("1" (skosimp*)
              (("1" (expand "Flt?")
                (("1" (case "FtoR(Fminus(p, q)) < 0")
                  (("1" (rewrite "FminusCorrect")
                    (("1" (assert) nil nil)) nil)
                   ("2" (expand "FtoR") (("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (case "FtoR(Fminus(p, q)) < 0")
                (("1" (expand "FtoR")
                  (("1" (expand "Flt?") (("1" (grind-reals) nil nil))
                    nil))
                  nil)
                 ("2" (rewrite "FminusCorrect")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fle_transitive 0
        (Fle_transitive-1 nil 3747655310
         ("" (expand "transitive?")
          (("" (skeep)
            (("" (expand "<=")
              (("" (rewrite "FleCorrect")
                (("" (rewrite "FleCorrect")
                  (("" (rewrite "FleCorrect") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Flt_transitive 0
        (Flt_transitive-1 nil 3747666724
         ("" (expand "transitive?")
          (("" (skeep)
            (("" (expand "<")
              (("" (rewrite "FltCorrect")
                (("" (rewrite "FltCorrect")
                  (("" (rewrite "FltCorrect") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fle_neg_Flt 0
        (Fle_neg_Flt-1 nil 3747667012
         ("" (skeep)
          (("" (expand "<")
            (("" (expand "<=")
              (("" (rewrite "FleCorrect")
                (("" (rewrite "FltCorrect") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Flt_Fle_Flt 0
        (Flt_Fle_Flt-1 nil 3747667064
         ("" (skeep)
          (("" (expand "<")
            (("" (expand "<=")
              (("" (rewrite* "FleCorrect")
                (("" (rewrite* "FltCorrect") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (FminCorrect 0
        (FminCorrect-1 nil 3877711641
         ("" (skeep)
          (("" (expand "Fmin")
            (("" (lemma "FleCorrect")
              (("" (inst -1 "p" "q")
                (("" (rewrite -1)
                  (("" (expand "min") (("" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (FmaxCorrect 0
        (FmaxCorrect-1 nil 3320169183
         ("" (skeep)
          (("" (expand "Fmax")
            (("" (lemma "FleCorrect" :subst ("p" "p" "q" "q"))
              (("" (rewrite -1)
                (("" (expand "max") (("" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsubnormalUnique 0
        (FsubnormalUnique-1 nil 3318681540
         ("" (skosimp*)
          (("" (expand "FtoR")
            (("" (expand "Fsubnormal?")
              (("" (flatten)
                (("" (decompose-equality) (("" (grind-reals) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FnormalUnique 0
        (FnormalUnique-1 nil 3318683813
         ("" (skeep)
          (("" (expand* "Fnormal?" "Fbounded?" "FtoR")
            (("" (flatten)
              (("" (case-replace "Fexp(p)=Fexp(q)")
                (("1" (decompose-equality)
                  (("1" (grind-reals) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (case "Fexp(p)<Fexp(q)+1")
                    (("1" (case "Fexp(q)<Fexp(p)+1")
                      (("1" (hide -3 -4 -5 -6 -7 -8 -9)
                        (("1" (grind) nil nil)) nil)
                       ("2" (hide -1 2)
                        (("2" (rewrite "Exp_incr_2")
                          (("2" (hide 2)
                            (("2" (mult-by 1 "abs(Fnum(q))")
                              (("2"
                                (case-replace
                                 "abs(Fnum(q)) * radix ^ Fexp(q)=abs(Fnum(p)) * radix ^ Fexp(p)")
                                (("1"
                                  (rewrite "expt_plus")
                                  (("1"
                                    (cancel-by 1 "radix ^ Fexp(p)")
                                    (("1"
                                      (rewrite "abs_mult" -8)
                                      (("1"
                                        (expand "abs" -8 1)
                                        (("1"
                                          (use "expt_x1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -1 -2 -3 -4 -5 -6)
                                  (("2"
                                    (both-sides-f -1 "abs")
                                    (("2"
                                      (rewrite* ("abs_mult"))
                                      (("2"
                                        (expand "abs" -1 (2 4))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "Exp_incr_2")
                        (("2" (hide 2)
                          (("2" (mult-by 1 "abs(Fnum(p))")
                            (("2"
                              (case-replace
                               "abs(Fnum(p)) * radix ^ Fexp(p)=abs(Fnum(q)) * radix ^ Fexp(q)")
                              (("1"
                                (rewrite "expt_plus")
                                (("1"
                                  (cancel-by 1 "radix ^ Fexp(q)")
                                  (("1"
                                    (rewrite "abs_mult" -5)
                                    (("1"
                                      (expand "abs" -5 1)
                                      (("1"
                                        (use "expt_x1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-7 1))
                                (("2"
                                  (both-sides-f -1 "abs")
                                  (("2"
                                    (rewrite* ("abs_mult"))
                                    (("2"
                                      (expand "abs" -1 (2 4))
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (NormalAndSubNormalNotEq 0
        (NormalAndSubNormalNotEq-1 nil 3318856796
         ("" (skeep)
          (("" (case "abs(FtoR(q)) < abs (FtoR(p))")
            (("1" (assert) nil nil)
             ("2" (expand* "FtoR" "Fnormal?" "Fsubnormal?")
              (("2" (flatten)
                (("2" (hide -6)
                  (("2" (rewrite "abs_mult")
                    (("2" (expand "abs" 1 2)
                      (("2" (rewrite "abs_mult")
                        (("2" (expand "abs" 1 3)
                          (("2" (mult-by 1 "radix")
                            (("2"
                              (swap-group "abs(Fnum(q))" *
                               "radix ^ (Fexp(q))" "radix" r)
                              (("2"
                                (swap-group
                                 "abs(Fnum(p))"
                                 *
                                 "radix ^ (Fexp(p))"
                                 "radix"
                                 r)
                                (("2"
                                  (case
                                   "abs(Fnum(q)) * radix < abs(Fnum(p)) * radix"
                                   "radix ^ Fexp(q) <= radix ^ Fexp(p)")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (expand "Fbounded?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite -6)
                                          (("2"
                                            (rewrite "Exp_increq_1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (rewrite "abs_mult" -2)
                                      (("3"
                                        (rewrite "abs_mult" -5)
                                        (("3"
                                          (expand "abs" -2 1)
                                          (("3"
                                            (expand "abs" -5 1)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FcanonicUnique 0
        (FcanonicUnique-1 nil 3318616280
         ("" (skeep)
          (("" (expand "Fcanonic?")
            (("" (split)
              (("1" (split)
                (("1" (use "FnormalUnique") (("1" (assert) nil nil))
                  nil)
                 ("2" (use "NormalAndSubNormalNotEq")
                  (("2" (assert) nil nil)) nil))
                nil)
               ("2" (split)
                (("1" (lemma "NormalAndSubNormalNotEq")
                  (("1" (inst -1 "b" "q" "p") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (use "FsubnormalUnique") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fle_definition 0
        (Fle_definition-1 nil 3747667139
         ("" (skeep)
          (("" (expand "<")
            (("" (expand "<=")
              (("" (rewrite* "FleCorrect")
                (("" (rewrite* "FltCorrect")
                  (("" (iff)
                    (("" (split 1)
                      (("1" (flatten)
                        (("1" (expand "<=")
                          (("1" (assert)
                            (("1" (use "FcanonicUnique")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (FnormalizeCorrect 0
        (FnormalizeCorrect-1 nil 3319283991
         ("" (skeep) (("" (assert) nil nil)) nil) nil shostak))
       (FnormalizeCanonicFnum_TCC1 0
        (FnormalizeCanonicFnum_TCC1-1 nil 3698095010
         ("" (skeep)
          (("" (expand "Fcanonic?")
            (("" (expand "Fnormal?")
              (("" (expand "Fsubnormal?") (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (FnormalizeCanonicFnum subtype "float.p"
          "(float.Fbounded?(float.b))")))
       (FnormalizeCanonicFnum 0
        (FnormalizeCanonicFnum-1 nil 3675512267
         ("" (skeep)
          (("" (expand "Fcanonic?")
            (("" (split -1)
              (("1" (expand "Fnormal?")
                (("1" (flatten)
                  (("1" (expand "Fnormalize")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (expand "Fsubnormal?")
                (("2" (flatten)
                  (("2" (expand "Fnormalize")
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FulpCanonic 0
        (FulpCanonic-1 nil 3319375218
         ("" (skeep)
          (("" (expand "Fulp")
            (("" (case-replace "Fnormalize(b)(p)=p")
              (("" (hide 2)
                (("" (lemma "FcanonicUnique")
                  (("" (inst -1 "b" "Fnormalize(b)(p)" "p")
                    (("" (rewrite -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fulp_min 0
        (Fulp_min-1 nil 3683129470
         ("" (skeep)
          (("" (expand "Fulp")
            (("" (typepred "Fnormalize(b)(f)")
              (("" (name-replace "f_norm" "Fnormalize(b)(f)")
                (("" (use "FcanonicBounded")
                  (("" (assert)
                    (("" (expand "Fbounded?")
                      (("" (expand "min_Fulp")
                        (("" (flatten)
                          (("" (use "both_sides_expt_gt1_le")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Lexico 0
        (Lexico-2 "" 3790102742
         ("" (skeep)
          (("" (case "0<= Fnum(p)")
            (("1" (case "0<= Fnum(q)")
              (("1" (expand "Fcanonic?")
                (("1" (split)
                  (("1" (split)
                    (("1" (case "Fexp(p) < Fexp(q)+1")
                      (("1" (grind-reals) nil nil)
                       ("2" (hide 2)
                        (("2" (expand* "Fnormal?" "Fbounded?")
                          (("2" (flatten)
                            (("2" (hide -2 -3 -4 -5)
                              (("2"
                                (rewrite "abs_mult" -2)
                                (("2"
                                  (expand* "abs")
                                  (("2"
                                    (grind-reals)
                                    (("2"
                                      (rewrite "Exp_incr_2")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (mult-by 1 "Fnum(p)")
                                          (("2"
                                            (case-replace
                                             "radix ^ Fexp(p) * Fnum(p)= FtoR(p)")
                                            (("1"
                                              (case
                                               "FtoR(q)<radix ^ (1 + Fexp(q)) * Fnum(p)")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "FtoR")
                                                  (("2"
                                                    (rewrite
                                                     "expt_plus")
                                                    (("2"
                                                      (div-by
                                                       1
                                                       "radix ^ (Fexp(q))")
                                                      (("2"
                                                        (case-replace
                                                         "radix * radix ^ Fexp(q) * Fnum(p) / radix ^ (Fexp(q))=radix * Fnum(p)")
                                                        (("1"
                                                          (grind-reals)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "FtoR")
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (expand* "Fnormal?" "Fsubnormal?" "Fbounded?")
                      (("2" (flatten)
                        (("2" (rewrite "abs_mult")
                          (("2" (rewrite "abs_mult")
                            (("2" (expand* "abs")
                              (("2"
                                (grind-reals)
                                (("2"
                                  (flip-ineq -11)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (case "FtoR(q) < FtoR(p)")
                                      (("1" (grind-reals) nil nil)
                                       ("2"
                                        (hide 2 -10)
                                        (("2"
                                          (expand "FtoR")
                                          (("2"
                                            (case
                                             "Fnum(q) * radix ^ (Fexp(q)) <= Fnum(q) * radix ^ (Fexp(p))")
                                            (("1"
                                              (case
                                               "Fnum(q) * radix ^ (Fexp(p)) < Fnum(p) * radix ^ (Fexp(p))")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("1"
                                                  (name-replace
                                                   "AA"
                                                   "Fnum(q) * radix ^ (Fexp(q))")
                                                  (("1"
                                                    (name-replace
                                                     "BB"
                                                     "Fnum(q) * radix ^ (Fexp(p))")
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (cancel-by
                                                   1
                                                   "radix ^ (Fexp(p))")
                                                  (("2"
                                                    (mult-by 1 "radix")
                                                    (("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cancel-by 1 "Fnum(q)")
                                              (("2"
                                                (rewrite
                                                 "Exp_increq_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand* "Fsubnormal?" "Fnormal?" "Fbounded?")
                    (("2" (flatten) (("2" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 -3 2)
                (("2" (mult-by 1 "radix^Fexp(q)")
                  (("1" (expand "FtoR") (("1" (grind-reals) nil nil))
                    nil)
                   ("2" (grind-reals) nil nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2 -4 2)
              (("2" (expand "FtoR") (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak)
        (Lexico-1 nil 3319234645
         ("" (skeep)
          (("" (case "0<= Fnum(p)")
            (("1" (case "0<= Fnum(q)")
              (("1" (expand "Fcanonic?")
                (("1" (split)
                  (("1" (split)
                    (("1" (case "Fexp(p) < Fexp(q)+1")
                      (("1" (grind-reals) nil nil)
                       ("2" (hide 2)
                        (("2" (expand* "Fnormal?" "Fbounded?")
                          (("2" (flatten)
                            (("2" (hide -2 -3 -4 -5)
                              (("2"
                                (rewrite "abs_mult" -2)
                                (("2"
                                  (expand* "abs")
                                  (("2"
                                    (grind-reals)
                                    (("2"
                                      (rewrite "Exp_incr_2")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (mult-by 1 "Fnum(p)")
                                          (("2"
                                            (case-replace
                                             "radix ^ Fexp(p) * Fnum(p)= FtoR(p)")
                                            (("1"
                                              (case
                                               "FtoR(q)<radix ^ (1 + Fexp(q)) * Fnum(p)")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "FtoR")
                                                  (("2"
                                                    (rewrite
                                                     "expt_plus")
                                                    (("2"
                                                      (rewrite
                                                       "expt_x1")
                                                      (("2"
                                                        (div-by
                                                         1
                                                         "radix ^ (Fexp(q))")
                                                        (("2"
                                                          (case-replace
                                                           "radix * radix ^ Fexp(q) * Fnum(p) / radix ^ (Fexp(q))=radix * Fnum(p)")
                                                          (("1"
                                                            (grind-reals)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "FtoR")
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (expand* "Fnormal?" "Fsubnormal?" "Fbounded?")
                      (("2" (flatten)
                        (("2" (rewrite "abs_mult")
                          (("2" (rewrite "abs_mult")
                            (("2" (expand* "abs")
                              (("2"
                                (grind-reals)
                                (("2"
                                  (flip-ineq -11)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (case "FtoR(q) < FtoR(p)")
                                      (("1" (grind-reals) nil nil)
                                       ("2"
                                        (hide 2 -10)
                                        (("2"
                                          (expand "FtoR")
                                          (("2"
                                            (case
                                             "Fnum(q) * radix ^ (Fexp(q)) <= Fnum(q) * radix ^ (Fexp(p))")
                                            (("1"
                                              (case
                                               "Fnum(q) * radix ^ (Fexp(p)) < Fnum(p) * radix ^ (Fexp(p))")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("1"
                                                  (name-replace
                                                   "AA"
                                                   "Fnum(q) * radix ^ (Fexp(q))")
                                                  (("1"
                                                    (name-replace
                                                     "BB"
                                                     "Fnum(q) * radix ^ (Fexp(p))")
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (cancel-by
                                                   1
                                                   "radix ^ (Fexp(p))")
                                                  (("2"
                                                    (mult-by 1 "radix")
                                                    (("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cancel-by 1 "Fnum(q)")
                                              (("2"
                                                (rewrite
                                                 "Exp_increq_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand* "Fsubnormal?" "Fnormal?" "Fbounded?")
                    (("2" (flatten) (("2" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 -3 2)
                (("2" (mult-by 1 "radix^Fexp(q)")
                  (("1" (expand "FtoR") (("1" (grind-reals) nil nil))
                    nil)
                   ("2" (grind-reals) nil nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2 -4 2)
              (("2" (expand "FtoR") (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (CanonicLeastExp 0
        (CanonicLeastExp-1 nil 3319282878
         ("" (skeep)
          (("" (case-replace "p=Fnormalize(b)(q)")
            (("1" (hide -1 -2 -4) (("1" (assert) nil nil)) nil)
             ("2" (hide 2)
              (("2" (lemma "FcanonicUnique")
                (("2" (inst -1 "b" "p" "Fnormalize(b)(q)")
                  (("2" (rewrite -1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fast_canonic 0
        (Fast_canonic-1 nil 3319890253
         ("" (skeep)
          (("" (split)
            (("1" (case "vNum(b) <= abs(radix * Fnum(p))")
              (("1" (expand* "Fcanonic?" "Fnormal?")
                (("1" (assert) nil nil)) nil)
               ("2" (expand* "Fcanonic?" "Fsubnormal?")
                (("2" (assert) nil nil)) nil))
              nil)
             ("2" (expand* "Fcanonic?" "Fnormal?")
              (("2" (assert) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FulpOpp_TCC1 0
        (FulpOpp_TCC1-1 nil 3319817879
         ("" (skeep) (("" (rewrite "FoppBounded") nil nil)) nil) nil
         nil
         (FulpOpp subtype "float.Fopp(float.f)"
          "(float.Fbounded?(float.b))")))
       (FulpOpp 0
        (FulpOpp-1 nil 3319817880
         ("" (skeep)
          (("" (expand "Fulp")
            (("" (case "Fnormalize(b)(Fopp(f))=Fopp(Fnormalize(b)(f))")
              (("1" (rewrite -1)
                (("1" (expand "Fopp") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (rewrite "FcanonicUnique" :subst ("b" "b"))
                (("1"
                  (case "FtoR(Fnormalize(b)(Fopp(f)))= FtoR(Fopp(f))")
                  (("1" (rewrite -1)
                    (("1" (rewrite "FoppCorrect")
                      (("1" (rewrite "FoppCorrect")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (lemma "FcanonicOpp")
                  (("2" (inst -1 "b" "Fnormalize(b)(f)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FulpAbs_TCC1 0
        (FulpAbs_TCC1-1 nil 3320082088
         ("" (skeep) (("" (rewrite "FabsBounded") nil nil)) nil) nil
         nil
         (FulpAbs subtype "float.Fabs(float.f)"
          "(float.Fbounded?(float.b))")))
       (FulpAbs 0
        (FulpAbs-1 nil 3320082088
         ("" (skeep)
          (("" (expand "Fabs")
            (("" (expand "abs")
              (("" (grind-reals)
                (("1"
                  (case-replace
                   "(# Fnum := -Fnum(f), Fexp := Fexp(f) #)=Fopp(f)")
                  (("1" (rewrite "FulpOpp") nil nil)
                   ("2" (expand "Fopp") (("2" (propax) nil nil)) nil))
                  nil)
                 ("2"
                  (case-replace
                   "(# Fnum := Fnum(f), Fexp := Fexp(f) #)=f")
                  (("2" (decompose-equality) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FulpMonotone 0
        (FulpMonotone-1 nil 3320081916
         ("" (skeep)
          (("" (expand "Fulp")
            (("" (rewrite "Exp_increq_1")
              (("" (rewrite "Lexico" :subst ("b" "b")) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FulpMonotoneAbs 0
        (FulpMonotoneAbs-1 nil 3320082046
         ("" (skeep)
          (("" (rewrite "FulpAbs" :dir rl)
            (("" (rewrite "FulpAbs" :dir rl :subst ("f" "q"))
              (("" (rewrite "FulpMonotone")
                (("1" (rewrite "FabsCorrect")
                  (("1" (rewrite "FabsCorrect") nil nil)) nil)
                 ("2" (rewrite "FabsCorrect") (("2" (assert) nil nil))
                  nil)
                 ("3" (rewrite "FabsBounded") nil nil)
                 ("4" (rewrite "FabsBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FloatPlusUlpBounded 0
        (FloatPlusUlpBounded-2 "" 3790102750
         ("" (skeep)
          ((""
            (case "FORALL (b: Format, p: float):
        Fcanonic?(b)(p) =>
         (EXISTS (f: (Fbounded?(b))): FtoR(f) = FtoR(p) + Fulp(b)(p))")
            (("1" (inst -1 "b" "Fnormalize(b)(p)")
              (("1" (split)
                (("1" (skosimp*)
                  (("1" (inst 1 "f!1")
                    (("1" (case "FtoR(Fnormalize(b)(p))=FtoR(p)")
                      (("1"
                        (case " Fulp(b)(Fnormalize(b)(p))=Fulp(b)(p)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 -2 2)
                          (("2" (expand "Fulp")
                            (("2"
                              (rewrite "FcanonicUnique" :subst
                               ("b"
                                "b"
                                "p"
                                "Fnormalize(b)(Fnormalize(b)(p))"
                                "q"
                                "Fnormalize(b)(p)"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2 -1)
              (("2" (skosimp*)
                (("2"
                  (case "Fnum(p!1) = vNum(b!1)-1 OR Fnum(p!1) <= vNum(b!1)-2")
                  (("1" (split)
                    (("1"
                      (inst 1
                       "(# Fnum:=vNum(b!1)/radix, Fexp:=Fexp(p!1)+1 #)")
                      (("1" (rewrite "FulpCanonic")
                        (("1" (expand "FtoR")
                          (("1" (rewrite "expt_plus")
                            (("1" (field) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "Fbounded?")
                        (("2" (case "Fbounded?(b!1)(p!1)")
                          (("1" (expand "Fbounded?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (grind-reals)
                                    (("1"
                                      (div-by 1 "vNum(b!1)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "FcanonicBounded") nil nil))
                          nil))
                        nil)
                       ("3" (lemma "radix_div_vNum")
                        (("3" (inst -1 "b!1") nil nil)) nil))
                      nil)
                     ("2"
                      (inst 1
                       "(# Fnum:=Fnum(p!1)+1, Fexp:=Fexp(p!1) #)")
                      (("1" (rewrite "FulpCanonic")
                        (("1" (expand "FtoR") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "Fbounded?")
                        (("2" (case "Fbounded?(b!1)(p!1)")
                          (("1" (expand "Fbounded?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "FcanonicBounded") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "Fbounded?(b!1)(p!1)")
                    (("1" (expand "Fbounded?")
                      (("1" (flatten) (("1" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("2" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (rewrite "FcanonicBounded") nil nil)) nil))
            nil))
          nil)
         nil shostak)
        (FloatPlusUlpBounded-1 nil 3319810465
         ("" (skeep)
          ((""
            (case "FORALL (b: Format, p: float):
        Fcanonic?(b)(p) =>
         (EXISTS (f: (Fbounded?(b))): FtoR(f) = FtoR(p) + Fulp(b)(p))")
            (("1" (inst -1 "b" "Fnormalize(b)(p)")
              (("1" (split)
                (("1" (skosimp*)
                  (("1" (inst 1 "f!1")
                    (("1" (case "FtoR(Fnormalize(b)(p))=FtoR(p)")
                      (("1"
                        (case " Fulp(b)(Fnormalize(b)(p))=Fulp(b)(p)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 -2 2)
                          (("2" (expand "Fulp")
                            (("2"
                              (rewrite "FcanonicUnique" :subst
                               ("b"
                                "b"
                                "p"
                                "Fnormalize(b)(Fnormalize(b)(p))"
                                "q"
                                "Fnormalize(b)(p)"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2 -1)
              (("2" (skosimp*)
                (("2"
                  (case "Fnum(p!1) = vNum(b!1)-1 OR Fnum(p!1) <= vNum(b!1)-2")
                  (("1" (split)
                    (("1"
                      (inst 1
                       "(# Fnum:=vNum(b!1)/radix, Fexp:=Fexp(p!1)+1 #)")
                      (("1" (rewrite "FulpCanonic")
                        (("1" (expand "FtoR")
                          (("1" (rewrite "expt_plus")
                            (("1" (rewrite "expt_x1")
                              (("1" (field) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "Fbounded?")
                        (("2" (case "Fbounded?(b!1)(p!1)")
                          (("1" (expand "Fbounded?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (grind-reals)
                                    (("1"
                                      (div-by 1 "vNum(b!1)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "FcanonicBounded") nil nil))
                          nil))
                        nil)
                       ("3" (lemma "radix_div_vNum")
                        (("3" (inst -1 "b!1") nil nil)) nil))
                      nil)
                     ("2"
                      (inst 1
                       "(# Fnum:=Fnum(p!1)+1, Fexp:=Fexp(p!1) #)")
                      (("1" (rewrite "FulpCanonic")
                        (("1" (expand "FtoR") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "Fbounded?")
                        (("2" (case "Fbounded?(b!1)(p!1)")
                          (("1" (expand "Fbounded?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "FcanonicBounded") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "Fbounded?(b!1)(p!1)")
                    (("1" (expand "Fbounded?")
                      (("1" (flatten) (("1" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("2" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (rewrite "FcanonicBounded") nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FloatMinusUlpBounded 0
        (FloatMinusUlpBounded-1 nil 3319814672
         ("" (skeep)
          (("" (lemma "FloatPlusUlpBounded")
            (("" (inst -1 "b" "Fopp(p)")
              (("" (split)
                (("1" (skosimp*)
                  (("1" (inst 1 "Fopp(f!1)")
                    (("1" (rewrite "FoppCorrect")
                      (("1" (rewrite "FoppCorrect")
                        (("1" (rewrite -1)
                          (("1" (case "Fulp(b)(Fopp(p))=Fulp(b)(p)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "Fulp")
                                (("2"
                                  (case
                                   "Fnormalize(b)(Fopp(p))=Fopp(Fnormalize(b)(p))")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (expand "Fopp")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite
                                       "FcanonicUnique"
                                       :subst
                                       ("b" "b"))
                                      (("1"
                                        (case
                                         "FtoR(Fnormalize(b)(Fopp(p)))=FtoR(Fopp(p))")
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1"
                                              (rewrite "FoppCorrect")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "FcanonicOpp")
                                        (("2"
                                          (inst
                                           -1
                                           "b"
                                           "Fnormalize(b)(p)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "FoppBounded") nil nil))
                    nil))
                  nil)
                 ("2" (rewrite "FoppBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredFoppFsucc 0
        (FpredFoppFsucc-1 nil 3319211967
         ("" (skeep)
          (("" (expand* "Fpred" "Fopp" "Fsucc")
            (("" (grind-reals) nil nil)) nil))
          nil)
         nil shostak))
       (FsuccFoppFpred 0
        (FsuccFoppFpred-1 nil 3319212016
         ("" (skeep)
          (("" (expand* "Fsucc" "Fopp" "Fpred")
            (("" (grind-reals) nil nil)) nil))
          nil)
         nil shostak))
       (FsuccFpred 0
        (FsuccFpred-2 "" 3790102758
         ("" (skeep)
          (("" (expand* "Fpred" "Fsucc")
            (("" (grind-reals)
              (("1" (lemma "radix_less_vNum" :subst ("b" "b"))
                (("1" (hide -2 -3) (("1" (field -2) nil nil)) nil))
                nil)
               ("2" (apply-extensionality :hide? t) nil nil)
               ("3"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                nil nil)
               ("4" (decompose-equality 2)
                (("1" (grind) nil nil)
                 ("2" (replace -2 :dir rl :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil)
               ("5"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("5" (rewrite -2) (("5" (grind-reals) nil nil)) nil))
                nil)
               ("6" (decompose-equality 3) nil nil)
               ("7"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("7" (rewrite -2) (("7" (grind-reals) nil nil)) nil))
                nil)
               ("8"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("8" (flatten)
                  (("8" (case-replace "Fnum(f)=1-(vNum(b) / radix)")
                    (("1" (hide-all-but -3)
                      (("1" (rewrite "abs_mult")
                        (("1" (expand "abs")
                          (("1" (grind-reals)
                            (("1"
                              (lemma "radix_less_vNum" :subst
                               ("b" "b"))
                              (("1" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (decompose-equality 3) nil nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FsuccFpred-1 nil 3319298166
         ("" (skeep)
          (("" (expand* "Fpred" "Fsucc")
            (("" (grind-reals)
              (("1" (lemma "radix_less_vNum" :subst ("b" "b"))
                (("1" (hide -2 -3) (("1" (field -2) nil nil)) nil))
                nil)
               ("2" (apply-extensionality :hide? t) nil nil)
               ("3"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                nil nil)
               ("4" (decompose-equality 2)
                (("1" (rewrite "div_cancel4") (("1" (grind) nil nil))
                  nil)
                 ("2" (rewrite "div_cancel4")
                  (("2" (replace -2 :dir rl :hide? t)
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("5"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("5" (rewrite -2) (("5" (grind-reals) nil nil)) nil))
                nil)
               ("6" (decompose-equality 3) nil nil)
               ("7"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("7" (rewrite -2) (("7" (grind-reals) nil nil)) nil))
                nil)
               ("8"
                (expand* "Fcanonic?" "Fnormal?" "Fsubnormal?"
                 "Fbounded?")
                (("8" (flatten)
                  (("8" (case-replace "Fnum(f)=1-(vNum(b) / radix)")
                    (("1" (hide-all-but -3)
                      (("1" (rewrite "abs_mult")
                        (("1" (expand "abs")
                          (("1" (grind-reals)
                            (("1"
                              (lemma "radix_less_vNum" :subst
                               ("b" "b"))
                              (("1" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (decompose-equality 3) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredFsucc 0
        (FpredFsucc-1 nil 3319299927
         ("" (skeep)
          (("" (case "f=Fopp(Fopp(f))")
            (("1" (rewrite -1 :target-fnums 1)
              (("1" (rewrite "FsuccFoppFpred")
                (("1"
                  (rewrite "FpredFoppFsucc" :subst
                   ("f" "(Fpred(b)(Fopp(f)))"))
                  (("1" (rewrite "FsuccFpred")
                    (("1" (lemma "FcanonicOpp")
                      (("1" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (expand "Fopp")
                (("2" (decompose-equality) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredBounded 0
        (FpredBounded-1 nil 3320428258
         ("" (skeep)
          (("" (expand* "Fbounded?" "Fpred")
            (("" (grind-reals)
              (("1" (expand "abs" 1)
                (("1" (field 1)
                  (("1" (div-by 1 "vNum(b)") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "abs" 2) (("2" (assert) nil nil)) nil)
               ("3" (expand "abs") (("3" (grind-reals) nil nil)) nil)
               ("4" (expand "abs") (("4" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsuccBounded 0
        (FsuccBounded-1 nil 3320428394
         ("" (skeep)
          (("" (case-replace "Fsucc(b)(f)=Fopp(Fopp(Fsucc(b)(f)))")
            (("1" (rewrite "FoppBounded")
              (("1" (rewrite "FpredFoppFsucc" :dir rl)
                (("1" (rewrite "FpredBounded")
                  (("1" (rewrite "FoppBounded") nil nil)) nil))
                nil))
              nil)
             ("2" (expand "Fopp")
              (("2" (decompose-equality 1) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FsuccCanonic 0
        (FsuccCanonic-1 nil 3319233185
         ("" (skeep)
          (("" (lemma "FcanonicOpp")
            (("" (inst-cp -1 "b" "Fsucc(b)(f)")
              (("" (flatten)
                (("" (rewrite -3)
                  (("" (hide -2 -3 2)
                    (("" (lemma "FpredFoppFsucc")
                      (("" (inst -1 "b" "f")
                        (("" (case "Fcanonic?(b)(Fpred(b)(Fopp(f)))")
                          (("1" (assert) nil nil)
                           ("2" (rewrite "FpredCanonic")
                            (("2" (hide 2 3 -1)
                              (("2"
                                (inst -1 "b" "f")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredPos 0
        (FpredPos-1 nil 3319306101
         ("" (skeep)
          (("" (expand "FtoR")
            (("" (div-by -2 "radix ^ (Fexp(p))")
              (("" (case-replace "0 / radix ^ (Fexp(p))=0")
                (("1" (hide -1)
                  (("1" (expand "Fpred") (("1" (grind-reals) nil nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsuccPos 0
        (FsuccPos-1 nil 3319462089
         ("" (skeep)
          (("" (case "0 <=Fnum(p)")
            (("1" (case "0 < Fnum(Fsucc(b)(p))")
              (("1" (expand "FtoR" 1) (("1" (grind-reals) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "Fsucc")
                  (("2" (lift-if)
                    (("2" (split +)
                      (("1" (flatten) (("1" (cross-mult 1) nil nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "FtoR" -2) (("2" (grind-reals) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredDiff_TCC1 0
        (FpredDiff_TCC1-1 nil 3319375218
         ("" (skeep)
          (("" (rewrite "FcanonicBounded")
            (("" (rewrite "FpredCanonic") nil nil)) nil))
          nil)
         nil nil
         (FpredDiff subtype "float.Fpred(float.b)(float.f)"
          "(float.Fbounded?(float.b))")))
       (FpredDiff 0
        (FpredDiff-2 "" 3790102766
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("1" (expand* "FtoR" "Fpred")
              (("1" (grind-reals)
                (("1" (rewrite "expt_div" :dir rl)
                  (("1" (grind-reals) nil nil)) nil))
                nil))
              nil)
             ("2" (rewrite "FpredCanonic") nil nil))
            nil))
          nil)
         nil shostak)
        (FpredDiff-1 nil 3319375376
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("1" (expand* "FtoR" "Fpred")
              (("1" (grind-reals)
                (("1" (rewrite "expt_div" :dir rl)
                  (("1" (rewrite "expt_x1")
                    (("1" (grind-reals) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "FpredCanonic") nil nil))
            nil))
          nil)
         nil shostak))
       (FsuccDiff 0
        (FsuccDiff-1 nil 3319461787
         ("" (skeep)
          (("" (case "f=Fpred(b)(Fsucc(b)(f))")
            (("1" (case-replace "FtoR(f)=FtoR(Fpred(b)(Fsucc(b)(f)))")
              (("1"
                (case-replace
                 "Fulp(b)(f)=Fulp(b)(Fpred(b)(Fsucc(b)(f)))")
                (("1" (rewrite "FpredDiff")
                  (("1" (hide -1 -2 2)
                    (("1" (rewrite "FsuccPos") nil nil)) nil)
                   ("2" (rewrite "FsuccCanonic") nil nil))
                  nil)
                 ("2" (grind-reals) nil nil)
                 ("3" (rewrite -2 :dir rl)
                  (("3" (rewrite "FcanonicBounded") nil nil)) nil))
                nil)
               ("2" (grind-reals) nil nil))
              nil)
             ("2" (rewrite "FpredFsucc") nil nil))
            nil))
          nil)
         nil shostak))
       (FpredLt 0
        (FpredLt-2 "" 3790102768
         ("" (skeep)
          (("" (expand "Fpred")
            (("" (grind-reals)
              (("1" (expand "FtoR")
                (("1" (rewrite "expt_plus")
                  (("1" (rewrite -1) (("1" (field) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "FtoR")
                (("2"
                  (case-replace
                   "radix ^ (Fexp(f) - 1)=radix ^ (Fexp(f))/radix")
                  (("1" (hide -1 -3 1) (("1" (field) nil nil)) nil)
                   ("2" (hide -1 -2 2 3)
                    (("2" (lemma "expt_div")
                      (("2" (inst -1 "Fexp(f)" "1" "radix")
                        (("2" (rewrite "expt_x1" -1)
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1 2)
                (("3" (expand "FtoR") (("3" (grind-reals) nil nil))
                  nil))
                nil)
               ("4" (expand "FtoR")
                (("4" (hide 1 2) (("4" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FpredLt-1 nil 3319233508
         ("" (skeep)
          (("" (expand "Fpred")
            (("" (grind-reals)
              (("1" (expand "FtoR")
                (("1" (rewrite "expt_plus")
                  (("1" (rewrite "expt_x1")
                    (("1" (rewrite -1) (("1" (field) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "FtoR")
                (("2"
                  (case-replace
                   "radix ^ (Fexp(f) - 1)=radix ^ (Fexp(f))/radix")
                  (("1" (hide -1 -3 1)
                    (("1" (field) (("1" (grind-reals) nil nil)) nil))
                    nil)
                   ("2" (hide -1 -2 2 3)
                    (("2" (lemma "expt_div")
                      (("2" (inst -1 "Fexp(f)" "1" "radix")
                        (("2" (rewrite "expt_x1" -1)
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1 2)
                (("3" (expand "FtoR") (("3" (grind-reals) nil nil))
                  nil))
                nil)
               ("4" (expand "FtoR")
                (("4" (hide 1 2) (("4" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredLe_aux 0
        (FpredLe_aux-2 "" 3790102794
         ("" (skeep)
          ((""
            (case-replace
             "FtoR(Fpred(b)(p))=FtoR(p)-Fulp(b)(Fpred(b)(p))")
            (("1"
              (case-replace
               "FtoR(Fpred(b)(q))=FtoR(q)-Fulp(b)(Fpred(b)(q))")
              (("1" (rewrite "FulpCanonic")
                (("1" (rewrite "FulpCanonic")
                  (("1" (hide -1 -2)
                    (("1" (case "0<Fnum(p)")
                      (("1" (case "0<Fnum(q)")
                        (("1" (case "Fexp(p) <= Fexp(q)")
                          (("1" (expand "Fpred")
                            (("1" (grind-reals)
                              (("1"
                                (expand* "FtoR")
                                (("1"
                                  (rewrite "expt_div" :dir rl)
                                  (("1"
                                    (rewrite "expt_div" :dir rl)
                                    (("1"
                                      (field)
                                      (("1"
                                        (div-by 1 "vNum(b)-1")
                                        (("1"
                                          (case-replace
                                           "Fnum(p)=vNum(b)/radix")
                                          (("1"
                                            (case-replace
                                             "Fnum(q)=vNum(b)/radix")
                                            (("1"
                                              (case-replace
                                               "(vNum(b) / radix * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))) /
                                                                         (vNum(b) - 1)=radix ^ Fexp(p)")
                                              (("1"
                                                (case-replace
                                                 "(vNum(b) / radix * (radix ^ Fexp(q)) * radix - (radix ^ Fexp(q))) /
                                                                                (vNum(b) - 1)=radix ^ Fexp(q)")
                                                (("1"
                                                  (rewrite
                                                   "Exp_increq_1")
                                                  nil
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil)
                                               ("2" (field 1) nil nil))
                                              nil)
                                             ("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "Fcanonic?")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "Fnormal?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "abs_mult"
                                                     -2)
                                                    (("1"
                                                      (expand "abs" -2)
                                                      (("1"
                                                        (mult-by
                                                         2
                                                         "radix")
                                                        (("1"
                                                          (field 2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace
                                                 " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                                               = (vNum(b)-1)*radix ^ Fexp(p)")
                                                (("1"
                                                  (case
                                                   "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                  (("1"
                                                    (case
                                                     "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cancel-by
                                                       1
                                                       "radix ^ Fexp(q)")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-5 2 3))
                                                    (("2"
                                                      (case
                                                       "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (grind-reals)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "radix_div_vNum")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "b")
                                                            (("2"
                                                              (rewrite
                                                               "div_simple"
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (div-by
                                                                   -2
                                                                   "radix")
                                                                  (("2"
                                                                    (case-replace
                                                                     "vNum(b) / radix=k!1")
                                                                    (("1"
                                                                      (case
                                                                       "k!1 <= Fnum(q)-1")
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "radix")
                                                                        (("1"
                                                                          (grind-reals)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (div-by
                                                   1
                                                   "vNum(b) - 1")
                                                  (("2"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Fcanonic?" -5)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "Fnormal?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "abs_mult" -2)
                                        (("1"
                                          (expand "abs" -2)
                                          (("1"
                                            (expand "FtoR" 2)
                                            (("1"
                                              (rewrite
                                               "expt_div"
                                               :dir
                                               rl)
                                              (("1"
                                                (mult-by 2 "radix")
                                                (("1"
                                                  (field 2)
                                                  (("1"
                                                    (case-replace
                                                     " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                           = (vNum(b)-1)*radix ^ Fexp(p)")
                                                    (("1"
                                                      (case
                                                       "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                      (("1"
                                                        (case
                                                         "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                        (("1"
                                                          (grind-reals)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cancel-by
                                                           1
                                                           "radix ^ Fexp(q)")
                                                          (("2"
                                                            (hide-all-but
                                                             (-5 2 3))
                                                            (("2"
                                                              (case
                                                               "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "radix_div_vNum")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "b")
                                                                    (("2"
                                                                      (rewrite
                                                                       "div_simple"
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (div-by
                                                                           -2
                                                                           "radix")
                                                                          (("2"
                                                                            (case-replace
                                                                             "vNum(b) / radix=k!1")
                                                                            (("1"
                                                                              (case
                                                                               "k!1 <= Fnum(q)-1")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -1
                                                                                 "radix")
                                                                                (("1"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind-reals)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind-reals)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (div-by
                                                         1
                                                         "vNum(b) - 1")
                                                        (("2"
                                                          (rewrite
                                                           "Exp_increq_1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "Fsubnormal?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (case "Fbounded?(b)(p)")
                                (("1"
                                  (expand "Fbounded?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "-dExp(b) = Fexp(p)")
                                      (("1"
                                        (expand "abs" -2)
                                        (("1"
                                          (expand "FtoR" 2)
                                          (("1"
                                            (case
                                             "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                            (("1"
                                              (case
                                               "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil)
                                               ("2"
                                                (div-by
                                                 1
                                                 "radix ^ (Fexp(p))")
                                                (("2"
                                                  (case-replace
                                                   "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ (Fexp(p))
                           = Fnum(p)-1")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (field 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (case
                                                 "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                                (("1"
                                                  (case
                                                   "(vNum(b) - 2) * radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (div-by
                                                     1
                                                     "vNum(b) - 2")
                                                    (("2"
                                                      (rewrite
                                                       "Exp_increq_1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "expt_div"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "FcanonicBounded")
                                  nil
                                  nil))
                                nil)
                               ("4"
                                (case " Fexp(p)=-dExp(b)")
                                (("1"
                                  (case " Fexp(q)=-dExp(b)")
                                  (("1"
                                    (hide 1 2 -3)
                                    (("1"
                                      (expand* "FtoR")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (div-by
                                               -6
                                               "radix ^ -dExp(b)")
                                              (("1"
                                                (div-by
                                                 1
                                                 "radix ^ -dExp(b)")
                                                (("1"
                                                  (case-replace
                                                   "(Fnum(p) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                       = Fnum(p)-1")
                                                  (("1"
                                                    (case-replace
                                                     "(Fnum(q) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                         = Fnum(q)-1")
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (field 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (case "Fexp(p) = -dExp(b)")
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (split-ineq -2)
                                    (("1"
                                      (case "Fexp(p) < Fexp(q)")
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (case "Fbounded?(b)(p)")
                                          (("1"
                                            (expand "Fbounded?")
                                            (("1"
                                              (expand "abs" -1)
                                              (("1"
                                                (expand "Fcanonic?" -8)
                                                (("1"
                                                  (expand*
                                                   "Fnormal?"
                                                   "Fsubnormal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "abs_mult"
                                                       -9)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -9)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (expand
                                                             "FtoR"
                                                             2)
                                                            (("1"
                                                              (case
                                                               "(vNum(b)-2)* radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                              (("1"
                                                                (case
                                                                 "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (div-by
                                                                   1
                                                                   "radix ^ Fexp(p)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)
                             = Fnum(p)-1")
                                                                    (("1"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (case
                                                                   "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                                  (("1"
                                                                    (case
                                                                     "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (div-by
                                                                       1
                                                                       "vNum(b) - 2")
                                                                      (("2"
                                                                        (rewrite
                                                                         "Exp_increq_1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_div"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (div-by
                                                                         1
                                                                         "radix ^ Fexp(q)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                             = (vNum(b) - 2) / radix")
                                                                          (("1"
                                                                            (case-replace
                                                                             "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                               = Fnum(q)-1")
                                                                            (("1"
                                                                              (grind-reals)
                                                                              (("1"
                                                                                (case
                                                                                 "vNum(b)/radix +1 <= Fnum(q)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "radix_less_vNum")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "b")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -2
                                                                                         "radix")
                                                                                        (("1"
                                                                                          (field
                                                                                           -1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "radix_div_vNum")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "b")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "div_simple"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (case
                                                                                             "k!1 < Fnum(q)")
                                                                                            (("1"
                                                                                              (grind-reals)
                                                                                              (("1"
                                                                                                (field
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind-reals)
                                                                                              (("2"
                                                                                                (div-by
                                                                                                 -10
                                                                                                 "radix")
                                                                                                (("2"
                                                                                                  (div-by
                                                                                                   4
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (grind-reals)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (field
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (field
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "FcanonicBounded")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1"
                                      (flatten)
                                      (("1" (grind-reals) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (split-ineq -1)
                                (("1"
                                  (expand "FtoR" -8)
                                  (("1"
                                    (expand "Fcanonic?" -6)
                                    (("1"
                                      (expand*
                                       "Fnormal?"
                                       "Fsubnormal?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "abs_mult" -7)
                                          (("1"
                                            (expand "abs" -7)
                                            (("1"
                                              (replaces -1 -9)
                                              (("1"
                                                (expand*
                                                 "Fcanonic?"
                                                 "Fnormal?"
                                                 "Fsubnormal?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "abs_mult"
                                                     -5)
                                                    (("1"
                                                      (expand "abs" -5)
                                                      (("1"
                                                        (div-by
                                                         -9
                                                         "radix ^ (Fexp(q))")
                                                        (("1"
                                                          (mult-by
                                                           -9
                                                           "radix")
                                                          (("1"
                                                            (rewrite
                                                             -10)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                1))
                                                              (("1"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case " Fexp(p) < Fexp(q)")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (hide 1 -7)
                                      (("1"
                                        (expand "FtoR")
                                        (("1"
                                          (case
                                           "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                          (("1"
                                            (case
                                             "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ Fexp(p)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (div-by
                                               1
                                               "radix ^ Fexp(p)")
                                              (("2"
                                                (case-replace
                                                 "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                                (("1"
                                                  (case
                                                   "Fbounded?(b)(p)")
                                                  (("1"
                                                    (expand
                                                     "Fbounded?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "FcanonicBounded")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                    Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                            (("1"
                                              (case
                                               "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (div-by
                                                 1
                                                 "(vNum(b) - 2)")
                                                (("1"
                                                  (rewrite
                                                   "Exp_increq_1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (lemma
                                                     "radix_less_vNum")
                                                    (("2"
                                                      (inst -1 "b")
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (rewrite
                                                 "expt_div"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (div-by
                                                   1
                                                   "radix ^ Fexp(q)")
                                                  (("2"
                                                    (case-replace
                                                     "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                            = (vNum(b) - 2)/radix")
                                                    (("1"
                                                      (case-replace
                                                       "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q) / radix) /
                                    radix ^ Fexp(q)=Fnum(q) -1/radix")
                                                      (("1"
                                                        (field 1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (field 1)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (expand* "FtoR")
                                (("7"
                                  (case-replace "Fexp(q)=-dExp(b)")
                                  (("1"
                                    (case-replace "Fexp(p)=-dExp(b)")
                                    (("1" (grind-reals) nil nil)
                                     ("2"
                                      (case "Fbounded?(b)(p)")
                                      (("1"
                                        (expand "Fbounded?")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "FcanonicBounded")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "Fbounded?(b)(q)")
                                    (("1"
                                      (expand "Fbounded?")
                                      (("1"
                                        (flatten)
                                        (("1" (grind-reals) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FcanonicBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (split-ineq -1)
                                (("8"
                                  (case "Fexp(p) < Fexp(q)")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (expand "FtoR" 3)
                                      (("1"
                                        (case
                                         "(vNum(b)-2)*radix ^ Fexp(p)<= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                        (("1"
                                          (case
                                           "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (div-by
                                             1
                                             "radix ^ Fexp(p)")
                                            (("2"
                                              (case-replace
                                               "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                              (("1"
                                                (case
                                                 "Fbounded?(b)(p)")
                                                (("1"
                                                  (expand "Fbounded?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "abs" -1)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "FcanonicBounded")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (field) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                  Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                          (("1"
                                            (case
                                             "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (div-by 1 "vNum(b) - 2")
                                              (("1"
                                                (rewrite
                                                 "Exp_increq_1")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "radix_less_vNum")
                                                (("2"
                                                  (inst -1 "b")
                                                  (("2"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 5)
                                            (("2"
                                              (rewrite
                                               "expt_div"
                                               :dir
                                               rl)
                                              (("2"
                                                (div-by
                                                 1
                                                 "radix ^ Fexp(q)")
                                                (("2"
                                                  (case-replace
                                                   "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                          = (vNum(b) - 2)/radix")
                                                  (("1"
                                                    (case-replace
                                                     "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                           = Fnum(q)-1")
                                                    (("1"
                                                      (case
                                                       "vNum(b)/radix +1 <= Fnum(q)")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "radix")
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "radix")
                                                          (("1"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "radix_div_vNum")
                                                        (("2"
                                                          (inst -1 "b")
                                                          (("2"
                                                            (rewrite
                                                             "div_simple"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (case
                                                                 "k!1 < Fnum(q)")
                                                                (("1"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "Fcanonic?"
                                                                     -6)
                                                                    (("2"
                                                                      (expand*
                                                                       "Fnormal?"
                                                                       "Fsubnormal?")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "abs_mult"
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -2)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -3
                                                                                  1
                                                                                  3))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   -2)
                                                                                  (("1"
                                                                                    (div-by
                                                                                     -1
                                                                                     "radix")
                                                                                    (("1"
                                                                                      (div-by
                                                                                       2
                                                                                       "radix")
                                                                                      (("1"
                                                                                        (grind-reals)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "Fbounded?(b)(p)")
                                                                            (("1"
                                                                              (expand
                                                                               "Fbounded?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "FcanonicBounded")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (field 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "Lexico")
                              (("2"
                                (inst -1 "b" "p" "q")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "0<FtoR(q)")
                          (("1" (expand "FtoR" -1)
                            (("1" (grind-reals) nil nil)) nil)
                           ("2" (grind-reals) nil nil))
                          nil))
                        nil)
                       ("2" (expand "FtoR" -3)
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "FpredCanonic") nil nil))
                  nil)
                 ("2" (rewrite "FpredCanonic") nil nil))
                nil)
               ("2" (rewrite "FpredDiff" :dir rl)
                (("2" (assert) nil nil)) nil)
               ("3" (rewrite "FcanonicBounded")
                (("3" (rewrite "FpredCanonic") nil nil)) nil))
              nil)
             ("2" (rewrite "FpredDiff" :dir rl)
              (("2" (assert) nil nil)) nil)
             ("3" (rewrite "FcanonicBounded")
              (("3" (rewrite "FpredCanonic") nil nil)) nil))
            nil))
          nil)
         nil shostak)
        (FpredLe_aux-1 nil 3319391212
         ("" (skeep)
          ((""
            (case-replace
             "FtoR(Fpred(b)(p))=FtoR(p)-Fulp(b)(Fpred(b)(p))")
            (("1"
              (case-replace
               "FtoR(Fpred(b)(q))=FtoR(q)-Fulp(b)(Fpred(b)(q))")
              (("1" (rewrite "FulpCanonic")
                (("1" (rewrite "FulpCanonic")
                  (("1" (hide -1 -2)
                    (("1" (case "0<Fnum(p)")
                      (("1" (case "0<Fnum(q)")
                        (("1" (case "Fexp(p) <= Fexp(q)")
                          (("1" (expand "Fpred")
                            (("1" (grind-reals)
                              (("1"
                                (expand* "FtoR")
                                (("1"
                                  (rewrite "expt_div" :dir rl)
                                  (("1"
                                    (rewrite "expt_div" :dir rl)
                                    (("1"
                                      (rewrite "expt_x1")
                                      (("1"
                                        (field)
                                        (("1"
                                          (div-by 1 "vNum(b)-1")
                                          (("1"
                                            (case-replace
                                             "Fnum(p)=vNum(b)/radix")
                                            (("1"
                                              (case-replace
                                               "Fnum(q)=vNum(b)/radix")
                                              (("1"
                                                (case-replace
                                                 "(vNum(b) / radix * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))) /
                                                                         (vNum(b) - 1)=radix ^ Fexp(p)")
                                                (("1"
                                                  (case-replace
                                                   "(vNum(b) / radix * (radix ^ Fexp(q)) * radix - (radix ^ Fexp(q))) /
                                                                                (vNum(b) - 1)=radix ^ Fexp(q)")
                                                  (("1"
                                                    (rewrite
                                                     "Exp_increq_1")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (field)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (field 1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Fcanonic?")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "Fnormal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "abs_mult"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -2)
                                                        (("1"
                                                          (mult-by
                                                           2
                                                           "radix")
                                                          (("1"
                                                            (field 2)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace
                                                   " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                                               = (vNum(b)-1)*radix ^ Fexp(p)")
                                                  (("1"
                                                    (case
                                                     "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                    (("1"
                                                      (case
                                                       "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cancel-by
                                                         1
                                                         "radix ^ Fexp(q)")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 2 3))
                                                      (("2"
                                                        (case
                                                         "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (grind-reals)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "radix_div_vNum")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "b")
                                                              (("2"
                                                                (rewrite
                                                                 "div_simple"
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (div-by
                                                                     -2
                                                                     "radix")
                                                                    (("2"
                                                                      (case-replace
                                                                       "vNum(b) / radix=k!1")
                                                                      (("1"
                                                                        (case
                                                                         "k!1 <= Fnum(q)-1")
                                                                        (("1"
                                                                          (mult-by
                                                                           -1
                                                                           "radix")
                                                                          (("1"
                                                                            (grind-reals)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind-reals)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (div-by
                                                     1
                                                     "vNum(b) - 1")
                                                    (("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Fcanonic?" -5)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "Fnormal?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "abs_mult" -2)
                                        (("1"
                                          (expand "abs" -2)
                                          (("1"
                                            (expand "FtoR" 2)
                                            (("1"
                                              (rewrite
                                               "expt_div"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite "expt_x1")
                                                (("1"
                                                  (mult-by 2 "radix")
                                                  (("1"
                                                    (field 2)
                                                    (("1"
                                                      (case-replace
                                                       " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                           = (vNum(b)-1)*radix ^ Fexp(p)")
                                                      (("1"
                                                        (case
                                                         "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                        (("1"
                                                          (case
                                                           "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                          (("1"
                                                            (grind-reals)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (cancel-by
                                                             1
                                                             "radix ^ Fexp(q)")
                                                            (("2"
                                                              (hide-all-but
                                                               (-5
                                                                2
                                                                3))
                                                              (("2"
                                                                (case
                                                                 "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (grind-reals)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "radix_div_vNum")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "b")
                                                                      (("2"
                                                                        (rewrite
                                                                         "div_simple"
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (div-by
                                                                             -2
                                                                             "radix")
                                                                            (("2"
                                                                              (case-replace
                                                                               "vNum(b) / radix=k!1")
                                                                              (("1"
                                                                                (case
                                                                                 "k!1 <= Fnum(q)-1")
                                                                                (("1"
                                                                                  (mult-by
                                                                                   -1
                                                                                   "radix")
                                                                                  (("1"
                                                                                    (grind-reals)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind-reals)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (div-by
                                                           1
                                                           "vNum(b) - 1")
                                                          (("2"
                                                            (rewrite
                                                             "Exp_increq_1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "Fsubnormal?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (case "Fbounded?(b)(p)")
                                (("1"
                                  (expand "Fbounded?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "-dExp(b) = Fexp(p)")
                                      (("1"
                                        (expand "abs" -2)
                                        (("1"
                                          (expand "FtoR" 2)
                                          (("1"
                                            (case
                                             "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                            (("1"
                                              (case
                                               "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil)
                                               ("2"
                                                (div-by
                                                 1
                                                 "radix ^ (Fexp(p))")
                                                (("2"
                                                  (case-replace
                                                   "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ (Fexp(p))
                           = Fnum(p)-1")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (field 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (case
                                                 "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                                (("1"
                                                  (case
                                                   "(vNum(b) - 2) * radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (div-by
                                                     1
                                                     "vNum(b) - 2")
                                                    (("2"
                                                      (rewrite
                                                       "Exp_increq_1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "expt_div"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "expt_x1")
                                                      (("2"
                                                        (field 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "FcanonicBounded")
                                  nil
                                  nil))
                                nil)
                               ("4"
                                (case " Fexp(p)=-dExp(b)")
                                (("1"
                                  (case " Fexp(q)=-dExp(b)")
                                  (("1"
                                    (hide 1 2 -3)
                                    (("1"
                                      (expand* "FtoR")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (div-by
                                               -6
                                               "radix ^ -dExp(b)")
                                              (("1"
                                                (div-by
                                                 1
                                                 "radix ^ -dExp(b)")
                                                (("1"
                                                  (case-replace
                                                   "(Fnum(p) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                       = Fnum(p)-1")
                                                  (("1"
                                                    (case-replace
                                                     "(Fnum(q) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                         = Fnum(q)-1")
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (field 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (case "Fexp(p) = -dExp(b)")
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (split-ineq -2)
                                    (("1"
                                      (case "Fexp(p) < Fexp(q)")
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (case "Fbounded?(b)(p)")
                                          (("1"
                                            (expand "Fbounded?")
                                            (("1"
                                              (expand "abs" -1)
                                              (("1"
                                                (expand "Fcanonic?" -8)
                                                (("1"
                                                  (expand*
                                                   "Fnormal?"
                                                   "Fsubnormal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "abs_mult"
                                                       -9)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -9)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (expand
                                                             "FtoR"
                                                             2)
                                                            (("1"
                                                              (case
                                                               "(vNum(b)-2)* radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                              (("1"
                                                                (case
                                                                 "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (div-by
                                                                   1
                                                                   "radix ^ Fexp(p)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)
                             = Fnum(p)-1")
                                                                    (("1"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (case
                                                                   "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                                  (("1"
                                                                    (case
                                                                     "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (div-by
                                                                       1
                                                                       "vNum(b) - 2")
                                                                      (("2"
                                                                        (rewrite
                                                                         "Exp_increq_1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_div"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "expt_x1")
                                                                        (("2"
                                                                          (div-by
                                                                           1
                                                                           "radix ^ Fexp(q)")
                                                                          (("2"
                                                                            (case-replace
                                                                             "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                             = (vNum(b) - 2) / radix")
                                                                            (("1"
                                                                              (case-replace
                                                                               "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                               = Fnum(q)-1")
                                                                              (("1"
                                                                                (grind-reals)
                                                                                (("1"
                                                                                  (case
                                                                                   "vNum(b)/radix +1 <= Fnum(q)")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "radix_less_vNum")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "b")
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -2
                                                                                           "radix")
                                                                                          (("1"
                                                                                            (field
                                                                                             -1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "radix_div_vNum")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "b")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "div_simple"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (case
                                                                                               "k!1 < Fnum(q)")
                                                                                              (("1"
                                                                                                (grind-reals)
                                                                                                (("1"
                                                                                                  (field
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind-reals)
                                                                                                (("2"
                                                                                                  (div-by
                                                                                                   -10
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (div-by
                                                                                                     4
                                                                                                     "radix")
                                                                                                    (("2"
                                                                                                      (grind-reals)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (field
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (field
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "FcanonicBounded")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1"
                                      (flatten)
                                      (("1" (grind-reals) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (split-ineq -1)
                                (("1"
                                  (expand "FtoR" -8)
                                  (("1"
                                    (expand "Fcanonic?" -6)
                                    (("1"
                                      (expand*
                                       "Fnormal?"
                                       "Fsubnormal?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "abs_mult" -7)
                                          (("1"
                                            (expand "abs" -7)
                                            (("1"
                                              (replaces -1 -9)
                                              (("1"
                                                (expand*
                                                 "Fcanonic?"
                                                 "Fnormal?"
                                                 "Fsubnormal?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "abs_mult"
                                                     -5)
                                                    (("1"
                                                      (expand "abs" -5)
                                                      (("1"
                                                        (div-by
                                                         -9
                                                         "radix ^ (Fexp(q))")
                                                        (("1"
                                                          (mult-by
                                                           -9
                                                           "radix")
                                                          (("1"
                                                            (rewrite
                                                             -10)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                1))
                                                              (("1"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case " Fexp(p) < Fexp(q)")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (hide 1 -7)
                                      (("1"
                                        (expand "FtoR")
                                        (("1"
                                          (case
                                           "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                          (("1"
                                            (case
                                             "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ Fexp(p)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (div-by
                                               1
                                               "radix ^ Fexp(p)")
                                              (("2"
                                                (case-replace
                                                 "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                                (("1"
                                                  (case
                                                   "Fbounded?(b)(p)")
                                                  (("1"
                                                    (expand
                                                     "Fbounded?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "FcanonicBounded")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                    Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                            (("1"
                                              (case
                                               "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (div-by
                                                 1
                                                 "(vNum(b) - 2)")
                                                (("1"
                                                  (rewrite
                                                   "Exp_increq_1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (lemma
                                                     "radix_less_vNum")
                                                    (("2"
                                                      (inst -1 "b")
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (rewrite
                                                 "expt_div"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite "expt_x1")
                                                  (("2"
                                                    (div-by
                                                     1
                                                     "radix ^ Fexp(q)")
                                                    (("2"
                                                      (case-replace
                                                       "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                            = (vNum(b) - 2)/radix")
                                                      (("1"
                                                        (case-replace
                                                         "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q) / radix) /
                                    radix ^ Fexp(q)=Fnum(q) -1/radix")
                                                        (("1"
                                                          (field 1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (field 1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (expand* "FtoR")
                                (("7"
                                  (case-replace "Fexp(q)=-dExp(b)")
                                  (("1"
                                    (case-replace "Fexp(p)=-dExp(b)")
                                    (("1" (grind-reals) nil nil)
                                     ("2"
                                      (case "Fbounded?(b)(p)")
                                      (("1"
                                        (expand "Fbounded?")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "FcanonicBounded")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "Fbounded?(b)(q)")
                                    (("1"
                                      (expand "Fbounded?")
                                      (("1"
                                        (flatten)
                                        (("1" (grind-reals) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FcanonicBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (split-ineq -1)
                                (("8"
                                  (case "Fexp(p) < Fexp(q)")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (expand "FtoR" 3)
                                      (("1"
                                        (case
                                         "(vNum(b)-2)*radix ^ Fexp(p)<= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                        (("1"
                                          (case
                                           "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (div-by
                                             1
                                             "radix ^ Fexp(p)")
                                            (("2"
                                              (case-replace
                                               "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                              (("1"
                                                (case
                                                 "Fbounded?(b)(p)")
                                                (("1"
                                                  (expand "Fbounded?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "abs" -1)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "FcanonicBounded")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (field) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                  Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                          (("1"
                                            (case
                                             "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (div-by 1 "vNum(b) - 2")
                                              (("1"
                                                (rewrite
                                                 "Exp_increq_1")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "radix_less_vNum")
                                                (("2"
                                                  (inst -1 "b")
                                                  (("2"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 5)
                                            (("2"
                                              (rewrite
                                               "expt_div"
                                               :dir
                                               rl)
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (div-by
                                                   1
                                                   "radix ^ Fexp(q)")
                                                  (("2"
                                                    (case-replace
                                                     "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                          = (vNum(b) - 2)/radix")
                                                    (("1"
                                                      (case-replace
                                                       "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                           = Fnum(q)-1")
                                                      (("1"
                                                        (case
                                                         "vNum(b)/radix +1 <= Fnum(q)")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "radix")
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "radix")
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "radix_div_vNum")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "b")
                                                            (("2"
                                                              (rewrite
                                                               "div_simple"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (case
                                                                   "k!1 < Fnum(q)")
                                                                  (("1"
                                                                    (grind-reals)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "Fcanonic?"
                                                                       -6)
                                                                      (("2"
                                                                        (expand*
                                                                         "Fnormal?"
                                                                         "Fsubnormal?")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_mult"
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 -2)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    -3
                                                                                    1
                                                                                    3))
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -2)
                                                                                    (("1"
                                                                                      (div-by
                                                                                       -1
                                                                                       "radix")
                                                                                      (("1"
                                                                                        (div-by
                                                                                         2
                                                                                         "radix")
                                                                                        (("1"
                                                                                          (grind-reals)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (case
                                                                               "Fbounded?(b)(p)")
                                                                              (("1"
                                                                                (expand
                                                                                 "Fbounded?")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (grind-reals)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "FcanonicBounded")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field 1)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (field 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "Lexico")
                              (("2"
                                (inst -1 "b" "p" "q")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "0<FtoR(q)")
                          (("1" (expand "FtoR" -1)
                            (("1" (grind-reals) nil nil)) nil)
                           ("2" (grind-reals) nil nil))
                          nil))
                        nil)
                       ("2" (expand "FtoR" -3)
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "FpredCanonic") nil nil))
                  nil)
                 ("2" (rewrite "FpredCanonic") nil nil))
                nil)
               ("2" (rewrite "FpredDiff" :dir rl)
                (("2" (assert) nil nil)) nil)
               ("3" (rewrite "FcanonicBounded")
                (("3" (rewrite "FpredCanonic") nil nil)) nil))
              nil)
             ("2" (rewrite "FpredDiff" :dir rl)
              (("2" (assert) nil nil)) nil)
             ("3" (rewrite "FcanonicBounded")
              (("3" (rewrite "FpredCanonic") nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FpredLe_aux2 0
        (FpredLe_aux2-1 nil 3319461303
         ("" (skeep)
          (("" (case-replace "FtoR(Fsucc(b)(p))=FtoR(p)+Fulp(b)(p)")
            (("1" (case-replace "FtoR(Fsucc(b)(q))=FtoR(q)+Fulp(b)(q)")
              (("1" (case "Fulp(b)(p) <=Fulp(b)(q)")
                (("1" (grind-reals) nil nil)
                 ("2" (hide -1 -2 2)
                  (("2" (rewrite "FulpCanonic")
                    (("2" (rewrite "FulpCanonic")
                      (("2" (rewrite "Exp_increq_1")
                        (("2" (lemma "Lexico")
                          (("2" (inst -1 "b" "p" "q")
                            (("2" (rewrite -1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "FsuccDiff" :dir rl)
                (("2" (assert) nil nil)) nil)
               ("3" (rewrite "FcanonicBounded") nil nil))
              nil)
             ("2" (rewrite "FsuccDiff" :dir rl)
              (("2" (assert) nil nil)) nil)
             ("3" (rewrite "FcanonicBounded") nil nil))
            nil))
          nil)
         nil shostak))
       (FpredLe 0
        (FpredLe-1 nil 3319368741
         ("" (skeep)
          (("" (split)
            (("1" (skosimp)
              (("1" (case "0 < FtoR(p)")
                (("1" (rewrite "FpredLe_aux") nil nil)
                 ("2" (flip-ineq 1)
                  (("2" (case "FtoR(q)<=0")
                    (("1" (neg-formula 1)
                      (("1" (rewrite "FoppCorrect" :dir rl)
                        (("1" (rewrite "FoppCorrect" :dir rl)
                          (("1" (rewrite "FsuccFoppFpred" :dir rl)
                            (("1" (rewrite "FsuccFoppFpred" :dir rl)
                              (("1"
                                (rewrite "FpredLe_aux2")
                                (("1"
                                  (rewrite "FoppCorrect")
                                  (("1"
                                    (rewrite "FoppCorrect")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "FoppCorrect")
                                  (("2" (grind-reals) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "FcanonicOpp")
                                  (("3"
                                    (inst -1 "b" "p")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (lemma "FcanonicOpp")
                                  (("4"
                                    (inst -1 "b" "q")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flip-ineq 1)
                      (("2" (case "0 <= FtoR(Fpred(b)(q))")
                        (("1" (grind-reals)
                          (("1" (case "FtoR(Fpred(b)(p)) <= FtoR(p)")
                            (("1" (assert) nil nil)
                             ("2" (lemma "FpredLt")
                              (("2"
                                (inst -1 "b" "p")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "FpredPos") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (case "0 <= FtoR(Fpred(b)(p))")
                (("1"
                  (case-replace "FtoR(q)=FtoR(Fsucc(b)(Fpred(b)(q)))")
                  (("1"
                    (case-replace
                     "FtoR(p)=FtoR(Fsucc(b)(Fpred(b)(p)))")
                    (("1" (rewrite "FpredLe_aux2")
                      (("1" (rewrite "FpredCanonic") nil nil)
                       ("2" (rewrite "FpredCanonic") nil nil))
                      nil)
                     ("2" (rewrite "FsuccFpred") nil nil))
                    nil)
                   ("2" (rewrite "FsuccFpred") nil nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (case "0 <= FtoR(Fpred(b)(q))")
                    (("1" (case "FtoR(p) <= 0")
                      (("1" (case "FtoR(Fpred(b)(q))<= FtoR(q)")
                        (("1" (assert) nil nil)
                         ("2" (lemma "FpredLt")
                          (("2" (inst -1 "b" "q")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flip-ineq -2)
                        (("2" (flip-ineq 2)
                          (("2" (rewrite "FpredPos") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flip-ineq 1)
                      (("2" (neg-formula 1)
                        (("2" (rewrite "FoppCorrect" :dir rl)
                          (("2" (rewrite "FoppCorrect" :dir rl)
                            (("2"
                              (case-replace
                               "Fopp(q)=Fpred(b)(Fsucc(b)(Fopp(q)))")
                              (("1"
                                (case-replace
                                 "Fopp(p)=Fpred(b)(Fsucc(b)(Fopp(p)))")
                                (("1"
                                  (rewrite "FsuccFoppFpred")
                                  (("1"
                                    (rewrite "FsuccFoppFpred")
                                    (("1"
                                      (lemma "FpredLe_aux")
                                      (("1"
                                        (inst
                                         -1
                                         "b"
                                         "Fopp(Fpred(b)(q))"
                                         "Fopp(Fpred(b)(p))")
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1"
                                              (rewrite "FoppCorrect")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "FoppCorrect")
                                            (("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "FcanonicOpp")
                                            (("3"
                                              (inst
                                               -1
                                               "b"
                                               "Fpred(b)(p)")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (rewrite -1)
                                                  (("3"
                                                    (rewrite
                                                     "FpredCanonic")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lemma "FcanonicOpp")
                                            (("4"
                                              (inst
                                               -1
                                               "b"
                                               "Fpred(b)(q)")
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (rewrite -1)
                                                  (("4"
                                                    (rewrite
                                                     "FpredCanonic")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "FpredFsucc")
                                  (("2"
                                    (lemma "FcanonicOpp")
                                    (("2"
                                      (inst -1 "b" "p")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FpredFsucc")
                                (("2"
                                  (lemma "FcanonicOpp")
                                  (("2"
                                    (inst -1 "b" "q")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsuccLe 0
        (FsuccLe-1 nil 3319371174
         ("" (skeep)
          (("" (lemma "FpredLe")
            (("" (inst -1 "b" "Fsucc(b)(p)" "Fsucc(b)(q)")
              (("" (rewrite "FpredFsucc")
                (("" (rewrite "FpredFsucc")
                  (("" (rewrite -1)
                    (("1" (assert) nil nil)
                     ("2" (rewrite "FsuccCanonic") nil nil)
                     ("3" (rewrite "FsuccCanonic") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredProp_aux 0
        (FpredProp_aux-2 "" 3790102806
         ("" (skeep)
          (("" (case "Fexp(p) = Fexp(q) OR Fexp(p) < Fexp(q)")
            (("1" (split)
              (("1" (expand "FtoR" -5)
                (("1" (case-replace "Fexp(p) = Fexp(q)")
                  (("1" (div-by -5 "radix ^ Fexp(q)")
                    (("1"
                      (case "(Fnum(q)-1)*radix^(Fexp(q)) <= FtoR(Fpred(b)(q))")
                      (("1"
                        (case " FtoR(p) <= (Fnum(q) - 1) * radix ^ (Fexp(q))")
                        (("1" (grind-reals) nil nil)
                         ("2" (expand "FtoR" 1)
                          (("2" (replaces -2 1)
                            (("2" (div-by 1 "radix ^ Fexp(q)")
                              (("2"
                                (case-replace
                                 "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q))) / radix ^ Fexp(q)=Fnum(q)-1")
                                (("1" (grind-reals) nil nil)
                                 ("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (case "0<Fnum(q)")
                          (("1" (expand "Fpred")
                            (("1" (grind-reals)
                              (("1"
                                (expand "FtoR")
                                (("1"
                                  (rewrite "expt_div" :dir rl)
                                  (("1"
                                    (rewrite -2 :dir rl)
                                    (("1"
                                      (grind-reals)
                                      (("1"
                                        (div-by 1 "radix ^ Fexp(q)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "FtoR")
                                (("2" (grind-reals) nil nil))
                                nil)
                               ("3"
                                (expand "FtoR")
                                (("3" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "0 <= Fnum(p)")
                            (("1" (grind-reals) nil nil)
                             ("2" (expand "FtoR" -4)
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "(vNum(b)-1)*radix^(Fexp(q)-1) <= FtoR(Fpred(b)(q))")
                (("1"
                  (case "FtoR(p) <= (vNum(b) - 1) * radix ^ (Fexp(q) - 1)")
                  (("1" (grind-reals) nil nil)
                   ("2" (hide -1 -4 -6 2)
                    (("2" (expand "FtoR" 1)
                      (("2"
                        (case "Fnum(p) * radix ^ (Fexp(p)) <= Fnum(p) * radix ^ (Fexp(q)-1)")
                        (("1"
                          (case "Fnum(p) * radix ^ (Fexp(q) - 1) <= vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)")
                          (("1" (grind-reals) nil nil)
                           ("2" (hide 2 -1 -4)
                            (("2" (div-by 1 "radix ^ (Fexp(q) - 1)")
                              (("2"
                                (case-replace
                                 "(vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)) /
        radix ^ (Fexp(q) - 1)=vNum(b)-1")
                                (("1"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -2 -3 -4 -5)
                                        (("1" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (field) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (case "0 <= Fnum(p)")
                            (("1" (cancel-by 1 "Fnum(p)")
                              (("1" (rewrite "Exp_increq_1") nil nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "FtoR")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (case "0<Fnum(q)")
                    (("1" (expand* "FtoR" "Fpred")
                      (("1" (grind-reals)
                        (("1" (hide 2)
                          (("1" (case "Fbounded?(b)(p)")
                            (("1" (expand "Fbounded?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (rewrite "FcanonicBounded") nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "expt_div" :dir rl)
                          (("2" (div-by 2 "radix ^ Fexp(q)")
                            (("2"
                              (case-replace
                               "(vNum(b) * (radix ^ Fexp(q) / radix) - radix ^ Fexp(q) / radix) /
       radix ^ Fexp(q)=(vNum(b)-1)/radix")
                              (("1"
                                (case-replace
                                 "(Fnum(q) * radix ^ Fexp(q) - radix ^ Fexp(q)) / radix ^ Fexp(q)
= Fnum(q)-1")
                                (("1"
                                  (hide -1 -2)
                                  (("1"
                                    (expand "Fcanonic?" -4)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "Fnormal?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "abs_mult" -2)
                                            (("1"
                                              (expand "abs" -2)
                                              (("1"
                                                (hide -1 -4 -5 -6 -7)
                                                (("1"
                                                  (case
                                                   "vNum(b) < radix * Fnum(q)")
                                                  (("1"
                                                    (case
                                                     "integer_pred(vNum(b) / radix)")
                                                    (("1"
                                                      (div-by
                                                       -2
                                                       "radix")
                                                      (("1"
                                                        (case
                                                         "(vNum(b) - 1) / radix <= vNum(b) / radix")
                                                        (("1"
                                                          (case
                                                           "vNum(b) / radix <= Fnum(q) - 1")
                                                          (("1"
                                                            (grind-reals)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -4
                                                             -5
                                                             2
                                                             3)
                                                            (("2"
                                                              (lemma
                                                               "div_simple")
                                                              (("2"
                                                                (case
                                                                 "(EXISTS (k:int): vNum(b) = k * radix)")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (case-replace
                                                                     "vNum(b) / radix=k!1")
                                                                    (("1"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind-reals)
                                                      (("2"
                                                        (rewrite
                                                         "radix_div_vNum")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "Fsubnormal?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (case "Fbounded?(b)(p)")
                                            (("1"
                                              (expand "Fbounded?" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "FcanonicBounded")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (field) nil nil))
                                nil)
                               ("2" (field) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (mult-by 1 "radix ^ (Fexp(q))")
                      (("2" (expand "FtoR")
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind-reals) nil nil))
                nil))
              nil)
             ("2" (case "Fexp(p) <= Fexp(q)")
              (("1" (grind-reals) nil nil)
               ("2" (hide 2 3)
                (("2" (lemma "Lexico")
                  (("2" (inst -1 "b" "p" "q") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FpredProp_aux-1 nil 3319301588
         ("" (skeep)
          (("" (case "Fexp(p) = Fexp(q) OR Fexp(p) < Fexp(q)")
            (("1" (split)
              (("1" (expand "FtoR" -5)
                (("1" (case-replace "Fexp(p) = Fexp(q)")
                  (("1" (div-by -5 "radix ^ Fexp(q)")
                    (("1"
                      (case "(Fnum(q)-1)*radix^(Fexp(q)) <= FtoR(Fpred(b)(q))")
                      (("1"
                        (case " FtoR(p) <= (Fnum(q) - 1) * radix ^ (Fexp(q))")
                        (("1" (grind-reals) nil nil)
                         ("2" (expand "FtoR" 1)
                          (("2" (replaces -2 1)
                            (("2" (div-by 1 "radix ^ Fexp(q)")
                              (("2"
                                (case-replace
                                 "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q))) / radix ^ Fexp(q)=Fnum(q)-1")
                                (("1" (grind-reals) nil nil)
                                 ("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (case "0<Fnum(q)")
                          (("1" (expand "Fpred")
                            (("1" (grind-reals)
                              (("1"
                                (expand "FtoR")
                                (("1"
                                  (rewrite "expt_div" :dir rl)
                                  (("1"
                                    (rewrite "expt_x1")
                                    (("1"
                                      (rewrite -2 :dir rl)
                                      (("1"
                                        (grind-reals)
                                        (("1"
                                          (div-by 1 "radix ^ Fexp(q)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "FtoR")
                                (("2" (grind-reals) nil nil))
                                nil)
                               ("3"
                                (expand "FtoR")
                                (("3" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "0 <= Fnum(p)")
                            (("1" (grind-reals) nil nil)
                             ("2" (expand "FtoR" -4)
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "(vNum(b)-1)*radix^(Fexp(q)-1) <= FtoR(Fpred(b)(q))")
                (("1"
                  (case "FtoR(p) <= (vNum(b) - 1) * radix ^ (Fexp(q) - 1)")
                  (("1" (grind-reals) nil nil)
                   ("2" (hide -1 -4 -6 2)
                    (("2" (expand "FtoR" 1)
                      (("2"
                        (case "Fnum(p) * radix ^ (Fexp(p)) <= Fnum(p) * radix ^ (Fexp(q)-1)")
                        (("1"
                          (case "Fnum(p) * radix ^ (Fexp(q) - 1) <= vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)")
                          (("1" (grind-reals) nil nil)
                           ("2" (hide 2 -1 -4)
                            (("2" (div-by 1 "radix ^ (Fexp(q) - 1)")
                              (("2"
                                (case-replace
                                 "(vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)) /
        radix ^ (Fexp(q) - 1)=vNum(b)-1")
                                (("1"
                                  (case "Fbounded?(b)(p)")
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -2 -3 -4 -5)
                                        (("1" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "FcanonicBounded")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (field) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (case "0 <= Fnum(p)")
                            (("1" (cancel-by 1 "Fnum(p)")
                              (("1" (rewrite "Exp_increq_1") nil nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "FtoR")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (case "0<Fnum(q)")
                    (("1" (expand* "FtoR" "Fpred")
                      (("1" (grind-reals)
                        (("1" (hide 2)
                          (("1" (case "Fbounded?(b)(p)")
                            (("1" (expand "Fbounded?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (rewrite "FcanonicBounded") nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "expt_div" :dir rl)
                          (("2" (rewrite "expt_x1")
                            (("2" (div-by 2 "radix ^ Fexp(q)")
                              (("2"
                                (case-replace
                                 "(vNum(b) * (radix ^ Fexp(q) / radix) - radix ^ Fexp(q) / radix) /
       radix ^ Fexp(q)=(vNum(b)-1)/radix")
                                (("1"
                                  (case-replace
                                   "(Fnum(q) * radix ^ Fexp(q) - radix ^ Fexp(q)) / radix ^ Fexp(q)
= Fnum(q)-1")
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (expand "Fcanonic?" -4)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "Fnormal?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite "abs_mult" -2)
                                              (("1"
                                                (expand "abs" -2)
                                                (("1"
                                                  (hide -1 -4 -5 -6 -7)
                                                  (("1"
                                                    (case
                                                     "vNum(b) < radix * Fnum(q)")
                                                    (("1"
                                                      (case
                                                       "integer_pred(vNum(b) / radix)")
                                                      (("1"
                                                        (div-by
                                                         -2
                                                         "radix")
                                                        (("1"
                                                          (case
                                                           "(vNum(b) - 1) / radix <= vNum(b) / radix")
                                                          (("1"
                                                            (case
                                                             "vNum(b) / radix <= Fnum(q) - 1")
                                                            (("1"
                                                              (grind-reals)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -4
                                                               -5
                                                               2
                                                               3)
                                                              (("2"
                                                                (lemma
                                                                 "div_simple")
                                                                (("2"
                                                                  (case
                                                                   "(EXISTS (k:int): vNum(b) = k * radix)")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case-replace
                                                                       "vNum(b) / radix=k!1")
                                                                      (("1"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind-reals)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind-reals)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind-reals)
                                                        (("2"
                                                          (rewrite
                                                           "radix_div_vNum")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "Fsubnormal?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case "Fbounded?(b)(p)")
                                              (("1"
                                                (expand "Fbounded?" -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "FcanonicBounded")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (field) nil nil))
                                  nil)
                                 ("2" (field) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (mult-by 1 "radix ^ (Fexp(q))")
                      (("2" (expand "FtoR")
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind-reals) nil nil))
                nil))
              nil)
             ("2" (case "Fexp(p) <= Fexp(q)")
              (("1" (grind-reals) nil nil)
               ("2" (hide 2 3)
                (("2" (lemma "Lexico")
                  (("2" (inst -1 "b" "p" "q") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FpredProp 0
        (FpredProp-1 nil 3319214315
         ("" (skeep)
          (("" (case "0 <= FtoR(p)")
            (("1" (rewrite "FpredProp_aux") nil nil)
             ("2" (flip-ineq 1)
              (("2" (case "0 < FtoR(q)")
                (("1" (case "0 <=  FtoR(Fpred(b)(q))")
                  (("1" (grind-reals) nil nil)
                   ("2" (rewrite "FpredPos") nil nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (lemma "FsuccLe")
                    (("2" (inst -1 "b" "p" "Fpred(b)(q)")
                      (("2"
                        (case "FtoR(Fsucc(b)(p)) <= FtoR(Fsucc(b)(Fpred(b)(q)))")
                        (("1" (assert)
                          (("1" (rewrite "FpredCanonic") nil nil)) nil)
                         ("2" (hide -1 2)
                          (("2" (rewrite "FsuccFpred")
                            (("2" (neg-formula 1)
                              (("2"
                                (rewrite "FoppCorrect" :dir rl)
                                (("2"
                                  (rewrite "FoppCorrect" :dir rl)
                                  (("2"
                                    (rewrite "FpredFoppFsucc" :dir rl)
                                    (("2"
                                      (rewrite "FpredProp_aux")
                                      (("1"
                                        (rewrite "FoppCorrect")
                                        (("1"
                                          (rewrite "FoppCorrect")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "FoppCorrect")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (lemma "FcanonicOpp")
                                        (("3"
                                          (inst -1 "b" "p")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lemma "FcanonicOpp")
                                        (("4"
                                          (inst -1 "b" "q")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsuccLt 0
        (FsuccLt-2 nil 3566430744
         ("" (skeep)
          (("" (neg-formula 1)
            (("" (rewrite "FoppCorrect" :dir rl)
              (("" (rewrite "FoppCorrect" :dir rl)
                (("" (rewrite "FpredFoppFsucc" :dir rl)
                  (("" (rewrite "FpredLt") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil nil)
        (FsuccLt-1 nil 3319467246
         ("" (skeep)
          (("" (mult-by 1 "-1" -)
            (("" (field)
              (("" (rewrite "FoppCorrect" :dir rl)
                (("" (rewrite "FoppCorrect" :dir rl)
                  (("" (rewrite "FpredFoppFsucc" :dir rl)
                    (("" (rewrite "FpredLt") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FsuccProp 0
        (FsuccProp-1 nil 3319467325
         ("" (skeep)
          (("" (case "q=Fpred(b)(Fsucc(b)(q))")
            (("1" (replace -1 1)
              (("1" (rewrite "FpredProp")
                (("1" (hide 2)
                  (("1" (flip-ineq 1)
                    (("1" (flip-ineq -5)
                      (("1" (lemma "FsuccLe")
                        (("1" (inst -1 "b" "q" "p")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FsuccCanonic") nil nil)
                 ("3" (rewrite "FsuccCanonic") nil nil))
                nil))
              nil)
             ("2" (rewrite "FpredFsucc") nil nil))
            nil))
          nil)
         nil shostak))
       (FsuccZleEq_aux 0
        (FsuccZleEq_aux-1 nil 3319976732
         ("" (skeep) (("" (assert) nil nil)) nil) nil shostak))
       (FsuccZleEq 0
        (FsuccZleEq-2 "" 3790102812
         ("" (skeep)
          (("" (expand "Fsucc")
            (("" (grind-reals)
              (("1" (expand "FtoR")
                (("1" (div-by 1 "radix ^ (Fexp(p))")
                  (("1" (div-by -1 "radix ^ (Fexp(p))")
                    (("1" (div-by -3 "radix ^ (Fexp(p))")
                      (("1" (rewrite "expt_plus")
                        (("1"
                          (case-replace
                           " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))= Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                          (("1" (hide -1)
                            (("1"
                              (case-replace
                               " vNum(b) / radix * (radix * radix ^ Fexp(p)) / radix ^ (Fexp(p))=vNum(b)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (copy -3)
                                  (("1"
                                    (rewrite -3)
                                    (("1"
                                      (rewrite "FsuccZleEq_aux")
                                      (("1"
                                        (lemma "int_expt")
                                        (("1"
                                          (inst
                                           -1
                                           "Fexp(q) - Fexp(p)"
                                           "radix")
                                          (("1"
                                            (expand "^")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (field 1) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_div" :dir rl)
                            (("2" (field 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (expand "FtoR")
                  (("2" (rewrites -2)
                    (("2" (div-by -1 "radix ^ (Fexp(p))")
                      (("2" (div-by -3 "radix ^ (Fexp(p))")
                        (("2" (div-by 1 "radix ^ (Fexp(p))")
                          (("2"
                            (case-replace
                             "Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                            (("1" (hide -1)
                              (("1"
                                (rewrite
                                 "expt_div"
                                 :dir
                                 rl
                                 :subst
                                 ("j" "1"))
                                (("1"
                                  (case-replace
                                   "-(vNum(b) - 1) * (radix ^ Fexp(p) / radix) / radix ^ (Fexp(p))=(-vNum(b)+1)/radix")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (field -3)
                                      (("1"
                                        (rewrite "FsuccZleEq_aux")
                                        (("1"
                                          (expand "^")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "radix")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (field 1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "expt_div" :dir rl)
                              (("2" (field 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1 2)
                (("3" (expand "FtoR")
                  (("3" (div-by 1 "radix ^ (Fexp(p))")
                    (("3" (div-by -1 "radix ^ (Fexp(p))")
                      (("3" (div-by -2 "radix ^ (Fexp(p))")
                        (("3"
                          (case-replace
                           " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                          (("1" (hide -1)
                            (("1"
                              (case-replace
                               "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                                 Fnum(p)+1")
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "FsuccZleEq_aux")
                                  (("1"
                                    (expand "^")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (field 1) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_div" :dir rl)
                            (("2" (field 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 1 2)
                (("4" (expand "FtoR")
                  (("4" (div-by 1 "radix ^ (Fexp(p))")
                    (("4" (div-by -1 "radix ^ (Fexp(p))")
                      (("4" (div-by -2 "radix ^ (Fexp(p))")
                        (("4"
                          (case-replace
                           "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                       Fnum(p)+1")
                          (("1"
                            (case-replace
                             " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                            (("1" (hide -1 -2)
                              (("1"
                                (rewrite "FsuccZleEq_aux")
                                (("1"
                                  (expand "^")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "expt_div" :dir rl)
                              (("2" (field 1) nil nil)) nil))
                            nil)
                           ("2" (field 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FsuccZleEq-1 nil 3319973480
         ("" (skeep)
          (("" (expand "Fsucc")
            (("" (grind-reals)
              (("1" (expand "FtoR")
                (("1" (div-by 1 "radix ^ (Fexp(p))")
                  (("1" (div-by -1 "radix ^ (Fexp(p))")
                    (("1" (div-by -3 "radix ^ (Fexp(p))")
                      (("1" (rewrite "expt_plus")
                        (("1"
                          (case-replace
                           " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))= Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                          (("1" (hide -1)
                            (("1"
                              (case-replace
                               " vNum(b) / radix * (radix * radix ^ Fexp(p)) / radix ^ (Fexp(p))=vNum(b)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (copy -3)
                                  (("1"
                                    (rewrite -3)
                                    (("1"
                                      (rewrite "FsuccZleEq_aux")
                                      (("1"
                                        (lemma "int_expt")
                                        (("1"
                                          (inst
                                           -1
                                           "Fexp(q) - Fexp(p)"
                                           "radix")
                                          (("1"
                                            (expand "^")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "expt_x1")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (div-by
                                             -1
                                             "(radix * radix ^ Fexp(p))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (field 1) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_div" :dir rl)
                            (("2" (field 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (expand "FtoR")
                  (("2" (rewrites -2)
                    (("2" (div-by -1 "radix ^ (Fexp(p))")
                      (("2" (div-by -3 "radix ^ (Fexp(p))")
                        (("2" (div-by 1 "radix ^ (Fexp(p))")
                          (("2"
                            (case-replace
                             "Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                            (("1" (hide -1)
                              (("1"
                                (rewrite
                                 "expt_div"
                                 :dir
                                 rl
                                 :subst
                                 ("j" "1"))
                                (("1"
                                  (case-replace
                                   "-(vNum(b) - 1) * (radix ^ Fexp(p) / radix) / radix ^ (Fexp(p))=(-vNum(b)+1)/radix")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (field -3)
                                      (("1"
                                        (rewrite "FsuccZleEq_aux")
                                        (("1"
                                          (expand "^")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "radix")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "expt_x1")
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (div-by
                                                   -3
                                                   "(radix ^ Fexp(p))")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (field 1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "expt_div" :dir rl)
                              (("2" (field 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1 2)
                (("3" (expand "FtoR")
                  (("3" (div-by 1 "radix ^ (Fexp(p))")
                    (("3" (div-by -1 "radix ^ (Fexp(p))")
                      (("3" (div-by -2 "radix ^ (Fexp(p))")
                        (("3"
                          (case-replace
                           " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                          (("1" (hide -1)
                            (("1"
                              (case-replace
                               "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                                 Fnum(p)+1")
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "FsuccZleEq_aux")
                                  (("1"
                                    (expand "^")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (field 1) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_div" :dir rl)
                            (("2" (field 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 1 2)
                (("4" (expand "FtoR")
                  (("4" (div-by 1 "radix ^ (Fexp(p))")
                    (("4" (div-by -1 "radix ^ (Fexp(p))")
                      (("4" (div-by -2 "radix ^ (Fexp(p))")
                        (("4"
                          (case-replace
                           "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                       Fnum(p)+1")
                          (("1"
                            (case-replace
                             " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                            (("1" (hide -1 -2)
                              (("1"
                                (rewrite "FsuccZleEq_aux")
                                (("1"
                                  (expand "^")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "expt_div" :dir rl)
                              (("2" (field 1) nil nil)) nil))
                            nil)
                           ("2" (field 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenFsuccOdd_aux_TCC1 0
        (EvenFsuccOdd_aux_TCC1-1 nil 3321636413
         ("" (skeep)
          (("" (lemma "radix_div_vNum") (("" (inst?) nil nil)) nil))
          nil)
         nil nil
         (EvenFsuccOdd_aux subtype
          "number_fields./(float.vNum(float.b), float.radix)" "int")))
       (EvenFsuccOdd_aux 0
        (EvenFsuccOdd_aux-2 "" 3790102814
         ("" (skeep)
          (("" (case "vNum(b)=radix^Prec(b)")
            (("1" (replace -1)
              (("1" (lemma "expt_odd")
                (("1" (inst-cp -1 "Prec(b)-2")
                  (("1" (flatten)
                    (("1"
                      (case-replace
                       "radix ^ Prec(b) / radix=radix ^ (Prec(b) - 2 + 1)")
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (lemma "expt_odd")
                            (("1" (inst -1 "Prec(b)-1")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "even_iff_odd_succ")
                                  (("1"
                                    (inst -1 "radix ^ Prec(b) - 1")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (rewrite "expt_div" :dir rl) nil nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "vNum") (("2" (propax) nil nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil)
         nil shostak)
        (EvenFsuccOdd_aux-1 nil 3319547273
         ("" (skeep)
          (("" (case "vNum(b)=radix^Prec(b)")
            (("1" (replace -1)
              (("1" (lemma "expt_odd")
                (("1" (inst-cp -1 "Prec(b)-2")
                  (("1" (flatten)
                    (("1"
                      (case-replace
                       "radix ^ Prec(b) / radix=radix ^ (Prec(b) - 2 + 1)")
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (lemma "expt_odd")
                            (("1" (inst -1 "Prec(b)-1")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "even_iff_odd_succ")
                                  (("1"
                                    (inst -1 "radix ^ Prec(b) - 1")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (rewrite "expt_div" :dir rl)
                          (("2" (rewrite "expt_x1") nil nil)) nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "vNum") (("2" (propax) nil nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil)
         nil shostak))
       (EvenFsuccOdd 0
        (EvenFsuccOdd-1 nil 3319544211
         ("" (skeep)
          (("" (expand "Fsucc")
            (("" (grind-reals)
              (("1" (rewrite "EvenFsuccOdd_aux") nil nil)
               ("2" (rewrite "minus_odd_is_odd")
                (("2" (hide 2 3)
                  (("2" (lemma "EvenFsuccOdd_aux")
                    (("2" (inst -1 "b")
                      (("2" (lemma "odd_iff_not_even")
                        (("2" (inst -1 "vNum(b) - 1")
                          (("2" (case "NOT even?(vNum(b) - 1)")
                            (("1" (assert) nil nil)
                             ("2" (case "odd?(vNum(b) / radix)")
                              (("1"
                                (case "even?(vNum(b) / radix)")
                                (("1"
                                  (hide-all-but (-1 -2))
                                  (("1"
                                    (lemma "even_or_odd")
                                    (("1"
                                      (inst -1 "vNum(b) / radix")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "radix_div_vNum")
                                        (("2" (inst -1 "b") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (div-by -7 "radix")
                                  (("2"
                                    (replace -7 -6)
                                    (("2"
                                      (hide-all-but (-6 1))
                                      (("2"
                                        (lemma "minus_even_is_even")
                                        (("2"
                                          (case
                                           "vNum(b) / radix=-(-(vNum(b) / radix))")
                                          (("1"
                                            (replaces -1 1)
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "radix_div_vNum")
                                                  (("1"
                                                    (inst -1 "b")
                                                    (("1"
                                                      (rewrite
                                                       "integers.closed_neg")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3"
                                (lemma "radix_div_vNum")
                                (("3" (inst -1 "b") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "even_iff_odd_succ")
                (("3" (inst -1 " Fnum(p)") (("3" (assert) nil nil))
                  nil))
                nil)
               ("4" (lemma "even_iff_odd_succ")
                (("4" (inst -1 " Fnum(p)") (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (OddFsuccEven_aux_TCC1 0
        (OddFsuccEven_aux_TCC1-1 nil 3321636413
         ("" (skeep)
          (("" (lemma "radix_div_vNum") (("" (inst?) nil nil)) nil))
          nil)
         nil nil
         (OddFsuccEven_aux subtype
          "number_fields./(float.vNum(float.b), float.radix)" "int")))
       (OddFsuccEven_aux 0
        (OddFsuccEven_aux-2 "" 3790102816
         ("" (skeep)
          (("" (expand "vNum")
            ((""
              (case-replace
               "radix ^ Prec(b) / radix=radix ^ (Prec(b)-1)")
              (("1" (case "even?(radix ^ Prec(b))")
                (("1" (lemma "expt_even")
                  (("1" (inst-cp -1 "Prec(b)-2")
                    (("1" (inst -1 "Prec(b)-1")
                      (("1" (grind-reals) nil nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (lemma "odd_iff_even_succ")
                  (("2" (inst -1 "radix ^ Prec(b) - 1")
                    (("2" (grind-reals) nil nil)) nil))
                  nil))
                nil)
               ("2" (rewrite "expt_div" :dir rl) nil nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil)
         nil shostak)
        (OddFsuccEven_aux-1 nil 3319564626
         ("" (skeep)
          (("" (expand "vNum")
            ((""
              (case-replace
               "radix ^ Prec(b) / radix=radix ^ (Prec(b)-1)")
              (("1" (case "even?(radix ^ Prec(b))")
                (("1" (lemma "expt_even")
                  (("1" (inst-cp -1 "Prec(b)-2")
                    (("1" (inst -1 "Prec(b)-1")
                      (("1" (grind-reals) nil nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (lemma "odd_iff_even_succ")
                  (("2" (inst -1 "radix ^ Prec(b) - 1")
                    (("2" (grind-reals) nil nil)) nil))
                  nil))
                nil)
               ("2" (rewrite "expt_div" :dir rl)
                (("2" (rewrite "expt_x1") nil nil)) nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (OddFsuccEven 0
        (OddFsuccEven-1 nil 3319562322
         ("" (skeep)
          (("" (expand "Fsucc")
            (("" (grind-reals)
              (("1" (rewrite "OddFsuccEven_aux") nil nil)
               ("2" (lemma "OddFsuccEven_aux")
                (("2" (rewrite "minus_even_is_even")
                  (("2" (case "odd?((vNum(b) / radix))")
                    (("1" (hide -4 2 3)
                      (("1"
                        (case-replace
                         "even?((vNum(b) - 1))= NOT odd?((vNum(b) - 1))")
                        (("1"
                          (case-replace
                           "odd?((vNum(b) / radix))=NOT even?((vNum(b) / radix))")
                          (("1" (inst? -4) (("1" (assert) nil nil))
                            nil)
                           ("2"
                            (lemma "odd_iff_not_even" :subst
                             ("x" "(vNum(b) / radix)"))
                            (("2" (grind-reals) nil nil)) nil))
                          nil)
                         ("2"
                          (lemma "even_iff_not_odd" :subst
                           ("x" "(vNum(b) - 1)"))
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (div-by -4 "radix")
                      (("2" (replace -4 -3)
                        (("2" (hide-all-but (-3 1))
                          (("2"
                            (case "(vNum(b) / radix)=-(-(vNum(b) / radix))")
                            (("1" (replaces -1 1)
                              (("1"
                                (rewrite "minus_odd_is_odd")
                                (("1"
                                  (rewrite "integers.closed_neg")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "radix_div_vNum")
                      (("3" (inst -1 "b") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "odd_iff_even_succ" :subst ("x" "Fnum(p)"))
                (("3" (assert) nil nil)) nil)
               ("4" (lemma "odd_iff_even_succ" :subst ("x" "Fnum(p)"))
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (MinOppMax 0
        (MinOppMax-1 nil 3319384478
         ("" (expand* "isMin?" "isMax?")
          (("" (skeep)
            (("" (rewrite "FoppCorrect")
              (("" (split)
                (("1" (grind-reals) nil nil)
                 ("2" (skosimp*)
                  (("2" (case "FtoR(Fopp(f!1)) <= FtoR(p)")
                    (("1" (rewrite "FoppCorrect")
                      (("1" (grind-reals) nil nil)) nil)
                     ("2" (hide 2)
                      (("2" (rewrite -4)
                        (("1" (rewrite "FoppCorrect")
                          (("1" (grind-reals) nil nil)) nil)
                         ("2" (rewrite "FoppBounded") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (MaxOppMin 0
        (MaxOppMin-1 nil 3319384878
         ("" (expand* "isMin?" "isMax?")
          (("" (skeep)
            (("" (rewrite "FoppCorrect")
              (("" (split)
                (("1" (grind-reals) nil nil)
                 ("2" (skosimp*)
                  (("2" (case "FtoR(p) <= FtoR(Fopp(f!1))")
                    (("1" (rewrite "FoppCorrect")
                      (("1" (grind-reals) nil nil)) nil)
                     ("2" (rewrite -4)
                      (("1" (rewrite "FoppCorrect")
                        (("1" (grind-reals) nil nil)) nil)
                       ("2" (rewrite "FoppBounded") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZeroFopp 0
        (ToZeroFopp-1 nil 3877758521
         ("" (expand "rounded_opp?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "ToZero?")
                (("" (case "r=0")
                  (("1" (replace -1 :hide? t)
                    (("1" (assert)
                      (("1" (expand "isMin?")
                        (("1" (rewrite "FoppCorrect")
                          (("1" (flatten)
                            (("1"
                              (inst -2 "(# Fnum := 0 , Fexp := 1 #)")
                              (("1"
                                (case
                                 "FtoR((# Fnum := 0, Fexp := 1 #))=0")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "FtoR(p)=0")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "FtoR")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "Fbounded?")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground)
                    (("1" (use "MinOppMax") (("1" (assert) nil nil))
                      nil)
                     ("2" (use "MaxOppMin") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestFopp 0
        (ClosestFopp-1 nil 3319817491
         ("" (skeep)
          (("" (expand "Closest?")
            (("" (skosimp*)
              (("" (inst -2 "Fopp(f!1)")
                (("1" (rewrite "FoppCorrect")
                  (("1" (rewrite "FoppCorrect")
                    (("1" (expand "abs") (("1" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FoppBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosestFopp_TCC1 0
        (EvenClosestFopp_TCC1-1 nil 3675510650
         ("" (skeep)
          (("" (use "FcanonicOpp")
            (("" (replace -1 :hide? t)
              (("" (use "FcanonicBounded") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (EvenClosestFopp subtype "float.Fopp(float.p)"
          "(float.Fbounded?(float.b))")))
       (EvenClosestFopp 0
        (EvenClosestFopp-1 nil 3675497929
         ("" (skeep)
          (("" (expand "EvenClosest?")
            (("" (split 1)
              (("1" (use "ClosestFopp")
                (("1" (split -1)
                  (("1" (propax) nil nil) ("2" (flatten) nil nil)
                   ("3" (expand "Fcanonic?")
                    (("3" (expand "Fnormal?")
                      (("3" (expand "Fsubnormal?")
                        (("3" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (case "even?(Fnum(Fnormalize(b)(p)))")
                  (("1" (hide-all-but (-1 -2 1))
                    (("1" (use "FnormalizeCanonicFnum")
                      (("1" (assert)
                        (("1" (replace -1 :hide? t)
                          (("1" (use "FcanonicOpp")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (use "FnormalizeCanonicFnum")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (expand "even?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "-j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "Fopp")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (use "FoppCorrect")
                      (("2" (replace -1 :hide? t)
                        (("2" (skeep)
                          (("2" (inst -4 "Fopp(f)")
                            (("1" (split -4)
                              (("1"
                                (use "FoppCorrect")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but (1 -1))
                                (("2"
                                  (expand "Closest?")
                                  (("2"
                                    (skolem 1 "g")
                                    (("2"
                                      (use "FoppCorrect")
                                      (("2"
                                        (replace -1 :hide? t)
                                        (("2"
                                          (inst -1 "Fopp(g)")
                                          (("1"
                                            (use "FoppCorrect")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (case
                                                 "FORALL(x,y:real): abs(-x - -y) = abs(x - y)")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "FtoR(f)"
                                                   "-r")
                                                  (("1"
                                                    (replace
                                                     -2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "FtoR(g)"
                                                       "r")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "FoppBounded")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "FoppBounded")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RleRoundedR0 0
        (RleRoundedR0-1 nil 3319477344
         ("" (skosimp*)
          (("" (expand "RoundedMode?")
            (("" (expand "MinOrMax?")
              (("" (flatten)
                (("" (inst -4 "r!1" "f!1")
                  (("" (split)
                    (("1" (expand "isMin?")
                      (("1" (flatten)
                        (("1" (inst -2 "(# Fnum:=0, Fexp:=0 #)")
                          (("1" (expand "FtoR")
                            (("1" (grind-reals) nil nil)) nil)
                           ("2" (expand "Fbounded?")
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "isMax?")
                      (("2" (flatten) (("2" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (rle_rounded_r0 0
        (rle_rounded_r0-1 nil 3681746559
         ("" (skeep)
          (("" (expand "rounded_mode?")
            (("" (expand "min_or_max?")
              (("" (flatten)
                (("" (inst -4 "r" "f")
                  (("" (split)
                    (("1" (expand "isMin?")
                      (("1" (flatten)
                        (("1" (inst -2 "(# Fnum:=0, Fexp:=0 #)")
                          (("1" (expand "FtoR")
                            (("1" (grind-reals) nil nil)) nil)
                           ("2" (expand "Fbounded?")
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "isMax?")
                      (("2" (flatten) (("2" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RleRoundedLessR0 0
        (RleRoundedLessR0-1 nil 3319477534
         ("" (skosimp*)
          (("" (expand "RoundedMode?")
            (("" (expand "MinOrMax?")
              (("" (flatten)
                (("" (inst -4 "r!1" "f!1")
                  (("" (split)
                    (("1" (expand "isMin?")
                      (("1" (flatten) (("1" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("2" (expand "isMax?")
                      (("2" (flatten)
                        (("2" (inst -2 "(# Fnum:=0, Fexp:=0 #)")
                          (("1" (expand "FtoR")
                            (("1" (grind-reals) nil nil)) nil)
                           ("2" (expand "Fbounded?")
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ulp_generic_monotone 0
        (ulp_generic_monotone-1 nil 3877710026
         (""
          (then (skeep) (expand "ulp") (use "FulpMonotone") (assert)
           (spread (split -1)
            ((then (hide 2) (use "FleCorrect")
              (replace -1 :hide? t :dir rl) (lemma "rndf_monotone")
              (inst? -1 :where -3)
              (spread (inst?)
               ((then (assert) (expand "<=") (propax))
                (then (typepred "round") (expand "rounded_mode?")
                 (flatten)))))
             (then (lemma "rle_rounded_r0") (inst? -1 :where -2)
              (inst? -1 :where 1) (inst?) (inst?)
              (spread (split -1)
               ((then (propax))
                (then (typepred "r::RNDF(b,round)") (inst -1 "x")
                 (assert))
                (then (assert))
                (then (typepred "r::RNDF(b,round)") (inst -1 "x"))
                (then (propax))))))))
          nil nil)
         nil shostak))
       (RND_aux_le 0
        (RND_aux_le-1 nil 3319375968
         ("" (skeep)
          (("" (rewrite "RND_aux_alt_def")
            (("" (expand "RND_aux_alt")
              (("" (grind-reals)
                (("1" (expand "FtoR")
                  (("1"
                    (case "floor(x * radix ^ (dExp(b))) * radix ^ -dExp(b) <= (x * radix ^ (dExp(b))) * radix ^ -dExp(b)")
                    (("1"
                      (case "(x * radix ^ (dExp(b))) * radix ^ -dExp(b) <= x")
                      (("1" (grind-reals) nil nil)
                       ("2" (hide-all-but 1)
                        (("2" (rewrite "expt_inverse")
                          (("2" (field) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (div-by 1 "radix ^ -dExp(b)")
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (expand "FtoR")
                    (("2"
                      (case "floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)) <= (x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix))")
                      (("1"
                        (case "(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)) <= x")
                        (("1" (grind-reals) nil nil)
                         ("2" (hide 2 -1)
                          (("2" (rewrite "expt_inverse")
                            (("2" (field) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (div-by 1
                           "radix ^ floor(ln(x * radix / vNum(b)) / ln(radix))")
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((ln const-decl "real" ln_exp lnexp)) shostak))
       (RND_aux_ge 0
        (RND_aux_ge-2 "" 3790102831
         ("" (skeep)
          (("" (rewrite "RND_aux_alt_def")
            (("" (expand "RND_aux_alt")
              (("" (lift-if)
                (("" (split +)
                  (("1" (flatten)
                    (("1" (expand "Fsucc")
                      (("1" (lift-if)
                        (("1" (split +)
                          (("1" (flatten)
                            (("1" (expand "FtoR")
                              (("1"
                                (case-replace
                                 "vNum(b) / radix * radix ^ (1 - dExp(b))=radix*(radix ^ (-dExp(b) - 1) * vNum(b))")
                                (("1"
                                  (case
                                   "radix ^ (-dExp(b) - 1) * vNum(b) <= radix * (radix ^ (-dExp(b) - 1) * vNum(b))")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (div-by
                                       1
                                       "radix ^ (-dExp(b) - 1)*vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (rewrite "expt_div" :dir rl)
                                    (("2"
                                      (rewrite "expt_div" :dir rl)
                                      (("2"
                                        (rewrite "expt_inverse")
                                        (("2"
                                          (use "expt_x1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "FtoR")
                              (("2"
                                (rewrite "expt_inverse")
                                (("2" (field 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (flip-ineq 1)
                      (("2" (expand "Fsucc")
                        (("2" (lift-if)
                          (("2" (split +)
                            (("1" (flatten)
                              (("1"
                                (expand "FtoR")
                                (("1"
                                  (rewrite "expt_plus")
                                  (("1"
                                    (use "expt_x1")
                                    (("1"
                                      (field 1)
                                      (("1"
                                        (mult-by
                                         1
                                         "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                        (("1"
                                          (case-replace
                                           "(vNum(b) * (radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)))) *
                                            radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))=vNum(b)")
                                          (("1" (grind-reals) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite "expt_inverse")
                                              (("2" (field) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "FtoR")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (mult-by
                                       2
                                       "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                      (("2"
                                        (invoke
                                         (case-replace
                                          "%1 = floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix))))+1")
                                         (! 1 r))
                                        (("1" (grind-reals) nil nil)
                                         ("2"
                                          (hide-all-but 2)
                                          (("2"
                                            (rewrite "expt_inverse")
                                            (("2" (field) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((ln const-decl "real" ln_exp lnexp)) shostak)
        (RND_aux_ge-1 nil 3319376479
         ("" (skeep)
          (("" (rewrite "RND_aux_alt_def")
            (("" (expand "RND_aux_alt")
              (("" (lift-if)
                (("" (split +)
                  (("1" (flatten)
                    (("1" (expand "Fsucc")
                      (("1" (lift-if)
                        (("1" (split +)
                          (("1" (flatten)
                            (("1" (expand "FtoR")
                              (("1"
                                (case-replace
                                 "vNum(b) / radix * radix ^ (1 - dExp(b))=radix*(radix ^ (-dExp(b) - 1) * vNum(b))")
                                (("1"
                                  (case
                                   "radix ^ (-dExp(b) - 1) * vNum(b) <= radix * (radix ^ (-dExp(b) - 1) * vNum(b))")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (div-by
                                       1
                                       "radix ^ (-dExp(b) - 1)*vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (rewrite "expt_div" :dir rl)
                                    (("2"
                                      (rewrite "expt_div" :dir rl)
                                      (("2"
                                        (rewrite "expt_inverse")
                                        (("2"
                                          (use "expt_x1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "FtoR")
                              (("2"
                                (rewrite "expt_inverse")
                                (("2" (field 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (flip-ineq 1)
                      (("2" (expand "Fsucc")
                        (("2" (lift-if)
                          (("2" (split +)
                            (("1" (flatten)
                              (("1"
                                (expand "FtoR")
                                (("1"
                                  (rewrite "expt_plus")
                                  (("1"
                                    (use "expt_x1")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (field 1)
                                        (("1"
                                          (mult-by
                                           1
                                           "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                          (("1"
                                            (case-replace
                                             "(vNum(b) * (radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)))) *
                                            radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))=vNum(b)")
                                            (("1"
                                              (grind-reals)
                                              nil
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (rewrite
                                                 "expt_inverse")
                                                (("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "FtoR")
                                    (("1" (grind-reals) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (mult-by
                                       2
                                       "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                      (("2"
                                        (invoke
                                         (case-replace
                                          "%1 = floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix))))+1")
                                         (! 1 r))
                                        (("1" (grind-reals) nil nil)
                                         ("2"
                                          (hide-all-but 2)
                                          (("2"
                                            (rewrite "expt_inverse")
                                            (("2" (field) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_Min_isMin 0
        (RND_Min_isMin-1 nil 3319384996
         ("" (skeep)
          (("" (expand "RND_Min")
            (("" (grind-reals)
              (("1" (expand "isMin?")
                (("1" (split)
                  (("1" (rewrite "RND_aux_le") nil nil)
                   ("2" (skosimp*)
                    (("2"
                      (case-replace
                       "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                      (("1"
                        (case-replace
                         "RND_aux(b)(r)=Fpred(b)(Fsucc(b)(RND_aux(b)(r)))")
                        (("1" (rewrite "FpredProp")
                          (("1"
                            (case "r < FtoR(Fsucc(b)(RND_aux(b)(r)))")
                            (("1" (grind-reals) nil nil)
                             ("2" (rewrite "RND_aux_ge") nil nil))
                            nil)
                           ("2" (rewrite "FsuccCanonic") nil nil))
                          nil)
                         ("2" (rewrite "FpredFsucc") nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flip-ineq 1)
                (("2" (expand "isMin?")
                  (("2" (skosimp*) (("2" (grind-reals) nil nil)) nil))
                  nil))
                nil)
               ("3" (expand "isMin?")
                (("3" (flip-ineq 1)
                  (("3" (rewrite "FpredFoppFsucc")
                    (("3" (rewrite "FoppCorrect")
                      (("3" (rewrite "FoppCorrect")
                        (("3" (split)
                          (("1"
                            (case "-r < FtoR(Fsucc(b)(RND_aux(b)(-r)))")
                            (("1" (grind-reals) nil nil)
                             ("2" (rewrite "RND_aux_ge") nil nil))
                            nil)
                           ("2" (skosimp*)
                            (("2"
                              (case-replace
                               "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                              (("1"
                                (case
                                 "FtoR(Fsucc(b)(RND_aux(b)(-r))) <= FtoR(Fopp(Fnormalize(b)(f!1)))")
                                (("1"
                                  (rewrite "FoppCorrect")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "FsuccProp")
                                  (("1"
                                    (case
                                     "-r <= FtoR(Fopp(Fnormalize(b)(f!1)))")
                                    (("1"
                                      (case
                                       "FtoR(RND_aux(b)(-r)) < -r")
                                      (("1" (grind-reals) nil nil)
                                       ("2"
                                        (case
                                         "FtoR(RND_aux(b)(-r)) <= -r")
                                        (("1" (grind-reals) nil nil)
                                         ("2"
                                          (rewrite "RND_aux_le")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FoppCorrect")
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "FcanonicOpp")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "Fnormalize(b)(f!1)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_Max_isMax 0
        (RND_Max_isMax-1 nil 3319899789
         ("" (skeep)
          (("" (expand "RND_Max")
            (("" (case-replace "r=--r")
              (("1" (rewrite "MinOppMax")
                (("1" (rewrite -1 :dir rl)
                  (("1" (rewrite "RND_Min_isMin") nil nil)) nil)
                 ("2" (rewrite "FcanonicBounded") nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_ToZero_ToZero 0
        (RND_ToZero_ToZero-1 nil 3877760357
         ("" (skeep)
          (("" (expand "RND_ToZero")
            (("" (expand "ToZero?")
              (("" (split)
                (("1" (flatten) (("1" (use "RND_Min_isMin") nil nil))
                  nil)
                 ("2" (flatten) (("2" (use "RND_Max_isMax") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_aux_float_TCC1 0
        (RND_aux_float_TCC1-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_aux_float subtype
          "((number_fields.-)((number_fields.-)((number_fields.-)(Prec(float.b), Fexp(float.f)), dExp(float.b)), 1))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_float_TCC2 0
        (RND_aux_float_TCC2-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_aux_float subtype
          "((number_fields.+)(dExp(float.b), Fexp(float.f)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_float_TCC3 0
        (RND_aux_float_TCC3-2 nil 3544978082
         ("" (skeep)
          (("" (expand "Fcanonic?")
            ((""
              (case "Fsubnormal?(b) ((# Fnum := floor(Fnum(f) * radix ^ (dExp(b) + Fexp(f))), Fexp := -dExp(b) #))")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand* "Fsubnormal?")
                  (("2"
                    (case "abs(radix * floor(Fnum(f) * radix ^ (dExp(b) + Fexp(f)))) < vNum(b)")
                    (("1" (assert)
                      (("1" (expand "Fbounded?")
                        (("1" (rewrite "abs_mult" -1)
                          (("1" (expand "abs" -1 1)
                            (("1" (mult-by 1 "radix")
                              (("1"
                                (swap
                                 "abs(floor(Fnum(f) * radix ^ (dExp(b)+Fexp(f))))"
                                 *
                                 "radix")
                                (("1"
                                  (case "vNum(b)<=vNum(b) * radix")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (div-by 1 "vNum(b)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "abs_mult")
                        (("2" (expand "abs" 1 1)
                          (("2" (div-by 1 "radix")
                            (("2"
                              (case "floor(Fnum(f) * radix ^ (dExp(b)+Fexp(f))) >=0")
                              (("1"
                                (expand "abs" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "Fnum(f) * radix ^ (dExp(b)+Fexp(f)) < vNum(b) / radix")
                                    (("1" (grind-reals) nil nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (cross-mult 1)
                                        (("2"
                                          (expand "vNum")
                                          (("2"
                                            (case
                                             "radix ^ (Prec(b) - 1 - dExp(b) - Fexp(f)) = radix ^ Prec(b) * ( 1/ radix^(dExp(b) + Fexp(f)) ) * 1/radix")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (case
                                                 "Prec(b) - 1 - dExp(b) - Fexp(f) = Prec(b) + (- 1 - dExp(b) - Fexp(f))")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (lemma "expt_plus")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (case
                                                           "(-1 - dExp(b) - Fexp(f)) = (-1 + -(dExp(b) +Fexp(f)))")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst?
                                                                 -1
                                                                 :where
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (use
                                                                     "expt_inverse")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (use
                                                                         "expt_inverse")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (use
                                                                             "expt_x1")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (grind-reals)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "nnreal_times_nnreal_is_nnreal")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux_float subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.+)(dExp(float.b), Fexp(float.f)))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_float_TCC3-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_aux_float subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.+)(dExp(float.b), Fexp(float.f)))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
          "(float.Fcanonic?(float.b))")))
       (RND_aux_float_TCC4 0
        (RND_aux_float_TCC4-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_aux_float subtype
          "((number_fields.-)((number_fields.+)((number_fields.+)(Fexp(float.f), 1), dExp(float.b)), Prec(float.b)))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_float_TCC5 0
        (RND_aux_float_TCC5-1 nil 3544890397
         ("" (skeep)
          (("" (mult-by 1 "radix ^ (Fexp(f) + 1 + dExp(b) - Prec(b))")
            (("" (rewrite "expt_plus" :dir rl)
              (("" (use "expt_x0") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         nil nil
         (RND_aux_float subtype
          "number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)((number_fields.+)(Fexp(float.f), 1), dExp(float.b)), Prec(float.b)))))"
          "{x: reals.real | reals.>=(x, 1)}")))
       (RND_aux_float_TCC6 0
        (RND_aux_float_TCC6-1 nil 3544890397
         ("" (skeep) (("" (assert) nil nil)) nil) nil nil
         (RND_aux_float subtype
          "((number_fields.-)(Fexp(float.f), float.e))"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (RND_aux_float_TCC7 0
        (RND_aux_float_TCC7-3 nil 3544978679
         ("" (skeep)
          (("" (skosimp*)
            (("" (lemma "RND_log_compute")
              (("" (inst?)
                (("" (expand "vNum" -1 1)
                  (("" (rewrite "expt_plus" :dir rl)
                    (("" (inst - "FtoR(f)")
                      (("" (expand "FtoR" -1 1)
                        (("" (split -)
                          (("1" (expand "FtoR")
                            (("1" (lemma "expt_plus")
                              (("1"
                                (inst
                                 -
                                 "Fexp(f)"
                                 "1+dExp(b)-Prec(b)"
                                 "radix")
                                (("1"
                                  (mult-by -1 "Fnum(f)")
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (lemma "RND_aux_TCC6")
                                          (("1"
                                            (inst - "b" "FtoR(f)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (inst - "e!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 2))
                                                        (("1"
                                                          (expand
                                                           "FtoR")
                                                          (("1"
                                                            (lemma
                                                             "expt_plus")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "Fexp(f)"
                                                               "-e!1"
                                                               "radix")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "Fnum(f)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (grind
                                                                           :exclude
                                                                           "Fcanonic?")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "FtoR"
                                                           +)
                                                          (("2"
                                                            (lemma
                                                             "expt_plus")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "Fexp(f)"
                                                               "1+dExp(b)-Prec(b)"
                                                               "radix")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-2 2))
                                                  (("2"
                                                    (expand "FtoR")
                                                    (("2"
                                                      (mult-by
                                                       1
                                                       "radix^Fexp(f)")
                                                      (("2"
                                                        (rewrite
                                                         "expt_plus"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "vNum")
                                                            (("2"
                                                              (rewrite
                                                               "expt_plus"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "FtoR")
                                              (("2"
                                                (case "Fnum(f)>=0")
                                                (("1"
                                                  (mult-by
                                                   -1
                                                   "radix^Fexp(f)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (mult-by 2 "radix^Fexp(f)")
                            (("2" (rewrite "expt_plus" :dir rl)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux_float subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_float_TCC7-2 nil 3544978645
         ("" (skeep)
          (("" (lemma "RND_log_compute")
            (("" (inst?)
              (("" (assert)
                (("" (replace -1 :dir rl)
                  (("" (hide -1)
                    (("" (skosimp)
                      (("" (expand "Fcanonic?")
                        (("" (assert)
                          (("" (flatten)
                            (("" (typepred "e!1")
                              ((""
                                (replace -2 :hide? t)
                                ((""
                                  (name
                                   "AA"
                                   "floor(ln(x * radix / vNum(b)) / ln(radix))")
                                  ((""
                                    (replace -1)
                                    ((""
                                      (expand "Fnormal?")
                                      ((""
                                        (expand "Fbounded?")
                                        ((""
                                          (split)
                                          (("1"
                                            (case
                                             "0<= floor(x * radix ^ (-AA))")
                                            (("1"
                                              (expand "abs" 1 1)
                                              (("1"
                                                (grind-reals)
                                                (("1"
                                                  (case
                                                   "x * radix ^ (-AA) < vNum(b)")
                                                  (("1"
                                                    (grind-reals)
                                                    nil)
                                                   ("2"
                                                    (hide 2 -1)
                                                    (("2"
                                                      (case
                                                       "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                                          (("1"
                                                            (case
                                                             "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (name-replace
                                                                 "WW"
                                                                 "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2
                                                               -3)
                                                              (("2"
                                                                (case-replace
                                                                 "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                                (("1"
                                                                  (field)
                                                                  (("1"
                                                                    (rewrite
                                                                     "hathatln")
                                                                    (("1"
                                                                      (field)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "ln_div")
                                                                    (("2"
                                                                      (rewrite
                                                                       "ln_div")
                                                                      (("2"
                                                                        (rewrite
                                                                         "ln_mult")
                                                                        (("2"
                                                                          (field)
                                                                          nil)))))))))))))))
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (cancel-by
                                                               1
                                                               "x")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "^^")
                                                                  (("2"
                                                                    (lemma
                                                                     "exp_strict_increasing")
                                                                    (("2"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("2"
                                                                        (rewrite
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (field)
                                                                            (("2"
                                                                              (case
                                                                               "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "ln_div")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "ln_mult")
                                                                                  (("1"
                                                                                    (field)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "ln(radix)")
                                                                                      (("1"
                                                                                        (field
                                                                                         -1)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "ln(radix) > 0")
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (grind-reals)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "ln_strict_increasing")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "strict_increasing?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "1"
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (grind-reals)
                                                                                                    nil)))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (case
                                                                                     "x>0")
                                                                                    (("1"
                                                                                      (grind-reals)
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-reals)
                                                                                        nil)))))))))
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  nil)))))))))))))))))))))))))))
                                                       ("2"
                                                        (hide -1 -2 2)
                                                        (("2"
                                                          (rewrite
                                                           "hathat_int")
                                                          nil)))))))))))))
                                             ("2"
                                              (case
                                               "0 <= x * radix ^ (-AA)")
                                              (("1"
                                                (hide -2 -3 2)
                                                (("1"
                                                  (grind-reals)
                                                  nil)))
                                               ("2"
                                                (hide -1 -2 2 3)
                                                (("2"
                                                  (grind-reals)
                                                  nil)))))))
                                           ("2"
                                            (case
                                             "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                                            (("1" (grind-reals) nil)
                                             ("2"
                                              (hide -2 2)
                                              (("2"
                                                (mult-by
                                                 1
                                                 "ln(radix)"
                                                 +)
                                                (("1"
                                                  (wrap-formula
                                                   1
                                                   "exp")
                                                  (("1"
                                                    (case-replace
                                                     "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                                    (("1"
                                                      (rewrite
                                                       "exp_ln")
                                                      (("1"
                                                        (div-by
                                                         1
                                                         "radix")
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "vNum(b)")
                                                          (("1"
                                                            (case-replace
                                                             " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                                            (("1"
                                                              (field)
                                                              (("1"
                                                                (rewrite
                                                                 "hathat_int")
                                                                (("1"
                                                                  (div-by
                                                                   1
                                                                   "radix")
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (case-replace
                                                                       "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (grind-reals)
                                                                          nil)))
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -1
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "-dExp(b)"
                                                                             "-1"
                                                                             "radix")
                                                                            (("2"
                                                                              (grind-reals)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 1
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "expt_x1_aux")
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                (("2"
                                                                  (case
                                                                   "radix^(-dExp(b)-1)*radix = radix^(-dExp(b)-1)*radix^1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_plus"
                                                                         :dir
                                                                         rl)
                                                                        nil)))))
                                                                   ("2"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 2)
                                                      (("2"
                                                        (expand "^^")
                                                        (("2"
                                                          (propax)
                                                          nil)))))))
                                                   ("2"
                                                    (lemma
                                                     "ln_increasing")
                                                    (("2"
                                                      (expand
                                                       "increasing?")
                                                      (("2"
                                                        (lemma
                                                         "ln_exp")
                                                        (("2"
                                                          (grind-reals)
                                                          nil)))))))))
                                                 ("2"
                                                  (hide 2 -1)
                                                  (("2"
                                                    (case
                                                     "ln(radix) > 0")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil)))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "ln_strict_increasing")
                                                        (("2"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "1"
                                                             "radix")
                                                            (("2"
                                                              (grind-reals)
                                                              nil)))))))))))))))))))
                                           ("3"
                                            (expand "abs" 1 1)
                                            (("3"
                                              (grind-reals)
                                              (("3"
                                                (cancel-by 1 "radix")
                                                (("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (case
                                                     "vNum(b) / radix <= x * radix ^ (-AA)")
                                                    (("1"
                                                      (case
                                                       "integer_pred(vNum(b) / radix)")
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           "div_simple")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "vNum(b)"
                                                             "radix")
                                                            (("1"
                                                              (case
                                                               "(EXISTS (k:int): vNum(b) = k * radix)")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (case-replace
                                                                   " vNum(b) / radix=k!1")
                                                                  (("1"
                                                                    (grind-reals)
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     2)
                                                                    (("2"
                                                                      (grind-reals)
                                                                      nil)))))))
                                                               ("2"
                                                                (hide
                                                                 -3
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "radix_div_vNum")
                                                            nil)))))))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (case
                                                         "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                        (("1"
                                                          (case
                                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (hide 2 -1)
                                                            (("2"
                                                              (cancel-by
                                                               1
                                                               "x")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (case-replace
                                                                   "radix ^ (-AA)=radix ^^ (-AA)")
                                                                  (("1"
                                                                    (expand
                                                                     "^^")
                                                                    (("1"
                                                                      (lemma
                                                                       "exp_increasing")
                                                                      (("1"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (div-by
                                                                               1
                                                                               "-ln(radix)"
                                                                               -)
                                                                              (("1"
                                                                                (field)
                                                                                (("1"
                                                                                  (field)
                                                                                  nil)))
                                                                               ("2"
                                                                                (case
                                                                                 "ln(radix)>0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "ln_strict_increasing")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "strict_increasing?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1"
                                                                                         "radix")
                                                                                        (("2"
                                                                                          (grind-reals)
                                                                                          nil)))))))))))))))))))))))
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "hathat_int")
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           2)
                                                          (("2"
                                                            (rewrite
                                                             "hathatln")
                                                            (("2"
                                                              (field)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))
          nil)
         nil nil
         (RND_aux_float subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))"))
        (RND_aux_float_TCC7-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_aux_float subtype
          "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e))))), Fexp := float.e #)"
          "(float.Fcanonic?(float.b))")))
       (RND_aux_float_def_TCC1 0
        (RND_aux_float_def_TCC1-1 nil 3544890397
         ("" (skeep)
          (("" (expand "FtoR")
            (("" (mult-by -1 "radix^Fexp(f)") (("" (assert) nil nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_aux_float_def subtype "float.FtoR(float.f)"
          "nonneg_real")))
       (RND_aux_float_def 0
        (RND_aux_float_def-1 nil 3544890402
         ("" (skeep)
          (("" (expand "RND_aux_float")
            (("" (expand "RND_aux")
              (("" (lift-if)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (assert)
                      (("" (ground)
                        (("1" (expand "FtoR")
                          (("1" (lemma "expt_plus")
                            (("1" (inst - "dExp(b)" "Fexp(f)" "radix")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (expand "FtoR")
                            (("2" (mult-by -1 "radix^Fexp(f)")
                              (("2"
                                (rewrite "expt_plus" :dir rl)
                                (("2"
                                  (expand "vNum")
                                  (("2"
                                    (rewrite "expt_plus" :dir rl)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 1)
                          (("3" (expand "FtoR")
                            (("3" (expand "vNum")
                              (("3"
                                (rewrite "expt_plus" :dir rl)
                                (("3"
                                  (mult-by -1 "radix^Fexp(f)")
                                  (("3"
                                    (rewrite "expt_plus" :dir rl)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 1)
                          (("4" (expand "FtoR")
                            (("4" (expand "vNum")
                              (("4"
                                (rewrite "expt_plus" :dir rl)
                                (("4"
                                  (mult-by 1 "radix^Fexp(f)")
                                  (("4"
                                    (rewrite "expt_plus" :dir rl)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 1)
                          (("5" (expand "FtoR")
                            (("5" (expand "vNum")
                              (("5"
                                (rewrite "expt_plus" :dir rl)
                                (("5"
                                  (mult-by 1 "radix^Fexp(f)")
                                  (("5"
                                    (rewrite "expt_plus" :dir rl)
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6"
                          (case "FORALL (eg1:real,eg2:real): eg1 = eg2 IMPLIES floor(eg1) = floor(eg2)")
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "FtoR")
                                  (("1"
                                    (invoke
                                     (case "%1 = %2 * (%3)")
                                     (! 1 1 2)
                                     (! 1 2 2)
                                     (! 1 2 3))
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (rewrite "expt_plus" :dir rl)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "Fnum(f) * radix ^ (1 + dExp(b) + Fexp(f) - Prec(b)) = Fnum(f) * radix ^ (Fexp(f)) * radix ^ (1 + dExp(b) - Prec(b))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (invoke
                                                 (case
                                                  "%1 = %2 * (%3)")
                                                 (! 1 1 2)
                                                 (! 1 2 2)
                                                 (! 1 2 3))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "expt_plus"
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp*) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("7" (hide 2)
                          (("7" (expand "FtoR")
                            (("7" (lemma "expt_plus")
                              (("7"
                                (inst
                                 -
                                 "Fexp(f)"
                                 "1+dExp(b)-Prec(b)"
                                 "radix")
                                (("7" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]"
           log_nat reals))
         shostak))
       (RND_float_Min_TCC1 0
        (RND_float_Min_TCC1-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_float_Min subtype "float.f"
          "{f | reals.>=(Fnum(float.f), 0)}")))
       (RND_float_Min_TCC2 0
        (RND_float_Min_TCC2-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_float_Min subtype "(float.-)(float.f)"
          "{f | reals.>=(Fnum(float.f), 0)}")))
       (RND_float_Min_TCC3 0
        (RND_float_Min_TCC3-1 nil 3544890397
         ("" (skeep)
          (("" (lemma "FcanonicOpp")
            (("" (inst -1 "b" "RND_aux_float(b)(-f)")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (expand "-")
                  (("2" (expand "Fopp") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_float_Min subtype
          "float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f)))"
          "(float.Fcanonic?(float.b))")))
       (RND_float_Min_TCC4 0
        (RND_float_Min_TCC4-2 nil 3545038497
         ("" (skeep)
          (("" (rewrite "FpredCanonic")
            (("1" (lemma "FcanonicOpp")
              (("1" (rewrite "FpredCanonic")
                (("1" (lemma "FcanonicOpp")
                  (("1" (inst -1 "b" "RND_aux_float(b)(-f)")
                    (("1" (assert) nil nil)
                     ("2" (expand "-")
                      (("2" (expand "Fopp") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "-")
                  (("2" (expand "Fopp") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "-")
              (("2" (expand "Fopp") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (RND_float_Min subtype
          "float.Fpred(float.b)(float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f))))"
          "(float.Fcanonic?(float.b))"))
        (RND_float_Min_TCC4-1 nil 3544890397 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_float_Min subtype
          "float.Fpred(float.b)(float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f))))"
          "(float.Fcanonic?(float.b))")))
       (RND_float_Min_def 0
        (RND_float_Min_def-1 nil 3544891290
         ("" (skeep)
          (("" (expand "RND_float_Min")
            (("" (expand "RND_Min")
              (("" (assert)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (ground)
                          (("1" (rewrite "RND_aux_float_def") nil nil)
                           ("2" (expand "FtoR")
                            (("2" (mult-by -2 "radix^(Fexp(f))")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (expand "FtoR")
                            (("3" (mult-by -1 "radix^(Fexp(f))")
                              (("3" (assert) nil nil)) nil))
                            nil)
                           ("4" (expand "FtoR")
                            (("4" (mult-by 2 "radix^(Fexp(f))")
                              (("4" (assert) nil nil)) nil))
                            nil)
                           ("5" (case "-FtoR(f) = FtoR(-f)")
                            (("1" (replace -1)
                              (("1"
                                (rewrite "RND_aux_float_def" +)
                                (("1"
                                  (hide -)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (expand "-")
                                      (("1"
                                        (expand "Fopp")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("6" (case "-FtoR(f) = FtoR(-f)")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "RND_aux_float_def" -)
                                  (("1"
                                    (hide-all-but (1 5))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("7" (expand "FtoR")
                            (("7" (mult-by 3 "radix^(Fexp(f))")
                              (("7" (assert) nil nil)) nil))
                            nil)
                           ("8" (case "-FtoR(f) = FtoR(-f)")
                            (("1" (replace -1)
                              (("1"
                                (lemma "RND_aux_float_def")
                                (("1"
                                  (inst - "b" "-f")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide-all-but (1 5))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("9" (case "-FtoR(f) = FtoR(-f)")
                            (("1" (replaces -1)
                              (("1"
                                (rewrite "RND_aux_float_def" +)
                                (("1"
                                  (hide-all-but (1 6))
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_float_Max_TCC1 0
        (RND_float_Max_TCC1-2 nil 3545038630
         ("" (skeep)
          (("" (lemma "FcanonicOpp")
            (("" (inst -1 "b" "RND_float_Min(b)(-f)")
              (("" (assert) nil nil)) nil))
            nil))
          nil)
         nil nil
         (RND_float_Max subtype
          "float.Fopp(float.RND_float_Min(float.b)((float.-)(float.f)))"
          "(float.Fcanonic?(float.b))"))
        (RND_float_Max_TCC1-1 nil 3544891797 ("" (subtype-tcc) nil nil)
         nil nil
         (RND_float_Max subtype
          "float.Fopp(float.RND_float_Min(float.b)((float.-)(float.f)))"
          "(float.Fcanonic?(float.b))")))
       (RND_float_Max_def 0
        (RND_float_Max_def-1 nil 3544891798
         ("" (skeep)
          (("" (expand "RND_Max")
            (("" (expand "RND_float_Max")
              (("" (rewrite "RND_float_Min_def")
                (("" (case "-FtoR(f) = FtoR(-f)")
                  (("1" (assert) nil nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_float_Min_ge_canonic 0
        (RND_float_Min_ge_canonic-1 nil 3544958511
         ("" (skeep)
          (("" (ground)
            (("1" (expand ">=" -1)
              (("1" (rewrite "FleCorrect")
                (("1" (rewrite "RND_float_Min_def")
                  (("1" (lemma "RND_Min_isMin")
                    (("1" (inst?)
                      (("1" (expand "isMin?")
                        (("1" (flatten)
                          (("1" (expand ">=" +)
                            (("1" (rewrite "FleCorrect")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand ">=")
              (("2" (rewrite "FleCorrect")
                (("2" (rewrite "FleCorrect")
                  (("2" (rewrite "RND_float_Min_def")
                    (("2" (lemma "RND_Min_isMin")
                      (("2" (inst?)
                        (("2" (expand "isMin?")
                          (("2" (flatten)
                            (("2" (inst - "g")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "Fcanonic?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "Fnormal?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "Fsubnormal?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Max_le_canonic 0
        (RND_float_Max_le_canonic-1 nil 3544958528
         ("" (skeep)
          (("" (ground)
            (("1" (expand "<=" -1)
              (("1" (rewrite "FleCorrect")
                (("1" (rewrite "RND_float_Max_def")
                  (("1" (lemma "RND_Max_isMax")
                    (("1" (inst?)
                      (("1" (expand "isMax?")
                        (("1" (flatten)
                          (("1" (expand "<=" +)
                            (("1" (rewrite "FleCorrect")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "<=")
              (("2" (rewrite "FleCorrect")
                (("2" (rewrite "FleCorrect")
                  (("2" (rewrite "RND_float_Max_def")
                    (("2" (lemma "RND_Max_isMax")
                      (("2" (inst?)
                        (("2" (expand "isMax?")
                          (("2" (flatten)
                            (("2" (inst - "g")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "Fcanonic?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "Fnormal?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "Fsubnormal?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Min_canonic 0
        (RND_float_Min_canonic-1 nil 3545555881
         ("" (skeep)
          (("" (lemma "FcanonicUnique")
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (lemma "RND_float_Min_ge_canonic")
                      (("" (inst?)
                        (("" (inst - "f")
                          (("" (assert)
                            (("" (expand ">=")
                              ((""
                                (rewrite "FleCorrect")
                                ((""
                                  (rewrite "FleCorrect")
                                  ((""
                                    (assert)
                                    ((""
                                      (case
                                       "FtoR(RND_float_Min(b)(f)) <= FtoR(f)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite
                                           "RND_float_Min_def"
                                           +)
                                          (("2"
                                            (lemma "RND_Min_isMin")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "isMin?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_float_Max_canonic 0
        (RND_float_Max_canonic-1 nil 3545556181
         ("" (skeep)
          (("" (lemma "FcanonicUnique")
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (lemma "RND_float_Max_le_canonic")
                      (("" (inst?)
                        (("" (inst - "f")
                          (("" (assert)
                            (("" (expand "<=")
                              ((""
                                (rewrite "FleCorrect")
                                ((""
                                  (rewrite "FleCorrect")
                                  ((""
                                    (assert)
                                    ((""
                                      (case
                                       "FtoR(RND_float_Max(b)(f)) >= FtoR(f)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite
                                           "RND_float_Max_def"
                                           +)
                                          (("2"
                                            (lemma "RND_Max_isMax")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "isMax?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Min_ge 0
        (RND_float_Min_ge-1 nil 3544958600
         ("" (skeep)
          (("" (lemma "RND_float_Min_ge_canonic")
            (("" (inst - "b" "f" "RND_float_Min(b)(g)")
              (("" (assert)
                (("" (hide 2)
                  (("" (expand ">=")
                    (("" (rewrite "FleCorrect")
                      (("" (rewrite "FleCorrect")
                        (("" (rewrite "RND_float_Min_def")
                          (("" (lemma "RND_Min_isMin")
                            (("" (inst?)
                              ((""
                                (expand "isMin?")
                                (("" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_float_Min_le 0
        (RND_float_Min_le-1 nil 3544958730
         ("" (skeep)
          (("" (lemma "RND_float_Min_ge_canonic")
            (("" (inst - "b" "g" "RND_float_Min(b)(f)")
              (("" (assert)
                (("" (ground)
                  (("1" (expand ">=")
                    (("1" (expand "<=") (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (hide (2 3))
                    (("2" (expand ">=")
                      (("2" (expand "<=")
                        (("2" (rewrite "FleCorrect")
                          (("2" (rewrite "FleCorrect")
                            (("2" (rewrite "RND_float_Min_def")
                              (("2"
                                (lemma "RND_Min_isMin")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "isMin?")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Max_ge 0
        (RND_float_Max_ge-1 nil 3544962250
         ("" (skeep)
          (("" (expand "RND_float_Max")
            (("" (lemma "RND_float_Min_le")
              (("" (inst - "b" "-f" "-g")
                (("" (split -)
                  (("1" (expand "<=")
                    (("1" (expand ">=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (rewrite "FleCorrect")
                            (("1" (rewrite "FoppCorrect")
                              (("1"
                                (rewrite "FoppCorrect")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Max_le 0
        (RND_float_Max_le-1 nil 3544962448
         ("" (skeep)
          (("" (expand "RND_float_Max")
            (("" (lemma "RND_float_Min_ge")
              (("" (inst - "b" "-f" "-g")
                (("" (split -)
                  (("1" (expand "<=")
                    (("1" (expand ">=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (rewrite "FleCorrect")
                            (("1" (rewrite "FoppCorrect")
                              (("1"
                                (rewrite "FoppCorrect")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Min_lt_canonic 0
        (RND_float_Min_lt_canonic-1 nil 3544975201
         ("" (skeep)
          (("" (ground)
            (("1" (lemma "RND_float_Min_ge")
              (("1" (inst - "b" "f" "g")
                (("1" (split -)
                  (("1" (case "FtoR(g) = FtoR(RND_float_Min(b)(g))")
                    (("1" (expand ">=")
                      (("1" (expand "<")
                        (("1" (rewrite "FleCorrect")
                          (("1" (rewrite "FltCorrect")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-1 -2))
                      (("2" (rewrite "RND_float_Min_def")
                        (("2" (lemma "RND_Min_isMin")
                          (("2" (inst?)
                            (("2" (expand "isMin?")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst - "g")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "Fcanonic?")
                                    (("2"
                                      (expand "Fnormal?")
                                      (("2"
                                        (expand "Fsubnormal?")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand ">=")
                      (("2" (expand "<")
                        (("2" (rewrite "FleCorrect")
                          (("2" (rewrite "FltCorrect")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "<")
              (("2" (rewrite "FltCorrect")
                (("2" (rewrite "FltCorrect")
                  (("2" (rewrite "RND_float_Min_def")
                    (("2" (lemma "RND_Min_isMin")
                      (("2" (inst?)
                        (("2" (expand "isMin?")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Min_gt_canonic 0
        (RND_float_Min_gt_canonic-1 nil 3544976459
         ("" (skeep)
          (("" (ground)
            (("1" (lemma "RND_float_Max_le")
              (("1" (inst - "b" "f" "g")
                (("1" (split -)
                  (("1" (case "FtoR(g) = FtoR(RND_float_Max(b)(g))")
                    (("1" (expand "<=")
                      (("1" (expand ">")
                        (("1" (rewrite "FleCorrect")
                          (("1" (rewrite "FltCorrect")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-1 -2))
                      (("2" (rewrite "RND_float_Max_def")
                        (("2" (lemma "RND_Max_isMax")
                          (("2" (inst?)
                            (("2" (expand "isMax?")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst - "g")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "Fcanonic?")
                                    (("2"
                                      (expand "Fnormal?")
                                      (("2"
                                        (expand "Fsubnormal?")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand "<=")
                      (("2" (expand ">")
                        (("2" (rewrite "FleCorrect")
                          (("2" (rewrite "FltCorrect")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand ">")
              (("2" (rewrite "FltCorrect")
                (("2" (rewrite "FltCorrect")
                  (("2" (rewrite "RND_float_Max_def")
                    (("2" (lemma "RND_Max_isMax")
                      (("2" (inst?)
                        (("2" (expand "isMax?")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Min_ge_0 0
        (RND_float_Min_ge_0-1 nil 3544958916
         ("" (skeep)
          (("" (lemma "RND_float_Min_ge")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                  (("1" (expand ">=")
                    (("1" (expand ">=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Min_def")
                              (("1"
                                (rewrite "RND_float_Min_def")
                                (("1"
                                  (lemma "RND_Min_isMin")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMin?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "Fbounded?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "abs(0) = 0")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "dExp(b)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "float_int")
                      (("2" (expand "RND_float_Min")
                        (("2" (expand "RND_aux_float")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (rewrite "floor_int")
                                (("2"
                                  (expand "FtoR")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_float_Min_lt_0 0
        (RND_float_Min_lt_0-1 nil 3544976537
         ("" (skeep)
          (("" (lemma "RND_float_Min_lt_canonic")
            (("" (inst - "b" "f" "RND_float_Min(b)(float_int(0))")
              (("" (assert)
                (("" (expand "<")
                  (("" (rewrite "FltCorrect")
                    (("" (rewrite "FltCorrect")
                      ((""
                        (case "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                        (("1" (replaces -1) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (rewrite "RND_float_Min_def")
                            (("2" (case "FtoR(float_int(0)) = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "RND_Min")
                                    (("1"
                                      (expand "RND_aux")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (rewrite "floor_int")
                                              (("1"
                                                (expand "FtoR")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (RND_float_Max_le_0 0
        (RND_float_Max_le_0-6 nil 3544965375
         ("" (skeep)
          (("" (lemma "RND_float_Max_le")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Max(b)(float_int(0))) = 0")
                  (("1" (expand "<=")
                    (("1" (expand "<=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Max_def")
                              (("1"
                                (rewrite "RND_float_Max_def")
                                (("1"
                                  (lemma "RND_Max_isMax")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMax?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (expand "FtoR" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "FtoR"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand
                                                   "Fbounded?"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "float_int"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "dExp(b)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "abs(0) = 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (hide-all-but 2)
                                                (("2"
                                                  (expand "RND_Max")
                                                  (("2"
                                                    (expand "RND_Min")
                                                    (("2"
                                                      (expand
                                                       "RND_aux")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "Fopp")
                                                            (("2"
                                                              (rewrite
                                                               "floor_int")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "FtoR")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "RND_float_Max")
                      (("2" (expand "RND_float_Min")
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (expand "RND_aux_float")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "float_int")
                                    (("1"
                                      (hide -)
                                      (("1"
                                        (rewrite "floor_int")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 2)
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide-all-but 3)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil)
        (RND_float_Max_le_0-5 nil 3544962611
         ("" (skeep)
          (("" (lemma "RND_float_Max_le")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Max(b)(float_int(0))) = 0")
                  (("1" (expand "<=")
                    (("1" (expand "<=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Max_def")
                              (("1"
                                (rewrite "RND_float_Max_def")
                                (("1"
                                  (lemma "RND_Max_isMax")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMax?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))
                                               ("2"
                                                (expand "Fbounded?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "abs_0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "dExp(b)")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (expand "float_int")
                      (("2" (expand "RND_float_Max")
                        (("2" (expand "RND_aux_float")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (rewrite "floor_int")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (propax)
                                      nil))))))))))))))))))))))))))))
          nil)
         nil nil)
        (RND_float_Max_le_0-4 nil 3544962502
         ("" (skeep)
          (("" (lemma "RND_float_Min_ge")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                  (("1" (expand ">=")
                    (("1" (expand ">=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Min_def")
                              (("1"
                                (rewrite "RND_float_Min_def")
                                (("1"
                                  (lemma "RND_Min_isMin")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMin?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))
                                               ("2"
                                                (expand "Fbounded?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "abs_0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "dExp(b)")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (expand "float_int")
                      (("2" (expand "RND_float_Min")
                        (("2" (expand "RND_aux_float")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (rewrite "floor_int")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (propax)
                                      nil))))))))))))))))))))))))))))
          nil)
         nil nil)
        (RND_float_Max_le_0-3 nil 3544962139
         ("" (skeep)
          (("" (lemma "RND_float_Max_le")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Max(b)(float_int(0))) = 0")
                  (("1" (expand "<=")
                    (("1" (expand "<=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Max_def")
                              (("1"
                                (rewrite "RND_float_Max_def")
                                (("1"
                                  (lemma "RND_Max_isMax")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMax?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))
                                               ("2"
                                                (expand "Fbounded?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "abs_0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "dExp(b)")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (expand "float_int")
                      (("2" (expand "RND_float_Max")
                        (("2" (expand "RND_aux_float")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (rewrite "floor_int")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (propax)
                                      nil))))))))))))))))))))))))))))
          nil)
         nil nil)
        (RND_float_Max_le_0-2 nil 3544962107
         ("" (skeep)
          (("" (lemma "RND_float_Max_ge")
            (("" (inst - "b" "f" "float_int(0)")
              (("" (assert)
                (("" (case "FtoR(RND_float_Max(b)(float_int(0))) = 0")
                  (("1" (expand "<=")
                    (("1" (expand "<=")
                      (("1" (rewrite "FleCorrect")
                        (("1" (rewrite "FleCorrect")
                          (("1" (assert)
                            (("1" (rewrite "RND_float_Max_def")
                              (("1"
                                (rewrite "RND_float_Max_def")
                                (("1"
                                  (lemma "RND_Max_isMax")
                                  (("1"
                                    (inst-cp
                                     -
                                     "b"
                                     "FtoR(float_int(0))")
                                    (("1"
                                      (inst - "b" "FtoR(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "isMax?")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "float_int(0)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "FtoR" + 1)
                                                  (("1"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))
                                               ("2"
                                                (expand "Fbounded?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "float_int"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "abs_0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "dExp(b)")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (expand "float_int")
                      (("2" (expand "RND_float_Max")
                        (("2" (expand "RND_aux_float")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (rewrite "floor_int")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (propax)
                                      nil))))))))))))))))))))))))))))
          nil)
         nil nil)
        (RND_float_Max_le_0-1 nil 3544962078 ("" (postpone) nil nil)
         nil shostak))
       (RND_float_Max_gt_0 0
        (RND_float_Max_gt_0-1 nil 3544976824
         ("" (skeep)
          (("" (lemma "RND_float_Min_gt_canonic")
            (("" (inst - "b" "f" "RND_float_Min(b)(float_int(0))")
              (("" (assert)
                (("" (expand ">")
                  (("" (rewrite "FltCorrect")
                    (("" (rewrite "FltCorrect")
                      ((""
                        (case "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                        (("1" (replaces -1) (("1" (ground) nil nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (rewrite "RND_float_Min_def")
                            (("2" (case "FtoR(float_int(0)) = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "RND_Min")
                                    (("1"
                                      (expand "RND_aux")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (rewrite "floor_int")
                                              (("1"
                                                (expand "FtoR")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (Fmult_canonic_id_Min_TCC1 0
        (Fmult_canonic_id_Min_TCC1-1 nil 3545491200
         ("" (skeep)
          (("" (expand "float_int")
            (("" (expand "Fbounded?")
              (("" (expand "vNum")
                (("" (assert)
                  (("" (typepred "dExp(b)")
                    (("" (assert)
                      (("" (expand "abs")
                        (("" (lemma "increasing_expt_aux")
                          (("" (inst - "radix" "Prec(b)-2")
                            (("" (assert)
                              ((""
                                (expand "^")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (Fmult_canonic_id_Min subtype "float.float_int(1)"
          "(float.Fbounded?(float.b))")))
       (Fmult_canonic_id_Min 0
        (Fmult_canonic_id_Min-1 nil 3545491201
         ("" (lemma "FcanonicUnique")
          (("" (skeep)
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (rewrite "RND_float_Min_def")
                      (("" (expand "*")
                        (("" (rewrite "FmultCorrect")
                          (("" (typepred "Fnormalize(b)(float_int(1))")
                            (("" (replace -2)
                              ((""
                                (rewrite "float_int_def" +)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite
                                     "RND_float_Min_def"
                                     :dir
                                     rl)
                                    ((""
                                      (lemma "RND_float_Min_canonic")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fmult_canonic_id_Max 0
        (Fmult_canonic_id_Max-1 nil 3545556316
         ("" (lemma "FcanonicUnique")
          (("" (skeep)
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (rewrite "RND_float_Max_def")
                      (("" (expand "*")
                        (("" (rewrite "FmultCorrect")
                          (("" (typepred "Fnormalize(b)(float_int(1))")
                            (("" (replace -2)
                              ((""
                                (rewrite "float_int_def" +)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite
                                     "RND_float_Max_def"
                                     :dir
                                     rl)
                                    ((""
                                      (lemma "RND_float_Max_canonic")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (Fplus_canonic_id_Min_TCC1 0
        (Fplus_canonic_id_Min_TCC1-1 nil 3545563549
         ("" (subtype-tcc) nil nil) nil nil
         (Fplus_canonic_id_Min subtype "float.float_int(0)"
          "(float.Fbounded?(float.b))")))
       (Fplus_canonic_id_Min 0
        (Fplus_canonic_id_Min-1 nil 3545563553
         ("" (lemma "FcanonicUnique")
          (("" (skeep)
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (rewrite "RND_float_Min_def")
                      (("" (expand "+")
                        (("" (rewrite "FplusCorrect")
                          (("" (typepred "Fnormalize(b)(float_int(0))")
                            (("" (replace -2)
                              ((""
                                (rewrite "float_int_def" +)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite
                                     "RND_float_Min_def"
                                     :dir
                                     rl)
                                    ((""
                                      (lemma "RND_float_Min_canonic")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (Fplus_canonic_id_Max 0
        (Fplus_canonic_id_Max-1 nil 3545563562
         ("" (lemma "FcanonicUnique")
          (("" (skeep)
            (("" (inst?)
              (("" (inst - "b")
                (("" (assert)
                  (("" (hide 2)
                    (("" (rewrite "RND_float_Max_def")
                      (("" (expand "+")
                        (("" (rewrite "FplusCorrect")
                          (("" (typepred "Fnormalize(b)(float_int(0))")
                            (("" (replace -2)
                              ((""
                                (rewrite "float_int_def" +)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite
                                     "RND_float_Max_def"
                                     :dir
                                     rl)
                                    ((""
                                      (lemma "RND_float_Max_canonic")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (MaxSuccMin_TCC1 0
        (MaxSuccMin_TCC1-1 nil 3319555845
         ("" (skeep) (("" (rewrite "FcanonicBounded") nil nil)) nil)
         nil nil
         (MaxSuccMin subtype "float.q" "(float.Fbounded?(float.b))")))
       (MaxSuccMin 0
        (MaxSuccMin-1 nil 3319555553
         ("" (skeep)
          (("" (lemma "FcanonicUnique")
            (("" (inst -1 "b" "q" "Fsucc(b)(p)")
              (("" (rewrite -1)
                (("1" (hide -1 3)
                  (("1" (expand* "isMin?" "isMax?")
                    (("1" (flatten)
                      (("1" (case "FtoR(Fsucc(b)(p)) <= FtoR(q)")
                        (("1" (case "FtoR(q) <= FtoR(Fsucc(b)(p))")
                          (("1" (assert) nil nil)
                           ("2" (hide -1 3)
                            (("2" (lemma "FpredLe")
                              (("2"
                                (inst -1 "b" "q" "Fsucc(b)(p)")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite -2)
                                      (("1"
                                        (rewrite "FpredFsucc")
                                        (("1"
                                          (rewrite -4)
                                          (("1"
                                            (flip-ineq 1)
                                            (("1"
                                              (lemma "FpredLt")
                                              (("1"
                                                (inst -1 "b" "q")
                                                (("1"
                                                  (flip-ineq -1)
                                                  (("1"
                                                    (hide 2 3 4)
                                                    (("1"
                                                      (inst
                                                       -7
                                                       "Fpred(b)(q)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "FcanonicBounded")
                                                        (("2"
                                                          (rewrite
                                                           "FpredCanonic")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "FcanonicBounded")
                                            (("2"
                                              (rewrite "FpredCanonic")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "FsuccCanonic")
                                    nil
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "FsuccProp") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FsuccCanonic") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (LeMinMaxClosest 0
        (LeMinMaxClosest-2 "" 3790102880
         ("" (skeep)
          (("" (expand "Closest?")
            (("" (skosimp*)
              (("" (expand "abs" 1 2)
                (("" (grind-reals)
                  (("1" (expand "isMin?")
                    (("1" (flatten)
                      (("1" (inst -5 "f!1")
                        (("1" (hide (-1 -2 -3 -7))
                          (("1" (expand "abs" +)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "abs" -3 1)
                                  (("2"
                                    (case
                                     "abs(FtoR(p) - r) = r - FtoR(p)")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "abs")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2"
                                        (case
                                         "FORALL (xrp:nnreal): abs(-xrp)=xrp")
                                        (("1"
                                          (inst - "r-FtoR(p)")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "abs" +)
                    (("2" (lift-if)
                      (("2" (hide (-1 -2 -3 -4))
                        (("2" (expand "isMax?")
                          (("2" (flatten)
                            (("2" (inst - "f!1")
                              (("2" (grind :exclude "FtoR") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (LeMinMaxClosest-1 nil 3321095498
         ("" (skeep)
          (("" (expand "Closest?")
            (("" (skosimp*)
              (("" (expand "abs" 1 2)
                (("" (grind-reals)
                  (("1" (expand "isMin?")
                    (("1" (flatten)
                      (("1" (inst -5 "f!1")
                        (("1" (hide (-1 -2 -3 -7))
                          (("1" (expand "abs" +)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "abs" -3 1)
                                  (("2"
                                    (case
                                     "abs(FtoR(p) - r) = r - FtoR(p)")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "abs")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2"
                                        (case
                                         "FORALL (xrp:nnreal): abs(-xrp)=xrp")
                                        (("1"
                                          (inst - "r-FtoR(p)")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "abs" +)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (hide (-1 -2 -3 -4))
                          (("2" (expand "isMax?")
                            (("2" (flatten)
                              (("2"
                                (inst - "f!1")
                                (("2" (grind :exclude "FtoR") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMin_Total 0
        (isMin_Total-2 "" 3790102881
         ("" (skeep)
          (("" (expand "Total?")
            (("" (skeep)
              (("" (inst 1 "RND_Min(b)(r)")
                (("" (rewrite "RND_Min_isMin") nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak)
        (isMin_Total-1 nil 3318936846
         ("" (skeep)
          (("" (expand "Total?")
            (("" (skeep)
              (("" (inst 1 "RND_Min(b)(r)")
                (("1" (rewrite "RND_Min_isMin") nil nil)
                 ("2" (rewrite "FcanonicBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMin_Compatible 0
        (isMin_Compatible-1 nil 3318887445
         ("" (expand* "Compatible?" "isMin?")
          (("" (skosimp*)
            (("" (split)
              (("1" (grind-reals) nil nil)
               ("2" (skeep)
                (("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMin_Monotone 0
        (isMin_Monotone-1 nil 3318937046
         ("" (expand* "Monotone?" "isMin?")
          (("" (skosimp*) (("" (rewrite -5) nil nil)) nil)) nil)
         nil shostak))
       (isMin_RoundedMode 0
        (isMin_RoundedMode-1 nil 3318937262
         ("" (expand "RoundedMode?")
          (("" (skeep)
            (("" (split)
              (("1" (rewrite "isMin_Total") nil nil)
               ("2" (rewrite "isMin_Compatible") nil nil)
               ("3" (expand "MinOrMax?") (("3" (skeep) nil nil)) nil)
               ("4" (rewrite "isMin_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMin_Unique 0
        (isMin_Unique-1 nil 3318937365
         ("" (expand* "Unique?" "isMin?")
          (("" (skosimp*)
            (("" (case "FtoR(f1!1) <= FtoR(f2!1)")
              (("1" (case "FtoR(f2!1) <= FtoR(f1!1)")
                (("1" (assert) nil nil) ("2" (rewrite -3) nil nil))
                nil)
               ("2" (rewrite -4) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMax_Total 0
        (isMax_Total-1 nil 3319385838
         ("" (expand "Total?")
          (("" (skeep)
            (("" (skeep)
              (("" (inst 1 "Fopp(RND_Min(b)(-r))")
                (("1" (case-replace "r=--r")
                  (("1" (rewrite "MinOppMax")
                    (("1" (rewrite "RND_Min_isMin") nil nil)
                     ("2" (rewrite "FcanonicBounded") nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (rewrite "FoppBounded")
                  (("2" (rewrite "FcanonicBounded") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMax_Compatible 0
        (isMax_Compatible-1 nil 3318937526
         ("" (expand* "Compatible?" "isMax?")
          (("" (skosimp*)
            (("" (split)
              (("1" (grind-reals) nil nil)
               ("2" (skeep) (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMax_Monotone 0
        (isMax_Monotone-1 nil 3318937580
         ("" (expand* "Monotone?" "isMax?")
          (("" (skosimp*) (("" (grind-reals) nil nil)) nil)) nil)
         nil shostak))
       (isMax_RoundedMode 0
        (isMax_RoundedMode-1 nil 3318937619
         ("" (expand* "RoundedMode?")
          (("" (skeep)
            (("" (split)
              (("1" (rewrite "isMax_Total") nil nil)
               ("2" (rewrite "isMax_Compatible") nil nil)
               ("3" (expand "MinOrMax?") (("3" (skeep) nil nil)) nil)
               ("4" (rewrite "isMax_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMax_Unique 0
        (isMax_Unique-1 nil 3318938203
         ("" (expand* "Unique?" "isMax?")
          (("" (skosimp*)
            (("" (case "FtoR(f1!1) <= FtoR(f2!1)")
              (("1" (case "FtoR(f2!1) <= FtoR(f1!1)")
                (("1" (assert) nil nil) ("2" (grind-reals) nil nil))
                nil)
               ("2" (grind-reals) nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZero_Total 0
        (ToZero_Total-1 nil 3319469754
         ("" (skeep)
          (("" (expand "Total?")
            (("" (skeep)
              (("" (expand "ToZero?")
                (("" (grind-reals)
                  (("" (case "0 <= r")
                    (("1" (assert)
                      (("1" (lemma "isMin_Total")
                        (("1" (expand "Total?")
                          (("1" (inst -1 "b" "r") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "isMax_Total")
                        (("2" (expand "Total?")
                          (("2" (inst -1 "b" "r") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZero_Compatible 0
        (ToZero_Compatible-1 nil 3319470173
         ("" (expand "Compatible?")
          (("" (skosimp*)
            (("" (expand "ToZero?")
              (("" (grind-reals)
                (("1" (lemma "isMin_Compatible")
                  (("1" (expand "Compatible?")
                    (("1" (inst -1 "b!1" "r1!1" "r2!1" "f1!1" "f2!1")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "isMax_Compatible")
                  (("2" (expand "Compatible?")
                    (("2" (inst -1 "b!1" "r1!1" "r2!1" "f1!1" "f2!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZero_MinOrMax 0
        (ToZero_MinOrMax-1 nil 3319470366
         ("" (expand* "MinOrMax?" "ToZero?")
          (("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil))
          nil)
         nil shostak))
       (ToZero_Monotone 0
        (ToZero_Monotone-1 nil 3319470437
         ("" (expand "Monotone?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "ToZero?")
                (("" (grind-reals)
                  (("1" (lemma "isMin_Monotone")
                    (("1" (expand "Monotone?")
                      (("1" (inst -1 "b" "r1" "r2" "f1" "f2")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flip-ineq 1)
                    (("2" (case " FtoR(f1) <=0")
                      (("1" (case "0<= FtoR(f2)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 -2 -3 -4 2)
                          (("2" (expand "isMin?")
                            (("2" (flatten)
                              (("2"
                                (inst -3 "(# Fnum:=0, Fexp:=0#)")
                                (("1"
                                  (expand* "FtoR")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (expand "Fbounded?")
                                  (("2"
                                    (grind-reals)
                                    (("2"
                                      (expand "abs" 1)
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -4 -5 2)
                        (("2" (expand "isMax?")
                          (("2" (flatten)
                            (("2" (inst -3 "(# Fnum:=0, Fexp:=0#)")
                              (("1"
                                (expand* "FtoR")
                                (("1" (grind-reals) nil nil))
                                nil)
                               ("2"
                                (expand "Fbounded?")
                                (("2"
                                  (grind-reals)
                                  (("2"
                                    (expand "abs" 1)
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "isMax_Monotone")
                    (("3" (expand "Monotone?")
                      (("3" (inst -1 "b" "r1" "r2" "f1" "f2")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZero_RoundedMode 0
        (ToZero_RoundedMode-1 nil 3319471412
         ("" (skeep)
          (("" (expand "RoundedMode?")
            (("" (split)
              (("1" (rewrite "ToZero_Total") nil nil)
               ("2" (rewrite "ToZero_Compatible") nil nil)
               ("3" (rewrite "ToZero_MinOrMax") nil nil)
               ("4" (rewrite "ToZero_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ToZero_Unique 0
        (ToZero_Unique-1 nil 3319471464
         ("" (expand "Unique?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "ToZero?")
                (("" (grind-reals)
                  (("1" (lemma "isMin_Unique")
                    (("1" (expand "Unique?")
                      (("1" (inst -1 "b" "r" "f1" "f2")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "isMax_Unique")
                    (("2" (expand "Unique?")
                      (("2" (inst -1 "b" "r" "f1" "f2")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_Total 0
        (Closest_Total-1 nil 3319471553
         ("" (skeep)
          (("" (lemma "isMin_Total")
            (("" (lemma "isMax_Total")
              (("" (expand "Total?")
                (("" (skeep)
                  (("" (inst -1 "b" "r")
                    (("" (inst -2 "b" "r")
                      (("" (skosimp*)
                        ((""
                          (case "abs(FtoR(f!1)-r)<= abs(FtoR(f!2)-r)")
                          (("1" (inst 1 "f!1")
                            (("1" (expand "Closest?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (expand* "isMin?" "isMax?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case " FtoR(f!3) <= r")
                                      (("1"
                                        (expand* "abs")
                                        (("1" (grind-reals) nil nil))
                                        nil)
                                       ("2"
                                        (expand* "abs")
                                        (("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flip-ineq 1)
                            (("2" (inst 1 "f!2")
                              (("2"
                                (expand* "Closest?" "isMin?" "isMax?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (case "FtoR(f!3) <= r")
                                      (("1"
                                        (expand* "abs")
                                        (("1" (grind-reals) nil nil))
                                        nil)
                                       ("2"
                                        (expand* "abs")
                                        (("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_total 0
        (Closest_total-1 nil 3681747416
         ("" (skeep)
          (("" (lemma "isMin_Total")
            (("" (lemma "isMax_Total")
              (("" (expand "Total?")
                (("" (expand "total?")
                  (("" (skeep)
                    (("" (inst -1 "b" "r")
                      (("" (inst -2 "b" "r")
                        (("" (skosimp*)
                          ((""
                            (case "abs(FtoR(f!1)-r)<= abs(FtoR(f!2)-r)")
                            (("1" (inst 1 "f!1")
                              (("1"
                                (expand "Closest?")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand* "isMin?" "isMax?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case " FtoR(f!3) <= r")
                                        (("1"
                                          (expand* "abs")
                                          (("1" (grind-reals) nil nil))
                                          nil)
                                         ("2"
                                          (expand* "abs")
                                          (("2" (grind-reals) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flip-ineq 1)
                              (("2"
                                (inst 1 "f!2")
                                (("2"
                                  (expand*
                                   "Closest?"
                                   "isMin?"
                                   "isMax?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (case "FtoR(f!3) <= r")
                                        (("1"
                                          (expand* "abs")
                                          (("1" (grind-reals) nil nil))
                                          nil)
                                         ("2"
                                          (expand* "abs")
                                          (("2" (grind-reals) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_Compatible 0
        (Closest_Compatible-1 nil 3319474184
         ("" (expand "Compatible?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "Closest?")
                (("" (skosimp*)
                  (("" (inst -1 "f!1") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_compatible 0
        (Closest_compatible-1 nil 3681747654
         ("" (skeep)
          (("" (expand "compatible?")
            (("" (skeep)
              (("" (expand "Closest?")
                (("" (skosimp*)
                  (("" (inst -1 "f!1") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_MinOrMax 0
        (Closest_MinOrMax-1 nil 3319474295
         ("" (expand "MinOrMax?")
          (("" (skeep)
            (("" (skosimp*)
              (("" (case "r!1<= FtoR(f!1)")
                (("1" (hide 1)
                  (("1" (expand* "isMax?" "Closest?")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (inst -3 "f!2")
                          (("2" (expand "abs" -3)
                            (("2" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (hide 2)
                    (("2" (expand* "isMin?" "Closest?")
                      (("2" (split)
                        (("1" (assert) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst -3 "f!2")
                            (("2" (expand "abs" -3)
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_min_or_max 0
        (Closest_min_or_max-1 nil 3681747767
         ("" (expand "min_or_max?")
          (("" (skeep)
            (("" (skosimp*)
              (("" (case "r!1<= FtoR(f!1)")
                (("1" (hide 1)
                  (("1" (expand* "isMax?" "Closest?")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (inst -3 "f!2")
                          (("2" (expand "abs" -3)
                            (("2" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (hide 2)
                    (("2" (expand* "isMin?" "Closest?")
                      (("2" (split)
                        (("1" (assert) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst -3 "f!2")
                            (("2" (expand "abs" -3)
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_Monotone 0
        (Closest_Monotone-1 nil 3319474619
         ("" (expand "Monotone?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "Closest?")
                (("" (inst -2 "f2")
                  (("" (inst -3 "f1")
                    (("" (expand* "abs") (("" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_monotone 0
        (Closest_monotone-1 nil 3681747846
         ("" (expand "monotone?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "Closest?")
                (("" (inst -2 "f2")
                  (("" (inst -3 "f1")
                    (("" (expand* "abs") (("" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_RoundedMode 0
        (Closest_RoundedMode-1 nil 3319474736
         ("" (skeep)
          (("" (expand "RoundedMode?")
            (("" (split)
              (("1" (rewrite "Closest_Total") nil nil)
               ("2" (rewrite "Closest_Compatible") nil nil)
               ("3" (rewrite "Closest_MinOrMax") nil nil)
               ("4" (rewrite "Closest_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_rounded_mode 0
        (Closest_rounded_mode-1 nil 3681744086
         ("" (skeep)
          (("" (expand "rounded_mode?")
            (("" (split 1)
              (("1" (use "Closest_total") nil nil)
               ("2" (use "Closest_compatible") nil nil)
               ("3" (use "Closest_min_or_max") nil nil)
               ("4" (use "Closest_monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RND_EClosest_isEclosest 0
        (RND_EClosest_isEclosest-2 "" 3790102908
         ("" (skeep)
          (("" (expand "RND_EClosest")
            (("" (grind-reals)
              (("1" (expand "EvenClosest?")
                (("1" (case "Closest?(b)(r, RND_Min(b)(r))")
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (skosimp*)
                      (("2" (lemma "Closest_MinOrMax")
                        (("2" (expand "MinOrMax?")
                          (("2" (inst -1 "b" "r" "f!1")
                            (("2" (split)
                              (("1"
                                (lemma "isMin_Unique")
                                (("1"
                                  (expand "Unique?")
                                  (("1"
                                    (inst
                                     -1
                                     "b"
                                     "r"
                                     "f!1"
                                     "RND_Min(b)(r)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "RND_Min_isMin")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Closest?" -2)
                                (("2"
                                  (inst -2 "RND_Min(b)(r)")
                                  (("2"
                                    (flip-ineq -2)
                                    (("2"
                                      (case-replace
                                       "FtoR(f!1) = FtoR(RND_Max(b)(r))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "isMax_Unique")
                                        (("2"
                                          (expand "Unique?")
                                          (("2"
                                            (inst
                                             -1
                                             "b"
                                             "r"
                                             "f!1"
                                             "RND_Max(b)(r)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "RND_Max_isMax")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma "RND_Min_isMin" :subst ("b" "b" "r" "r"))
                      (("2"
                        (lemma "RND_Max_isMax" :subst
                         ("b" "b" "r" "r"))
                        (("2" (expand* "isMin?" "isMax?" "Closest?")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (case "FtoR(f!1) <= r")
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (expand "abs")
                                  (("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (expand "EvenClosest?")
                  (("2" (case "Closest?(b)(r, RND_Max(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (lemma "Closest_MinOrMax")
                          (("2" (expand "MinOrMax?")
                            (("2" (inst -1 "b" "r" "f!1")
                              (("2"
                                (split)
                                (("1"
                                  (expand "Closest?" -2)
                                  (("1"
                                    (inst -2 "RND_Max(b)(r)")
                                    (("1"
                                      (flip-ineq -2)
                                      (("1"
                                        (case-replace
                                         "FtoR(f!1) = FtoR(RND_Min(b)(r))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (lemma "isMin_Unique")
                                          (("2"
                                            (expand "Unique?")
                                            (("2"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "f!1"
                                               "RND_Min(b)(r)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "RND_Min_isMin")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "isMax_Unique")
                                  (("2"
                                    (expand "Unique?")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Max(b)(r)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "RND_Max_isMax")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "EvenClosest?")
                (("3" (split)
                  (("1"
                    (lemma "RND_Min_isMin" :subst ("b" "b" "r" "r"))
                    (("1"
                      (lemma "RND_Max_isMax" :subst ("b" "b" "r" "r"))
                      (("1" (expand* "isMin?" "isMax?" "Closest?")
                        (("1" (flatten)
                          (("1" (skosimp*)
                            (("1" (case "FtoR(f!1) <= r")
                              (("1"
                                (expand "abs")
                                (("1" (grind-reals) nil nil))
                                nil)
                               ("2"
                                (expand "abs")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (lemma "MaxSuccMin")
                      (("2" (lemma "OddFsuccEven")
                        (("2"
                          (inst -2 "b" "RND_Min(b)(r)" "RND_Max(b)(r)"
                           "r")
                          (("2" (split)
                            (("1" (inst -2 "b" "RND_Min(b)(r)")
                              (("1"
                                (split -2)
                                (("1"
                                  (case-replace
                                   "Fnormalize(b)(RND_Max(b)(r))=RND_Max(b)(r)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (rewrite
                                     "FcanonicUnique"
                                     :subst
                                     ("b" "b"))
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "odd_or_even_int"
                                   :subst
                                   ("x" "Fnum(RND_Min(b)(r))"))
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (rewrite "RND_Max_isMax") nil nil)
                             ("4" (rewrite "RND_Min_isMin") nil nil)
                             ("5" (assert) nil nil)
                             ("6" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (expand "EvenClosest?")
                  (("4" (case "Closest?(b)(r, RND_Min(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (lemma "Closest_MinOrMax")
                          (("2" (expand "MinOrMax?")
                            (("2" (inst -1 "b" "r" "f!1")
                              (("2"
                                (split)
                                (("1"
                                  (lemma "isMin_Unique")
                                  (("1"
                                    (expand "Unique?")
                                    (("1"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Min(b)(r)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "RND_Min_isMin")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "isMax_Unique")
                                  (("2"
                                    (expand "Unique?")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Max(b)(r)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "RND_Max_isMax")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (flip-ineq 2)
                (("5" (expand "EvenClosest?")
                  (("5" (case "Closest?(b)(r, RND_Min(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2"
                        (case-replace
                         "Fnormalize(b)(RND_Min(b)(r))=RND_Min(b)(r)")
                        (("1" (assert) nil nil)
                         ("2"
                          (rewrite "FcanonicUnique" :subst ("b" "b"))
                          nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (RND_EClosest_isEclosest-1 nil 3319900439
         ("" (skeep)
          (("" (expand "RND_EClosest")
            (("" (grind-reals)
              (("1" (expand "EvenClosest?")
                (("1" (case "Closest?(b)(r, RND_Min(b)(r))")
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (skosimp*)
                      (("2" (lemma "Closest_MinOrMax")
                        (("2" (expand "MinOrMax?")
                          (("2" (inst -1 "b" "r" "f!1")
                            (("2" (split)
                              (("1"
                                (lemma "isMin_Unique")
                                (("1"
                                  (expand "Unique?")
                                  (("1"
                                    (inst
                                     -1
                                     "b"
                                     "r"
                                     "f!1"
                                     "RND_Min(b)(r)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "RND_Min_isMin")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Closest?" -2)
                                (("2"
                                  (inst -2 "RND_Min(b)(r)")
                                  (("2"
                                    (flip-ineq -2)
                                    (("2"
                                      (case-replace
                                       "FtoR(f!1) = FtoR(RND_Max(b)(r))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "isMax_Unique")
                                        (("2"
                                          (expand "Unique?")
                                          (("2"
                                            (inst
                                             -1
                                             "b"
                                             "r"
                                             "f!1"
                                             "RND_Max(b)(r)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "RND_Max_isMax")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "FcanonicBounded")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma "RND_Min_isMin" :subst ("b" "b" "r" "r"))
                      (("2"
                        (lemma "RND_Max_isMax" :subst
                         ("b" "b" "r" "r"))
                        (("2" (expand* "isMin?" "isMax?" "Closest?")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (case "FtoR(f!1) <= r")
                                (("1"
                                  (expand "abs")
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (expand "abs")
                                  (("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "FcanonicBounded") nil nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (expand "EvenClosest?")
                  (("2" (case "Closest?(b)(r, RND_Max(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (lemma "Closest_MinOrMax")
                          (("2" (expand "MinOrMax?")
                            (("2" (inst -1 "b" "r" "f!1")
                              (("2"
                                (split)
                                (("1"
                                  (expand "Closest?" -2)
                                  (("1"
                                    (inst -2 "RND_Max(b)(r)")
                                    (("1"
                                      (flip-ineq -2)
                                      (("1"
                                        (case-replace
                                         "FtoR(f!1) = FtoR(RND_Min(b)(r))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (lemma "isMin_Unique")
                                          (("2"
                                            (expand "Unique?")
                                            (("2"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "f!1"
                                               "RND_Min(b)(r)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "RND_Min_isMin")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "FcanonicBounded")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "isMax_Unique")
                                  (("2"
                                    (expand "Unique?")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Max(b)(r)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "RND_Max_isMax")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "EvenClosest?")
                (("3" (split)
                  (("1"
                    (lemma "RND_Min_isMin" :subst ("b" "b" "r" "r"))
                    (("1"
                      (lemma "RND_Max_isMax" :subst ("b" "b" "r" "r"))
                      (("1" (expand* "isMin?" "isMax?" "Closest?")
                        (("1" (flatten)
                          (("1" (skosimp*)
                            (("1" (case "FtoR(f!1) <= r")
                              (("1"
                                (expand "abs")
                                (("1" (grind-reals) nil nil))
                                nil)
                               ("2"
                                (expand "abs")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (lemma "MaxSuccMin")
                      (("2" (lemma "OddFsuccEven")
                        (("2"
                          (inst -2 "b" "RND_Min(b)(r)" "RND_Max(b)(r)"
                           "r")
                          (("2" (split)
                            (("1" (inst -2 "b" "RND_Min(b)(r)")
                              (("1"
                                (split -2)
                                (("1"
                                  (case-replace
                                   "Fnormalize(b)(RND_Max(b)(r))=RND_Max(b)(r)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (rewrite
                                     "FcanonicUnique"
                                     :subst
                                     ("b" "b"))
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "odd_or_even_int"
                                   :subst
                                   ("x" "Fnum(RND_Min(b)(r))"))
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (rewrite "RND_Max_isMax") nil nil)
                             ("4" (rewrite "RND_Min_isMin") nil nil)
                             ("5" (assert) nil nil)
                             ("6" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (expand "EvenClosest?")
                  (("4" (case "Closest?(b)(r, RND_Min(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (lemma "Closest_MinOrMax")
                          (("2" (expand "MinOrMax?")
                            (("2" (inst -1 "b" "r" "f!1")
                              (("2"
                                (split)
                                (("1"
                                  (lemma "isMin_Unique")
                                  (("1"
                                    (expand "Unique?")
                                    (("1"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Min(b)(r)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "RND_Min_isMin")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "isMax_Unique")
                                  (("2"
                                    (expand "Unique?")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "r"
                                       "f!1"
                                       "RND_Max(b)(r)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "RND_Max_isMax")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "FcanonicBounded")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil)
               ("5" (flip-ineq 2)
                (("5" (expand "EvenClosest?")
                  (("5" (case "Closest?(b)(r, RND_Min(b)(r))")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2"
                        (case-replace
                         "Fnormalize(b)(RND_Min(b)(r))=RND_Min(b)(r)")
                        (("1" (assert) nil nil)
                         ("2"
                          (rewrite "FcanonicUnique" :subst ("b" "b"))
                          nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma "RND_Min_isMin" :subst
                         ("b" "b" "r" "r"))
                        (("2"
                          (lemma "RND_Max_isMax" :subst
                           ("b" "b" "r" "r"))
                          (("2" (expand* "isMin?" "isMax?" "Closest?")
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case "FtoR(f!1) <= r")
                                  (("1"
                                    (expand "abs")
                                    (("1" (grind-reals) nil nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_bounded_exact_rep_TCC1 0
        (Closest_bounded_exact_rep_TCC1-1 nil 3698163284
         ("" (subtype-tcc) nil nil)
         ((hat_02n formula-decl nil power_series series)) nil
         (Closest_bounded_exact_rep subtype "float.exp"
          "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
       (Closest_bounded_exact_rep 0
        (Closest_bounded_exact_rep-1 nil 3698163434
         ("" (skeep*)
          (("" (expand "exactly_representable")
            (("" (typepred "RtoF")
              (("" (expand "Closest?")
                (("" (inst -2 "x")
                  (("" (inst -2 "float_pair(num,exp)")
                    (("1" (hide -1)
                      (("1" (expand "FtoR" -1 2)
                        (("1" (expand "float_pair")
                          (("1" (replace -4 -1 :dir rl)
                            (("1" (assert)
                              (("1"
                                (expand "abs" -1 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Fbounded?")
                      (("2" (expand "float_pair")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestRtoF_exact_rep_conv 0
        (ClosestRtoF_exact_rep_conv-1 nil 3698165766
         ("" (skeep*)
          (("" (expand "exact_rep_conservation")
            (("" (skeep*)
              (("" (use "Closest_bounded_exact_rep")
                (("" (assert)
                  (("" (hide 2)
                    (("" (inst 1 "Fnum(f)" "n+Fexp(f)")
                      (("" (expand "FtoR")
                        (("" (typepred "f")
                          (("" (expand "Fbounded?")
                            (("" (flatten)
                              ((""
                                (assert)
                                ((""
                                  (use "expt_plus")
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Closest_int_exact_rep 0
        (Closest_int_exact_rep-1 nil 3698097844
         ("" (skeep*)
          (("" (case "abs(z)=vNum(b)")
            (("1" (expand "exactly_representable")
              (("1" (typepred "RtoF")
                (("1" (inst -2 "z")
                  (("1" (expand "Closest?")
                    (("1" (expand "abs" -3)
                      (("1" (lift-if -3)
                        (("1" (split -3)
                          (("1" (flatten)
                            (("1"
                              (inst -4 "float_pair(-vNum(b)/radix,1)")
                              (("1" (grind-reals -4) nil nil)
                               ("2"
                                (expand "Fbounded?")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (expand "float_pair")
                                    (("1"
                                      (expand "abs")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "-(-vNum(b) / radix) = vNum(b) / radix")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (typepred "radix")
                                                  (("1"
                                                    (lemma
                                                     "lt_div_lt_pos1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "vNum(b)"
                                                       "1"
                                                       "radix"
                                                       "vNum(b)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (grind-reals 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "float_pair")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "vNum")
                                (("3"
                                  (case
                                   "-radix ^ Prec(b) / radix = - (radix^Prec(b)/radix)")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (lemma "expt_x1")
                                      (("1"
                                        (case
                                         "radix ^ Prec(b) / radix = radix ^ (Prec(b)-1)")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1" (subtype-tcc) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "expt_div")
                                          (("2"
                                            (inst
                                             -1
                                             "Prec(b)"
                                             "1"
                                             "radix")
                                            (("2"
                                              (inst -2 "radix")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :hide? t)
                              (("2"
                                (inst -2 "float_pair(vNum(b)/radix,1)")
                                (("1" (grind-reals -2) nil nil)
                                 ("2"
                                  (expand "float_pair")
                                  (("2"
                                    (expand "Fbounded?")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case
                                         "abs(vNum(b) / radix) = vNum(b) / radix")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (lemma "lt_div_lt_pos1")
                                            (("1"
                                              (inst
                                               -1
                                               "vNum(b)"
                                               "1"
                                               "radix"
                                               "vNum(b)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "vNum")
                                  (("3"
                                    (case
                                     "radix ^ Prec(b) / radix = radix ^ (Prec(b)-1)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1" (subtype-tcc) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "expt_div")
                                      (("2"
                                        (inst -1 "Prec(b)" "1" "radix")
                                        (("2"
                                          (lemma "expt_x1")
                                          (("2"
                                            (inst -1 "radix")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "Closest_bounded_exact_rep")
              (("2" (assert)
                (("2" (hide 3)
                  (("2" (inst 1 "z" "0") (("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestRNDF_FtoR_inverse 0
        (ClosestRNDF_FtoR_inverse-1 nil 3698149233
         ("" (skeep*)
          (("" (expand "FtoR_inverse")
            (("" (skeep)
              (("" (case "NOT FtoR(RtoF(FtoR(f))) = FtoR(f)")
                (("1" (hide 2)
                  (("1" (typepred "RtoF")
                    (("1" (typepred "round")
                      (("1" (inst -2 "FtoR(f)")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (expand "Closest?")
                              (("1"
                                (inst -1 "f")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "abs" -1 2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "FcanonicUnique")
                  (("2" (assert)
                    (("2" (hide-all-but 1)
                      (("2" (typepred "RtoF")
                        (("2" (inst? -2) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_Total 0
        (EvenClosest_Total-2 "" 3790102917
         ("" (skeep)
          (("" (expand "Total?")
            (("" (skeep)
              (("" (inst 1 "RND_EClosest(b)(r)")
                (("" (rewrite "RND_EClosest_isEclosest") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (EvenClosest_Total-1 nil 3319540196
         ("" (skeep)
          (("" (expand "Total?")
            (("" (skeep)
              (("" (inst 1 "RND_EClosest(b)(r)")
                (("1" (rewrite "RND_EClosest_isEclosest") nil nil)
                 ("2" (rewrite "FcanonicBounded") nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_total 0
        (EvenClosest_total-1 nil 3682165501
         ("" (skeep)
          (("" (expand "total?")
            (("" (use "EvenClosest_Total")
              (("" (expand "Total?") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_Compatible 0
        (EvenClosest_Compatible-1 nil 3319798879
         ("" (lemma "Closest_Compatible")
          (("" (expand "Compatible?")
            (("" (skeep)
              (("" (skeep)
                (("" (expand "EvenClosest?")
                  (("" (split)
                    (("1" (flatten)
                      (("1" (inst -1 "b" "r1" "r2" "f1" "f2")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -3)
                        (("1"
                          (case-replace
                           "Fnormalize(b)(f2)=Fnormalize(b)(f1)")
                          (("1"
                            (rewrite "FcanonicUnique" :subst ("b" "b"))
                            nil nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst -1 "f!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_compatible 0
        (EvenClosest_compatible-1 nil 3682165663
         ("" (lemma "EvenClosest_Compatible")
          (("" (expand "compatible?")
            (("" (expand "Compatible?")
              (("" (skeep)
                (("" (inst?)
                  (("" (skeep)
                    (("" (inst? -1 :where 1)
                      (("" (inst? -1 :where -2) (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_MinOrMax 0
        (EvenClosest_MinOrMax-1 nil 3319799137
         ("" (lemma "Closest_MinOrMax")
          (("" (expand "MinOrMax?")
            (("" (skeep)
              (("" (skeep)
                (("" (expand "EvenClosest?")
                  (("" (flatten)
                    (("" (inst -1 "b" "r" "f") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_min_or_max 0
        (EvenClosest_min_or_max-1 nil 3682165832
         ("" (skeep)
          (("" (expand "min_or_max?")
            (("" (use "EvenClosest_MinOrMax")
              (("" (expand "MinOrMax?") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_Monotone 0
        (EvenClosest_Monotone-1 nil 3319799211
         ("" (lemma "Closest_Monotone")
          (("" (expand "Monotone?")
            (("" (skeep)
              (("" (skeep)
                (("" (expand "EvenClosest?")
                  (("" (flatten)
                    (("" (inst -1 "b" "r1" "r2" "f1" "f2")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_monotone 0
        (EvenClosest_monotone-1 nil 3682166058
         ("" (skeep)
          (("" (expand "monotone?")
            (("" (use "EvenClosest_Monotone")
              (("" (expand "Monotone?")
                (("" (skeep)
                  (("" (inst? -1 :where 1)
                    (("" (inst? -1 :where -2) (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_RoundedMode 0
        (EvenClosest_RoundedMode-1 nil 3319799281
         ("" (skeep)
          (("" (expand "RoundedMode?")
            (("" (split)
              (("1" (rewrite "EvenClosest_Total") nil nil)
               ("2" (rewrite "EvenClosest_Compatible") nil nil)
               ("3" (rewrite "EvenClosest_MinOrMax") nil nil)
               ("4" (rewrite "EvenClosest_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_rounded_mode 0
        (EvenClosest_rounded_mode-1 nil 3682165606
         ("" (skeep)
          (("" (expand "rounded_mode?")
            (("" (split 1)
              (("1" (use "EvenClosest_total") nil nil)
               ("2" (use "EvenClosest_compatible") nil nil)
               ("3" (use "EvenClosest_min_or_max") nil nil)
               ("4" (use "EvenClosest_monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (EvenClosest_Unique 0
        (EvenClosest_Unique-1 nil 3319801122
         ("" (expand "Unique?")
          (("" (skeep)
            (("" (skeep)
              (("" (lemma "EvenClosest_MinOrMax")
                (("" (expand "MinOrMax?")
                  (("" (inst-cp -1 "b" "r" "f1")
                    (("" (split)
                      (("1" (inst -2 "b" "r" "f2")
                        (("1" (split)
                          (("1" (lemma "isMin_Unique")
                            (("1" (expand "Unique?")
                              (("1"
                                (inst -1 "b" "r" "f1" "f2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "EvenClosest?")
                            (("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "MaxSuccMin")
                                    (("1"
                                      (inst
                                       -1
                                       "b"
                                       "Fnormalize(b)(f1)"
                                       "Fnormalize(b)(f2)"
                                       "r")
                                      (("1"
                                        (split)
                                        (("1"
                                          (case
                                           "odd?(Fnum(Fnormalize(b)(f2)))")
                                          (("1"
                                            (lemma "odd_iff_not_even")
                                            (("1"
                                              (inst
                                               -1
                                               "Fnum(Fnormalize(b)(f2))")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite -1)
                                            (("2"
                                              (rewrite "EvenFsuccOdd")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (lemma "isMax_Compatible")
                                          (("3"
                                            (expand "Compatible?")
                                            (("3"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "r"
                                               "f2"
                                               "Fnormalize(b)(f2)")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "isMin_Compatible")
                                          (("4"
                                            (expand "Compatible?")
                                            (("4"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "r"
                                               "f1"
                                               "Fnormalize(b)(f1)")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5" (assert) nil nil)
                                         ("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -1 "f1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "f2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (inst -2 "b" "r" "f2")
                        (("2" (split)
                          (("1" (expand "EvenClosest?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "MaxSuccMin")
                                    (("1"
                                      (inst
                                       -1
                                       "b"
                                       "Fnormalize(b)(f2)"
                                       "Fnormalize(b)(f1)"
                                       "r")
                                      (("1"
                                        (split)
                                        (("1"
                                          (case
                                           "odd?(Fnum(Fnormalize(b)(f1)))")
                                          (("1"
                                            (lemma "odd_iff_not_even")
                                            (("1"
                                              (inst
                                               -1
                                               "Fnum(Fnormalize(b)(f1))")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (copy -2)
                                            (("2"
                                              (rewrite -2)
                                              (("2"
                                                (rewrite
                                                 "EvenFsuccOdd")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (lemma "isMax_Compatible")
                                          (("3"
                                            (expand "Compatible?")
                                            (("3"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "r"
                                               "f1"
                                               "Fnormalize(b)(f1)")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "isMin_Compatible")
                                          (("4"
                                            (expand "Compatible?")
                                            (("4"
                                              (inst
                                               -1
                                               "b"
                                               "r"
                                               "r"
                                               "f2"
                                               "Fnormalize(b)(f2)")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5" (assert) nil nil)
                                         ("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -1 "f1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "f2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "isMax_Unique")
                            (("2" (expand "Unique?")
                              (("2"
                                (inst -1 "b" "r" "f1" "f2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_Total 0
        (AFZClosest_Total-1 nil 3321037213
         ("" (lemma "isMin_Total")
          (("" (lemma "isMax_Total")
            (("" (expand "Total?")
              (("" (skeep)
                (("" (skeep)
                  (("" (inst -1 "b" "r")
                    (("" (inst -2 "b" "r")
                      (("" (skosimp*)
                        (("" (case "abs(FtoR(f!1)-r)<abs(FtoR(f!2)-r)")
                          (("1" (inst 1 "f!1")
                            (("1" (expand "AFZClosest?")
                              (("1"
                                (case "Closest?(b)(r, f!1)")
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lemma "Closest_MinOrMax")
                                          (("2"
                                            (expand "MinOrMax?")
                                            (("2"
                                              (inst -1 "b" "r" "f!3")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "Closest?"
                                                   -2)
                                                  (("1"
                                                    (inst -2 "f!1")
                                                    (("1"
                                                      (flip-ineq -2)
                                                      (("1"
                                                        (case-replace
                                                         "FtoR(f!3)=FtoR(f!2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "isMin_Unique")
                                                          (("2"
                                                            (expand
                                                             "Unique?")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "b"
                                                               "r"
                                                               "f!3"
                                                               "f!2")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "isMax_Unique")
                                                  (("2"
                                                    (expand "Unique?")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "b"
                                                       "r"
                                                       "f!3"
                                                       "f!1")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "LeMinMaxClosest")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       "f!1"
                                       "f!2"
                                       "f!1"
                                       "r")
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2" (grind-reals) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (assert) nil nil)
                                         ("5" (propax) nil nil)
                                         ("6" (assert) nil nil)
                                         ("7" (assert) nil nil)
                                         ("8" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flip-ineq 1)
                            (("2" (split-ineq -1)
                              (("1"
                                (case "0 <= r")
                                (("1"
                                  (inst 1 "f!1")
                                  (("1"
                                    (expand "AFZClosest?")
                                    (("1"
                                      (split)
                                      (("1"
                                        (lemma "LeMinMaxClosest")
                                        (("1"
                                          (inst
                                           -1
                                           "b"
                                           "f!1"
                                           "f!2"
                                           "f!1"
                                           "r")
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (assert) nil nil)
                                             ("5" (propax) nil nil)
                                             ("6" (assert) nil nil)
                                             ("7" (assert) nil nil)
                                             ("8" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "isMax?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "abs" 1)
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flip-ineq 1)
                                  (("2"
                                    (inst 1 "f!2")
                                    (("2"
                                      (expand "AFZClosest?")
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "LeMinMaxClosest")
                                          (("1"
                                            (inst
                                             -1
                                             "b"
                                             "f!2"
                                             "f!2"
                                             "f!1"
                                             "r")
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (propax) nil nil)
                                               ("4" (assert) nil nil)
                                               ("5" (propax) nil nil)
                                               ("6" (assert) nil nil)
                                               ("7" (assert) nil nil)
                                               ("8" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "isMin?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "abs" 1)
                                                (("2"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "abs(FtoR(f!2) - r) < abs(FtoR(f!1) - r)")
                                (("1"
                                  (hide -2 1)
                                  (("1"
                                    (inst 1 "f!2")
                                    (("1"
                                      (expand "AFZClosest?")
                                      (("1"
                                        (case "Closest?(b)(r, f!2)")
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (lemma
                                                   "Closest_MinOrMax")
                                                  (("2"
                                                    (expand
                                                     "MinOrMax?")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "b"
                                                       "r"
                                                       "f!3")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "isMin_Unique")
                                                          (("1"
                                                            (expand
                                                             "Unique?")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "b"
                                                               "r"
                                                               "f!3"
                                                               "f!2")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "Closest?"
                                                           -2)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "f!2")
                                                            (("2"
                                                              (flip-ineq
                                                               -2)
                                                              (("2"
                                                                (case-replace
                                                                 "FtoR(f!3)=FtoR(f!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "isMax_Unique")
                                                                  (("2"
                                                                    (expand
                                                                     "Unique?")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "b"
                                                                       "r"
                                                                       "f!3"
                                                                       "f!1")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "LeMinMaxClosest")
                                          (("2"
                                            (inst
                                             -1
                                             "b"
                                             "f!2"
                                             "f!2"
                                             "f!1"
                                             "r")
                                            (("2"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (propax) nil nil)
                                               ("4" (assert) nil nil)
                                               ("5" (propax) nil nil)
                                               ("6" (assert) nil nil)
                                               ("7" (assert) nil nil)
                                               ("8" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_Compatible 0
        (AFZClosest_Compatible-2 "" 3790102925
         ("" (skeep)
          (("" (lemma "Closest_Compatible")
            (("" (inst -1 "b")
              (("" (expand "Compatible?")
                (("" (skeep)
                  (("" (expand "AFZClosest?")
                    (("" (flatten)
                      (("" (split 1)
                        (("1" (inst -1 "r1" "r2" "f1" "f2")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (rewrite -6 :dir rl)
                                  (("2" (rewrite -1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak)
        (AFZClosest_Compatible-1 nil 3321035712
         ("" (skeep)
          (("" (lemma "Closest_Compatible")
            (("" (inst -1 "b")
              (("" (expand "Compatible?")
                (("" (skeep)
                  (("" (expand "AFZClosest?")
                    (("" (flatten)
                      (("" (split 1)
                        (("1" (inst -1 "r1" "r2" "f1" "f2")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (rewrite -6 :dir rl)
                                  (("2"
                                    (rewrite -6)
                                    (("2" (rewrite -1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_MinOrMax 0
        (AFZClosest_MinOrMax-1 nil 3321035974
         ("" (lemma "Closest_MinOrMax")
          (("" (expand "MinOrMax?")
            (("" (skeep)
              (("" (skosimp*)
                (("" (inst -1 "b" "r!1" "f!1")
                  (("" (split)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (expand "AFZClosest?")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_Monotone 0
        (AFZClosest_Monotone-1 nil 3321036075
         ("" (lemma "Closest_Monotone")
          (("" (expand "Monotone?")
            (("" (skeep)
              (("" (skeep)
                (("" (expand "AFZClosest?")
                  (("" (flatten)
                    (("" (inst -1 "b" "r1" "r2" "f1" "f2")
                      (("" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_RoundedMode 0
        (AFZClosest_RoundedMode-1 nil 3321036146
         ("" (skeep)
          (("" (expand "RoundedMode?")
            (("" (split)
              (("1" (rewrite "AFZClosest_Total") nil nil)
               ("2" (rewrite "AFZClosest_Compatible") nil nil)
               ("3" (rewrite "AFZClosest_MinOrMax") nil nil)
               ("4" (rewrite "AFZClosest_Monotone") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (AFZClosest_Unique 0
        (AFZClosest_Unique-1 nil 3321036197
         ("" (expand "Unique?")
          (("" (skeep)
            (("" (skeep)
              (("" (expand "AFZClosest?")
                (("" (flatten)
                  (("" (split)
                    (("1" (split)
                      (("1" (lemma "Closest_MinOrMax")
                        (("1" (expand "MinOrMax?")
                          (("1" (inst-cp -1 "b" "r" "f1")
                            (("1" (inst -1 "b" "r" "f2")
                              (("1"
                                (split)
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "isMin_Unique")
                                    (("1"
                                      (expand "Unique?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -1 "b" "r" "f1" "f2")
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "0<= r")
                                    (("1"
                                      (case "0<= FtoR(f1)")
                                      (("1"
                                        (case "0<= FtoR(f2)")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (grind-reals)
                                            (("1"
                                              (expand*
                                               "isMin?"
                                               "isMax?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "RleRoundedR0"
                                           :subst
                                           ("b"
                                            "b"
                                            "P"
                                            "isMin?"
                                            "r"
                                            "r"
                                            "f"
                                            "f2"))
                                          (("2"
                                            (rewrite
                                             "isMin_RoundedMode")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite
                                         "RleRoundedR0"
                                         :subst
                                         ("b"
                                          "b"
                                          "P"
                                          "isMax?"
                                          "r"
                                          "r"
                                          "f"
                                          "f1"))
                                        (("2"
                                          (rewrite "isMax_RoundedMode")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 1)
                                      (("2"
                                        (case "FtoR(f2) <= 0")
                                        (("1"
                                          (case "FtoR(f1) <= 0")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (grind-reals)
                                              (("1"
                                                (expand*
                                                 "isMin?"
                                                 "isMax?")
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "RleRoundedLessR0"
                                             :subst
                                             ("b"
                                              "b"
                                              "P"
                                              "isMax?"
                                              "r"
                                              "r"
                                              "f"
                                              "f1"))
                                            (("2"
                                              (rewrite
                                               "isMax_RoundedMode")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "RleRoundedLessR0"
                                           :subst
                                           ("b"
                                            "b"
                                            "P"
                                            "isMin?"
                                            "r"
                                            "r"
                                            "f"
                                            "f2"))
                                          (("2"
                                            (rewrite
                                             "isMin_RoundedMode")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (split)
                                  (("1"
                                    (case "0<=r")
                                    (("1"
                                      (case "0<=FtoR(f1)")
                                      (("1"
                                        (case "0<=FtoR(f2)")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (grind-reals)
                                            (("1"
                                              (expand*
                                               "isMin?"
                                               "isMax?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -6 "f1")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "RleRoundedR0"
                                           :subst
                                           ("b"
                                            "b"
                                            "P"
                                            "isMax?"
                                            "r"
                                            "r"
                                            "f"
                                            "f2"))
                                          (("2"
                                            (rewrite
                                             "isMax_RoundedMode")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite
                                         "RleRoundedR0"
                                         :subst
                                         ("b"
                                          "b"
                                          "P"
                                          "isMin?"
                                          "r"
                                          "r"
                                          "f"
                                          "f1"))
                                        (("2"
                                          (rewrite "isMin_RoundedMode")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flip-ineq 1)
                                      (("2"
                                        (case "FtoR(f2) <= 0")
                                        (("1"
                                          (case "FtoR(f1) <= 0")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (grind-reals)
                                              (("1"
                                                (expand*
                                                 "isMin?"
                                                 "isMax?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -4 "f2")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "RleRoundedLessR0"
                                             :subst
                                             ("b"
                                              "b"
                                              "P"
                                              "isMin?"
                                              "r"
                                              "r"
                                              "f"
                                              "f1"))
                                            (("2"
                                              (rewrite
                                               "isMin_RoundedMode")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "RleRoundedLessR0"
                                           :subst
                                           ("b"
                                            "b"
                                            "P"
                                            "isMax?"
                                            "r"
                                            "r"
                                            "f"
                                            "f2"))
                                          (("2"
                                            (rewrite
                                             "isMax_RoundedMode")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "isMax_Unique")
                                    (("2"
                                      (expand "Unique?")
                                      (("2"
                                        (inst -1 "b" "r" "f1" "f2")
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite -1) nil nil))
                      nil)
                     ("2" (rewrite -1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RoundedProjectorEq 0
        (RoundedProjectorEq-1 nil 3319475225
         ("" (skosimp*)
          (("" (expand* "RoundedMode?" "MinOrMax?")
            (("" (flatten)
              (("" (inst -5 "FtoR(f!1)" "p!1")
                (("" (split)
                  (("1" (expand "isMin?")
                    (("1" (flatten)
                      (("1" (inst -2 "f!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "isMax?")
                    (("2" (flatten)
                      (("2" (inst -2 "f!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RoundedProjector 0
        (RoundedProjector-1 nil 3319475578
         ("" (skosimp*)
          (("" (copy -2)
            (("" (expand "RoundedMode?" -1)
              (("" (flatten)
                (("" (expand "Total?")
                  (("" (inst -1 "FtoR(f!1)")
                    (("" (skosimp*)
                      (("" (expand "Compatible?")
                        ((""
                          (inst -2 "FtoR(f!1)" "FtoR(f!1)" "f!2" "f!1")
                          (("" (assert)
                            (("" (lemma "RoundedProjectorEq")
                              ((""
                                (inst -1 "P!1" "b!1" "f!1" "f!2")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (isMin_Rep 0
        (isMin_Rep-1 nil 3319971693
         ("" (skeep)
          (("" (case "Fexp(Fnormalize(b)(f)) <= Fexp(p)")
            (("1" (inst 1 "Fnum(p)")
              (("1" (case "FtoR(f) =FtoR(p)")
                (("1" (rewrite -1)
                  (("1" (expand "FtoR") (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (lemma "FsuccZleEq")
                  (("2" (inst -1 "b" "Fnormalize(b)(f)" "p")
                    (("2" (split)
                      (("1" (assert) nil nil) ("2" (propax) nil nil)
                       ("3" (hide 2 3)
                        (("3" (expand "isMin?")
                          (("3" (flatten)
                            (("3"
                              (inst -4 "Fsucc(b)(Fnormalize(b)(f))")
                              (("1"
                                (flip-ineq 1)
                                (("1"
                                  (split)
                                  (("1"
                                    (flip-ineq -1)
                                    (("1"
                                      (lemma "FsuccLt")
                                      (("1"
                                        (inst
                                         -1
                                         "b"
                                         "Fnormalize(b)(f)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                (("2"
                                  (rewrite "FsuccCanonic")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "isMin?")
                        (("4" (flatten) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flip-ineq 1)
              (("2"
                (inst 1
                 "Fnum(Fnormalize(b)(f))*radix^(Fexp(Fnormalize(b)(f))-Fexp(p))")
                (("1"
                  (rewrite "FnormalizeCorrect" :dir rl :subst
                   ("b" "b" "p" "f"))
                  (("1" (expand "FtoR")
                    (("1" (rewrite "expt_div" :dir rl)
                      (("1" (field 1) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "^") (("2" (grind-reals) nil nil)) nil)
                 ("3" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RoundedModeRep 0
        (RoundedModeRep-1 nil 3319911557
         ("" (skeep)
          (("" (expand* "RoundedMode?" "MinOrMax?")
            (("" (flatten)
              (("" (inst -4 "FtoR(p)" "f")
                (("" (split)
                  (("1" (lemma "isMin_Rep")
                    (("1" (inst -1 "b" "f" "p")
                      (("1" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "isMin_Rep")
                    (("2" (inst -1 "b" "Fopp(f)" "Fopp(p)")
                      (("2" (split)
                        (("1" (skosimp*)
                          (("1" (inst 1 "-m!1")
                            (("1" (expand* "FtoR" "Fopp")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "FoppCorrect")
                          (("2" (rewrite "MaxOppMin") nil nil)) nil)
                         ("3" (rewrite "FoppBounded") nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RoundedModeUlp 0
        (RoundedModeUlp-1 nil 3319477842
         ("" (skeep)
          (("" (expand "RoundedMode?")
            (("" (expand "MinOrMax?")
              (("" (flatten)
                (("" (inst -4 "r" "p")
                  (("" (split)
                    (("1" (expand "isMin?")
                      (("1" (flatten)
                        (("1"
                          (case-replace "abs(FtoR(p) - r)=r-FtoR(p)")
                          (("1" (lemma "FloatPlusUlpBounded")
                            (("1" (inst -1 "b" "p")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst -4 "f!1")
                                    (("1"
                                      (split)
                                      (("1"
                                        (flip-ineq -1)
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "Fulp")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite -1)
                                        (("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 -1))
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "isMax?")
                      (("2" (flatten)
                        (("2"
                          (case-replace "abs(FtoR(p) - r)=FtoR(p)-r")
                          (("1" (lemma "FloatMinusUlpBounded")
                            (("1" (inst -1 "b" "p")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst -4 "f!1")
                                    (("1"
                                      (split)
                                      (("1"
                                        (flip-ineq -1)
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "Fulp")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite -1)
                                        (("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 -1))
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (rnd_tozero_is_tozero?_j 0
        (rnd_tozero_is_tozero?_j-1 nil 3877462011
         ("" (skeep)
          (("" (split)
            (("1" (use "RND_ToZero_ToZero") nil nil)
             ("2" (skeep)
              (("2" (typepred "RND_ToZero(b)(x)")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         nil nil
         (rnd_tozero_is_tozero?_j subtype "float.RND_ToZero(float.b)"
          "float.CanonicRoundingFun(float.b, float.ToZero?(float.b))")))
       (ulp_monotone 0
        (ulp_monotone-1 nil 3680964440
         ("" (skeep)
          (("" (expand "ulp")
            (("" (expand "ulp")
              (("" (use "FulpMonotone")
                (("" (split)
                  (("1" (propax) nil nil)
                   ("2" (hide 2)
                    (("2" (use "FtoR_monotonic")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (expand "RND_ToZero")
                            (("2" (use "RND_Min_isMin")
                              (("2"
                                (lemma "RND_Min_isMin")
                                (("2"
                                  (inst -1 "b" "y")
                                  (("2"
                                    (use "isMin_Monotone")
                                    (("2"
                                      (expand "Monotone?")
                                      (("2"
                                        (inst
                                         -1
                                         "x"
                                         "y"
                                         "RND_Min(b)(x)"
                                         "RND_Min(b)(y)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "FtoR_monotonic")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "RleRoundedR0")
                    (("3"
                      (inst -1 "ToZero?" "b" "RND_ToZero(b)(x)" "x")
                      (("3" (assert)
                        (("3" (split)
                          (("1" (use "rnd_tozero_is_tozero?_j")
                            (("1" (flatten) (("1" (insteep) nil nil))
                              nil))
                            nil)
                           ("2" (use "ToZero_RoundedMode") nil nil)
                           ("3" (typepred "RND_ToZero(b)(x)")
                            (("3" (expand "Fcanonic?")
                              (("3"
                                (expand "Fnormal?")
                                (("3"
                                  (expand "Fsubnormal?")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "RND_ToZero(b)(y)")
                    (("4" (expand "Fcanonic?")
                      (("4" (expand "Fnormal?")
                        (("4" (expand "Fsubnormal?")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (typepred "RND_ToZero(b)(x)")
                    (("5" (expand "Fcanonic?")
                      (("5" (expand "Fnormal?")
                        (("5" (expand "Fsubnormal?")
                          (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestUlp 0
        (ClosestUlp-1 nil 3319816797
         (""
          (case "FORALL (b: Format, p: float, r: real): Fbounded?(b)(p) => 0 <= r => Closest?(b)(r, p) => abs(FtoR(p) - r) <= Fulp(b)(p) / 2")
          (("1" (skeep)
            (("1" (case "0 <= r")
              (("1" (inst -2 "b" "p" "r") (("1" (assert) nil nil)) nil)
               ("2" (inst -1 "b" "Fopp(p)" "-r")
                (("2" (split)
                  (("1" (rewrite "FulpOpp")
                    (("1"
                      (case-replace
                       "abs(FtoR(p) - r)=abs(FtoR(Fopp(p)) - -r)")
                      (("1" (rewrite "FoppCorrect")
                        (("1" (hide-all-but 1)
                          (("1" (expand "abs")
                            (("1" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "ClosestFopp") nil nil)
                   ("3" (grind-reals) nil nil)
                   ("4" (rewrite "FoppBounded") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (case "FtoR(p) <= r")
                (("1" (lemma "FloatPlusUlpBounded")
                  (("1" (inst -1 "b" "p")
                    (("1" (split)
                      (("1" (skosimp*)
                        (("1" (mult-by 1 "2")
                          (("1"
                            (case "abs(FtoR(p) - r) <= Fulp(b)(p)- abs(FtoR(p) - r)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "abs(FtoR(f!1) - r) <= Fulp(b)(p) - abs(FtoR(p) - r)")
                                (("1"
                                  (case
                                   "abs(FtoR(p) - r) <= abs(FtoR(f!1) - r)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (expand "Closest?")
                                      (("2" (inst -5 "f!1") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (rewrite -1)
                                    (("2"
                                      (case
                                       "abs(FtoR(p)-r) < Fulp(b)(p)")
                                      (("1"
                                        (hide -2 -4 -6)
                                        (("1"
                                          (expand "abs")
                                          (("1" (grind-reals) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite
                                         "RoundedModeUlp"
                                         :subst
                                         ("b" "b" "P" "Closest?"))
                                        (("2"
                                          (rewrite
                                           "Closest_RoundedMode")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (lemma "FloatMinusUlpBounded")
                    (("2" (inst -1 "b" "p")
                      (("2" (split)
                        (("1" (skosimp*)
                          (("1" (mult-by 1 "2")
                            (("1"
                              (case "abs(FtoR(p) - r) <= Fulp(b)(p)- abs(FtoR(p) - r)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "abs(FtoR(f!1) - r) <= Fulp(b)(p) - abs(FtoR(p) - r)")
                                  (("1"
                                    (case
                                     "abs(FtoR(p) - r) <= abs(FtoR(f!1) - r)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "Closest?")
                                        (("2" (inst -6 "f!1") nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (copy -2)
                                      (("2"
                                        (rewrite -2)
                                        (("2"
                                          (case
                                           "abs(FtoR(p)-r) < Fulp(b)(p)")
                                          (("1"
                                            (hide -3 -4 -6)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "RoundedModeUlp"
                                             :subst
                                             ("b" "b" "P" "Closest?"))
                                            (("2"
                                              (rewrite
                                               "Closest_RoundedMode")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (away_to_closest_by_half_to_nearest_ulp 0
        (away_to_closest_by_half_to_nearest_ulp-1 nil 3877602902
         (""
          (then (skeep) (expand "ulp")
           (spread (case "Closest?(b)(r, RtoF(r))")
            ((then (lemma "ClosestUlp") (inst -1 "b" "RtoF(r)" "r")
              (assert)
              (spread
               (case "abs(FtoR(RtoF(r)) - r) = abs(FtoR(p) - r)")
               ((then (replace -1 :hide? t) (propax))
                (then (hide -1 2) (expand "Closest?") (inst -1 "p")
                 (inst -3 "RtoF(r)") (assert)))))
             (then (typepred "RtoF") (inst?) (typepred "round") (inst?)
              (assert)))))
          nil nil)
         nil shostak))
       (min_is_max_for_floats 0
        (min_is_max_for_floats-1 nil 3877704513
         ("" (skeep)
          (("" (replace -1)
            (("" (use "RND_float_Min_def")
              (("" (replace -1 :dir rl)
                (("" (use "RND_float_Max_def")
                  (("" (replace -1 :dir rl)
                    (("" (use "RND_float_Min_canonic")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (use "RND_float_Max_canonic")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (min_is_max_implies_ftor 0
        (min_is_max_implies_ftor-1 nil 3877709446
         ("" (skeep)
          (("" (use "RND_Max_isMax")
            (("" (use "RND_Min_isMin")
              (("" (replace -3 :hide? t)
                (("" (expand "isMin?")
                  (("" (expand "isMax?")
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (RoundedModeNonDecreasing 0
        (RoundedModeNonDecreasing-1 nil 3320428553
         ("" (skeep)
          (("" (split-ineq -7)
            (("1" (expand "Unique?")
              (("1" (inst -5 "z1" "p" "q") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (expand* "RoundedMode?" "Monotone?")
              (("2" (flatten)
                (("2" (inst -6 "z1" "z2" "p" "q")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestUlp2_TCC1 0
        (ClosestUlp2_TCC1-1 nil 3320427865
         ("" (skeep)
          (("" (rewrite "FpredBounded")
            (("" (rewrite "FabsBounded")
              (("" (rewrite "FcanonicBounded") nil nil)) nil))
            nil))
          nil)
         nil nil
         (ClosestUlp2 subtype
          "float.Fpred(float.b)(float.Fabs(float.p))"
          "(float.Fbounded?(float.b))")))
       (ClosestUlp2 0
        (ClosestUlp2-1 nil 3320428698
         (""
          (case "FORALL (b: Format, p: float, r: real): Fcanonic?(b)(p) => Closest?(b)(r, p) => 0 <= r => r <= FtoR(p) + Fulp(b)(Fpred(b)(p)) / 2 => abs(FtoR(p) - r) <= Fulp(b)(Fpred(b)(p)) / 2")
          (("1" (skeep)
            (("1" (case "0<=r")
              (("1" (inst -2 "b" "p" "r")
                (("1" (case "0<= FtoR(p)")
                  (("1" (case "Fabs(p)=p")
                    (("1" (split)
                      (("1" (assert) nil nil)
                       ("2" (expand "abs" -6)
                        (("2" (grind-reals) nil nil)) nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil))
                      nil)
                     ("2" (hide-all-but (1 -1))
                      (("2" (expand* "Fabs" "abs" "FtoR")
                        (("2" (grind-reals)
                          (("2" (decompose-equality 1) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (rewrite "RleRoundedR0" :subst
                     ("b" "b" "P" "Closest?" "r" "r"))
                    (("1" (rewrite "Closest_RoundedMode") nil nil)
                     ("2" (rewrite "FcanonicBounded") nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flip-ineq 1)
                (("2" (inst -2 "b" "Fopp(p)" "-r")
                  (("2" (case "FtoR(p) <= 0")
                    (("1" (case "Fabs(p)=Fopp(p)")
                      (("1" (split)
                        (("1"
                          (case-replace
                           "abs(FtoR(Fopp(p)) - -r)=abs(FtoR(p) - r)")
                          (("1" (assert) nil nil)
                           ("2" (rewrite "FoppCorrect")
                            (("2" (expand "abs" 1)
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "abs" -6)
                          (("2" (grind-reals)
                            (("1" (rewrite "FoppCorrect")
                              (("1" (assert) nil nil)) nil)
                             ("2" (rewrite "FoppCorrect")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil)
                         ("4" (rewrite "ClosestFopp")
                          (("4" (rewrite "FcanonicBounded") nil nil))
                          nil)
                         ("5" (lemma "FcanonicOpp")
                          (("5" (inst -1 "b" "p")
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2" (expand* "Fabs" "Fopp" "abs" "FtoR")
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil)
                     ("2"
                      (rewrite "RleRoundedLessR0" :subst
                       ("b" "b" "P" "Closest?" "r" "r"))
                      (("1" (rewrite "Closest_RoundedMode") nil nil)
                       ("2" (rewrite "FcanonicBounded") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "abs" 1)
                (("2" (grind-reals)
                  (("2" (flip-ineq 1)
                    (("2" (copy -3)
                      (("2" (expand "Closest?" -1)
                        (("2" (inst -1 "Fpred(b)(p)")
                          (("2" (case "FtoR(Fpred(b)(p)) - r <= 0")
                            (("1" (expand "abs" -2)
                              (("1"
                                (grind-reals)
                                (("1"
                                  (case
                                   " FtoR(p) - r -(FtoR(Fpred(b)(p)) - r) <= Fulp(b)(Fpred(b)(p))")
                                  (("1" (grind-reals) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (rewrite "FpredDiff")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (flip-ineq 1)
                                (("2"
                                  (flip-ineq -2)
                                  (("2"
                                    (expand "abs" 1)
                                    (("2"
                                      (grind-reals)
                                      (("2"
                                        (lemma "FpredLt")
                                        (("2"
                                          (inst -1 "b" "p")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (rewrite "FpredBounded")
                (("3" (rewrite "FcanonicBounded") nil nil)) nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (skeep)
              (("4" (rewrite "FpredBounded")
                (("4" (rewrite "FcanonicBounded") nil nil)) nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep) (("5" (rewrite "FcanonicBounded") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ClosestFabs 0
        (ClosestFabs-1 nil 3320750464
         ("" (skeep)
          (("" (expand "abs")
            (("" (grind-reals)
              (("1" (case-replace "Fabs(p)=Fopp(p)")
                (("1" (rewrite "ClosestFopp") nil nil)
                 ("2" (expand* "Fabs" "Fopp")
                  (("2" (case "FtoR(p) <= 0")
                    (("1" (expand "FtoR")
                      (("1" (expand "abs" 1)
                        (("1" (grind-reals) nil nil)) nil))
                      nil)
                     ("2"
                      (rewrite "RleRoundedLessR0" :subst
                       ("b" "b" "P" "Closest?" "r" "r" "f" "p"))
                      (("2" (rewrite "Closest_RoundedMode") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case-replace "Fabs(p)=p")
                (("2" (case "0 <= FtoR(p)")
                  (("1" (expand "FtoR")
                    (("1" (expand* "Fabs" "abs")
                      (("1" (grind-reals)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil)
                   ("2"
                    (rewrite "RleRoundedR0" :subst
                     ("b" "b" "P" "Closest?" "r" "r" "f" "p"))
                    (("2" (rewrite "Closest_RoundedMode") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (SterbenzAux 0
        (SterbenzAux-1 nil 3319905254
         ("" (skeep)
          (("" (expand "Fbounded?" 1)
            (("" (split)
              (("1" (mult-by 1 "radix^Fexp(Fminus(q, p))")
                (("1"
                  (case-replace
                   "abs(Fnum(Fminus(q, p))) * radix ^ Fexp(Fminus(q, p))=FtoR(q)-FtoR(p)")
                  (("1" (hide -1)
                    (("1" (expand* "Fminus" "min")
                      (("1" (grind-reals)
                        (("1" (case "FtoR(q) - FtoR(p) <= FtoR(p)")
                          (("1"
                            (case " FtoR(p)< vNum(b) * radix ^ Fexp(p)")
                            (("1" (assert) nil nil)
                             ("2" (expand "FtoR" 1)
                              (("2"
                                (expand "Fbounded?" -3)
                                (("2"
                                  (flatten)
                                  (("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind-reals) nil nil))
                          nil)
                         ("2" (flip-ineq 1)
                          (("2" (case "FtoR(q) - FtoR(p) <= FtoR(q)")
                            (("1"
                              (case "FtoR(q) < vNum(b) * radix ^ Fexp(q)")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "Fbounded?" -4)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "FtoR" 1)
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (rewrite "FminusCorrect" :dir rl)
                      (("2"
                        (case "FtoR(Fminus(q, p))=abs(FtoR(Fminus(q, p)))")
                        (("1" (rewrite -1)
                          (("1" (expand "FtoR" 1)
                            (("1" (rewrite "abs_mult")
                              (("1"
                                (expand "abs" 1 3)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "abs")
                            (("2" (grind-reals)
                              (("2"
                                (rewrite "FminusCorrect")
                                (("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (expand* "Fminus" "Fbounded?")
                (("2" (flatten)
                  (("2" (expand "min") (("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Sterbenz 0
        (Sterbenz-1 nil 3319906528
         ("" (skeep)
          (("" (case "FtoR(p) <= FtoR(q)")
            (("1" (rewrite "SterbenzAux") nil nil)
             ("2" (case-replace "Fminus(q, p)=Fopp(Fminus(p, q))")
              (("1" (rewrite "FoppBounded")
                (("1" (rewrite "SterbenzAux") nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (expand* "Fminus" "Fopp")
                  (("2"
                    (case-replace
                     "min(Fexp(q), Fexp(p)) = min(Fexp(p), Fexp(q))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand "min")
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (errorBoundedPlus 0
        (errorBoundedPlus-1 nil 3319907549
         (""
          (case "FORALL (b: Format, f, p, q: float): Fbounded?(b)(p) => Fbounded?(b)(q) => Fbounded?(b)(f) => Fexp(p) <= Fexp(q) => Closest?(b)(FtoR(p) + FtoR(q), f) => (EXISTS (e: (Fbounded?(b))): FtoR(e) = FtoR(p) + FtoR(q) - FtoR(f) AND Fexp(e) = min(Fexp(p), Fexp(q)))")
          (("1" (skeep)
            (("1" (case "Fexp(p) <= Fexp(q)")
              (("1" (inst -2 "b" "f" "p" "q")
                (("1" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil) ("4" (propax) nil nil)
                   ("5" (propax) nil nil) ("6" (propax) nil nil))
                  nil))
                nil)
               ("2" (inst -1 "b" "f" "q" "p")
                (("2" (split)
                  (("1" (skosimp*)
                    (("1" (inst 2 "e!1")
                      (("1" (split)
                        (("1" (assert) nil nil)
                         ("2" (expand "min") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil)
                   ("4" (propax) nil nil) ("5" (propax) nil nil)
                   ("6" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (lemma "RoundedModeRep")
                (("2" (inst -1 "Closest?" "b" "f" "Fplus(p,q)")
                  (("2" (split)
                    (("1" (skosimp*)
                      (("1"
                        (case "FtoR(Fminus(Fplus(p,q),(# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))=FtoR(p)+FtoR(q)-FtoR(f)")
                        (("1"
                          (case "Fexp(Fminus(Fplus(p,q),(# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))=Fexp(p)")
                          (("1"
                            (inst 1
                             "(Fminus(Fplus(p, q), (# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (rewrite -1)
                                (("2"
                                  (expand "min")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "Fbounded?")
                              (("2"
                                (split)
                                (("1"
                                  (mult-by 1 "radix^(Fexp(p))")
                                  (("1"
                                    (case-replace
                                     "abs(Fnum ((Fminus(Fplus(p, q), (# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #))))) * radix ^ (Fexp(p))=abs(FtoR(p) + FtoR(q) - FtoR(f))")
                                    (("1"
                                      (expand "Closest?")
                                      (("1"
                                        (inst -9 "q")
                                        (("1"
                                          (case
                                           "abs(FtoR(q) - FtoR(p) - FtoR(q)) < vNum(b) * radix ^ (Fexp(p))")
                                          (("1"
                                            (case
                                             "abs(FtoR(p) + FtoR(q) - FtoR(f))=abs(FtoR(f) - FtoR(p) - FtoR(q))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide
                                             -1
                                             -2
                                             -3
                                             -4
                                             -6
                                             -7
                                             -8
                                             -9
                                             2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "FtoR")
                                                  (("2"
                                                    (rewrite
                                                     "abs_mult")
                                                    (("2"
                                                      (rewrite
                                                       "abs_mult")
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "abs"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (real-props
                                                               :simple?
                                                               t)
                                                              (("2"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "Fbounded?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (rewrite -2 :dir rl)
                                        (("2"
                                          (expand "FtoR")
                                          (("2"
                                            (rewrite -1)
                                            (("2"
                                              (rewrite "abs_mult")
                                              (("2"
                                                (expand "abs" 1 3)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite -1)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand* "Fminus" "Fplus" "min")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (rewrite "FminusCorrect")
                            (("2" (rewrite "FplusCorrect")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "FplusCorrect") nil nil)
                     ("3" (rewrite "Closest_RoundedMode") nil nil)
                     ("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (errorBoundedMult_aux 0
        (errorBoundedMult_aux-1 nil 3320160933
         ("" (skeep)
          (("" (lemma "RoundedModeRep")
            (("" (inst -1 "isMin?" "b" "f" "Fmult(p,q)")
              (("" (split)
                (("1" (skosimp*)
                  (("1"
                    (case "FtoR(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=FtoR(p) * FtoR(q) - FtoR(f)")
                    (("1"
                      (case "Fexp(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=Fexp(p) + Fexp(q)")
                      (("1"
                        (inst 1
                         "(Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil)
                         ("2" (expand "Fbounded?" 1)
                          (("2" (split)
                            (("1"
                              (mult-by 1 "radix^(Fexp(p) + Fexp(q))")
                              (("1"
                                (case
                                 "abs(Fnum ((Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #))))) * radix ^ (Fexp(p) + Fexp(q))=abs(FtoR(p) * FtoR(q) - FtoR(f))")
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (case
                                     "Fulp(b)(f) <= vNum(b) * radix ^ (Fexp(p) + Fexp(q))")
                                    (("1"
                                      (case
                                       "abs(FtoR(p) * FtoR(q) - FtoR(f)) < Fulp(b)(f)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 -1)
                                        (("2"
                                          (case-replace
                                           "abs(FtoR(p) * FtoR(q) - FtoR(f))=abs(FtoR(f)-(FtoR(p)*FtoR(q)))")
                                          (("1"
                                            (rewrite
                                             "RoundedModeUlp"
                                             :subst
                                             ("P" "isMin?"))
                                            (("1"
                                              (rewrite
                                               "isMin_RoundedMode")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 -3 2)
                                      (("2"
                                        (case "vNum(b)=radix^Prec(b)")
                                        (("1"
                                          (case
                                           "Fbounded?(b)((# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                          (("1"
                                            (case-replace
                                             "vNum(b) * radix ^ (Fexp(p) + Fexp(q))= Fulp(b)( (# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                            (("1"
                                              (rewrite "FulpMonotone")
                                              (("1"
                                                (expand "isMin?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "FtoR(p) * FtoR(q) <= FtoR((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2 3 -1)
                                                      (("2"
                                                        (expand "FtoR")
                                                        (("2"
                                                          (rewrite
                                                           "expt_plus")
                                                          (("2"
                                                            (rewrite
                                                             "expt_plus")
                                                            (("2"
                                                              (div-by
                                                               1
                                                               "radix ^ (Fexp(q))*radix ^ (Fexp(p))")
                                                              (("2"
                                                                (case-replace
                                                                 "Fnum(p) * Fnum(q) * radix ^ (Fexp(p)) * radix ^ (Fexp(q)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))=Fnum(p) * Fnum(q)")
                                                                (("1"
                                                                  (case-replace
                                                                   "vNum(b) = radix ^ Prec(b)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "(radix ^ Prec(b) * (radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) - radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))= (radix ^ Prec(b)-1)* radix ^ Prec(b)")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -3
                                                                       -4
                                                                       -7
                                                                       -10
                                                                       -11
                                                                       -12
                                                                       -13)
                                                                      (("1"
                                                                        (expand
                                                                         "Fbounded?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (grind-reals)
                                                                              (("1"
                                                                                (case
                                                                                 "Fnum(p) * Fnum(q) <= (radix ^ Prec(b) - 1) * Fnum(q)")
                                                                                (("1"
                                                                                  (case
                                                                                   "(radix ^ Prec(b) - 1) * Fnum(q) <= (radix ^ Prec(b) - 1) * radix ^ Prec(b)")
                                                                                  (("1"
                                                                                    (grind-reals)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (div-by
                                                                                     1
                                                                                     "radix ^ Prec(b) - 1")
                                                                                    (("2"
                                                                                      (grind-reals)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (div-by
                                                                                   1
                                                                                   "Fnum(q)")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     2)
                                                                                    (("2"
                                                                                      (copy
                                                                                       -2)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (flip-ineq
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "forall (e1,e2:int): e1>= e2 OR e1 <= e2-1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "Fnum(p)"
                                                                                                 "vNum(b)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (field
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "FulpCanonic")
                                              (("1"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (rewrite
                                                     "expt_plus")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                                (("1"
                                                  (expand "Fcanonic?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3 4)
                                                  (("2"
                                                    (expand "Fnormal?")
                                                    (("2"
                                                      (lemma
                                                       "radix_less_vNum")
                                                      (("2"
                                                        (inst -1 "b")
                                                        (("2"
                                                          (case
                                                           "vNum(b) <= vNum(b) * radix - radix")
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             1)
                                                            (("1"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9
                                                             -10
                                                             -11)
                                                            (("2"
                                                              (move-terms
                                                               1
                                                               l
                                                               1)
                                                              (("2"
                                                                (move-terms
                                                                 1
                                                                 r
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "vNum(b) <= vNum(b) * radix - vNum(b)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (div-by
                                                                     1
                                                                     "vNum(b)")
                                                                    (("2"
                                                                      (case-replace
                                                                       "(vNum(b) * radix - vNum(b)) / vNum(b)=radix -1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (field
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7
                                               -8
                                               2)
                                              (("2"
                                                (expand "Fbounded?")
                                                (("2"
                                                  (lemma
                                                   "radix_less_vNum")
                                                  (("2"
                                                    (inst -1 "b")
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "vNum")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite -2 :dir rl)
                                  (("2"
                                    (expand "FtoR" 1)
                                    (("2"
                                      (rewrite -1)
                                      (("2"
                                        (rewrite "abs_mult")
                                        (("2"
                                          (expand "abs" 1 3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand* "Fmult" "Fminus" "min") nil nil))
                      nil)
                     ("2" (rewrite "FminusCorrect")
                      (("2" (rewrite "FmultCorrect")
                        (("2" (rewrite -1) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FmultCorrect") nil nil)
                 ("3" (rewrite "isMin_RoundedMode") nil nil)
                 ("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (errorBoundedMult_aux2 0
        (errorBoundedMult_aux2-1 nil 3320163336
         ("" (skeep)
          (("" (lemma "RoundedModeRep")
            (("" (inst -1 "isMax?" "b" "f" "Fmult(p,q)")
              (("" (split)
                (("1" (skosimp*)
                  (("1"
                    (case "FtoR(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=FtoR(p) * FtoR(q) - FtoR(f)")
                    (("1"
                      (case "Fexp(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=Fexp(p) + Fexp(q)")
                      (("1"
                        (inst 1
                         "(Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil)
                         ("2" (expand "Fbounded?" 1)
                          (("2" (split)
                            (("1"
                              (mult-by 1 "radix^(Fexp(p) + Fexp(q))")
                              (("1"
                                (case
                                 "abs(Fnum ((Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #))))) * radix ^ (Fexp(p) + Fexp(q))=abs(FtoR(p) * FtoR(q) - FtoR(f))")
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (case
                                     "Fulp(b)(f) <= vNum(b) * radix ^ (Fexp(p) + Fexp(q))")
                                    (("1"
                                      (case
                                       "abs(FtoR(p) * FtoR(q) - FtoR(f)) < Fulp(b)(f)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 -1)
                                        (("2"
                                          (case-replace
                                           "abs(FtoR(p) * FtoR(q) - FtoR(f))=abs(FtoR(f)-(FtoR(p)*FtoR(q)))")
                                          (("1"
                                            (rewrite
                                             "RoundedModeUlp"
                                             :subst
                                             ("P" "isMax?"))
                                            (("1"
                                              (rewrite
                                               "isMax_RoundedMode")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 -3 2)
                                      (("2"
                                        (case "vNum(b)=radix^Prec(b)")
                                        (("1"
                                          (case
                                           "Fbounded?(b)((# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                          (("1"
                                            (case-replace
                                             "vNum(b) * radix ^ (Fexp(p) + Fexp(q))= Fulp(b)( (# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                            (("1"
                                              (rewrite "FulpMonotone")
                                              (("1"
                                                (expand "isMax?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     -11
                                                     "(# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #)")
                                                    (("1"
                                                      (rewrite -11)
                                                      (("1"
                                                        (hide
                                                         2
                                                         3
                                                         -1
                                                         -2
                                                         -3
                                                         -11)
                                                        (("1"
                                                          (expand
                                                           "FtoR")
                                                          (("1"
                                                            (rewrite
                                                             "expt_plus")
                                                            (("1"
                                                              (rewrite
                                                               "expt_plus")
                                                              (("1"
                                                                (case-replace
                                                                 " vNum(b) = radix ^ Prec(b)")
                                                                (("1"
                                                                  (div-by
                                                                   1
                                                                   "radix ^ (Fexp(q))*radix ^ (Fexp(p))")
                                                                  (("1"
                                                                    (case-replace
                                                                     "Fnum(p) * Fnum(q) * radix ^ (Fexp(p)) * radix ^ (Fexp(q)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))=Fnum(p) * Fnum(q)")
                                                                    (("1"
                                                                      (case-replace
                                                                       "(radix ^ Prec(b) * (radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) - radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))= (radix ^ Prec(b)-1)* radix ^ Prec(b)")
                                                                      (("1"
                                                                        (expand
                                                                         "Fbounded?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (grind-reals)
                                                                                (("1"
                                                                                  (case
                                                                                   "Fnum(p) * Fnum(q) <= (radix ^ Prec(b) - 1) * Fnum(q)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "(radix ^ Prec(b) - 1) * Fnum(q) <= (radix ^ Prec(b) - 1) * radix ^ Prec(b)")
                                                                                    (("1"
                                                                                      (grind-reals)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (div-by
                                                                                       1
                                                                                       "radix ^ Prec(b) - 1")
                                                                                      (("2"
                                                                                        (grind-reals)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (div-by
                                                                                     1
                                                                                     "Fnum(q)")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       -10
                                                                                       -11
                                                                                       2)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "radix ^ Prec(b)= vNum(b)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flip-ineq
                                                                                             -2)
                                                                                            (("1"
                                                                                              (case
                                                                                               "forall (e1,e2:int): e1>= e2 OR e1 <= e2-1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "Fnum(p)"
                                                                                                 "vNum(b)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (field
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (field
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "FulpCanonic")
                                              (("1"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (rewrite
                                                     "expt_plus")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                                (("1"
                                                  (expand "Fcanonic?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3 4)
                                                  (("2"
                                                    (expand "Fnormal?")
                                                    (("2"
                                                      (lemma
                                                       "radix_less_vNum")
                                                      (("2"
                                                        (inst -1 "b")
                                                        (("2"
                                                          (case
                                                           "vNum(b) <= vNum(b) * radix - radix")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 -1))
                                                            (("2"
                                                              (move-terms
                                                               1
                                                               l
                                                               1)
                                                              (("2"
                                                                (move-terms
                                                                 1
                                                                 r
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "vNum(b) <= vNum(b) * radix - vNum(b)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (div-by
                                                                     1
                                                                     "vNum(b)")
                                                                    (("2"
                                                                      (case-replace
                                                                       "(vNum(b) * radix - vNum(b)) / vNum(b)=radix -1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (field
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "Fbounded?")
                                            (("2"
                                              (split)
                                              (("1"
                                                (lemma
                                                 "radix_less_vNum")
                                                (("1"
                                                  (inst -1 "b")
                                                  (("1"
                                                    (expand "abs" 1)
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "vNum")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite -2 :dir rl)
                                  (("2"
                                    (expand "FtoR" 1)
                                    (("2"
                                      (rewrite -1)
                                      (("2"
                                        (rewrite "abs_mult")
                                        (("2"
                                          (expand "abs" 1 3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand* "Fmult" "Fminus" "min") nil nil))
                      nil)
                     ("2" (rewrite "FminusCorrect")
                      (("2" (rewrite "FmultCorrect")
                        (("2" (rewrite -1) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "FmultCorrect") nil nil)
                 ("3" (rewrite "isMax_RoundedMode") nil nil)
                 ("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         nil nil))
       (errorBoundedMult 0
        (errorBoundedMult-1 nil 3320076840
         ("" (skeep)
          (("" (case "0 <= FtoR(p)")
            (("1" (case "0 <= FtoR(q)")
              (("1" (case "0 <= FtoR(f)")
                (("1" (expand* "RoundedMode?" "MinOrMax?")
                  (("1" (flatten)
                    (("1" (inst -9 "FtoR(p)*FtoR(q)" "f")
                      (("1" (split)
                        (("1" (rewrite "errorBoundedMult_aux") nil nil)
                         ("2" (rewrite "errorBoundedMult_aux2") nil
                          nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (rewrite "RleRoundedR0" :subst
                   ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
                  (("2" (grind-reals) nil nil)) nil))
                nil)
               ("2" (flip-ineq 1)
                (("2" (case "FtoR(f) <= 0")
                  (("1" (expand* "RoundedMode?" "MinOrMax?")
                    (("1" (flatten)
                      (("1" (inst -9 "FtoR(p)*FtoR(q)" "f")
                        (("1" (split)
                          (("1" (lemma "errorBoundedMult_aux2")
                            (("1" (inst -1 "b" "Fopp(f)" "p" "Fopp(q)")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst 1 "Fopp(e!1)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (rewrite "FoppCorrect")
                                        (("1"
                                          (rewrite "FoppCorrect")
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "Fopp")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FoppBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fopp")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (case-replace
                                   "FtoR(p) * FtoR(Fopp(q))=-(FtoR(p) * FtoR(q))")
                                  (("1" (rewrite "MinOppMax") nil nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (rewrite "FoppCorrect")
                                  (("4" (assert) nil nil))
                                  nil)
                                 ("5"
                                  (rewrite "FoppCorrect")
                                  (("5" (assert) nil nil))
                                  nil)
                                 ("6" (propax) nil nil)
                                 ("7" (rewrite "FoppBounded") nil nil)
                                 ("8" (rewrite "FoppBounded") nil nil)
                                 ("9" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "errorBoundedMult_aux")
                            (("2" (inst -1 "b" "Fopp(f)" "p" "Fopp(q)")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst 1 "Fopp(e!1)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (rewrite "FoppCorrect")
                                        (("1"
                                          (rewrite "FoppCorrect")
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "Fopp")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FoppBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fopp")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (case-replace
                                   "FtoR(p) * FtoR(Fopp(q))=-(FtoR(p) * FtoR(q))")
                                  (("1" (rewrite "MaxOppMin") nil nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (rewrite "FoppCorrect")
                                  (("4" (assert) nil nil))
                                  nil)
                                 ("5"
                                  (rewrite "FoppCorrect")
                                  (("5" (assert) nil nil))
                                  nil)
                                 ("6" (propax) nil nil)
                                 ("7" (rewrite "FoppBounded") nil nil)
                                 ("8" (rewrite "FoppBounded") nil nil)
                                 ("9" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (rewrite "RleRoundedLessR0" :subst
                     ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
                    (("2" (grind-reals) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flip-ineq 1)
              (("2" (case "0 <= FtoR(q)")
                (("1" (case "FtoR(f) <= 0")
                  (("1" (expand* "RoundedMode?" "MinOrMax?")
                    (("1" (flatten)
                      (("1" (inst -9 "FtoR(p)*FtoR(q)" "f")
                        (("1" (split)
                          (("1" (lemma "errorBoundedMult_aux2")
                            (("1" (inst -1 "b" "Fopp(f)" "Fopp(p)" "q")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst 1 "Fopp(e!1)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (rewrite "FoppCorrect")
                                        (("1"
                                          (rewrite "FoppCorrect")
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "Fopp")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FoppBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fopp")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (case-replace
                                   "FtoR(Fopp(p)) * FtoR(q)=-(FtoR(p) * FtoR(q))")
                                  (("1" (rewrite "MinOppMax") nil nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (rewrite "FoppCorrect")
                                  (("4" (assert) nil nil))
                                  nil)
                                 ("5" (propax) nil nil)
                                 ("6"
                                  (rewrite "FoppCorrect")
                                  (("6" (assert) nil nil))
                                  nil)
                                 ("7" (rewrite "FoppBounded") nil nil)
                                 ("8" (propax) nil nil)
                                 ("9" (rewrite "FoppBounded") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "errorBoundedMult_aux")
                            (("2" (inst -1 "b" "Fopp(f)" "Fopp(p)" "q")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst 1 "Fopp(e!1)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (rewrite "FoppCorrect")
                                        (("1"
                                          (rewrite "FoppCorrect")
                                          (("1"
                                            (rewrite "FoppCorrect")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "Fopp")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "FoppBounded")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fopp")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (case-replace
                                   "FtoR(Fopp(p)) * FtoR(q)=-(FtoR(p) * FtoR(q))")
                                  (("1" (rewrite "MaxOppMin") nil nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (rewrite "FoppCorrect")
                                  (("4" (assert) nil nil))
                                  nil)
                                 ("5" (propax) nil nil)
                                 ("6"
                                  (rewrite "FoppCorrect")
                                  (("6" (assert) nil nil))
                                  nil)
                                 ("7" (rewrite "FoppBounded") nil nil)
                                 ("8" (propax) nil nil)
                                 ("9" (rewrite "FoppBounded") nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (rewrite "RleRoundedLessR0" :subst
                     ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
                    (("2" (grind-reals) nil nil)) nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (case "0 <= FtoR(f)")
                    (("1" (expand* "RoundedMode?" "MinOrMax?")
                      (("1" (flatten)
                        (("1" (inst -9 "FtoR(p)*FtoR(q)" "f")
                          (("1" (split)
                            (("1"
                              (case-replace
                               "FtoR(p) * FtoR(q)=FtoR(Fopp(p))*FtoR(Fopp(q))")
                              (("1"
                                (case-replace
                                 "Fexp(p) + Fexp(q)=Fexp(Fopp(p)) + Fexp(Fopp(q))")
                                (("1"
                                  (rewrite "errorBoundedMult_aux")
                                  (("1"
                                    (rewrite "FoppCorrect")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (rewrite "FoppBounded")
                                    nil
                                    nil)
                                   ("4"
                                    (rewrite "FoppBounded")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Fopp")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FoppCorrect")
                                (("2"
                                  (rewrite "FoppCorrect")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case-replace
                               "Fexp(p) + Fexp(q)=Fexp(Fopp(p)) + Fexp(Fopp(q))")
                              (("1"
                                (case-replace
                                 "FtoR(p) * FtoR(q)=FtoR(Fopp(p))*FtoR(Fopp(q))")
                                (("1"
                                  (rewrite "errorBoundedMult_aux2")
                                  (("1"
                                    (rewrite "FoppCorrect")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (rewrite "FoppBounded")
                                    nil
                                    nil)
                                   ("4"
                                    (rewrite "FoppBounded")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "FoppCorrect")
                                  (("2"
                                    (rewrite "FoppCorrect")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Fopp")
                                (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (rewrite "RleRoundedR0" :subst
                       ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
                      (("2" (grind-reals) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (FulpLeN_TCC1 0
        (FulpLeN_TCC1-1 nil 3698095010 ("" (subtype-tcc) nil nil) nil
         nil (FulpLeN subtype "float.p" "(float.Fbounded?(float.b))")))
       (FulpLeN 0
        (FulpLeN-1 nil 3320431414
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("1" (expand "FtoR")
              (("1" (rewrite "abs_mult")
                (("1" (expand "abs" 1 2)
                  (("1" (expand "Fnormal?")
                    (("1" (flatten)
                      (("1" (rewrite "abs_mult")
                        (("1" (expand "abs" -2 1)
                          (("1" (div-by 1 " radix ^ (Fexp(p))")
                            (("1" (field 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Fcanonic?") (("2" (propax) nil nil)) nil))
            nil))
          nil)
         nil shostak))
       (FulpGe_TCC1 0
        (FulpGe_TCC1-1 nil 3320431414
         ("" (skeep)
          (("" (lemma "radix_less_vNum")
            (("" (inst -1 "b") (("" (grind-reals) nil nil)) nil)) nil))
          nil)
         nil nil
         (FulpGe subtype "((number_fields.-)(float.vNum(float.b), 1))"
          "nznum")))
       (FulpGe 0
        (FulpGe-1 nil 3320431633
         ("" (skeep)
          (("" (case-replace "FtoR(p)=FtoR(Fnormalize(b)(p))")
            (("1" (expand "FtoR" 1)
              (("1" (rewrite "abs_mult")
                (("1" (expand "abs" 1 2)
                  (("1" (expand "Fulp")
                    (("1"
                      (div-by 1 " radix ^ (Fexp(Fnormalize(b)(p)))")
                      (("1"
                        (case-replace
                         "abs(Fnum(Fnormalize(b)(p))) * radix ^ (Fexp(Fnormalize(b)(p))) / (vNum(b) - 1)/ radix ^ (Fexp(Fnormalize(b)(p)))= abs(Fnum(Fnormalize(b)(p)))/(vNum(b) - 1)")
                        (("1" (rewrite "div_cancel4")
                          (("1" (field 1)
                            (("1"
                              (case "Fbounded?(b)(Fnormalize(b)(p))")
                              (("1"
                                (expand "Fbounded?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1"
                                      (name-replace "AA" "vNum(b)")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "FcanonicBounded")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (field 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         nil shostak))
       (FulpLe 0
        (FulpLe-2 "" 3790102975
         ("" (skeep)
          (("" (case "Fcanonic?(b)(Fnormalize(b)(p))")
            (("1" (expand "Fcanonic?")
              (("1" (split)
                (("1"
                  (case "Fulp(b)(p) <= abs(FtoR(p)) * radix/vNum(b)")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2"
                      (case-replace "FtoR(p)=FtoR(Fnormalize(b)(p))")
                      (("1"
                        (case-replace
                         "Fulp(b)(p)=Fulp(b)(Fnormalize(b)(p))")
                        (("1" (rewrite "FulpLeN") nil nil)
                         ("2" (expand "Fulp")
                          (("2"
                            (rewrite "FcanonicUnique" :subst
                             ("b" "b" "p"
                              "Fnormalize(b)(Fnormalize(b)(p))" "q"
                              "Fnormalize(b)(p)"))
                            nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "Fulp(b)(p) = radix ^ (-dExp(b))")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (expand* "Fulp" "Fsubnormal?")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         nil shostak)
        (FulpLe-1 nil 3320432430
         ("" (skeep)
          (("" (case "Fcanonic?(b)(Fnormalize(b)(p))")
            (("1" (expand "Fcanonic?")
              (("1" (split)
                (("1"
                  (case "Fulp(b)(p) <= abs(FtoR(p)) * radix/vNum(b)")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2"
                      (case-replace "FtoR(p)=FtoR(Fnormalize(b)(p))")
                      (("1"
                        (case-replace
                         "Fulp(b)(p)=Fulp(b)(Fnormalize(b)(p))")
                        (("1" (rewrite "FulpLeN") nil nil)
                         ("2" (expand "Fulp")
                          (("2"
                            (rewrite "FcanonicUnique" :subst
                             ("b" "b" "p"
                              "Fnormalize(b)(Fnormalize(b)(p))" "q"
                              "Fnormalize(b)(p)"))
                            nil nil))
                          nil)
                         ("3" (rewrite "FcanonicBounded") nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "Fulp(b)(p) = radix ^ (-dExp(b))")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (expand* "Fulp" "Fsubnormal?")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         nil shostak))
       (FulpFpred1_TCC1 0
        (FulpFpred1_TCC1-1 nil 3320433306
         ("" (skeep)
          (("" (rewrite "FpredBounded")
            (("" (rewrite "FcanonicBounded") nil nil)) nil))
          nil)
         nil nil
         (FulpFpred1 subtype "float.Fpred(float.b)(float.p)"
          "(float.Fbounded?(float.b))")))
       (FulpFpred1 0
        (FulpFpred1-1 nil 3320490788
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("1" (rewrite "FulpCanonic")
              (("1" (rewrite "Exp_increq_1")
                (("1" (rewrite "Lexico" :subst ("b" "b"))
                  (("1" (lemma "FpredLt" :subst ("b" "b" "f" "p"))
                    (("1" (assert) nil nil)) nil)
                   ("2" (split-ineq -2)
                    (("1"
                      (case-replace "p=(# Fnum:=0, Fexp:=-dExp(b)#)")
                      (("1" (hide-all-but 2)
                        (("1" (expand "Fpred")
                          (("1" (grind-reals)
                            (("1"
                              (lemma "radix_less_vNum" :subst
                               ("b" "b"))
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (rewrite "FcanonicUnique" :subst
                         ("b" "b" "p" "p" "q"
                          "(# Fnum := 0, Fexp := -dExp(b) #)"))
                        (("1" (rewrite -1 :dir rl)
                          (("1" (expand "FtoR" 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2"
                            (expand* "Fcanonic?" "Fsubnormal?"
                             "Fbounded?")
                            (("2" (expand "abs")
                              (("2" (grind-reals) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "FpredPos") nil nil))
                    nil)
                   ("3" (rewrite "FpredCanonic") nil nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "FpredCanonic") nil nil))
            nil))
          nil)
         nil shostak))
       (FulpFpred2 0
        (FulpFpred2-2 "" 3790102978
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("" (rewrite "FulpCanonic")
              (("1"
                (case-replace
                 "radix * radix ^ (Fexp(Fpred(b)(p)))= radix ^ (1+Fexp(Fpred(b)(p)))")
                (("1" (rewrite "Exp_increq_1")
                  (("1" (hide -1 2)
                    (("1" (expand "Fpred")
                      (("1" (grind-reals) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite "expt_plus") nil nil))
                nil)
               ("2" (rewrite "FpredCanonic") nil nil))
              nil))
            nil))
          nil)
         nil shostak)
        (FulpFpred2-1 nil 3320491755
         ("" (skeep)
          (("" (rewrite "FulpCanonic")
            (("" (rewrite "FulpCanonic")
              (("1"
                (case-replace
                 "radix * radix ^ (Fexp(Fpred(b)(p)))= radix ^ (1+Fexp(Fpred(b)(p)))")
                (("1" (rewrite "Exp_increq_1")
                  (("1" (hide -1 2)
                    (("1" (expand "Fpred")
                      (("1" (grind-reals) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite "expt_plus")
                  (("2" (rewrite "expt_x1") nil nil)) nil))
                nil)
               ("2" (rewrite "FpredCanonic") nil nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fopp_RtoF_TCC1 0
        (Fopp_RtoF_TCC1-1 nil 3877462011 ("" (subtype-tcc) nil nil) nil
         nil
         (Fopp_RtoF subtype "float.f" "(float.Fbounded?(float.b))")))
       (Fopp_RtoF 0
        (Fopp_RtoF-1 nil 3681818301
         ("" (skeep)
          (("" (use "FcanonicUnique")
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide-all-but 1)
                (("2" (typepred "round?")
                  (("2" (expand "Unique?")
                    (("2" (inst -1 "-x" "Fopp(RtoF(x))" "RtoF(-x)")
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (typepred "RtoF")
                            (("2" (inst?) nil nil)) nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (expand "rounded_opp?")
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3"
                                  (typepred "RtoF")
                                  (("3" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (rewrite "FoppBounded") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "FcanonicOpp")
                (("3" (inst -1 "b" "RtoF(x)")
                  (("3" (assert)
                    (("3" (hide-all-but 1)
                      (("3" (typepred "RtoF")
                        (("3" (inst? -2) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (typepred "RtoF") (("4" (inst? -2) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (ulp_abs 0
        (ulp_abs-1 nil 3681747962
         ("" (skeep)
          (("" (expand "ulp")
            (("" (expand "ulp")
              (("" (lemma "FulpAbs")
                (("" (inst -1 "b" "RND_ToZero(b)(x)")
                  (("" (assert)
                    (("" (split -1)
                      (("1" (replace -1 :hide? t :dir rl)
                        (("1" (use "FulpCanonic")
                          (("1" (split -1)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (lemma "FulpCanonic")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "Fabs")
                                                (("1"
                                                  (case
                                                   "RND_ToZero(b)(-x)`Fexp = Fexp(RND_ToZero(b)(x))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (use "Fopp_RtoF")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "ToZero?(b)"
                                                         "RND_ToZero(b)")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "Fopp")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "Unique?")
                                                            (("2"
                                                              (use
                                                               "ToZero_Unique")
                                                              (("2"
                                                                (expand
                                                                 "Unique?")
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "ToZeroFopp")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "Fabs")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "FabsCanonic")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "RND_ToZero(b)(abs(x))")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (use "FcanonicBounded")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (injrnd_ulp 0
        (injrnd_ulp-1 nil 3681142042
         ("" (skeep)
          (("" (expand "ulp")
            (("" (typepred "RtoF")
              (("" (expand "injective_rounding")
                (("" (flatten)
                  (("" (inst -2 "f")
                    (("1" (assert) nil nil)
                     ("2" (expand "/=")
                      (("2" (replace -1 1)
                        (("2" (expand "Fulp" 1 2)
                          (("2" (expand "Fnormalize")
                            (("2" (assert)
                              (("2"
                                (expand "Fulp")
                                (("2"
                                  (case "Fnum(f) = 0")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (use "ftor_zero_fnum")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (Fulp_ulp 0
        (Fulp_ulp-1 nil 3681141194
         ("" (skeep)
          (("" (use "FulpAbs")
            (("" (assert)
              (("" (replace -1 :hide? t :dir rl)
                (("" (use "injrnd_ulp")
                  (("" (replace -1 :hide? t)
                    (("" (use "FabsCorrect")
                      (("" (replace -1 :hide? t)
                        (("" (use "ulp_generic_monotone")
                          (("" (assert)
                            (("" (hide 2)
                              ((""
                                (case
                                 "NOT FORALL(x,y,z:real) : abs(x-y) <= z IMPLIES abs(x) <= abs(y) + z")
                                (("1"
                                  (hide-all-but 1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (rndmaxismax_j 0
        (rndmaxismax_j-1 nil 3699184522
         ("" (skeep)
          (("" (split 1)
            (("1" (skeep) (("1" (use "RND_Max_isMax") nil nil)) nil)
             ("2" (skeep)
              (("2" (invoke (typepred "%1") (! 1 1)) nil nil)) nil))
            nil))
          nil)
         nil nil
         (rndmaxismax_j subtype "float.RND_Max(float.b)"
          "float.CanonicRoundingFun(float.b, float.isMax?(float.b))")))
       (rndminismin_j 0
        (rndminismin_j-1 nil 3699182647
         ("" (skeep)
          (("" (split 1)
            (("1" (skeep) (("1" (use "RND_Min_isMin") nil nil)) nil)
             ("2" (skeep)
              (("2" (invoke (typepred "%1") (! 1 1)) nil nil)) nil))
            nil))
          nil)
         nil nil
         (rndminismin_j subtype "float.RND_Min(float.b)"
          "float.CanonicRoundingFun(float.b, float.isMin?(float.b))")))
       (rndeclosest_j 0
        (rndeclosest_j-1 nil 3681830290
         ("" (skeep)
          (("" (split 1)
            (("1" (skeep)
              (("1" (use "RND_EClosest_isEclosest") nil nil)) nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         nil nil
         (rndeclosest_j subtype "float.RND_EClosest(float.b)"
          "float.CanonicRoundingFun(float.b, float.EvenClosest?(float.b))")))
       (closest_ulp_pos 0
        (closest_ulp_pos-1 nil 3877766338
         ("" (skeep)
          (("" (expand "ulp")
            (("" (expand "ulp")
              (("" (expand "RND_ToZero")
                (("" (assert)
                  (("" (lemma "MaxSuccMin")
                    ((""
                      (inst -1 "b" "RND_Min(b)(r)" "RND_Max(b)(r)" "r")
                      (("" (assert)
                        (("" (split)
                          (("1" (lemma "FsuccDiff")
                            (("1" (inst -1 "b" "RND_Min(b)(r)")
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (case "p=RND_Min(b)(r)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "Closest?")
                                            (("1"
                                              (inst
                                               -4
                                               " Fsucc(b)(RND_Min(b)(r))")
                                              (("1"
                                                (use "RND_Min_isMin")
                                                (("1"
                                                  (expand "isMin?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (use
                                                       "RND_Max_isMax")
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (expand
                                                           "isMax?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "abs(FtoR(RND_Min(b)(r)) - r) = r - FtoR(RND_Min(b)(r))")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "abs(FtoR(Fsucc(b)(RND_Min(b)(r))) - r) = FtoR(Fsucc(b)(RND_Min(b)(r))) - r")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -1))
                                                                      (("2"
                                                                        (expand
                                                                         "abs")
                                                                        (("2"
                                                                          (case
                                                                           "FtoR(Fsucc(b)(RND_Min(b)(r))) - r < 0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "FtoR(Fsucc(b)(RND_Min(b)(r))) - r = 0")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -3))
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "FtoR(RND_Min(b)(r)) - r < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "FtoR(RND_Min(b)(r)) - r = 0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "FsuccBounded")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "b"
                                                   "RND_Min(b)(r)")
                                                  (("2"
                                                    (typepred
                                                     "RND_Min(b)(r)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "canonic_bounded_j")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "p=Fsucc(b)(RND_Min(b)(r))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1 -2 1)
                                            (("1"
                                              (expand "Closest?")
                                              (("1"
                                                (inst
                                                 -3
                                                 "(RND_Min(b)(r))")
                                                (("1"
                                                  (case
                                                   "abs(FtoR(Fsucc(b)(RND_Min(b)(r))) - r) = FtoR(Fsucc(b)(RND_Min(b)(r))) - r")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case
                                                         "abs(FtoR((RND_Min(b)(r))) - r) = r - FtoR((RND_Min(b)(r)))")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "RND_Min_isMin")
                                                          (("2"
                                                            (expand
                                                             "isMin?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1))
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "FtoR((RND_Min(b)(r))) - r < 0 ")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "FtoR((RND_Min(b)(r))) - r = 0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "RND_Max_isMax")
                                                    (("2"
                                                      (expand "isMax?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide-all-but
                                                           (1 -1))
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (case
                                                               "FtoR(Fsucc(b)(RND_Min(b)(r))) - r < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "FtoR(Fsucc(b)(RND_Min(b)(r))) - r = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "Closest_min_or_max")
                                          (("2"
                                            (expand "min_or_max?")
                                            (("2"
                                              (inst -1 "r" "p")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "isMin_Unique")
                                                    (("1"
                                                      (expand
                                                       "Unique?")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "r"
                                                         "p"
                                                         "RND_Min(b)(r)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               "FcanonicUnique")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "b"
                                                                 "p"
                                                                 "RND_Min(b)(r)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "RND_Min_isMin")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -3
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (use
                                                       "isMax_Unique")
                                                      (("2"
                                                        (expand
                                                         "Unique?")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "r"
                                                           "p"
                                                           "RND_Max(b)(r)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (lemma
                                                                 "FcanonicUnique")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "b"
                                                                   "p"
                                                                   "RND_Max(b)(r)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "RND_Max_isMax")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "rle_rounded_r0")
                                    (("2"
                                      (inst
                                       -1
                                       "b"
                                       " RND_Min(b)(r)"
                                       "r"
                                       "isMin?(b)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "RND_Min_isMin")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred
                                               "RND_Min(b)(r)")
                                              (("2"
                                                (use "FcanonicBounded")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "isMin_RoundedMode")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (expand
                                                         "RoundedMode?")
                                                        (("2"
                                                          (expand
                                                           "rounded_mode?")
                                                          (("2"
                                                            (expand
                                                             "Total?")
                                                            (("2"
                                                              (expand
                                                               "total?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "Compatible?")
                                                                    (("2"
                                                                      (expand
                                                                       "compatible?")
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (insteep)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "MinOrMax?")
                                                                    (("3"
                                                                      (expand
                                                                       "min_or_max?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (expand
                                                                     "Monotone?")
                                                                    (("4"
                                                                      (expand
                                                                       "monotone?")
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (insteep
                                                                           -7)
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "Closest_min_or_max")
                            (("2" (inst -1 "b")
                              (("2"
                                (expand "min_or_max?")
                                (("2"
                                  (inst -1 "r" "p")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (use "isMin_Unique")
                                        (("1"
                                          (expand "Unique?")
                                          (("1"
                                            (inst
                                             -1
                                             "r"
                                             "p"
                                             "RND_Min(b)(r)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "RND_Min_isMin")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (use
                                                       "min_is_max_implies_ftor")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "abs")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "FcanonicUnique")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "isMax_Unique")
                                        (("2"
                                          (expand "Unique?")
                                          (("2"
                                            (inst
                                             -1
                                             "r"
                                             "p"
                                             "RND_Max(b)(r)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use "RND_Max_isMax")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (use
                                                       "min_is_max_implies_ftor")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "FcanonicUnique")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (use "RND_Max_isMax") nil nil)
                           ("4" (use "RND_Min_isMin") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((RND_ToZero const-decl "(Fcanonic?(b))" float nil)
          (MaxSuccMin formula-decl nil float nil)
          (min_is_max_implies_ftor formula-decl nil float nil)
          (FsuccDiff formula-decl nil float nil)
          (rle_rounded_r0 formula-decl nil float nil)
          (FcanonicBounded formula-decl nil float nil)
          (isMin_RoundedMode formula-decl nil float nil)
          (RoundedMode? const-decl "bool" float nil)
          (Total? const-decl "bool" float nil)
          (Monotone? const-decl "bool" float nil)
          (monotone? const-decl "bool" float nil)
          (MinOrMax? const-decl "bool" float nil)
          (Compatible? const-decl "bool" float nil)
          (compatible? const-decl "bool" float nil)
          (total? const-decl "bool" float nil)
          (rounded_mode? const-decl "bool" float nil)
          (Rounding type-eq-decl nil float nil)
          (min_or_max? const-decl "bool" float nil)
          (isMax_Unique formula-decl nil float nil)
          (isMin_Unique formula-decl nil float nil)
          (FcanonicUnique formula-decl nil float nil)
          (Unique? const-decl "bool" float nil)
          (Closest_min_or_max formula-decl nil float nil)
          (Closest? const-decl "bool" float nil)
          (FsuccBounded formula-decl nil float nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (canonic_bounded_j judgement-tcc nil float nil)
          (RND_Min_isMin formula-decl nil float nil)
          (real_div_nzreal_is_real application-judgement "real" reals
           nil)
          (minus_real_is_real application-judgement "real" reals nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (< const-decl "bool" reals nil)
          (FtoR const-decl "real" float nil)
          (- const-decl "[numfield, numfield -> numfield]"
             number_fields nil)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
               real_defs nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (>= const-decl "bool" reals nil)
          (isMax? const-decl "bool" float nil)
          (RND_Max_isMax formula-decl nil float nil)
          (isMin? const-decl "bool" float nil)
          (Fsucc const-decl "float" float nil)
          (Fbounded? const-decl "bool" float nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (RND_Max const-decl "(Fcanonic?(b))" float nil)
          (RND_Min const-decl "(Fcanonic?(b))" float nil)
          (Fcanonic? const-decl "bool" float nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (float type-eq-decl nil float nil)
          (int nonempty-type-eq-decl nil integers nil)
          (Format type-eq-decl nil float nil)
          (above nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posreal_div_posreal_is_posreal application-judgement
           "posreal" real_types nil)
          (Fulp_posreal_j application-judgement "posreal" float nil)
          (real_minus_real_is_real application-judgement "real" reals
           nil))
         shostak))
       (closest_ulp 0
        (closest_ulp-1 nil 3681666755
         ("" (skeep)
          (("" (case "r>=0")
            (("1" (use "closest_ulp_pos") (("1" (assert) nil nil)) nil)
             ("2" (lemma "closest_ulp_pos")
              (("2" (inst -1 "b" "Fopp(p)" "-r")
                (("2" (split)
                  (("1" (use "FoppCorrect")
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1"
                          (case "abs(-FtoR(p) - -r) = abs(FtoR(p) - r)")
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "ulp")
                                  (("1"
                                    (expand "ulp")
                                    (("1"
                                      (expand "RND_ToZero")
                                      (("1"
                                        (expand "RND_Max")
                                        (("1"
                                          (use "FulpOpp")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (use "FcanonicBounded")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "abs")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "FcanonicOpp")
                    (("2" (inst -1 "b" "p") (("2" (assert) nil nil))
                      nil))
                    nil)
                   ("3" (use "ClosestFopp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (posreal_div_posreal_is_posreal application-judgement
           "posreal" real_types nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (above nonempty-type-eq-decl nil integers nil)
          (Format type-eq-decl nil float nil)
          (int nonempty-type-eq-decl nil integers nil)
          (float type-eq-decl nil float nil)
          (closest_ulp_pos formula-decl nil float nil)
          (minus_real_is_real application-judgement "real" reals nil)
          (Fopp const-decl "float" float nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (ClosestFopp formula-decl nil float nil)
          (FcanonicOpp formula-decl nil float nil)
          (FoppCorrect formula-decl nil float nil)
          (minus_int_is_int application-judgement "int" integers nil)
          (posrat_exp application-judgement "posrat" exponentiation
           nil)
          (rat_times_rat_is_rat application-judgement "rat" rationals
           nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (expt def-decl "real" exponentiation nil)
          (^ const-decl "real" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation
           nil)
          (int_times_int_is_int application-judgement "int" integers
           nil)
          (int_minus_int_is_int application-judgement "int" integers
           nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (minus_rat_is_rat application-judgement "rat" rationals nil)
          (ulp const-decl "posreal" float nil)
          (RND_Max const-decl "(Fcanonic?(b))" float nil)
          (Fulp_posreal_j application-judgement "posreal" float nil)
          (rndminismin_j application-judgement
           "CanonicRoundingFun(b, isMin?(b))" float nil)
          (FcanonicBounded formula-decl nil float nil)
          (Fcanonic? const-decl "bool" float nil)
          (RND_Min const-decl "(Fcanonic?(b))" float nil)
          (FulpOpp formula-decl nil float nil)
          (RND_ToZero const-decl "(Fcanonic?(b))" float nil)
          (ulp const-decl "posreal" float nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
               real_defs nil)
          (- const-decl "[numfield, numfield -> numfield]"
             number_fields nil)
          (FtoR const-decl "real" float nil)
          (real_minus_real_is_real application-judgement "real" reals
           nil))
         shostak)))

