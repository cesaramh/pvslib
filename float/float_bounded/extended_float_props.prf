(extended_float_props
 (projection_range 0
  (projection_range-1 nil 3807032142
   ("" (skeep :preds? t)
    (("" (expand "prj_ef")
      (("" (case "zero?(f)")
        (("1" (replace -1 :hide? t)
          (("1" (assert)
            (("1" (typepred "max_pos_value") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (replace 1)
          (("2" (expand "prj_ucf")
            (("2"
              (case "exactly_representable_as_pair_of_integers?(FtoR(val(f)))")
              (("1" (lemma "xef_real_lower_bound")
                (("1" (inst -1 "FtoR(val(f))")
                  (("1" (lemma "xef_real_upper_bound")
                    (("1" (inst -1 "FtoR(val(f))")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2"
                (expand "exactly_representable_as_pair_of_integers?")
                (("2" (inst 1 "val(f)")
                  (("1" (typepred "val(f)") (("1" (propax) nil nil))
                    nil)
                   ("2" (expand "is_finite?") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "is_finite?") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prj_ef const-decl "real" extended_float nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
         extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (max_exp const-decl "posint" extended_float nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding
     float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (Format type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (FtoR const-decl "real" float float_unbounded)
    (float type-eq-decl nil float float_unbounded)
    (f skolem-const-decl "(is_finite?)" extended_float_props nil)
    (xef_real nonempty-type-eq-decl nil extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (xef_real_upper_bound formula-decl nil extended_float nil)
    (xef_real_lower_bound formula-decl nil extended_float nil)
    (Fbounded? const-decl "bool" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (max_pos_value const-decl "posreal" extended_float nil)
    (exactly_representable_as_pair_of_integers? const-decl "bool"
     extended_float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (max_pos_value_xef_real name-judgement "xef_real"
     extended_float_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (efloat type-decl nil extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_finite? const-decl "bool" extended_float nil))
   shostak))
 (is_finite_safe_projection 0
  (is_finite_safe_projection-1 nil 3806911681
   ("" (skeep :preds? t)
    (("" (expand "safe_prjct")
      (("" (lift-if -)
        (("" (split)
          (("1" (flatten) nil nil)
           ("2" (flatten)
            (("2" (use "projection_range") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((safe_prjct const-decl "real" extended_float nil)
    (projection_range formula-decl nil extended_float_props nil)
    (is_finite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_pos_value_xef_real name-judgement "xef_real"
     extended_float_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (safe_projection_is_le_compliant 0
  (safe_projection_is_le_compliant-2 nil 3806666989
   ("" (skeep :preds? t)
    (("" (expand "qle_ed")
      (("" (expand "pred_fp")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "qle_zero")
                (("1" (case "(zero?(f1) AND zero?(f2))")
                  (("1" (hide -2)
                    (("1" (replace -1) (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (replace 1)
                    (("2" (split -1)
                      (("1" (replace -1)
                        (("1" (lemma "projection_on_nzfinite")
                          (("1" (inst -1 "f2")
                            (("1" (expand "nzpfinite?")
                              (("1"
                                (expand "is_finite?" -3)
                                (("1"
                                  (replace 2)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (expand "safe_prjct")
                                      (("1"
                                        (expand "prj_ef")
                                        (("1"
                                          (replace 2)
                                          (("1"
                                            (expand "prj_ucf")
                                            (("1"
                                              (iff)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use "LeFnumZERO")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (use "LeR0Fnum")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (replace 1)
                          (("2" (lemma "projection_on_nzfinite")
                            (("2" (inst -1 "f1")
                              (("1"
                                (expand "nznfinite?")
                                (("1"
                                  (expand "is_finite?" -2)
                                  (("1"
                                    (replace 2)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "safe_prjct")
                                        (("1"
                                          (expand "prj_ef")
                                          (("1"
                                            (replace 2)
                                            (("1"
                                              (expand "prj_ucf")
                                              (("1"
                                                (iff)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (use
                                                         "LtZEROFnum")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (use "Lt0RFnum")
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "safe_prjct") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qle_ed const-decl "bool" extended_float_qle nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (efloat type-decl nil extended_float nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (safe_prjct const-decl "real" extended_float nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (projection_on_nzfinite formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (LeR0Fnum formula-decl nil float float_unbounded)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
         extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (max_exp const-decl "posint" extended_float nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding
     float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (Format type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float float_unbounded)
    (LeFnumZERO formula-decl nil float float_unbounded)
    (f2 skolem-const-decl "(is_finite?)" extended_float_props nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (f1 skolem-const-decl "(is_finite?)" extended_float_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (LtZEROFnum formula-decl nil float float_unbounded)
    (Lt0RFnum formula-decl nil float float_unbounded)
    (nznfinite? const-decl "bool" extended_float nil)
    (qle_zero const-decl "bool" extended_float_qle nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil))
   nil)
  (safe_projection_is_le_compliant-1 nil 3806666849
   ("" (postpone) nil nil) nil shostak))
 (safe_projection_is_lt_compliant 0
  (safe_projection_is_lt_compliant-1 nil 3806672286
   ("" (skeep :preds? t)
    (("" (expand "qlt_ed")
      (("" (expand "pred_fp")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "qlt_zero")
                (("1" (case "(zero?(f1) AND zero?(f2))")
                  (("1" (hide -2)
                    (("1" (flatten)
                      (("1" (replace -1) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (case "zero?(f1)")
                    (("1" (replace -1)
                      (("1" (expand "nzpfinite?")
                        (("1" (expand "safe_prjct")
                          (("1" (expand "prj_ef")
                            (("1" (replace -1)
                              (("1"
                                (replace 1)
                                (("1"
                                  (expand "prj_ucf")
                                  (("1"
                                    (case "nzfinite?(f2)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use "GtR0Fnum")
                                        (("1"
                                          (use "GtFnumZERO")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1)
                      (("2" (expand "nznfinite?")
                        (("2" (case "nzfinite?(f1)")
                          (("1" (replace -1)
                            (("1" (expand "safe_prjct")
                              (("1"
                                (expand "prj_ef")
                                (("1"
                                  (replace 1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand "prj_ucf")
                                      (("1"
                                        (use "Lt0RFnum")
                                        (("1"
                                          (use "LtZEROFnum")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "safe_prjct") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qlt_ed const-decl "bool" extended_float_qlt nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (efloat type-decl nil extended_float nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (safe_prjct const-decl "real" extended_float nil)
    (prj_ef const-decl "real" extended_float nil)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (FtoR const-decl "real" float float_unbounded)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (LtZEROFnum formula-decl nil float float_unbounded)
    (Lt0RFnum formula-decl nil float float_unbounded)
    (nznfinite? const-decl "bool" extended_float nil)
    (GtFnumZERO formula-decl nil float float_unbounded)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
         extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (max_exp const-decl "posint" extended_float nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding
     float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (Format type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float float_unbounded)
    (GtR0Fnum formula-decl nil float float_unbounded)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (qlt_zero const-decl "bool" extended_float_qlt nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil))
   shostak))
 (ef_qge_dual 0
  (ef_qge_dual-1 nil 3806415973 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qge_zero const-decl "bool" extended_float_qge nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (qge_non_finite const-decl "bool" extended_float_qge nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil)
    (qge_ed const-decl "bool" extended_float_qge nil)
    (qle_zero const-decl "bool" extended_float_qle nil)
    (qle_non_finite const-decl "bool" extended_float_qle nil)
    (<= const-decl "bool" reals nil)
    (qle_ed const-decl "bool" extended_float_qle nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (ef_qgt_dual 0
  (ef_qgt_dual-1 nil 3806840571 ("" (grind) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qgt_zero const-decl "bool" extended_float_qgt nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (qgt_non_finite const-decl "bool" extended_float_qgt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil)
    (qgt_ed const-decl "bool" extended_float_qgt nil)
    (qlt_zero const-decl "bool" extended_float_qlt nil)
    (qlt_non_finite const-decl "bool" extended_float_qlt nil)
    (< const-decl "bool" reals nil)
    (qlt_ed const-decl "bool" extended_float_qlt nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (ef_nle_lt_rew 0
  (ef_nle_lt_rew-1 nil 3806842193 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (qlt_zero const-decl "bool" extended_float_qlt nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (qlt_non_finite const-decl "bool" extended_float_qlt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil)
    (qlt_ed const-decl "bool" extended_float_qlt nil)
    (qle_zero const-decl "bool" extended_float_qle nil)
    (qle_non_finite const-decl "bool" extended_float_qle nil)
    (<= const-decl "bool" reals nil)
    (qle_ed const-decl "bool" extended_float_qle nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (ef_nlt_le_rew 0
  (ef_nlt_le_rew-1 nil 3806425711 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (qle_zero const-decl "bool" extended_float_qle nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float float_unbounded)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (qle_non_finite const-decl "bool" extended_float_qle nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil)
    (qle_ed const-decl "bool" extended_float_qle nil)
    (qlt_zero const-decl "bool" extended_float_qlt nil)
    (qlt_non_finite const-decl "bool" extended_float_qlt nil)
    (< const-decl "bool" reals nil)
    (qlt_ed const-decl "bool" extended_float_qlt nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (ef_neq_not_eq_rew 0
  (ef_neq_not_eq_rew-1 nil 3806426171
   ("" (skeep :preds? t)
    (("" (expand "qne_ed")
      (("" (expand "qeq_ed")
        (("" (expand "pred_fp")
          (("" (expand "qeq_zero")
            (("" (expand "safe_prjct")
              (("" (expand "prj_ef")
                (("" (expand "is_finite?")
                  (("" (case "zero?(f1)")
                    (("1" (replace -1)
                      (("1" (case "zero?(f2)")
                        (("1" (replace -1) (("1" (propax) nil nil))
                          nil)
                         ("2" (replace 1)
                          (("2" (typepred "val(f2)")
                            (("2" (expand "/=")
                              (("2"
                                (expand "prj_ucf")
                                (("2"
                                  (use "ftor_zero_fnum")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1)
                      (("2" (case "zero?(f2)")
                        (("1" (replace -1)
                          (("1" (typepred "val(f1)")
                            (("1" (expand "prj_ucf")
                              (("1"
                                (use "ftor_zero_fnum")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qne_ed const-decl "bool" extended_float_qeq nil)
    (pred_fp const-decl "bool" ieee754_predicate_scheme__binary nil)
    (safe_prjct const-decl "real" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (ftor_zero_fnum formula-decl nil float float_unbounded)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_props nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float float_unbounded)
    (float type-eq-decl nil float float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding
     float_unbounded)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (max_exp const-decl "posint" extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
         extended_float nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float_props nil)
    (precision formal-const-decl "above(1)" extended_float_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_props nil)
    (efloat type-decl nil extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (prj_ef const-decl "real" extended_float nil)
    (qeq_zero const-decl "bool" extended_float_qeq nil)
    (qeq_ed const-decl "bool" extended_float_qeq nil))
   shostak)))

