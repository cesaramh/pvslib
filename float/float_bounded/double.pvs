double: THEORY
BEGIN

  % Concrete parameters for IEEE 754 double precision format.
  radix_     : MACRO { i: posint | i=2 } = 2
  precision_ : MACRO { i: posint | radix_=2 IMPLIES (i=53 OR i=24)} = 53
  dExp_      : MACRO { d: posnat | radix_=2
  	       	       	  	   IMPLIES (precision_=53 IMPLIES d=1074) AND
				   	   (precision_=24 IMPLIES d=149) }
               = 1074

  exponent_bits_ : MACRO posint = 11

  IMPORTING extended_float_top[radix_,precision_,dExp_]

  binary64 : TYPE = efloat
  double   : TYPE = binary64

  % Observers/Recognizers 

  infinite_double?(f: double) : bool = infinite?(f)
  nan_double?(f: double)      : bool = nan?(f)
  zero_double?(f: double)     : bool = zero?(f)
  finite_double?(f: double)   : bool = is_finite?(f)
  nzfinite_double?(f: double) : bool = nzfinite?(f)
  normal_double?(f: double)    : bool = normal?(f)
  subnormal_double?(f: double) : bool = subnormal?(f)
  positive_double?(f: double)  : bool = positive?(f)
  negative_double?(f: double)  : bool = negative?(f)

  % Constructors

  inf_double(b: bool): (infinite_double?) = inf(b)
  nan_double(b: bool): (nan_double?) = nan(b)
  zero_double(b: bool): (zero_double?) = zero(b)
  nzfinite_double(v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0)
  : (nzfinite_double?)
   = nzfinite(v)

  %  Accesors

  positive_double?: [{x: efloat | infinite?(x) OR zero?(x)} -> bool] = positive?
  signaling_double?: [(nan?) -> bool] = signaling?
  val_double: [(nzfinite?) ->
          {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}] = val

  % Selected Constants

  max_pos_value_double: posreal = max_pos_value
  posinf_double: double = posinf
  neginf_double: double = neginf
  
  %

  round_nearest_even_double(x: real): double = rnd_ef(x)
  
  prjct_double(f: (finite_double?)): real = prj_ef(f)
  safe_prjct_double(f: double): real = safe_prjct(f)

  %

  proj_round_proj_on_finite
  : COROLLARY % of extended_float_rounding__nearest_even.proj_round_proj_on_finite
    FORALL(f: (finite_double?))
    : safe_prjct_double(round_nearest_even_double(safe_prjct_double(f))) = safe_prjct_double(f)

  %

  poszero_double: double = poszero

  qlt_efd(X,Y: double): bool = qlt_ed(X,Y)
  qle_efd(X,Y: double): bool = qle_ed(X,Y)
  qgt_efd(X,Y: double): bool = qgt_ed(X,Y)
  qge_efd(X,Y: double): bool = qge_ed(X,Y)
  qeq_efd(X,Y: double): bool = qeq_ed(X,Y)
  qne_efd(X,Y: double): bool = qne_ed(X,Y)
  qun_efd(X,Y: double): bool = qun_ed(X,Y)

  ;< (X,Y: double): bool = qlt_efd(X,Y)
  ;<=(X,Y: double): bool = qle_efd(X,Y)
  ;> (X,Y: double): bool = qgt_efd(X,Y)
  ;>=(X,Y: double): bool = qge_efd(X,Y)
%TODO REMOVE (deadly clashes)  ;= (X,Y: double): bool = qeq_efd(X,Y)
  ;/=(X,Y: double): bool = qne_efd(X,Y)

  add_efd(r: [real->double])(X,Y: double): double = add_ed(r)(X,Y)
  sub_efd(r: [real->double])(X,Y: double): double = sub_ed(r)(X,Y)
  mul_efd(r: [real->double])(X,Y: double): double = mul_ed(r)(X,Y)
  div_efd(r: [real->double])(X,Y: double): double = div_ed(r)(X,Y)
  max_efd(r: [real->double])(X,Y: double): double = max_ed(r)(X,Y)
  min_efd(r: [real->double])(X,Y: double): double = min_ed(r)(X,Y)
  neg_efd(r: [real->double])(X: double): double = neg_ed(r)(X)
  abs_efd(r: [real->double])(X: double): double = abs_ed(r)(X)
  sqt_efd(r: [real->double])(X: double): double = sqt_ed(r)(X)

  % By default, the operations rounds to nearest (even)

  add_double(X,Y: double): double = add_ed(round_nearest_even_double)(X,Y)
  sub_double(X,Y: double): double = sub_ed(round_nearest_even_double)(X,Y)
  mul_double(X,Y: double): double = mul_ed(round_nearest_even_double)(X,Y)
  div_double(X,Y: double): double = div_ed(round_nearest_even_double)(X,Y)
  max_double(X,Y: double): double = max_ed(round_nearest_even_double)(X,Y)
  min_double(X,Y: double): double = min_ed(round_nearest_even_double)(X,Y)
  neg_double(X: double)  : double = neg_ed(round_nearest_even_double)(X)
  abs_double(X: double)  : double = abs_ed(round_nearest_even_double)(X)
  sqt_double(X: double)  : double = sqt_ed(round_nearest_even_double)(X)

  %

  IMPORTING extended_float_props[radix_,precision_,dExp_]

  finite_double_safe_projection
  : COROLLARY % of extended_float_props.is_finite_safe_projection
    FORALL(f1: (finite_double?), f2: double)
    : safe_prjct_double(f1)=safe_prjct_double(f2) IMPLIES finite_double?(f2)

  %

  double_safe_projection_is_le_compliant
  : COROLLARY % of safe_projection_is_le_compliant
    FORALL(f1,f2:(finite_double?))
    : qle_efd(f1,f2) = (safe_prjct_double(f1) <= safe_prjct_double(f2))

  double_safe_projection_is_lt_compliant
  : COROLLARY % of safe_projection_is_lt_compliant
    FORALL(f1,f2:(finite_double?))
    : qlt_efd(f1,f2) = (safe_prjct_double(f1) < safe_prjct_double(f2))

  %

  double_qge_dual
  : COROLLARY % of extended_float_props.ef_qge_dual
    FORALL(f1,f2: (finite_double?))
    : qge_efd(f2,f1) = qle_efd(f1,f2)

  double_qgt_dual
  : COROLLARY % of extended_float_props.ef_qgt_dual
    FORALL(f1,f2: (finite_double?))
    : qgt_efd(f2,f1) = qlt_efd(f1,f2)

  double_nle_lt_rew
  : COROLLARY % of extended_float_props.ef_nle_lt_rew
    FORALL(f1,f2:(finite_double?))
    :  qlt_efd(f1, f2) = (NOT qle_efd(f2, f1))

  double_nlt_le_rew
  : COROLLARY % of extended_float_props.ef_nlt_le_rew
    FORALL(f1,f2:(finite_double?))
    :  qle_efd(f1, f2) = (NOT qlt_efd(f2, f1))

  double_neq_not_eq_rew
  : COROLLARY % of extended_float_props.ef_neq_not_eq_rew
    FORALL(f1,f2:(finite_double?))
    :  (f1 /= f2) = (NOT (safe_prjct_double(f1) = safe_prjct_double(f2)))

  double_eq_eq_rew
  : COROLLARY % of double_neq_not_eq_rew
    FORALL(f1,f2:(finite_double?))
    :  qeq_efd(f1,f2) = (safe_prjct_double(f1) = safe_prjct_double(f2))

END double
