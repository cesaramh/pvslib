single: THEORY
BEGIN

  % Concrete parameters for IEEE 754 single precision format.
  radix_     : MACRO { i: posint | i=2 } = 2
  precision_ : MACRO { i: posint | radix_=2 IMPLIES (i=53 OR i=24)} = 24
  dExp_      : MACRO { d: posnat | radix_=2
  	       	       	  	   IMPLIES (precision_=53 IMPLIES d=1074) AND
				   	   (precision_=24 IMPLIES d=149) }
               = 149

  exponent_bits_ : MACRO posint = 8

  IMPORTING extended_float_top[radix_,precision_,dExp_]

  binary32 : TYPE = efloat
  single   : TYPE = binary32

  % Observers/Recognizers 

  infinite_single?(f: single) : bool = infinite?(f)
  nan_single?(f: single)      : bool = nan?(f)
  zero_single?(f: single)     : bool = zero?(f)
  finite_single?(f: single)   : bool = is_finite?(f)
  nzfinite_single?(f: single) : bool = nzfinite?(f)
  normal_single?(f: single)    : bool = normal?(f)
  subnormal_single?(f: single) : bool = subnormal?(f)
  positive_single?(f: single)  : bool = positive?(f)
  negative_single?(f: single)  : bool = negative?(f)

  % Constructors

  inf_single(b: bool): (infinite_single?) = inf(b)
  nan_single(b: bool): (nan_single?) = nan(b)
  zero_single(b: bool): (zero_single?) = zero(b)
  nzfinite_single(v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0)
  : (nzfinite_single?)
   = nzfinite(v)

  %  Accesors

  positive_single?: [{x: efloat | infinite?(x) OR zero?(x)} -> bool] = positive?
  signaling_single?: [(nan?) -> bool] = signaling?
  val_single: [(nzfinite?) ->
          {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}] = val

  % Selected Constants

  max_pos_value_single: posreal = max_pos_value
  posinf_single: single = posinf
  neginf_single: single = neginf
  
  %

  round_nearest_even_single(x: real): single = rnd_ef(x)
  
  prjct_single(f: (finite_single?)): real = prj_ef(f)
  safe_prjct_single(f: single): real = safe_prjct(f)

  %

  proj_round_proj_on_finite
  : COROLLARY % of extended_float_rounding__nearest_even.proj_round_proj_on_finite
    FORALL(f: (finite_single?))
    : safe_prjct_single(round_nearest_even_single(safe_prjct_single(f))) = safe_prjct_single(f)

  %

  poszero_single: single = poszero

  qlt_efs(X,Y: single): bool = qlt_ed(X,Y)
  qle_efs(X,Y: single): bool = qle_ed(X,Y)
  qgt_efs(X,Y: single): bool = qgt_ed(X,Y)
  qge_efs(X,Y: single): bool = qge_ed(X,Y)
  qeq_efs(X,Y: single): bool = qeq_ed(X,Y)
  qne_efs(X,Y: single): bool = qne_ed(X,Y)
  qun_efs(X,Y: single): bool = qun_ed(X,Y)

  ;< (X,Y: single): bool = qlt_efs(X,Y)
  ;<=(X,Y: single): bool = qle_efs(X,Y)
  ;> (X,Y: single): bool = qgt_efs(X,Y)
  ;>=(X,Y: single): bool = qge_efs(X,Y)
  ;/=(X,Y: single): bool = qne_efs(X,Y)

  add_efs(r: [real->single])(X,Y: single): single = add_ed(r)(X,Y)
  sub_efs(r: [real->single])(X,Y: single): single = sub_ed(r)(X,Y)
  mul_efs(r: [real->single])(X,Y: single): single = mul_ed(r)(X,Y)
  div_efs(r: [real->single])(X,Y: single): single = div_ed(r)(X,Y)
  max_efs(r: [real->single])(X,Y: single): single = max_ed(r)(X,Y)
  min_efs(r: [real->single])(X,Y: single): single = min_ed(r)(X,Y)
  neg_efs(r: [real->single])(X: single): single = neg_ed(r)(X)
  abs_efs(r: [real->single])(X: single): single = abs_ed(r)(X)
  sqt_efs(r: [real->single])(X: single): single = sqt_ed(r)(X)

  % By default, the operations rounds to nearest (even)

  add_single(X,Y: single): single = add_ed(round_nearest_even_single)(X,Y)
  sub_single(X,Y: single): single = sub_ed(round_nearest_even_single)(X,Y)
  mul_single(X,Y: single): single = mul_ed(round_nearest_even_single)(X,Y)
  div_single(X,Y: single): single = div_ed(round_nearest_even_single)(X,Y)
  max_single(X,Y: single): single = max_ed(round_nearest_even_single)(X,Y)
  min_single(X,Y: single): single = min_ed(round_nearest_even_single)(X,Y)
  neg_single(X: single)  : single = neg_ed(round_nearest_even_single)(X)
  abs_single(X: single)  : single = abs_ed(round_nearest_even_single)(X)
  sqt_single(X: single)  : single = sqt_ed(round_nearest_even_single)(X)

  %

  IMPORTING extended_float_props[radix_,precision_,dExp_]

  finite_single_safe_projection
  : COROLLARY % of extended_float_props.is_finite_safe_projection
    FORALL(f1: (finite_single?), f2: single)
    : safe_prjct_single(f1)=safe_prjct_single(f2) IMPLIES finite_single?(f2)

  %

  single_safe_projection_is_le_compliant
  : COROLLARY % of safe_projection_is_le_compliant
    FORALL(f1,f2:(finite_single?))
    : qle_efs(f1,f2) = (safe_prjct_single(f1) <= safe_prjct_single(f2))

  single_safe_projection_is_lt_compliant
  : COROLLARY % of safe_projection_is_lt_compliant
    FORALL(f1,f2:(finite_single?))
    : qlt_efs(f1,f2) = (safe_prjct_single(f1) < safe_prjct_single(f2))

  %

  single_qge_dual
  : COROLLARY % of extended_float_props.ef_qge_dual
    FORALL(f1,f2: (finite_single?))
    : qge_efs(f2,f1) = qle_efs(f1,f2)

  single_qgt_dual
  : COROLLARY % of extended_float_props.ef_qgt_dual
    FORALL(f1,f2: (finite_single?))
    : qgt_efs(f2,f1) = qlt_efs(f1,f2)

  single_nle_lt_rew
  : COROLLARY % of extended_float_props.ef_nle_lt_rew
    FORALL(f1,f2:(finite_single?))
    :  qlt_efs(f1, f2) = (NOT qle_efs(f2, f1))

  single_nlt_le_rew
  : COROLLARY % of extended_float_props.ef_nlt_le_rew
    FORALL(f1,f2:(finite_single?))
    :  qle_efs(f1, f2) = (NOT qlt_efs(f2, f1))

  single_neq_not_eq_rew
  : COROLLARY % of extended_float_props.ef_neq_not_eq_rew
    FORALL(f1,f2:(finite_single?))
    :  (f1 /= f2) = (NOT (safe_prjct_single(f1) = safe_prjct_single(f2)))

  single_eq_eq_rew
  : COROLLARY % of single_neq_not_eq_rew
    FORALL(f1,f2:(finite_single?))
    :  qeq_efs(f1,f2) = (safe_prjct_single(f1) = safe_prjct_single(f2))

END single
