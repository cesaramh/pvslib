(extended_float_neg
 (neg_non_finite_TCC1 0
  (neg_non_finite_TCC1-1 nil 3793470032
   ("" (skeep :preds? t)
    (("" (expand "is_finite?")
      (("" (flatten)
        (("" (use "efloat_inclusive")
          (("" (split -)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil) ("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite? const-decl "bool" extended_float nil)
    (efloat_inclusive formula-decl nil extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float_neg nil)
    (precision formal-const-decl "above(1)" extended_float_neg nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_neg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (efloat type-decl nil extended_float nil))
   nil
   (neg_non_finite subtype "extended_float_neg.x"
    "(extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].infinite?)")))
 (IMP_ieee754_operation_scheme__unary_TCC1 0
  (IMP_ieee754_operation_scheme__unary_TCC1-1 nil 3793470032
   ("" (assuming-tcc) nil nil)
   ((dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_neg nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_neg nil)
    (radix formal-const-decl "above(1)" extended_float_neg nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil))
   nil
   (IMP_ieee754_operation_scheme__unary assuming
    "ieee754_operation_scheme__unary[extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].efloat, extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].is_numeric?, extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].zero?, extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].is_finite?, extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].prj_ef, extended_float_operations_support[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].trivial?1, restrict[real, (extended_float_operations_support[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].trivial?1), numfield].restrict(LAMBDA (x: reals.real): (number_fields.-)(x)), extended_float_neg.neg_non_finite, restrict[(extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].is_finite?), {arg: extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].efloat | booleans.AND(extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].is_finite?(arg), (booleans.NOT)(extended_float_operations_support[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].trivial?1(extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].prj_ef(arg))))}, extended_float[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].efloat].restrict(extended_float_operations_support[extended_float_neg.radix, extended_float_neg.precision, extended_float_neg.dExp].nan1), extended_float_neg.neg_zero].ieee754_operation_scheme__unary"
    "finite_is_numeric: ASSUMPTION FORALL (X: ieee754_operation_scheme__unary.fpnumber): booleans.IMPLIES(ieee754_operation_scheme__unary.finite?(X), ieee754_operation_scheme__unary.numeric?(X))"))))

