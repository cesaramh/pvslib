extended_float_rounding
[
  radix_     : { i: posint | i=2 },
  precision_ : { i: posint | radix_=2 IMPLIES (i=53 OR i=24)},
  dExp_      : { d: posnat | radix_=2 IMPLIES (precision_=53 IMPLIES d=1074) AND (precision_=24 IMPLIES d=149) }
]
: THEORY BEGIN

  JUDGEMENT radix_ HAS_TYPE above(1)
  JUDGEMENT precision_ HAS_TYPE above(1)
  JUDGEMENT dExp_ HAS_TYPE { d: posnat | d > 2*(precision_-1) - 1 }

  IMPORTING extended_float_exactly_representable_reals[radix_, precision_, dExp_]
  
  round(x: real): efloat

  %M3 this does not belong here (TODO!)
  bound_on_exp_of_rounded_erreal
  : AXIOM
    FORALL (x: xef_real) : Fexp(rnd_ucf(x)) <= max_exp

  round_er_eq_unb
  : AXIOM 
    FORALL (x: er_real | NOT x = 0)
    : round(x) = nzfinite(rnd_ucf(x))

%|- round_er_eq_unb : PROOF
%|- (then (skeep :preds? t) (expand "round") (use "er_lower_bound")
%|-  (use "er_upper_bound") (rewrite "er_ub_correspondent")
%|-  (rewrite "er_lb_correspondent") (assert) (lift-if 2)
%|-  (spread (split 2)
%|-   ((then (flatten) (lemma "er_max_neg_prop") (inst -1 "x")
%|-     (rewrite "er_max_neg_correspondent") (assert))
%|-    (then (flatten)
%|-     (spread (split 2)
%|-      ((then (flatten)
%|-        (spread (use "er_min_pos_prop")
%|-         ((then (rewrite "er_min_pos_correspondent") (assert))
%|-          (assert))))
%|-       (then (flatten)
%|-        (spread (split 2)
%|-         ((then (flatten) (use "er_upper_bound")
%|-           (use "er_ub_correspondent") (assert))
%|-          (propax))))))))))
%|- QED


  rtoed_er_is_finite
  : AXIOM FORALL (x: xef_real)
    : is_finite?(round(x))

  proj_round_er_eq_unb
  : AXIOM 
    FORALL (x: er_real)
    : prj_ef(round(x)) = prj_ucf(rnd_ucf(x))

%|- proj_round_er_eq_unb : PROOF
%|- (then (skeep :preds? t) (use "er_lower_bound") (use "er_upper_bound")
%|-  (rewrite "er_ub_correspondent") (rewrite "er_lb_correspondent")
%|-  (expand "round") (assert) (lift-if 1)
%|-  (spread (split 1)
%|-   ((then (flatten) (expand "prj_ef") (lemma "er_max_neg_prop")
%|-     (inst -1 "x") (rewrite "er_max_neg_correspondent") (assert))
%|-    (then (flatten)
%|-     (spread (split 2)
%|-      ((then (flatten)
%|-        (spread (case "x=0")
%|-         ((then (expand "prj_ef") (replace -1 :hide? t)
%|-           (rewrite "dtor_rtod_on_er"))
%|-          (then (lemma "er_min_pos_prop")
%|-           (spread (inst -1 "x")
%|-            ((then (rewrite "er_min_pos_correspondent") (assert))
%|-             (assert)))))))
%|-       (then (flatten) (expand "prj_ef")
%|-        (spread (split 2)
%|-         ((then (flatten) (use "er_upper_bound")
%|-           (use "er_ub_correspondent") (assert))
%|-          (propax))))))))))
%|- QED

  proj_round_on_er : AXIOM FORALL (x: er_real) : x = prj_ef(round(x))

%|- proj_round_on_er : PROOF
%|- (then (skeep :preds? t) (use "er_lower_bound") (use "er_upper_bound")
%|-  (rewrite "er_ub_correspondent") (rewrite "er_lb_correspondent")
%|-  (expand "round") (assert) (lift-if 1)
%|-  (spread (split 1)
%|-   ((then (flatten) (expand "prj_ef") (lemma "er_max_neg_prop")
%|-     (inst -1 "x") (rewrite "er_max_neg_correspondent") (assert))
%|-    (then (flatten)
%|-     (spread (split 2)
%|-      ((then (flatten)
%|-        (spread (case "x=0")
%|-         ((then (expand "prj_ef") (propax))
%|-          (then (lemma "er_min_pos_prop")
%|-           (spread (inst -1 "x")
%|-            ((then (rewrite "er_min_pos_correspondent") (assert))
%|-             (assert)))))))
%|-       (then (flatten)
%|-        (spread (split 2)
%|-         ((then (flatten) (use "er_upper_bound")
%|-           (use "er_ub_correspondent") (assert))
%|-          (then (flatten) (expand "prj_ef")
%|-           (use "dtor_rtod_on_er")))))))))))
%|- QED

  round_is_injective_on_er
  : AXIOM FORALL (x, y: er_real): round(x) = round(y) IMPLIES x = y

%|- round_is_injective_on_er : PROOF
%|- (then (skeep :preds? t)
%|-  (spread (case "x=0")
%|-   ((then (rewrite -1) (rewrite "round_zero") (expand "round")
%|-     (lift-if -3) (hide -1) (use "er_lower_bound")
%|-     (use "er_upper_bound") (assert)
%|-     (spread (split -4)
%|-      ((propax)
%|-       (then (flatten)
%|-        (spread (split -1)
%|-         ((propax)
%|-          (then (flatten)
%|-           (spread (split -1)
%|-            ((then (flatten)
%|-              (spread (split 1)
%|-               ((assert)
%|-                (spread (use "er_min_pos_prop")
%|-                 ((then (rewrite "er_min_pos_correspondent") (assert))
%|-                  (assert))))))
%|-             (propax))))))))))
%|-    (spread (case "y= 0")
%|-     ((then (rewrite -1) (hide 2) (rewrite "round_zero")
%|-       (expand "round") (lift-if -3) (hide -2) (use "er_lower_bound")
%|-       (use "er_upper_bound") (assert)
%|-       (spread (split -4)
%|-        ((propax)
%|-         (then (flatten)
%|-          (spread (split -1)
%|-           ((then (flatten) (decompose-equality -3))
%|-            (then (flatten)
%|-             (spread (split -1)
%|-              ((then (flatten)
%|-                (spread (split 1)
%|-                 ((assert)
%|-                  (spread (use "er_min_pos_prop")
%|-                   ((then (rewrite "er_min_pos_correspondent") (assert))
%|-                    (assert))))))
%|-               (propax))))))))))
%|-      (spread (case "rnd_ucf(x) = rnd_ucf(y)")
%|-       ((then (hide -4) (typepred "rnd_ucf(x)")
%|-         (expand "currified_closest?_ucf") (expand "closest?_ucf")
%|-         (use "EvenClosest_Unique") (expand "Unique?")
%|-         (inst -1 "x" "rnd_ucf(x)" "rnd_ucf(y)")
%|-         (spread (split -1)
%|-          ((then (lemma "proj_round_on_er") (inst -1 "x")
%|-            (lemma "proj_round_on_er") (inst -1 "y")
%|-            (rewrite "proj_round_er_eq_unb")
%|-            (rewrite "proj_round_er_eq_unb") (expand "prj_ucf")
%|-            (assert))
%|-           (assert) (propax))))
%|-        (then (lemma "round_er_eq_unb") (inst -1 "x") (rewrite -1)
%|-         (lemma "round_er_eq_unb") (inst -1 "y") (rewrite -1)
%|-         (decompose-equality -3)))))))))
%|- QED

  %
  %
  %

  ieee754_semantics_round_proj_interpretation_obligation_1: AXIOM 
    FORALL (f: {x: efloat | nzfinite?(x)}):
      f = round(prj_ef(f));

%|- ieee754_semantics_round_proj_interpretation_obligation_1 : PROOF
%|- (then (skeep) (use "round_inverse_of_projection_on_nzfinite") (assert))
%|- QED

  ieee754_semantics_nzfinite?_def_interpretation_obligation_1
  : AXIOM  FORALL (f: efloat): nzfinite?(f) = (is_finite?(f) AND prj_ef(f) /= 0)

%|- ieee754_semantics_nzfinite*_def_interpretation_obligation_1 : PROOF
%|- (then (skeep) (mapped-axiom-tcc) (grind-reals))
%|- QED
  
  ieee754_semantics_pfinite?_def_interpretation_obligation_1: AXIOM 
    FORALL (f: efloat):
      nzpfinite?(f) = (is_finite?(f) AND
       prj_ef(f) > 0);

%|- ieee754_semantics_pfinite*_def_interpretation_obligation_1 : PROOF
%|- (then (skeep) (spread (mapped-axiom-tcc) ((grind-reals) (grind-reals))))
%|- QED
  
  ieee754_semantics_nfinite?_def_interpretation_obligation_1: AXIOM 
    FORALL (f: efloat):
      nznfinite?(f) = (is_finite?(f) AND
       prj_ef(f) < 0);

%|- ieee754_semantics_nfinite*_def_interpretation_obligation_1 : PROOF
%|- (then (skeep) (spread (mapped-axiom-tcc) ((grind-reals) (grind-reals))))
%|- QED
  
  ieee754_semantics_add_inv_def_interpretation_obligation_1: AXIOM 
    FORALL (f: {x: efloat | nzfinite?(x)}):
      prj_ef(flip_sign(f)) =
       -prj_ef(f);

%|- ieee754_semantics_add_inv_def_interpretation_obligation_1 : PROOF
%|- (then (skeep :preds? t) (expand "flip_sign") (expand "prj_ef")
%|-  (expand "prj_ucf") (use "FoppCorrect"))
%|- QED

  %

  proj_round_is_monotone_on_er
  : AXIOM FORALL (x, y: er_real):
    x <= y IMPLIES prj_ef(round(x)) <= prj_ef(round(y));

%|- proj_round_is_monotone_on_er : PROOF
%|- (then (skeep :preds? t) (rewrite "proj_round_er_eq_unb")
%|-  (rewrite "proj_round_er_eq_unb") (typepred "rnd_ucf(x)")
%|-  (expand "currified_closest?_ucf") (use "closest?_ucf__j") (flatten)
%|-  (expand "rounded_mode?") (flatten) (expand "monotone?")
%|-  (inst -5 "x" "y" "rnd_ucf(x)" "rnd_ucf(y)")
%|-  (spread (split -5)
%|-   ((then (expand "prj_ucf") (propax))
%|-    (spread (case "x=y") ((assert) (assert))) (propax)
%|-    (then (typepred "rnd_ucf(y)") (expand "currified_closest?_ucf")
%|-     (propax)))))
%|- QED

  round_inverse_of_projection_on_nzfinite
  : AXIOM
    FORALL(f: (nzfinite?)): round(prj_ef(f)) = f

  round_zero
  : AXIOM
    round(0) = poszero  

END extended_float_rounding
