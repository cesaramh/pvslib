%%
% @theory: unb_link
% @author: mmoscato
% @date: Mon, 31 Oct 2022 18:29:59 GMT ðŸŽƒ
%
% Link between extended (aka bounded) and
% unbounded floating points.
%%
unb_link
[ radix     : above(1),
  precision : above(1),
  dExp      : { d: posnat | d > 2*(precision-1) - 1 }
]: THEORY
BEGIN 
  
  importing extended_float[radix, precision, dExp]
  importing float_unbounded@float[radix]

  format: MACRO Format = (# dExp := dExp, Prec := precision #)

  % conversion from extended_float to float
  to_unb(f: (is_finite?)): unb_canonic_float
  = if nzfinite?(f) then val(f) 
    else (# Fnum := 0, Fexp := -dExp(format) #) endif

  to_unb_projection
  : lemma
    âˆ€(f: (is_finite?)): prj_ef(f) = FtoR(to_unb(f))

  importing float_unbounded@float_props_rounding[radix,precision,dExp] as rounding_th

  roundp 
  : MACRO 
    { round: RestrictedRounding(format, EvenClosest?) 
    | rounded_mode?(format)(round) AND
      âˆ€(x:real,f:(Fbounded?(format))): round(x,f) IMPLIES Closest?(format)(x,f) }
    % ClosestRoundingPred(format) 
    = rounding_th.closest?_ucf

  roundp_ClosestRoundingPred: JUDGEMENT
    roundp HAS_TYPE ClosestRoundingPred(format)

  % @QED roundp_is_even_closest proved by mmoscato on Fri, 23 Dec 2022 02:56:48 GMT
  roundp_is_even_closest
  : LEMMA
	  âˆ€ (x: real, f: (Fbounded?[radix](format))): roundp(x, f) => EvenClosest?(format)(x, f)

  round : MACRO CanonicRoundingFun(format,roundp) = rounding_th.rnd_ucf

  round_canonic_rounding_fun
  : judgement
    round HAS_TYPE CanonicRoundingFun(format, rounding_th.closest?_ucf)

  % ### Addition
  importing extended_float_add
  importing extended_float_rounding__nearest_even
  importing float_unbounded@cr_add [radix, format, roundp, round]
  
  to_unb_addition_projection
  : lemma
    âˆ€(f1,f2: (is_finite?))
    : is_finite?(add_ed(rnd_ef)(f1,f2))
      => prj_ef(add_ed(rnd_ef)(f1,f2)) = FtoR(Fadd(to_unb(f1),to_unb(f2)))

END unb_link
