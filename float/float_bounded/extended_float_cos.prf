(extended_float_cos
 (IMP_ieee754_operation_scheme__unary_TCC1 0
  (IMP_ieee754_operation_scheme__unary_TCC1-1 nil 3913301407
   ("" (assuming-tcc) nil nil)
   ((dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_cos nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_cos nil)
    (radix formal-const-decl "above(1)" extended_float_cos nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil))
   nil
   (IMP_ieee754_operation_scheme__unary assuming
    "ieee754_operation_scheme__unary[extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].efloat, extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].is_numeric?, extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].zero?, extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].is_finite?, extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].prj_ef, LAMBDA (x: reals.real): reals.>=(x, 0), restrict[real, (LAMBDA (x: reals.real): reals.>=(x, 0)), real].restrict(sincos_def.cos), extended_float_cos.cos_non_finite, restrict[(extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].is_finite?), {arg: extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].efloat | booleans.AND(extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].is_finite?(arg), (booleans.NOT)(reals.>=(extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].prj_ef(arg), 0)))}, extended_float[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].efloat].restrict(extended_float_operations_support[extended_float_cos.radix, extended_float_cos.precision, extended_float_cos.dExp].nan1), extended_float_cos.cos_zero].ieee754_operation_scheme__unary"
    "finite_is_numeric: ASSUMPTION FORALL (X: ieee754_operation_scheme__unary.fpnumber): booleans.IMPLIES(ieee754_operation_scheme__unary.finite?(X), ieee754_operation_scheme__unary.numeric?(X))"))))

