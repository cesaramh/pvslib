extended_float_props[ radix     : above(1),
  precision : above(1),
  dExp      : { d: posnat | d > 2*(precision-1) - 1 }
]: THEORY
BEGIN

  IMPORTING extended_float[radix,precision,dExp]

  %

  projection_range
  : THEOREM
    FORALL(f: (is_finite?))
    : -max_pos_value <= prj_ef(f) AND prj_ef(f) <= max_pos_value

  %

  is_finite_safe_projection
  : THEOREM
    FORALL(f1: (is_finite?), f2: efloat)
    : safe_prjct(f1)=safe_prjct(f2) IMPLIES is_finite?(f2)

  %

  IMPORTING extended_float_qlt[radix,precision,dExp]
  IMPORTING extended_float_qle[radix,precision,dExp]
  IMPORTING extended_float_qgt[radix,precision,dExp]
  IMPORTING extended_float_qge[radix,precision,dExp]
  IMPORTING extended_float_qeq[radix,precision,dExp]
  IMPORTING extended_float_qun[radix,precision,dExp]

  safe_projection_is_le_compliant
  : THEOREM
    FORALL(f1,f2: (is_finite?))
    : qle_ed(f1,f2) = (safe_prjct(f1) <= safe_prjct(f2))

  safe_projection_is_lt_compliant
  : THEOREM
    FORALL(f1,f2: (is_finite?))
    : qlt_ed(f1,f2) = (safe_prjct(f1) < safe_prjct(f2))

  ef_qge_dual
  : THEOREM
    FORALL(f1,f2: (is_finite?))
    : qge_ed(f2,f1) = qle_ed(f1,f2)

  ef_qgt_dual
  : THEOREM
    FORALL(f1,f2: (is_finite?))
    : qgt_ed(f2,f1) = qlt_ed(f1,f2)

  ef_nle_lt_rew
  : THEOREM
    FORALL(f1,f2: (is_finite?)): qlt_ed(f1, f2) = (NOT qle_ed(f2, f1))

  ef_nlt_le_rew
  : THEOREM
    FORALL(f1,f2: (is_finite?)): qle_ed(f1, f2) = (NOT qlt_ed(f2, f1))

  ef_neq_not_eq_rew
  : THEOREM
    FORALL(f1,f2:(is_finite?)) 
    :  qne_ed(f1, f2) = (NOT (safe_prjct(f1) = safe_prjct(f2)))

END extended_float_props
