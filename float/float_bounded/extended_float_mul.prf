(extended_float_mul
 (IMP_ieee754_operation_scheme__binary_TCC1 0
  (IMP_ieee754_operation_scheme__binary_TCC1-1 nil 3913301379
   ("" (subtype-tcc) nil nil)
   ((dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_mul nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_mul nil)
    (radix formal-const-decl "above(1)" extended_float_mul nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trivial?1 const-decl "[real -> bool]"
     extended_float_operations_support nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil))
   nil
   (IMP_ieee754_operation_scheme__binary subtype
    "LAMBDA (x, y: reals.real): number_fields.*(x, y)"
    "[[x: (extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?1), (extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?2(x))] -> real]")))
 (IMP_ieee754_operation_scheme__binary_TCC2 0
  (IMP_ieee754_operation_scheme__binary_TCC2-1 nil 3913301379
   ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_mul nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (IMP_ieee754_operation_scheme__binary subtype "extended_float_mul.x"
    "[(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?), (extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?)]")))
 (IMP_ieee754_operation_scheme__binary_TCC3 0
  (IMP_ieee754_operation_scheme__binary_TCC3-1 nil 3913301379
   ("" (assuming-tcc) nil nil)
   ((dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_mul nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (precision formal-const-decl "above(1)" extended_float_mul nil)
    (radix formal-const-decl "above(1)" extended_float_mul nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil))
   nil
   (IMP_ieee754_operation_scheme__binary assuming
    "ieee754_operation_scheme__binary[extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].efloat, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_numeric?, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].zero?, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].prj_ef, extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?1, extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?2, LAMBDA (x, y: reals.real): number_fields.*(x, y), extended_float_mul.mul_non_finite, restrict[[(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?), (extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?)], {args: [extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].efloat, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].efloat] | booleans.AND(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?(args`1), booleans.AND(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].is_finite?(args`2), (booleans.OR((booleans.NOT)(extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?1(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].prj_ef(args`1))), (booleans.NOT)(extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].trivial?2(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].prj_ef(args`1))(extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].prj_ef(args`2)))))))}, extended_float[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].efloat].restrict(extended_float_operations_support[extended_float_mul.radix, extended_float_mul.precision, extended_float_mul.dExp].nan2), extended_float_mul.mul_zero].ieee754_operation_scheme__binary"
    "finite_is_numeric: ASSUMPTION FORALL (X: ieee754_operation_scheme__binary.fpnumber): booleans.IMPLIES(ieee754_operation_scheme__binary.finite?(X), ieee754_operation_scheme__binary.numeric?(X))"))))

