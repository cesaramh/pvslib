extended_float_div
[ radix     : above(1),
  precision : above(1),
  dExp      : { d: posnat | d > 2*(precision-1) - 1 }
] : THEORY BEGIN

  
  IMPORTING extended_float_operations_support[radix,precision,dExp]

  div_non_finite(args: [efloat,efloat] | NOT is_finite?(args`1) OR NOT is_finite?(args`2))
  : efloat
  = LET x = args`1, y = args`2
    IN
    IF nan?(x) OR nan?(y) THEN nan_from(x,y)
    ELSIF   x = neginf  AND y = neginf    THEN qnan
    ELSIF   x = neginf  AND nznfinite?(y) THEN posinf
    ELSIF   x = neginf  AND y = negzero   THEN posinf
    ELSIF   x = neginf  AND y = poszero   THEN neginf
    ELSIF   x = neginf  AND nzpfinite?(y) THEN neginf
    ELSIF   x = neginf  AND y = posinf    THEN qnan

    ELSIF nznfinite?(x) AND y = neginf    THEN poszero
    ELSIF nznfinite?(x) AND y = posinf    THEN negzero

    ELSIF   x = negzero AND y = neginf    THEN poszero
    ELSIF   x = negzero AND y = posinf    THEN negzero

    ELSIF   x = poszero AND y = neginf    THEN negzero
    ELSIF   x = poszero AND y = posinf    THEN poszero
   
    ELSIF nzpfinite?(x) AND y = neginf    THEN negzero
    ELSIF nzpfinite?(x) AND y = posinf    THEN poszero

    ELSIF   x = posinf  AND y = neginf    THEN qnan
    ELSIF   x = posinf  AND nznfinite?(y) THEN neginf
    ELSIF   x = posinf  AND y = negzero   THEN neginf
    ELSIF   x = posinf  AND y = poszero   THEN posinf
    ELSIF   x = posinf  AND nzpfinite?(y) THEN posinf
    ELSE    qnan % Case: x = posinf  AND y = posinf

    ENDIF

  div_zero(args: [(is_finite?), (is_finite?)] | zero?(args`1) OR zero?(args`2)): efloat
  = LET x = args`1, y = args`2 IN
  
       IF   x = negzero AND nznfinite?(y) THEN poszero
    ELSIF   x = negzero AND y = negzero   THEN qnan
    ELSIF   x = negzero AND y = poszero   THEN qnan
    ELSIF   x = negzero AND nzpfinite?(y) THEN negzero
    
    ELSIF   x = poszero AND nznfinite?(y) THEN negzero
    ELSIF   x = poszero AND y = negzero   THEN qnan
    ELSIF   x = poszero AND y = poszero   THEN qnan
    ELSIF   x = poszero AND nzpfinite?(y) THEN poszero
    
    ELSIF   nznfinite?(x) AND y = negzero THEN posinf
    ELSIF   nzpfinite?(x) AND y = negzero THEN neginf

    ELSIF   nznfinite?(x) AND y = poszero THEN neginf
    ELSE    posinf % case:  nzpfinite?(x) AND y = poszero THEN posinf
    
    ENDIF

  IMPORTING ieee754_operation_scheme__binary[
  	      efloat,
	      is_numeric?,
	      zero?,
	      is_finite?,
	      prj_ef,
	      trivial?1,
	      nonzero?2,
	      LAMBDA(x:real,y:(nonzero?2(x))):x/y,
	      div_non_finite,
	      nan2,
	      div_zero]

  div_ed(round:[real->efloat])(X,Y: efloat): efloat = fun_fp(round)(X,Y)

END extended_float_div
