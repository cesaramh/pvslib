extended_float_sub
[ radix     : above(1),
  precision : above(1),
  dExp      : { d: posnat | d > 2*(precision-1) - 1 }
] : THEORY BEGIN

  
  IMPORTING extended_float_operations_support[radix,precision,dExp]

  sub_non_finite(args: [efloat,efloat] | NOT is_finite?(args`1) OR NOT is_finite?(args`2)): efloat
  = LET x = args`1, y = args`2
    IN
    IF nan?(x) OR nan?(y) THEN nan_from(x,y)
    ELSIF   x = neginf  AND y = neginf    THEN qnan
    ELSIF   x = neginf  AND y = negzero   THEN neginf
    ELSIF   x = neginf  AND nzfinite?(y)  THEN neginf
    ELSIF   x = neginf  AND y = poszero   THEN neginf
    ELSIF   x = neginf  AND y = posinf    THEN neginf

    ELSIF   x = negzero  AND y = neginf    THEN posinf
    ELSIF   x = negzero  AND y = posinf    THEN neginf

    ELSIF nzfinite?(x)  AND y = neginf    THEN posinf
    ELSIF nzfinite?(x)  AND y = posinf    THEN neginf

    ELSIF   x = poszero  AND y = neginf    THEN posinf
    ELSIF   x = poszero  AND y = posinf    THEN neginf

    ELSIF   x = posinf  AND y = neginf    THEN posinf
    ELSIF   x = posinf  AND y = negzero   THEN posinf
    ELSIF   x = posinf  AND nzfinite?(y)  THEN posinf
    ELSIF   x = posinf  AND y = poszero   THEN posinf
    ELSE    qnan % Case: x = posinf  AND y = posinf

    ENDIF

  sub_zero(args: [(is_finite?), (is_finite?)] | zero?(args`1) OR zero?(args`2)): efloat
  = LET x = args`1, y = args`2 IN
    IF      x = negzero  AND y = negzero   THEN poszero % arbitrary
    ELSIF   x = negzero  AND y = poszero   THEN negzero 
    ELSIF   x = negzero  AND nzfinite?(y)  THEN flip_sign(y)

    ELSIF   nzfinite?(x) AND y = negzero  THEN x
    ELSIF   nzfinite?(x) AND y = poszero  THEN x

    ELSIF   x = poszero  AND nzfinite?(y)  THEN flip_sign(y)
    ELSIF   x = poszero  AND y = negzero   THEN poszero 
    ELSE    poszero % case:  x = poszero  AND y = poszero % arbitrary
    ENDIF

  IMPORTING ieee754_operation_scheme__binary[
  	      efloat,
	      is_numeric?,
	      zero?,
	      is_finite?,
	      prj_ef,
	      trivial?1,
	      trivial?2,
	      LAMBDA(x,y:real):x-y,
	      sub_non_finite,
	      nan2,
	      sub_zero]

  sub_ed(round:[real->efloat])(X,Y: efloat): efloat = fun_fp(round)(X,Y)

END extended_float_sub
