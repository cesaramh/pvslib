extended_float_min
[ radix     : above(1),
  precision : above(1),
  dExp      : { d: posnat | d > 2*(precision-1) - 1 }
] : THEORY BEGIN

  
  IMPORTING extended_float_operations_support[radix,precision,dExp]

  min_non_finite(args: [efloat,efloat] | NOT is_finite?(args`1) OR NOT is_finite?(args`2)): efloat
  = LET x = args`1, y = args`2
    IN
    IF nan?(x) OR nan?(y) THEN nan_from(x,y)
    ELSIF   x = neginf  AND y = neginf    THEN neginf
    ELSIF   x = neginf  AND is_finite?(y) THEN neginf
    ELSIF   x = neginf  AND y = posinf    THEN neginf

    ELSIF is_finite?(x) AND y = neginf    THEN neginf
    ELSIF is_finite?(x) AND y = posinf    THEN x

    ELSIF   x = posinf  AND y = neginf    THEN neginf
    ELSIF   x = posinf  AND is_finite?(y) THEN y
    ELSE    posinf % Case: x = posinf  AND y = posinf

    ENDIF

  min_zero(args: [(is_finite?), (is_finite?)] | zero?(args`1) OR zero?(args`2)): efloat
  = LET x = args`1, y = args`2 IN
       IF   x = negzero  AND y = negzero   THEN negzero
    ELSIF   x = negzero  AND y = poszero   THEN negzero
    ELSIF   x = poszero  AND y = negzero   THEN negzero
    ELSIF   x = poszero  AND y = poszero   THEN poszero

    ELSIF   x = negzero  AND nznfinite?(y)  THEN y
    ELSIF   x = negzero  AND nzpfinite?(y)  THEN negzero
    ELSIF   x = poszero  AND nznfinite?(y)  THEN y
    ELSIF   x = poszero  AND nzpfinite?(y)  THEN poszero

    ELSIF  nznfinite?(x) AND y = negzero    THEN x
    ELSIF  nzpfinite?(x) AND y = negzero    THEN negzero
    ELSIF  nznfinite?(x) AND y = poszero    THEN x
    ELSE   poszero % case :  nzpfinite?(x) AND y = poszero    THEN x

    ENDIF

  IMPORTING ieee754_operation_scheme__binary[
  	      efloat,
	      is_numeric?,
	      zero?,
	      is_finite?,
	      prj_ef,
	      trivial?1,
	      trivial?2,
	      LAMBDA(x,y:real):min(x,y),
	      min_non_finite,
	      nan2,
	      min_zero]

  min_ed(round:[real->efloat])(X,Y: efloat): efloat = fun_fp(round)(X,Y)

END extended_float_min
