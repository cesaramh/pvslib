(unb_link
 (to_unb_TCC1 0
  (to_unb_TCC1-1 nil 3876837345 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (precision formal-const-decl "above(1)" unb_link nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     unb_link nil)
    (efloat type-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (xef_real_0_j number-judgement "xef_real" unb_link nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (^ const-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (radix formal-const-decl "above(1)" unb_link nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vNum const-decl "posnat" float float_unbounded)
    (Fbounded? const-decl "bool" float float_unbounded)
    (Fnormal? const-decl "bool" float float_unbounded)
    (Fsubnormal? const-decl "bool" float float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (xef_real_1_j number-judgement "xef_real" unb_link nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (to_unb subtype
    "(# Fnum := 0, Fexp := (number_fields.-)(unb_link.dExp) #)"
    "unb_canonic_float[radix, precision, dExp]")))
 (to_unb_projection 0
  (to_unb_projection-1 nil 3876838179
   ("" (skeep)
    (("" (expand "prj_ef")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "FtoR")
              (("1" (expand "to_unb" 1 1)
                (("1" (assert)
                  (("1" (split)
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)
                     ("2" (replace -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "prj_ucf")
              (("2" (expand "to_unb")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (typepred "f")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "is_finite?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prj_ef const-decl "real" extended_float nil)
    (FtoR const-decl "real" float float_unbounded)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (xef_real_1_j number-judgement "xef_real" unb_link nil)
    (xef_real_0_j number-judgement "xef_real" unb_link nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" unb_link nil)
    (precision formal-const-decl "above(1)" unb_link nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     unb_link nil)
    (to_unb const-decl "unb_canonic_float" unb_link nil)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (efloat type-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (roundp_TCC1 0
  (roundp_TCC1-1 nil 3876837345 ("" (subtype-tcc) nil nil)
   ((closest?_ucf__j name-judgement "{round:
   RestrictedRounding[radix]((# Prec := precision, dExp := dExp #),
                             EvenClosest?) |
   rounded_mode?((# Prec := precision, dExp := dExp #))(round)}"
     unb_link nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (closest?_ucf const-decl "bool" float_props_rounding
     float_unbounded)
    (precision formal-const-decl "above(1)" unb_link nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     unb_link nil)
    (EvenClosest? const-decl "bool" float float_unbounded)
    (even? const-decl "bool" integers nil)
    (Closest? const-decl "bool" float float_unbounded)
    (FtoR const-decl "real" float float_unbounded)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" unb_link nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float float_unbounded)
    (float type-eq-decl nil float float_unbounded)
    (Fbounded? const-decl "bool" float float_unbounded)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (xef_real_1_j number-judgement "xef_real" unb_link nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (roundp subtype
    "rounding_th[unb_link.radix, unb_link.precision, unb_link.dExp].closest?_ucf"
    "{round: float[unb_link.radix].RestrictedRounding((# dExp := unb_link.dExp, Prec := unb_link.precision #), float[unb_link.radix].EvenClosest?) | booleans.AND(float[unb_link.radix].rounded_mode?((# dExp := unb_link.dExp, Prec := unb_link.precision #))(round), FORALL (x: reals.real, f: (float[unb_link.radix].Fbounded?((# dExp := unb_link.dExp, Prec := unb_link.precision #)))): booleans.IMPLIES(round(x, f), float[unb_link.radix].Closest?((# dExp := unb_link.dExp, Prec := unb_link.precision #))(x, f)))}")))
 (roundp_is_even_closest 0
  (roundp_is_even_closest-1 nil 3880752993
   ("" (skeep) (("" (rewrite "closest?_ucf") nil nil)) nil)
   ((xef_real_1_j number-judgement "xef_real" unb_link nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (closest?_ucf const-decl "bool" float_props_rounding
     float_unbounded)
    (float type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float float_unbounded)
    (Fbounded? const-decl "bool" float float_unbounded)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" unb_link nil)
    (precision formal-const-decl "above(1)" unb_link nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     unb_link nil))
   shostak))
 (to_unb_addition_projection 0
  (to_unb_addition_projection-1 nil 3876838582
   (""
    (with-labels
     (case "∀(f:(is_finite?)): zero?(f) IMPLIES FtoR(to_unb(f)) = 0")
     "ftor_zero_value")
    (("1" (hide "ftor_zero_value")
      (("1" (skeep)
        (("1" (expand "add_ed")
          (("1" (expand "fun_fp")
            (("1" (expand "trivial?1")
              (("1" (expand "trivial?2")
                (("1" (split)
                  (("1" (flatten)
                    (("1" (replace -1)
                      (("1" (expand "prj_ef")
                        (("1" (rewrite "add_zero_equiv")
                          (("1" (lift-if)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "add_zero_alt")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "Fadd")
                                      (("1"
                                        (expand "Fg")
                                        (("1"
                                          (case "zero?(f1)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (reveal
                                               "ftor_zero_value")
                                              (("1"
                                                (rewrite
                                                 "ftor_zero_value")
                                                (("1"
                                                  (hide
                                                   "ftor_zero_value")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "zero?(f2)")
                                                      (("1"
                                                        (reveal
                                                         "ftor_zero_value")
                                                        (("1"
                                                          (rewrite
                                                           "ftor_zero_value")
                                                          (("1"
                                                            (hide
                                                             "ftor_zero_value")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "Closest_int_exact_rep")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "format"
                                                                     "roundp"
                                                                     "round"
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "exactly_representable")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "abs")
                                                                      (("2"
                                                                        (expand
                                                                         "vNum")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("3"
                                                                        (lemma
                                                                         "rnd_eclosest_is_particuLar_closest")
                                                                        (("3"
                                                                          (expand
                                                                           "currified_closest?_ucf")
                                                                          (("3"
                                                                            (expand
                                                                             "closest?_ucf")
                                                                            (("3"
                                                                              (expand
                                                                               "rnd_ucf")
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "r")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "EvenClosest?")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (typepred
                                                             "f2")
                                                            (("2"
                                                              (expand
                                                               "is_finite?")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "zero?(f2)")
                                            (("1"
                                              (reveal
                                               "ftor_zero_value")
                                              (("1"
                                                (rewrite
                                                 "ftor_zero_value"
                                                 :subst
                                                 ("f" "f2"))
                                                (("1"
                                                  (hide
                                                   "ftor_zero_value")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (typepred "f1")
                                                        (("1"
                                                          (expand
                                                           "is_finite?")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "add_zero_alt" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (expand "Fadd")
                                      (("2"
                                        (expand "Fg")
                                        (("2"
                                          (case "zero?(f1)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (reveal
                                               "ftor_zero_value")
                                              (("1"
                                                (rewrite
                                                 "ftor_zero_value")
                                                (("1"
                                                  (hide
                                                   "ftor_zero_value")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "zero?(f2)")
                                                      (("1"
                                                        (reveal
                                                         "ftor_zero_value")
                                                        (("1"
                                                          (rewrite
                                                           "ftor_zero_value")
                                                          (("1"
                                                            (hide
                                                             "ftor_zero_value")
                                                            (("1"
                                                              (expand
                                                               "add_zero_alt")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "add_zero_alt")
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (lift-if
                                                               2)
                                                              (("2"
                                                                (typepred
                                                                 "f2")
                                                                (("2"
                                                                  (expand
                                                                   "is_finite?")
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (expand
                                                                         "prj_ucf")
                                                                        (("2"
                                                                          (rewrite
                                                                           "to_unb_projection"
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "prj_ef")
                                                                            (("2"
                                                                              (expand
                                                                               "prj_ucf")
                                                                              (("2"
                                                                                (lemma
                                                                                 "ClosestRNDF_FtoR_inverse")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "format"
                                                                                   "roundp"
                                                                                   "round")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FtoR_inverse")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "val(f2)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "zero?(f2)")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (reveal
                                                 "ftor_zero_value")
                                                (("1"
                                                  (rewrite
                                                   "ftor_zero_value"
                                                   :subst
                                                   ("f" "f2"))
                                                  (("1"
                                                    (hide
                                                     "ftor_zero_value")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (typepred
                                                           "f1")
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (expand
                                                               "add_zero_alt")
                                                              (("1"
                                                                (expand
                                                                 "is_finite?")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -1)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "to_unb_projection"
                                                                         :dir
                                                                         rl)
                                                                        (("3"
                                                                          (expand
                                                                           "prj_ef")
                                                                          (("3"
                                                                            (expand
                                                                             "prj_ucf")
                                                                            (("3"
                                                                              (lemma
                                                                               "ClosestRNDF_FtoR_inverse")
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "format"
                                                                                 "roundp"
                                                                                 "round")
                                                                                (("3"
                                                                                  (expand
                                                                                   "FtoR_inverse")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "val(f1)")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (replace 1)
                      (("2" (replace 2)
                        (("2" (expand "Fadd")
                          (("2" (expand "Fg")
                            (("2" (rewrite "to_unb_projection")
                              (("2"
                                (rewrite "to_unb_projection")
                                (("2"
                                  (expand "rnd_ef" -1)
                                  (("2"
                                    (expand "is_finite?")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand "rnd_ef")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "prj_ef")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "prj_ef")
                                                        (("2"
                                                          (expand
                                                           "prj_ucf")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (trivial?1 const-decl "[real -> bool]"
     extended_float_operations_support nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (add_zero_equiv formula-decl nil extended_float_add nil)
    (add_zero_alt const-decl "efloat" extended_float_add nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     cr_add float_unbounded)
    (Closest_int_exact_rep formula-decl nil float float_unbounded)
    (EvenClosest? const-decl "bool" float float_unbounded)
    (rnd_eclosest_is_particuLar_closest formula-decl nil
     float_props_rounding float_unbounded)
    (posint_exp application-judgement "posint" exponentiation nil)
    (exactly_representable const-decl "bool" float float_unbounded)
    (Rounding type-eq-decl nil float float_unbounded)
    (closest?_ucf const-decl "bool" float_props_rounding
     float_unbounded)
    (RNDF type-eq-decl nil float float_unbounded)
    (vNum const-decl "posnat" float float_unbounded)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}"
     float_props_rounding float_unbounded)
    (currified_closest?_ucf const-decl "bool" float_props_rounding
     float_unbounded)
    (Closest? const-decl "bool" float float_unbounded)
    (Fbounded? const-decl "bool" float float_unbounded)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (rnd_ucf_is_canonic_rounding_closest_ucf name-judgement
     "CanonicRoundingFun[radix]((# Prec := precision, dExp := dExp #),
                          closest?_ucf)" extended_float_add nil)
    (rnd_ucf_is_canonic_rounding_closest_ucf name-judgement
     "CanonicRoundingFun[radix]((# Prec := precision, dExp := dExp #),
                          closest?_ucf)"
     extended_float_rounding__nearest_even nil)
    (rnd_ucf_is_canonic_rounding_closest_ucf name-judgement
     "CanonicRoundingFun[radix]((# Prec := precision, dExp := dExp #),
                          closest?_ucf)" unb_link nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (xef_real_0_j number-judgement "xef_real"
     extended_float_rounding__nearest_even nil)
    (xef_real_0_j number-judgement "xef_real" extended_float_add nil)
    (xef_real_0_j number-judgement "xef_real" unb_link nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme float_unbounded)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (prj_ucf const-decl "real" float_props_rounding float_unbounded)
    (RND_aux const-decl "(Fcanonic?(b))" float float_unbounded)
    (RND_Min const-decl "(Fcanonic?(b))" float float_unbounded)
    (Fopp const-decl "float" float float_unbounded)
    (RND_Max const-decl "(Fcanonic?(b))" float float_unbounded)
    (even? const-decl "bool" integers nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float float_unbounded)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (to_unb_projection formula-decl nil unb_link nil)
    (CanonicRoundingFun type-eq-decl nil float float_unbounded)
    (ClosestRoundingPred type-eq-decl nil float float_unbounded)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
         extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (max_exp const-decl "posint" extended_float nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (FtoR_inverse const-decl "bool" float float_unbounded)
    (ClosestRNDF_FtoR_inverse formula-decl nil float float_unbounded)
    (prj_ef const-decl "real" extended_float nil)
    (max_pos_value_xef_real name-judgement "xef_real"
     extended_float_add nil)
    (max_pos_value_xef_real name-judgement "xef_real"
     extended_float_rounding__nearest_even nil)
    (max_pos_value_xef_real name-judgement "xef_real" unb_link nil)
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neginf const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (xef_real_1_j number-judgement "xef_real" unb_link nil)
    (xef_real_1_j number-judgement "xef_real" extended_float_add nil)
    (xef_real_1_j number-judgement "xef_real"
     extended_float_rounding__nearest_even nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" unb_link nil)
    (precision formal-const-decl "above(1)" unb_link nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     unb_link nil)
    (efloat type-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float float_unbounded)
    (FtoR const-decl "real" float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (unb_canonic_float type-eq-decl nil float_props_rounding
     float_unbounded)
    (to_unb const-decl "unb_canonic_float" unb_link nil))
   shostak)))

