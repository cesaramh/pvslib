(example_ffnn
 (plus_TCC1 0
  (plus_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_idempotent? const-decl "bool" algebra_defs nil))
   nil
   (plus subtype
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_idempotent?(example_ffnn.binop)(0)}")))
 (times_TCC1 0
  (times_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_idempotent? const-decl "bool" algebra_defs nil))
   nil
   (times subtype
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_idempotent?(example_ffnn.binop)(0)}")))
 (times_TCC2 0
  (times_TCC2-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_absorbing_element? const-decl "bool" algebra_defs nil))
   nil
   (times subtype
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_absorbing_element?(example_ffnn.binop)(0)}")))
 (times_TCC3 0
  (times_TCC3-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_action_absorbing? const-decl "bool" algebra_defs nil))
   nil
   (times subtype
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{action: [[real, real] -> real] | algebra_defs[real, real].is_action_absorbing?(example_ffnn.action)(0)}")))
 (W1_TCC1 0
  (W1_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (W1 subtype "(3, 3)"
       "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(lazy_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): IF (booleans.AND(reals.<(lazy_matrix_defs.k, 3), reals.<(j1, 3))) THEN 1 ELSE 0 ENDIF = 0), FORALL (k: nat): booleans.IMPLIES(reals.>=(lazy_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): IF (booleans.AND(reals.<(i1, 3), reals.<(lazy_matrix_defs.k, 3))) THEN 1 ELSE 0 ENDIF = 0)))}")))
 (b1_TCC1 0
  (b1_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (b1 subtype "(3, 1)"
       "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(lazy_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): IF (booleans.AND(reals.<(lazy_matrix_defs.k, 3), j1 = 0)) THEN (number_fields.-)((number_fields.-)(lazy_matrix_defs.k), 1/2) ELSE 0 ENDIF = 0), FORALL (k: nat): booleans.IMPLIES(reals.>=(lazy_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): IF (booleans.AND(reals.<(i1, 3), lazy_matrix_defs.k = 0)) THEN (number_fields.-)((number_fields.-)(i1), 1/2) ELSE 0 ENDIF = 0)))}")))
 (W2_TCC1 0
  (W2_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (W2 subtype "(: (: 1, (number_fields.-)(1), 1 :) :)"
       "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (b2_TCC1 0
  (b2_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (b2 subtype
       "(: (: (number_fields.-)((number_fields./(5, 10))) :) :)"
       "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (cast_TCC1 0
  (cast_TCC1-1 nil 3907936261
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "i")
        (("" (typepred "j")
          (("" (case "(i=0 OR i=1 OR i=2) AND (j=0 OR j=1 OR j=2)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bint type-eq-decl nil example_ffnn nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (cast subtype
         "(: (: example_ffnn.a :), (: example_ffnn.b :), (: example_ffnn.c :) :)"
         "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (parity_net_works_TCC1 0
  (parity_net_works_TCC1-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (parity_net_works subtype
    "(number_fields.+)((number_fields.+)(example_ffnn.a, example_ffnn.b), example_ffnn.c)"
    "int")))
 (parity_net_works_TCC2 0
  (parity_net_works_TCC2-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil)
    (length_singleton formula-decl nil more_list_props structures)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (parity_net_works subtype "(: (: 0 :) :)"
    "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (parity_net_works_TCC3 0
  (parity_net_works_TCC3-1 nil 3907936261 ("" (subtype-tcc) nil nil)
   ((bint type-eq-decl nil example_ffnn nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (cast const-decl "gmat" example_ffnn nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (restrict const-decl "R" restrict nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (gvec_product const-decl "T" ops_derived nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (b1 const-decl "gmat" example_ffnn nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (map const-decl "gmat" ops_unrestricted nil)
    (O const-decl "gmat" example_ffnn nil)
    (Layer1 const-decl "gmat" example_ffnn nil)
    (length_singleton formula-decl nil more_list_props structures)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (W2 const-decl "gmat" example_ffnn nil)
    (minimal_default_matrix const-decl "gmat" lazy_matrix_defs nil)
    (M_default const-decl "gmat" lazy_matrix_defs nil)
    (b2 const-decl "gmat" example_ffnn nil)
    (Layer2 const-decl "gmat" example_ffnn nil)
    (parity_net const-decl "gmat" example_ffnn nil)
    (odd? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (parity_net_works subtype "(: (: 1 :) :)"
    "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (parity_net_works 0
  (parity_net_works-1 nil 3907937269
   ("" (skeep)
    (("" (typepred "a")
      (("" (typepred "b")
        (("" (typepred "c")
          (("" (split)
            (("1" (replaces -1)
              (("1" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "odd?")
                          (("1"
                            (eval-expr "eval_mat(parity_net(0,0,0))")
                            (("1" (lemma "eval_mat_lemma")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (expand "even?")
                          (("2"
                            (eval-expr "eval_mat(parity_net(1,0,0))")
                            (("2" (lemma "eval_mat_lemma")
                              (("2"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "even?")
                          (("1"
                            (eval-expr "eval_mat(parity_net(0,1,0))")
                            (("1" (lemma "eval_mat_lemma")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (expand "odd?")
                          (("2"
                            (eval-expr "eval_mat(parity_net(1,1,0))")
                            (("2" (lemma "eval_mat_lemma")
                              (("2"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "even?")
                          (("1"
                            (eval-expr "eval_mat(parity_net(0,0,1))")
                            (("1" (lemma "eval_mat_lemma")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (expand "odd?")
                          (("2"
                            (eval-expr "eval_mat(parity_net(1,0,1))")
                            (("2" (lemma "eval_mat_lemma")
                              (("2"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "odd?")
                          (("1"
                            (eval-expr "eval_mat(parity_net(0,1,1))")
                            (("1" (lemma "eval_mat_lemma")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (expand "even?")
                          (("2"
                            (eval-expr "eval_mat(parity_net(1,1,1))")
                            (("2" (lemma "eval_mat_lemma")
                              (("2"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bint type-eq-decl nil example_ffnn nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (eval_mat_lemma formula-decl nil lazy_matrix_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (eval_rectangular? def-decl "bool" lazy_matrix_props nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (PRED type-eq-decl nil defined_types nil)
    (eval_mat def-decl "list[list[T]]" lazy_matrix_defs nil)
    (parity_net const-decl "gmat" example_ffnn nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   shostak))
 (W1_behavior_TCC1 0
  (W1_behavior_TCC1-1 nil 3907940199
   ("" (skeep)
    (("" (replaces -1)
      (("" (skeep)
        (("" (typepred "i")
          (("" (typepred "j")
            (("" (case "(i=0 OR i=1 OR i=2) AND (j=0 OR j=1 OR j=2)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (W1_behavior subtype
    "(: (: example_ffnn.n :), (: example_ffnn.n :), (: example_ffnn.n :) :)"
    "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (W1_behavior 0
  (W1_behavior-1 nil 3907940265
   ("" (skeep)
    (("" (assert)
      (("" (expand "*")
        (("" (expand "gmat_product")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "abstract_mat")
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten) (("1" (grind) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (decompose-equality 2)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (case
                                                   "x!2=0 AND (x!1=0 OR x!1=1 OR x!1=2)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "length" 1)
                                            (("1"
                                              (expand "length" 1)
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (expand "length" 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (typepred ("i" "j"))
                                      (("2"
                                        (case
                                         "(i=0 OR i=1 OR i=2) AND (j=0 OR j=1 OR j=2)")
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (typepred ("i" "j"))
                                    (("3"
                                      (case
                                       "(i=0 OR i=1 OR i=2) AND (j=0 OR j=1 OR j=2)")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide-all-but 1)
                                (("4" (grind) nil nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (cast const-decl "gmat" example_ffnn nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (bint type-eq-decl nil example_ffnn nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length_singleton formula-decl nil more_list_props structures)
    (gvec type-eq-decl nil lazy_matrix_defs nil)
    (gvec_product const-decl "T" ops_derived nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (car const-decl "T" lazy_matrix_defs nil)
    (cdr const-decl "gvec" lazy_matrix_defs nil)
    (collapse def-decl "T" ops_unrestricted nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (stepW1b1_values 0
  (stepW1b1_values-1 nil 3907942260
   ("" (skeep)
    (("" (skeep)
      (("" (case "i>height(step o ((W1 * cast(a, b, c)) + b1))")
        (("1"
          (typepred "dimension(step o ((W1 * cast(a, b, c)) + b1))")
          (("1" (expand "height")
            (("1" (instantiate -3 "i")
              (("1" (assert)
                (("1" (instantiate -3 "j")
                  (("1" (expand "ijth") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "height(step o ((W1 * cast(a, b, c)) + b1)) = 3")
          (("1" (replaces -1)
            (("1"
              (typepred
               "dimension(step o ((W1 * cast(a, b, c)) + b1))")
              (("1" (instantiate -4 "j")
                (("1" (split -4)
                  (("1" (instantiate -1 "i")
                    (("1" (expand "ijth") (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2"
                    (case "dimension(step o ((W1 * cast(a, b, c)) + b1))`2 = 1")
                    (("1" (replaces -1)
                      (("1" (case "j=0")
                        (("1" (replaces -1)
                          (("1" (case "i=0 OR i=1 OR i=2 OR i=3")
                            (("1" (hide (-2 -3))
                              (("1"
                                (instantiate -2 "i")
                                (("1"
                                  (split)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (hide -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replaces -1)
                                    (("3"
                                      (hide -1)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (replaces -1)
                                    (("4"
                                      (hide -1)
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide-all-but (1 4))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((map const-decl "gmat" ops_unrestricted nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (gvec_product const-decl "T" ops_derived nil)
    (collapse def-decl "T" ops_unrestricted nil)
    (cdr const-decl "gvec" lazy_matrix_defs nil)
    (car const-decl "T" lazy_matrix_defs nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (restrict const-decl "R" restrict nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (O const-decl "gmat" example_ffnn nil)
    (step const-decl "real" example_ffnn nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bint type-eq-decl nil example_ffnn nil)
    (cast const-decl "gmat" example_ffnn nil)
    (b1 const-decl "gmat" example_ffnn nil))
   shostak))
 (stepW1b1_value_limit 0
  (stepW1b1_value_limit-1 nil 3907943126
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "W1_behavior")
        (("" (inst?)
          (("" (replaces -1)
            (("" (assert)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "abstract_mat")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (expand "length")
                          (("1" (expand "length")
                            (("1" (expand "b1")
                              (("1"
                                (expand "+")
                                (("1"
                                  (expand "pointwise")
                                  (("1"
                                    (expand "height")
                                    (("1"
                                      (expand "width")
                                      (("1"
                                        (expand "max")
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "height")
                                              (("1"
                                                (expand "width")
                                                (("1"
                                                  (expand "ijth")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "i=0 OR i=1 OR i=2")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (typepred
                                                                   ("a"
                                                                    "b"
                                                                    "c"))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "nth")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (typepred
                                                                     ("a"
                                                                      "b"
                                                                      "c"))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (replaces
                                                               -1)
                                                              (("3"
                                                                (expand
                                                                 "nth")
                                                                (("3"
                                                                  (expand
                                                                   "nth")
                                                                  (("3"
                                                                    (expand
                                                                     "nth")
                                                                    (("3"
                                                                      (typepred
                                                                       ("a"
                                                                        "b"
                                                                        "c"))
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "abstract_mat")
                    (("2" (expand "length")
                      (("2" (expand "length")
                        (("2" (expand "length")
                          (("2" (expand "length")
                            (("2" (expand "b1")
                              (("2"
                                (expand "+")
                                (("2"
                                  (expand "pointwise")
                                  (("2"
                                    (expand "height")
                                    (("2"
                                      (expand "width")
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (expand "ijth")
                                          (("2"
                                            (expand "o")
                                            (("2"
                                              (expand "map")
                                              (("2"
                                                (expand "height")
                                                (("2"
                                                  (expand "width")
                                                  (("2"
                                                    (expand "ijth")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "step")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "i=0 OR i=1 OR i=2")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (typepred
                                                                             ("a"
                                                                              "b"
                                                                              "c"))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "nth")
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (typepred
                                                                               ("a"
                                                                                "b"
                                                                                "c"))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (replaces
                                                                         -1)
                                                                        (("3"
                                                                          (expand
                                                                           "nth")
                                                                          (("3"
                                                                            (expand
                                                                             "nth")
                                                                            (("3"
                                                                              (expand
                                                                               "nth")
                                                                              (("3"
                                                                                (typepred
                                                                                 ("a"
                                                                                  "b"
                                                                                  "c"))
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             ("a"
                                                              "b"
                                                              "c"))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bint type-eq-decl nil example_ffnn nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (length def-decl "nat" list_props nil)
    (b1 const-decl "gmat" example_ffnn nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (O const-decl "gmat" example_ffnn nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (step const-decl "real" example_ffnn nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (map const-decl "gmat" ops_unrestricted nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (W1_behavior formula-decl nil example_ffnn nil))
   shostak))
 (Layer1_result_TCC1 0
  (Layer1_result_TCC1-1 nil 3907948765
   ("" (skeep)
    (("" (expand "rectangular?")
      (("" (split)
        (("1" (skeep)
          (("1" (typepred ("n" "m"))
            (("1" (expand "length" (-1 -2))
              (("1" (expand "length" (-1 -2))
                (("1" (expand "length" (-1 -2))
                  (("1" (expand "length" (-1 -2))
                    (("1"
                      (case "(n=0 OR n=1 OR n=2) AND (m=0 OR m=1 OR m=2)")
                      (("1" (flatten) (("1" (grind) nil nil)) nil)
                       ("2" (split)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "n")
            (("2" (expand "length" -1)
              (("2" (expand "length" -1)
                (("2" (expand "length" -1)
                  (("2" (expand "length" -1)
                    (("2" (case "n=0 OR n=1 OR n=2")
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rectangular? const-decl "bool" lazy_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (Layer1_result subtype "(: (: 0 :), (: 0 :), (: 0 :) :)"
    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_result_TCC2 0
  (Layer1_result_TCC2-1 nil 3907948765
   ("" (skeep)
    (("" (hide 1)
      (("" (expand "rectangular?")
        (("" (split)
          (("1" (skeep)
            (("1" (typepred ("n" "m"))
              (("1"
                (case "(n=0 OR n=1 OR n=2) AND (m=0 OR m=1 OR m=2)")
                (("1" (grind) nil nil)
                 ("2" (expand "length" (-1 -2))
                  (("2" (expand "length" (-1 -2))
                    (("2" (expand "length" (-1 -2))
                      (("2" (expand "length" (-1 -2))
                        (("2" (split)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (typepred "n")
              (("2" (expand "length" -1)
                (("2" (expand "length" -1)
                  (("2" (expand "length" -1)
                    (("2" (expand "length" -1)
                      (("2" (case "n=0 OR n=1 OR n=2")
                        (("1" (grind) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil))
   nil
   (Layer1_result subtype "(: (: 1 :), (: 0 :), (: 0 :) :)"
    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_result_TCC3 0
  (Layer1_result_TCC3-1 nil 3907948765
   ("" (skeep)
    (("" (hide-all-but 3)
      (("" (grind)
        (("1" (case "n!1=0 OR n!1=1 OR n!1=2")
          (("1" (grind) nil nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil)
         ("2"
          (case "(n!1=0 OR n!1=1 OR n!1=2) AND (m!1=0 OR m!1=1 OR m!1=2)")
          (("1" (grind) nil nil)
           ("2" (split)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Layer1_result subtype "(: (: 1 :), (: 1 :), (: 0 :) :)"
    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_result_TCC4 0
  (Layer1_result_TCC4-1 nil 3907948765
   ("" (skeep)
    (("" (hide-all-but 4)
      (("" (grind)
        (("1" (case "n!1=0 OR n!1=1 OR n!1=2")
          (("1" (grind) nil nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil)
         ("2"
          (case "(n!1=0 OR n!1=1 OR n!1=2) AND (m!1=0 OR m!1=1 OR m!1=2)")
          (("1" (grind) nil nil)
           ("2" (split)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Layer1_result subtype "(: (: 1 :), (: 1 :), (: 1 :) :)"
    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_result 0
  (Layer1_result-1 nil 3907949328
   ("" (skeep)
    (("" (expand "Layer1")
      (("" (typepred ("a" "b" "c"))
        (("" (split)
          (("1" (replaces -1)
            (("1" (split)
              (("1" (replaces -1)
                (("1" (split)
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (hide-all-but 1)
                        (("1" (expand "abstract")
                          (("1" (expand "abstract_mat")
                            (("1" (lift-if)
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (grind)
                                        (("1"
                                          (decompose-equality)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (case
                                                 "x!1=0 OR x!1=1 OR x!1=2")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (case
                                               "i=0 OR i=1 OR i=2")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (skeep) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (hide-all-but 2)
                        (("2" (lemma "eval_mat_lemma")
                          (("2"
                            (instantiate -1
                             ("step o ((W1 * cast(0, 0, 1)) + b1)"
                              "(: (: 1 :), (: 0 :), (: 0 :) :)"))
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (expand "abstract")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2" (eval-formula 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces -1)
                (("2" (split)
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (hide-all-but 2)
                        (("1"
                          (eval-expr
                           "eval_mat(step o ((W1 * cast(0, 1, 0)) + b1))")
                          (("1" (lemma "eval_mat_lemma")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "abstract")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "every")
                                (("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (hide-all-but 3)
                        (("2" (lemma "eval_mat_lemma")
                          (("2" (expand "abstract")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula 1) nil nil))
                                nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replaces -1)
            (("2" (split)
              (("1" (replaces -1)
                (("1" (split)
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (hide-all-but 2)
                        (("1" (expand "abstract")
                          (("1" (lemma "eval_mat_lemma")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula 1) nil nil))
                                nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (hide-all-but 3)
                        (("2" (expand "abstract")
                          (("2" (lemma "eval_mat_lemma")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula 1) nil nil))
                                nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces -1)
                (("2" (split)
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (hide-all-but 3)
                        (("1" (expand "abstract")
                          (("1" (lemma "eval_mat_lemma")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula 1) nil nil))
                                nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (hide-all-but 4)
                        (("2" (expand "abstract")
                          (("2" (lemma "eval_mat_lemma")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula 1) nil nil))
                                nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (Layer1 const-decl "gmat" example_ffnn nil)
    (abstract const-decl "gmat" lazy_matrix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "gmat" example_ffnn nil)
    (map const-decl "gmat" ops_unrestricted nil)
    (step const-decl "real" example_ffnn nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (b1 const-decl "gmat" example_ffnn nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (gvec_product const-decl "T" ops_derived nil)
    (collapse def-decl "T" ops_unrestricted nil)
    (cdr const-decl "gvec" lazy_matrix_defs nil)
    (car const-decl "T" lazy_matrix_defs nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (restrict const-decl "R" restrict nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (cast const-decl "gmat" example_ffnn nil)
    (nth def-decl "T" list_props nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (length def-decl "nat" list_props nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (eval_mat_lemma formula-decl nil lazy_matrix_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (eval_mat def-decl "list[list[T]]" lazy_matrix_defs nil)
    (eval_rectangular? def-decl "bool" lazy_matrix_props nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil))
   shostak))
 (Layer1_explicit_TCC1 0
  (Layer1_explicit_TCC1-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 0 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC2 0
  (Layer1_explicit_TCC2-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 0 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC3 0
  (Layer1_explicit_TCC3-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 1 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC4 0
  (Layer1_explicit_TCC4-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 0 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC5 0
  (Layer1_explicit_TCC5-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 1 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC6 0
  (Layer1_explicit_TCC6-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 1 :), (: 0 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC7 0
  (Layer1_explicit_TCC7-1 nil 3908023365
   ("" (skeep)
    (("" (lemma "iff_rectangular")
      (("" (inst?) (("" (assert) (("" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (Layer1_explicit subtype "(: (: 1 :), (: 1 :), (: 1 :) :)"
                    "(lazy_matrix_props[real, 0].rectangular?)")))
 (Layer1_explicit_TCC8 0
  (Layer1_explicit_TCC8-1 nil 3908023365
   ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil))
   nil
   (Layer1_explicit disjointness
                    "COND booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 0 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 1 :) :)) ENDCOND"
                    "nil")))
 (Layer1_explicit_TCC9 0
  (Layer1_explicit_TCC9-1 nil 3908023365
   ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil))
   nil
   (Layer1_explicit coverage
                    "COND booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 0 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> lazy_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 1 :) :)) ENDCOND"
                    "nil")))
 (Layer1_explicit_correct 0
  (Layer1_explicit_correct-1 nil 3908023949
   ("" (skeep)
    (("" (typepred ("a" "b" "c"))
      (("" (split)
        (("1" (replaces -1)
          (("1" (split)
            (("1" (replaces -1)
              (("1" (split)
                (("1" (replaces -1)
                  (("1" (expand "Layer1_explicit")
                    (("1" (expand "abstract")
                      (("1" (lemma "eval_mat_lemma")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "Layer1_explicit")
                    (("2" (expand "abstract")
                      (("2" (lemma "eval_mat_lemma")
                        (("2" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (expand "Layer1_explicit")
                    (("1" (expand "abstract")
                      (("1" (lemma "eval_mat_lemma")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "Layer1_explicit")
                    (("2" (expand "abstract")
                      (("2" (lemma "eval_mat_lemma")
                        (("2" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -1)
          (("2" (split)
            (("1" (replaces -1)
              (("1" (split)
                (("1" (replaces -1)
                  (("1" (expand "Layer1_explicit")
                    (("1" (expand "abstract")
                      (("1" (lemma "eval_mat_lemma")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "Layer1_explicit")
                    (("2" (expand "abstract")
                      (("2" (lemma "eval_mat_lemma")
                        (("2" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (expand "Layer1_explicit")
                    (("1" (expand "abstract")
                      (("1" (lemma "eval_mat_lemma")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "Layer1_explicit")
                    (("2" (expand "abstract")
                      (("2" (lemma "eval_mat_lemma")
                        (("2" (inst?)
                          (("1" (assert)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bint type-eq-decl nil example_ffnn nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (abstract const-decl "gmat" lazy_matrix_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval_rectangular? def-decl "bool" lazy_matrix_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (Layer1 const-decl "gmat" example_ffnn nil)
    (cast const-decl "gmat" example_ffnn nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (eval_mat_lemma formula-decl nil lazy_matrix_props nil)
    (Layer1_explicit const-decl "gmat" example_ffnn nil))
   shostak))
 (W2_behavior_TCC1 0
  (W2_behavior_TCC1-1 nil 3908028120 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (W2_behavior subtype "(: (: 0 :) :)"
    "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (W2_behavior_TCC2 0
  (W2_behavior_TCC2-1 nil 3908028120 ("" (subtype-tcc) nil nil)
   ((bint type-eq-decl nil example_ffnn nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (W2 const-decl "gmat" example_ffnn nil)
    (cast const-decl "gmat" example_ffnn nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (restrict const-decl "R" restrict nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (gvec_product const-decl "T" ops_derived nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (b1 const-decl "gmat" example_ffnn nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (map const-decl "gmat" ops_unrestricted nil)
    (O const-decl "gmat" example_ffnn nil)
    (Layer1 const-decl "gmat" example_ffnn nil)
    (minimal_default_matrix const-decl "gmat" lazy_matrix_defs nil)
    (M_default const-decl "gmat" lazy_matrix_defs nil)
    (even? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (W2_behavior subtype "(: (: 1 :) :)"
    "{x: list_adt[list[real]].list | FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j))}")))
 (W2_behavior 0
  (W2_behavior-1 nil 3908028157
   ("" (skeep)
    (("" (typepred ("a" "b" "c"))
      (("" (split)
        (("1" (replaces -1)
          (("1" (split)
            (("1" (replaces -1)
              (("1" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (rewrite "Layer1_explicit_correct")
                          (("2" (expand "Layer1_explicit")
                            (("2" (rewrite "eval_mat_lemma")
                              (("1" (eval-formula 1) nil nil)
                               ("2" (eval-formula 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten)
                      (("3" (rewrite "Layer1_explicit_correct")
                        (("3" (expand "Layer1_explicit")
                          (("3" (grind)
                            (("3" (decompose-equality)
                              (("3"
                                (instantiate -1 "(0,0)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (expand "odd?") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (grind)
                        (("1" (decompose-equality)
                          (("1" (instantiate -1 "(0,0)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "even?") (("2" (propax) nil nil))
                      nil)
                     ("3" (flatten)
                      (("3" (rewrite "Layer1_explicit_correct")
                        (("3" (expand "Layer1_explicit")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (rewrite "Layer1_explicit_correct")
                        (("4" (rewrite "eval_mat_lemma")
                          (("1" (eval-formula 1) nil nil)
                           ("2" (eval-formula 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (expand "even?")
                      (("1" (lemma "matrix_evaluation")
                        (("1" (expand "eval")
                          (("1" (expand "abstract")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula -1) nil nil))
                                nil)
                               ("2" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "even?") (("2" (propax) nil nil))
                      nil)
                     ("3" (assert) nil nil)
                     ("4" (assert)
                      (("4" (rewrite "Layer1_explicit_correct")
                        (("4" (rewrite "eval_mat_lemma")
                          (("1" (eval-formula) nil nil)
                           ("2" (eval-formula) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (rewrite "eval_mat_lemma")
                        (("1" (eval-formula) nil nil)
                         ("2" (eval-formula) nil nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "odd?")
                        (("3" (lemma "matrix_evaluation")
                          (("3" (expand "eval")
                            (("3" (expand "abstract")
                              (("3"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (eval-formula -1) nil nil))
                                  nil)
                                 ("2" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (expand "odd?") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -1)
          (("2" (split)
            (("1" (replaces -1)
              (("1" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (assert)
                      (("1" (expand "even?")
                        (("1" (lemma "matrix_evaluation")
                          (("1" (expand "eval")
                            (("1" (expand "abstract")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (eval-formula -1) nil nil))
                                  nil)
                                 ("2" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "even?") (("2" (propax) nil nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil)
                     ("4" (assert)
                      (("4" (rewrite "eval_mat_lemma")
                        (("1" (eval-formula) nil nil)
                         ("2" (eval-formula) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (rewrite "eval_mat_lemma")
                        (("1" (eval-formula) nil nil)
                         ("2" (eval-formula) nil nil))
                        nil))
                      nil)
                     ("3" (expand "odd?")
                      (("3" (lemma "matrix_evaluation")
                        (("3" (expand "eval")
                          (("3" (expand "abstract")
                            (("3" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula -1) nil nil))
                                nil)
                               ("2" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "odd?") (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (split)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (rewrite "eval_mat_lemma")
                        (("1" (eval-formula) nil nil)
                         ("2" (eval-formula) nil nil))
                        nil))
                      nil)
                     ("3" (expand "odd?")
                      (("3" (lemma "matrix_evaluation")
                        (("3" (expand "eval")
                          (("3" (expand "abstract")
                            (("3" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula -1) nil nil))
                                nil)
                               ("2" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "odd?") (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (split)
                    (("1" (expand "even?")
                      (("1" (lemma "matrix_evaluation")
                        (("1" (expand "eval")
                          (("1" (expand "abstract")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (eval-formula -1) nil nil))
                                nil)
                               ("2" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "even?") (("2" (propax) nil nil))
                      nil)
                     ("3" (assert) nil nil)
                     ("4" (assert)
                      (("4" (rewrite "eval_mat_lemma")
                        (("1" (eval-formula) nil nil)
                         ("2" (eval-formula) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Layer1_explicit const-decl "gmat" example_ffnn nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstract const-decl "gmat" lazy_matrix_props nil)
    (rectangular? const-decl "bool" lazy_matrix_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (W2 const-decl "gmat" example_ffnn nil)
    (* const-decl "gmat" example_ffnn nil)
    (gmat type-eq-decl nil lazy_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_mat_lemma formula-decl nil lazy_matrix_props nil)
    (eval_rectangular? def-decl "bool" lazy_matrix_props nil)
    (iff_rectangular formula-decl nil lazy_matrix_props nil)
    (Layer1_explicit_correct formula-decl nil example_ffnn nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (abstract_mat const-decl "gmat" lazy_matrix_defs nil)
    (ijth const-decl "T" lazy_matrix_defs nil)
    (width const-decl "nat" lazy_matrix_defs nil)
    (row const-decl "gvec" lazy_matrix_defs nil)
    (height const-decl "nat" lazy_matrix_defs nil)
    (column const-decl "gvec" lazy_matrix_defs nil)
    (nth const-decl "T" lazy_matrix_defs nil)
    (restrict const-decl "R" restrict nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (car const-decl "T" lazy_matrix_defs nil)
    (cdr const-decl "gvec" lazy_matrix_defs nil)
    (collapse def-decl "T" ops_unrestricted nil)
    (gvec_product const-decl "T" ops_derived nil)
    (gmat_product const-decl "gmat" ops_derived nil)
    (odd? const-decl "bool" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (cast const-decl "gmat" example_ffnn nil)
    (W1 const-decl "gmat" example_ffnn nil)
    (b1 const-decl "gmat" example_ffnn nil)
    (pointwise const-decl "gmat" ops_pointwise nil)
    (+ const-decl "gmat" example_ffnn nil)
    (step const-decl "real" example_ffnn nil)
    (map const-decl "gmat" ops_unrestricted nil)
    (O const-decl "gmat" example_ffnn nil)
    (Layer1 const-decl "gmat" example_ffnn nil)
    (even? const-decl "bool" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (matrix_evaluation formula-decl nil lazy_matrix_props nil)
    (eval const-decl "list[list[T]]" lazy_matrix_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bint type-eq-decl nil example_ffnn nil))
   shostak)))

