(generic_matrix_props
 (length_v_default 0
  (length_v_default-1 nil 3906458424
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "v_default")
          (("1" (expand "minimal_default_vector")
            (("1" (decompose-equality)
              (("1" (typepred "length(u)")
                (("1" (decompose-equality) (("1" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((v_default const-decl "gvec" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minimal_default_vector const-decl "gvec" generic_matrix_defs nil))
   shostak))
 (dimension_M_default 0
  (dimension_M_default-1 nil 3906458508
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "M_default")
          (("1" (expand "minimal_default_matrix")
            (("1" (decompose-equality 1)
              (("1" (decompose-equality 1)
                (("1" (typepred "dimension(M)")
                  (("1" (instantiate -3 "x!1")
                    (("1" (assert)
                      (("1" (instantiate -3 "x!2")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((M_default const-decl "gmat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil))
   shostak))
 (dimension_M_default_too 0
  (dimension_M_default_too-1 nil 3906458889
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "M_default")
          (("1" (expand "minimal_default_matrix")
            (("1" (decompose-equality)
              (("1" (decompose-equality)
                (("1" (expand "height")
                  (("1" (typepred "dimension(M)")
                    (("1" (instantiate -3 "x!1")
                      (("1" (assert)
                        (("1" (instantiate -3 "x!2")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "height")
                (("2" (typepred "dimension(M)")
                  (("2" (hide-all-but (-1 -5 1))
                    (("2" (assert) (("2" (decompose-equality) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil)
       ("3" (flatten)
        (("3" (expand "M_default")
          (("3" (expand "minimal_default_matrix")
            (("3" (decompose-equality)
              (("1" (decompose-equality)
                (("1" (expand "width")
                  (("1" (typepred "dimension(M)")
                    (("1" (instantiate -4 "x!2")
                      (("1" (assert)
                        (("1" (instantiate -4 "x!1")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "width")
                (("2" (typepred "dimension(M)")
                  (("2" (hide-all-but (-2 -5 1))
                    (("2" (assert) (("2" (decompose-equality) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (grind) nil nil))
      nil))
    nil)
   ((M_default const-decl "gmat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil))
   shostak))
 (matrix_height_width 0
  (matrix_height_width-1 nil 3906540882
   ("" (skeep)
    (("" (expand "height")
      (("" (expand "width")
        (("" (typepred "dimension(M)")
          (("" (assert)
            (("" (split 1)
              (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (width const-decl "nat" generic_matrix_defs nil))
   shostak))
 (row_length 0
  (row_length-1 nil 3906480609
   ("" (skeep) (("" (expand "row") (("" (propax) nil nil)) nil)) nil)
   ((row const-decl "gvec" generic_matrix_defs nil)) shostak))
 (column_length 0
  (column_length-1 nil 3906480625
   ("" (skeep) (("" (expand "column") (("" (propax) nil nil)) nil))
    nil)
   ((column const-decl "gvec" generic_matrix_defs nil)) shostak))
 (same_length_TCC1 0
  (same_length_TCC1-1 nil 3906461271
   ("" (skeep)
    (("" (typepred "length(u)")
      (("" (skeep)
        (("" (decompose-equality)
          (("" (replaces -1)
            (("" (replaces -1)
              (("" (instantiate -1 "k") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil))
   nil (same_length subtype "generic_matrix_props.v" "gvec[T, default]")))
 (same_length 0
  (same_length-1 nil 3906468633
   ("" (skeep)
    (("" (assert) (("" (expand "same?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (same? const-decl "bool" generic_matrix_defs nil))
   shostak))
 (same_dimension_0_TCC1 0
  (same_dimension_0_TCC1-1 nil 3906461271 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (M_default const-decl "gmat" generic_matrix_defs nil))
   nil
   (same_dimension_0 subtype "generic_matrix_props.N"
    "gmat[T, default]")))
 (same_dimension_0 0
  (same_dimension_0-1 nil 3906468662
   ("" (skeep)
    (("" (assert) (("" (expand "same?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((same? const-decl "bool" generic_matrix_defs nil)) shostak))
 (same_dimension_TCC1 0
  (same_dimension_TCC1-1 nil 3906461271
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil)
         ("8" (decompose-equality -1)
          (("8" (expand "height")
            (("8" (expand "width")
              (("8" (typepred "dimension(M)")
                (("8" (hide (-3 -4))
                  (("8" (decompose-equality -3)
                    (("8" (typepred "dimension(M)`1")
                      (("8" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (flatten)
          (("9" (decompose-equality -2)
            (("9" (decompose-equality)
              (("9" (expand "height")
                (("9" (expand "width")
                  (("9" (typepred "n")
                    (("9" (decompose-equality 2)
                      (("9" (typepred "m")
                        (("9" (typepred "dimension(M)")
                          (("9" (hide (-3 -4)) (("9" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (flatten)
          (("10" (decompose-equality -2)
            (("10" (decompose-equality)
              (("10" (expand "width")
                (("10" (typepred "m")
                  (("10" (typepred "dimension(M)")
                    (("10" (hide (-3 -4))
                      (("10" (decompose-equality 2) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("11" (skeep)
          (("11" (skeep)
            (("11" (decompose-equality -2)
              (("11" (replaces -2)
                (("11" (replaces -1)
                  (("11" (assert)
                    (("11" (expand "height")
                      (("11" (typepred "dimension(M)")
                        (("11" (instantiate -3 "k")
                          (("11" (assert)
                            (("11" (instantiate -3 "j1")
                              (("11" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("12" (skeep)
          (("12" (skeep)
            (("12" (decompose-equality -2)
              (("12" (replaces -1)
                (("12" (replaces -1)
                  (("12" (assert)
                    (("12" (expand "width")
                      (("12" (typepred "dimension(M)")
                        (("12" (instantiate -4 "k")
                          (("12" (assert)
                            (("12" (instantiate -4 "i1")
                              (("12" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (default formal-const-decl "T" generic_matrix_props nil))
   nil
   (same_dimension subtype "generic_matrix_props.N" "gmat[T, default]")))
 (same_dimension 0
  (same_dimension-1 nil 3906468675
   ("" (skeep)
    (("" (assert) (("" (expand "same?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (same? const-decl "bool" generic_matrix_defs nil))
   shostak))
 (cdr_length 0
  (cdr_length-1 nil 3906470817
   ("" (skeep) (("" (expand "cdr") (("" (propax) nil nil)) nil)) nil)
   ((cdr const-decl "gvec" generic_matrix_defs nil)) shostak))
 (eval_length 0
  (eval_length-1 nil 3906470553
   (""
    (case "FORALL (n:nat): FORALL (v:gvec): length(v)=n IMPLIES length(v)=length(eval_vec(v))")
    (("1" (skeep)
      (("1" (instantiate -1 "length(v)")
        (("1" (instantiate -1 "v") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "eval_vec")
            (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "eval_vec" 1)
              (("2" (assert)
                (("2" (expand "length" 1)
                  (("2" (instantiate -1 "cdr(v)")
                    (("2" (lemma "cdr_length")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (cdr_length formula-decl nil generic_matrix_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil))
   shostak))
 (row_cdr_height_TCC1 0
  (row_cdr_height_TCC1-1 nil 3906475248
   ("" (skeep)
    (("" (typepred "dimension(M)")
      (("" (assert)
        (("" (expand "height")
          (("" (expand "width") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (row_cdr_height subtype "generic_matrix_props.M"
    "{N | booleans.AND(reals.>(generic_matrix_defs[generic_matrix_props.T, generic_matrix_props.default].height(N), 0), reals.>(generic_matrix_defs[generic_matrix_props.T, generic_matrix_props.default].width(N), 0))}")))
 (row_cdr_height 0
  (row_cdr_height-1 nil 3906475516
   ("" (skeep)
    (("" (expand "height")
      (("" (expand "row_cdr")
        (("" (lift-if)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((height const-decl "nat" generic_matrix_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (M_default const-decl "gmat" generic_matrix_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (row_cdr const-decl "gmat" generic_matrix_defs nil))
   shostak))
 (eval_height 0
  (eval_height-1 nil 3906477461
   (""
    (case "FORALL (n:nat): FORALL (M:gmat): height(M)=n IMPLIES height(M)=length(eval_mat(M))")
    (("1" (skeep)
      (("1" (instantiate -1 "height(M)")
        (("1" (instantiate -1 "M") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (instantiate -1 "row_cdr(M)")
              (("1" (lemma "row_cdr_height")
                (("1" (instantiate -1 "M")
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (expand "eval_mat" 1 2)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "width")
                                  (("1"
                                    (expand "height")
                                    (("1"
                                      (typepred "dimension(M)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "length" 2 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "height")
                  (("2" (expand "width")
                    (("2" (assert)
                      (("2" (typepred "dimension(M)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (row_cdr_height formula-decl nil generic_matrix_props nil)
    (row_cdr const-decl "gmat" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil))
   shostak))
 (eval_width_rows 0
  (eval_width_rows-1 nil 3906478511 ("" (grind) nil nil)
   ((default formal-const-decl "T" generic_matrix_props nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (row const-decl "gvec" generic_matrix_defs nil))
   shostak))
 (eval_row_TCC1 0
  (eval_row_TCC1-1 nil 3906478666
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "eval_height")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_height formula-decl nil generic_matrix_props nil))
   nil
   (eval_row subtype "generic_matrix_props.n"
    "below[length[list[T]](eval_mat[T, default](M))]")))
 (eval_row 0
  (eval_row-1 nil 3906478903
   (""
    (case "FORALL (m:nat): FORALL (M: gmat[T, default], n: below(height(M))): height(M)=m IMPLIES
        (height(M) > 0 IMPLIES eval_vec(row(M, n)) = nth(eval_mat(M), n))")
    (("1" (skeep)
      (("1" (instantiate -1 "height(M)")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (typepred "n")
              (("2" (case "n=0")
                (("1" (replaces -1)
                  (("1" (expand "eval_mat" 1)
                    (("1" (lemma "matrix_height_width")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "row_car")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (instantiate -2 ("row_cdr(M)" "n-1"))
                  (("1" (lemma "row_cdr_height")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "eval_mat" 2)
                          (("1" (lemma "matrix_height_width")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 3)
                                  (("1"
                                    (replace -3 3 :dir rl)
                                    (("1"
                                      (case
                                       "row(M,n) = row(row_cdr(M),n-1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "row_cdr" 1)
                                        (("2"
                                          (expand "row" 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (decompose-equality 1)
                                              (("1"
                                                (expand "ijth" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (split 1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (typepred
                                                       "dimension(M)")
                                                      (("1"
                                                        (expand
                                                         "height"
                                                         -5)
                                                        (("1"
                                                          (instantiate
                                                           -3
                                                           "k+1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (instantiate
                                                               -3
                                                               "j1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "ijth"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "width" -1)
                                                    (("2"
                                                      (typepred
                                                       "dimension(M)")
                                                      (("2"
                                                        (instantiate
                                                         -4
                                                         "k")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (instantiate
                                                               -4
                                                               "i1+1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "ijth"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "width" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lemma "row_cdr_height")
                      (("2" (instantiate -1 "M")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (lemma "matrix_height_width")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "n")
              (("3" (lemma "eval_height")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "n")
          (("3" (lemma "eval_height")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_height formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (row_cdr_height formula-decl nil generic_matrix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (row_cdr const-decl "gmat" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (n skolem-const-decl "below(height(M))" generic_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (matrix_height_width formula-decl nil generic_matrix_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (row_car const-decl "gvec" generic_matrix_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (row const-decl "gvec" generic_matrix_defs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil))
   shostak))
 (eval_width_TCC1 0
  (eval_width_TCC1-1 nil 3906540881
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "eval_height")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_height formula-decl nil generic_matrix_props nil))
   nil
   (eval_width subtype "generic_matrix_props.n"
    "below[length[list[T]](eval_mat[T, default](M))]")))
 (eval_width 0
  (eval_width-1 nil 3906478409
   ("" (skeep)
    (("" (lemma "eval_width_rows")
      (("" (inst?)
        (("" (instantiate -1 "n")
          (("" (replaces -1)
            (("" (lemma "eval_row")
              (("" (inst?)
                (("" (split)
                  (("1" (replace -1 1 :dir rl)
                    (("1" (lemma "eval_length") (("1" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (case "height(M)=0")
                    (("1" (lemma "matrix_height_width")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_width_rows formula-decl nil generic_matrix_props nil)
    (eval_row formula-decl nil generic_matrix_props nil)
    (eval_length formula-decl nil generic_matrix_props nil)
    (row const-decl "gvec" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_height_width formula-decl nil generic_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (abstract_eval_vector_helper_TCC1 0
  (abstract_eval_vector_helper_TCC1-1 nil 3906556133
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "x")
        (("" (lemma "eval_length")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((eval_length formula-decl nil generic_matrix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (abstract_eval_vector_helper subtype "generic_matrix_props.x"
    "below[length[T](eval_vec[T, default](v))]")))
 (abstract_eval_vector_helper 0
  (abstract_eval_vector_helper-1 nil 3906558543
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (case "x=0")
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)
             ("2" (expand "nth" 2)
              (("2" (assert)
                (("2" (expand "eval_vec" 2)
                  (("2" (case "length(cdr(v))=0")
                    (("1" (lemma "cdr_length")
                      (("1" (instantiate -1 "v")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (instantiate -1 "cdr(v)")
                      (("2" (assert)
                        (("2" (lemma "cdr_length")
                          (("2" (instantiate -1 "v")
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "cdr" 3)
                                    (("2"
                                      (expand "nth")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (typepred "x")
            (("3" (lemma "eval_length")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_length formula-decl nil generic_matrix_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_length formula-decl nil generic_matrix_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (car const-decl "T" generic_matrix_defs nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil))
   shostak))
 (abstract_eval_vector 0
  (abstract_eval_vector-1 nil 3906547631
   ("" (grind)
    (("" (decompose-equality)
      (("1" (grind)
        (("1" (lemma "eval_length")
          (("1" (inst?) (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (decompose-equality)
        (("2" (lift-if)
          (("2" (split)
            (("1" (flatten)
              (("1" (case "length(v!1)=0")
                (("1" (grind) nil nil)
                 ("2" (lemma "abstract_eval_vector_helper")
                  (("2" (instantiate -1 (_ "v!1"))
                    (("2" (instantiate -1 "length(v!1)")
                      (("2" (split)
                        (("1" (instantiate -1 "x!1")
                          (("1" (propax) nil nil)
                           ("2" (lemma "eval_length")
                            (("2" (instantiate -1 "v!1")
                              (("2" (replaces -1) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "eval_length")
                (("2" (inst?)
                  (("2" (typepred "length(v!1)")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_length formula-decl nil generic_matrix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abstract_eval_vector_helper formula-decl nil generic_matrix_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x!1 skolem-const-decl "nat" generic_matrix_props nil)
    (v!1 skolem-const-decl "gvec[T, default]" generic_matrix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abstract_vec const-decl "gvec" generic_matrix_defs nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (default formal-const-decl "T" generic_matrix_props nil))
   shostak))
 (eval_abstract_vector 0
  (eval_abstract_vector-2 nil 3906565077
   (""
    (case "FORALL (n:nat): FORALL (l:list[T]): length(l)=n IMPLIES eval_vec(abstract_vec(l))=l")
    (("1" (skeep)
      (("1" (instantiate -1 "length(l)") (("1" (inst?) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "eval_vec" 1)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "abstract_vec" -1)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (instantiate -1 "cdr(l)")
                        (("1" (copy -2)
                          (("1" (expand "length" -1)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "cdr(abstract_vec(l)) = abstract_vec(cdr(l))")
                                        (("1"
                                          (replace -1 3)
                                          (("1"
                                            (replace -3 3)
                                            (("1"
                                              (expand "abstract_vec" 3)
                                              (("1"
                                                (expand "car" 3)
                                                (("1"
                                                  (expand "nth" 3)
                                                  (("1"
                                                    (decompose-equality
                                                     3)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "abstract_vec" 1)
                                          (("2"
                                            (expand "cdr" 1)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l skolem-const-decl "list[T]" generic_matrix_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (car const-decl "T" generic_matrix_defs nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (abstract_vec const-decl "gvec" generic_matrix_defs nil))
   nil)
  (eval_abstract_vector-1 nil 3906559472
   (""
    (case "FORALL (n:nat): FORALL (l:list[T]): length(l)=n IMPLIES (length(l)>0 IMPLIES eval_vec(abstract_vec(l)) = l)")
    (("1" (skeep)
      (("1" (instantiate -1 "length(l)")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "eval_vec" 1)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "abstract_vec" -1)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (instantiate -1 "cdr(l)")
                        (("1" (expand "length" -2)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split -2)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1" (postpone) nil nil)
                                       ("2"
                                        (case "length(cdr(l))=0")
                                        (("1"
                                          (case "cdr(l)=(::)")
                                          (("1" (postpone) nil nil)
                                           ("2" (postpone) nil nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eval_vec_equality 0
  (eval_vec_equality-1 nil 3906565960
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1"
          (case "abstract_vec(eval_vec(v)) = abstract_vec(eval_vec(u))")
          (("1" (lemma "abstract_eval_vector")
            (("1" (inst-cp -1 "v")
              (("1" (instantiate -1 "u") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (abstract_vec const-decl "gvec" generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract_eval_vector formula-decl nil generic_matrix_props nil))
   shostak))
 (nth_eval_TCC1 0
  (nth_eval_TCC1-1 nil 3906721366
   ("" (skeep)
    (("" (typepred "i")
      (("" (lemma "eval_length")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_length formula-decl nil generic_matrix_props nil))
   nil
   (nth_eval subtype "generic_matrix_props.i"
    "below[length[T](eval_vec[T, default](v))]")))
 (nth_eval 0
  (nth_eval-1 nil 3906721367
   (""
    (case "FORALL (n:nat): FORALL (v:gvec,i:below(length(v))): length(v)=n IMPLIES nth(eval_vec(v),i) = nth(v,i)")
    (("1" (skeep)
      (("1" (instantiate -1 "length(v)") (("1" (inst?) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (replaces -1)
                (("1" (expand "nth" 1)
                  (("1" (expand "eval_vec" 1)
                    (("1" (expand "car" 1)
                      (("1" (expand "nth") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "eval_vec" 2)
                (("2" (expand "nth" 2 1)
                  (("2" (assert)
                    (("2" (instantiate -1 ("cdr(v)" "i-1"))
                      (("1" (lemma "cdr_length")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replaces -2)
                              (("1"
                                (expand "cdr" 2)
                                (("1"
                                  (expand "nth")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "i")
                        (("2" (lemma "cdr_length")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "i")
              (("3" (lemma "eval_length")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "i")
          (("3" (lemma "eval_length")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_length formula-decl nil generic_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_length formula-decl nil generic_matrix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (v skolem-const-decl "gvec[T, default]" generic_matrix_props nil)
    (i skolem-const-decl "below(length(v))" generic_matrix_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (car const-decl "T" generic_matrix_defs nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (nth const-decl "T" generic_matrix_defs nil))
   shostak))
 (nth_eval_row 0
  (nth_eval_row-1 nil 3906722880
   (""
    (case "FORALL (n:nat): FORALL (M:gmat,i:below(height(M))): height(M) = n IMPLIES nth(eval_mat(M),i) = eval_vec(row(M,i))")
    (("1" (skeep)
      (("1" (instantiate -1 "height(M)") (("1" (inst?) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (replaces -1)
                (("1" (expand "nth" 1)
                  (("1" (expand "eval_mat" 1)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (expand "width")
                            (("1" (expand "height")
                              (("1"
                                (typepred "dimension(M)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "row_car")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "eval_mat" 2)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "width")
                        (("1" (expand "height")
                          (("1" (typepred "dimension(M)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst?)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (case
                                     "row(row_cdr(M),i-1) = row(M,i)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "row_cdr" 1)
                                      (("2"
                                        (expand "row" 1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (expand "ijth")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand "height")
                                                    (("1"
                                                      (typepred
                                                       "dimension(M)")
                                                      (("1"
                                                        (instantiate
                                                         -3
                                                         "k+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (instantiate
                                                             -2
                                                             "j1")
                                                            (("1"
                                                              (expand
                                                               "ijth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "width")
                                                    (("2"
                                                      (typepred
                                                       "dimension(M)")
                                                      (("2"
                                                        (instantiate
                                                         -4
                                                         "k")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (instantiate
                                                             -3
                                                             "i1+1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "ijth")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "width")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "row_cdr")
                                  (("2"
                                    (expand "height")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "row_cdr" 1)
                              (("2"
                                (expand "height")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "i")
              (("3" (lemma "eval_height")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "i")
          (("3" (lemma "eval_height")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_height formula-decl nil generic_matrix_props nil)
    (row_car const-decl "gvec" generic_matrix_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (row_cdr const-decl "gmat" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (i skolem-const-decl "below(height(M))" generic_matrix_props nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (row const-decl "gvec" generic_matrix_defs nil))
   shostak))
 (nth_nth_eval_TCC1 0
  (nth_nth_eval_TCC1-1 nil 3906652371
   ("" (skeep)
    (("" (lemma "eval_width")
      (("" (typepred "j")
        (("" (instantiate -2 ("M" "i")) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((eval_width formula-decl nil generic_matrix_props nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (nth_nth_eval subtype "generic_matrix_props.j"
    "below[length[T](nth[list[T]](eval_mat[T, default](M), i))]")))
 (nth_nth_eval 0
  (nth_nth_eval-1 nil 3906654033
   (""
    (case "FORALL (n:nat):  FORALL (M: gmat[T, default], i: below(height(M))):
        FORALL (j: below(width(M))): width(M) = n IMPLIES
          nth(nth(eval_mat(M), i), j) = ijth(M, i, j)")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (instantiate -1 "width(M)") (("1" (inst?) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (skeep)
            (("1" (typepred "j") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (skeep)
              (("2" (lemma "nth_eval_row")
                (("2" (instantiate -1 ("M" "i") 'copy)
                  (("2" (case "j=0")
                    (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                     ("2" (replaces -2)
                      (("2" (expand "nth" 2 1)
                        (("2" (assert)
                          (("2" (expand "eval_vec" 2)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "row" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (lemma "nth_eval")
                                      (("2"
                                        (instantiate
                                         -1
                                         ("cdr(row(M,i))" "j-1"))
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "row" 2)
                                            (("1"
                                              (expand "cdr" 2)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "row" 1)
                                          (("2"
                                            (expand "cdr" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "j")
              (("3" (lemma "eval_width")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "i")
              (("4" (lemma "eval_height")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "j")
          (("3" (lemma "eval_width")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (typepred "i")
          (("4" (lemma "eval_height")
            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_height formula-decl nil generic_matrix_props nil)
    (eval_width formula-decl nil generic_matrix_props nil)
    (nth_eval formula-decl nil generic_matrix_props nil)
    (i skolem-const-decl "below(height(M))" generic_matrix_props nil)
    (j skolem-const-decl "below(width(M))" generic_matrix_props nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (car const-decl "T" generic_matrix_defs nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (row const-decl "gvec" generic_matrix_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth_eval_row formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil))
   shostak))
 (abstract_eval_matrix_TCC1 0
  (abstract_eval_matrix_TCC1-1 nil 3906626031
   ("" (skeep)
    (("" (lemma "eval_width")
      (("" (instantiate -1 ("M" "i") 'copy)
        (("1" (instantiate -1 ("M" "j"))
          (("1" (assert) nil nil)
           ("2" (typepred "j")
            (("2" (lemma "eval_height")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (typepred "i")
          (("2" (lemma "eval_height")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_width formula-decl nil generic_matrix_props nil)
    (i skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
       nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (< const-decl "bool" reals nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_height formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
     nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (abstract_eval_matrix subtype
    "generic_matrix_defs[generic_matrix_props.T, generic_matrix_props.default].eval_mat(generic_matrix_props.M)"
    "{x: list_adt[list_adt[generic_matrix_props.T].list].list | FORALL (i, j: naturalnumbers.below(list_props[list_adt[generic_matrix_props.T].list].length(x))): list_props[generic_matrix_props.T].length(list_props[list_adt[generic_matrix_props.T].list].nth(x, i)) = list_props[generic_matrix_props.T].length(list_props[list_adt[generic_matrix_props.T].list].nth(x, j))}")))
 (abstract_eval_matrix 0
  (abstract_eval_matrix-1 nil 3906642843
   ("" (skeep)
    (("" (case "height(M)=0")
      (("1" (expand "eval_mat")
        (("1" (assert)
          (("1" (expand "abstract_mat")
            (("1" (expand "length" 1)
              (("1" (typepred "dimension(M)")
                (("1" (expand "height")
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1" (expand "M_default")
                        (("1" (expand "minimal_default_matrix")
                          (("1" (decompose-equality 1)
                            (("1" (decompose-equality)
                              (("1"
                                (instantiate -2 "x!1")
                                (("1"
                                  (instantiate -2 "x!2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "NOT width(M)=0")
        (("1" (expand "abstract_mat")
          (("1" (lemma "eval_height")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "eval_width")
                  (("1" (instantiate -1 ("M" "0"))
                    (("1" (expand "nth" -1)
                      (("1" (assert)
                        (("1" (decompose-equality 3)
                          (("1" (expand "width")
                            (("1" (expand "height")
                              (("1" (decompose-equality 1) nil nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "nth_nth_eval")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (expand "ijth" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (typepred "dimension(M)")
                                      (("1"
                                        (instantiate -3 "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "height")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (instantiate -2 "x!2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "dimension(M)")
                                      (("2"
                                        (instantiate -4 "x!2")
                                        (("2"
                                          (expand "width")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (instantiate -3 "x!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (lemma "eval_width")
                                (("2"
                                  (instantiate -1 ("M" "i") 'copy)
                                  (("1"
                                    (instantiate -1 ("M" "0"))
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (lemma "eval_width")
                              (("3"
                                (instantiate -1 ("M" "i") 'copy)
                                (("1"
                                  (instantiate -1 ("M" "0"))
                                  (("1"
                                    (expand "nth" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "dimension(M)")
          (("2" (expand "width")
            (("2" (expand "height") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length def-decl "nat" list_props nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (M_default const-decl "gmat" generic_matrix_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (eval_width formula-decl nil generic_matrix_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil) (list type-decl nil list_adt nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (i skolem-const-decl "nat" generic_matrix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "nat" generic_matrix_props nil)
    (x!2 skolem-const-decl "nat" generic_matrix_props nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (nth_nth_eval formula-decl nil generic_matrix_props nil)
    (i skolem-const-decl "nat" generic_matrix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_height formula-decl nil generic_matrix_props nil)
    (width const-decl "nat" generic_matrix_defs nil))
   shostak))
 (eval_rectangular?_TCC1 0
  (eval_rectangular?_TCC1-1 nil 3908015262 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (eval_rectangular? subtype "0" "below[length[list[T]](l)]")))
 (eval_rectangular?_TCC2 0
  (eval_rectangular?_TCC2-1 nil 3908017747 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (eval_rectangular? subtype "0" "below[length[list[T]](l)]")))
 (eval_rectangular?_TCC3 0
  (eval_rectangular?_TCC2-1 nil 3908015262 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (eval_rectangular? subtype "1" "below[length[list[T]](l)]")))
 (eval_rectangular?_TCC4 0
  (eval_rectangular?_TCC3-1 nil 3908015262
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (eval_rectangular? subtype "generic_matrix_props.l"
    "(list_adt[list_adt[generic_matrix_props.T].list].cons?)")))
 (eval_rectangular?_TCC5 0
  (eval_rectangular?_TCC4-1 nil 3908015262
   ("" (skeep)
    (("" (expand "length" 3 2)
      (("" (assert)
        (("" (lift-if)
          (("" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (eval_rectangular? termination
    "generic_matrix_props.eval_rectangular?(list_adt[list_adt[generic_matrix_props.T].list].cdr(generic_matrix_props.l))"
    "nil")))
 (eval_rectangular?_TCC6 0
  (eval_rectangular?_TCC6-1 nil 3908017747
   ("" (cond-disjoint-tcc) nil nil) nil nil
   (eval_rectangular? disjointness
    "COND list_props[list_adt[generic_matrix_props.T].list].length(generic_matrix_props.l) = 0 -> booleans.TRUE, list_props[list_adt[generic_matrix_props.T].list].length(generic_matrix_props.l) = 1 -> IF list_props[generic_matrix_props.T].length(list_props[list_adt[generic_matrix_props.T].list].nth(generic_matrix_props.l, 0)) = 0 THEN booleans.FALSE ELSE booleans.TRUE ENDIF, ELSE -> IF list_props[generic_matrix_props.T].length(list_props[list_adt[generic_matrix_props.T].list].nth(generic_matrix_props.l, 0)) = list_props[generic_matrix_props.T].length(list_props[list_adt[generic_matrix_props.T].list].nth(generic_matrix_props.l, 1)) THEN generic_matrix_props.eval_rectangular?(list_adt[list_adt[generic_matrix_props.T].list].cdr(generic_matrix_props.l)) ELSE booleans.FALSE ENDIF ENDCOND"
    "nil")))
 (iff_rectangular 0
  (iff_rectangular-1 nil 3908015341
   ("" (induct "l")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("head" "tail"))
      (("3" (flatten)
        (("3" (split 1)
          (("1" (flatten)
            (("1" (expand "eval_rectangular?" 1)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "length" -1)
                        (("1" (split)
                          (("1" (expand "rectangular?" -3)
                            (("1" (flatten)
                              (("1"
                                (instantiate -4 "0")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (hide -3)
                              (("1"
                                (expand "rectangular?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred ("n" "m"))
                                        (("1"
                                          (instantiate
                                           -4
                                           ("n+1" "m+1"))
                                          (("1"
                                            (expand "nth" -4)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3"
                                            (expand "length" 1)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (instantiate -5 "n+1")
                                          (("1"
                                            (expand "nth" 4)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "rectangular?" -1)
                          (("2" (flatten)
                            (("2" (instantiate -1 ("0" "1"))
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "eval_rectangular?" -1)
              (("2" (expand "length" -1 (1 2))
                (("2" (split)
                  (("1" (assert) nil nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (expand "nth" 1)
                                (("2"
                                  (expand "rectangular?" 3)
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred ("n" "m"))
                                        (("1"
                                          (case "n=0 AND m=0")
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "length"
                                                   (-1 -2))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "length"
                                                 (-1 -2))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (expand "length" -1)
                                          (("2"
                                            (case "n=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand "nth" -2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "rectangular?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred ("n" "m"))
                                            (("1"
                                              (case "n=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (case "m=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "nth" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("2"
                                                          (replaces -3)
                                                          (("2"
                                                            (instantiate
                                                             -4
                                                             ("0"
                                                              "m-1"))
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "m=0")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (expand "nth" 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -3)
                                                          (("1"
                                                            (instantiate
                                                             -4
                                                             ("n-1"
                                                              "0"))
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 3)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (instantiate
                                                       -5
                                                       ("n-1" "m-1"))
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (case "n=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand "nth" -2)
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (instantiate
                                                         -5
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (instantiate -6 "n-1")
                                                (("1"
                                                  (expand "nth" -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n skolem-const-decl "below(length(tail))" generic_matrix_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (head skolem-const-decl "list[T]" generic_matrix_props nil)
    (m skolem-const-decl "below(length(tail))" generic_matrix_props nil)
    (tail skolem-const-decl "list[list[T]]" generic_matrix_props nil)
    (n skolem-const-decl "below(length(tail))" generic_matrix_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (n skolem-const-decl "below(length(cons(head, tail)))"
     generic_matrix_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (list type-decl nil list_adt nil)
    (eval_rectangular? def-decl "bool" generic_matrix_props nil)
    (rectangular? const-decl "bool" generic_matrix_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (abstract_rectangular_injective 0
  (abstract_rectangular_injective-1 nil 3907238364
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "abstract_mat" -1 1)
          (("1" (lift-if)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "abstract_mat")
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (grind)
                        (("1" (case "l1=null AND l2=null")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (typepred "l2")
                            (("1" (expand "rectangular?")
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate -2 "0")
                                  (("1"
                                    (expand "nth" 1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "M_default")
                              (("2"
                                (expand "minimal_default_matrix")
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (typepred "l1")
                      (("1" (expand "rectangular?")
                        (("1" (flatten)
                          (("1" (instantiate -2 "0")
                            (("1" (expand "nth" 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (decompose-equality -1)
                      (("1" (decompose-equality -1)
                        (("1" (expand "abstract_mat" -1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "M_default")
                                    (("1"
                                      (expand "minimal_default_matrix")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred "l2")
                                        (("1"
                                          (expand "rectangular?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (instantiate -2 "0")
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "abstract_mat" -2)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "abstract_mat"
                                               -3)
                                              (("2"
                                                (decompose-equality -3)
                                                (("1"
                                                  (lemma
                                                   "list_extensionality[list[T]]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (lemma
                                                           "list_extensionality[T]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "l1")
                                                                  (("1"
                                                                    (typepred
                                                                     "l2")
                                                                    (("1"
                                                                      (expand
                                                                       "rectangular?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (instantiate
                                                                           -1
                                                                           ("0"
                                                                            "n"))
                                                                          (("1"
                                                                            (instantiate
                                                                             -3
                                                                             ("0"
                                                                              "n"))
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem
                                                                   1
                                                                   "m")
                                                                  (("2"
                                                                    (instantiate
                                                                     -1
                                                                     "(n,m)")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "m")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "l1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "rectangular?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (instantiate
                                                                                       -1
                                                                                       ("n"
                                                                                        "0"))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "l2")
                                                  (("2"
                                                    (expand
                                                     "rectangular?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (instantiate
                                                         -1
                                                         ("x!1`1" "0"))
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "l1")
                                                  (("3"
                                                    (expand
                                                     "rectangular?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (instantiate
                                                         -1
                                                         ("x!1`1" "0"))
                                                        (("3"
                                                          (expand
                                                           "nth"
                                                           -1
                                                           2)
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "l1")
                        (("2" (expand "rectangular?")
                          (("2" (flatten)
                            (("2" (instantiate -1 ("i!1" "0"))
                              (("2"
                                (expand "nth" -1 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "l1")
                        (("3" (expand "rectangular?")
                          (("3" (flatten)
                            (("3" (instantiate -1 ("i!1" "0"))
                              (("3"
                                (expand "nth" -1 2)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rectangular? const-decl "bool" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l2 skolem-const-decl "(rectangular?)" generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (M_default const-decl "gmat" generic_matrix_defs nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (l1 skolem-const-decl "(rectangular?)" generic_matrix_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (list_extensionality formula-decl nil more_list_props structures))
   shostak))
 (rectangular_eval_abstract_rectangular 0
  (rectangular_eval_abstract_rectangular-1 nil 3907242032
   ("" (skeep)
    (("" (case "length(l)=0")
      (("1" (grind) nil nil)
       ("2" (typepred "l")
        (("2" (expand "rectangular?")
          (("2" (flatten)
            (("2" (split)
              (("1" (skeep)
                (("1" (expand "abstract_mat")
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (instantiate -2 "0")
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (lemma "eval_width")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1 1 :dir rl)
                                  (("1"
                                    (expand "width" 1)
                                    (("1"
                                      (lemma "eval_width")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1 1 :dir rl)
                                            (("1"
                                              (expand "width" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "height" 1)
                                            (("2"
                                              (typepred "m")
                                              (("2"
                                                (lemma "eval_height")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand
                                                     "abstract_mat"
                                                     -1
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "height"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (split)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (instantiate
                                                 -3
                                                 ("i" "0"))
                                                (("4"
                                                  (expand "nth" -3 2)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "height" 1)
                                  (("2"
                                    (typepred "n")
                                    (("2"
                                      (lemma "eval_height")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "abstract_mat"
                                             -1
                                             1)
                                            (("2"
                                              (expand "height" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (instantiate -3 ("i" "0"))
                                    (("4"
                                      (expand "nth" -3 2)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "eval_width")
                  (("2" (inst?)
                    (("1" (replace -1 -2 :dir rl)
                      (("1" (expand "abstract_mat" -2)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (instantiate -5 "0")
                                  (("1"
                                    (expand "nth" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "width" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "n")
                      (("2" (lemma "eval_height")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rectangular? const-decl "bool" generic_matrix_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (M_default const-decl "gmat" generic_matrix_defs nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (nth def-decl "T" list_props nil)
    (eval_width formula-decl nil generic_matrix_props nil)
    (m skolem-const-decl "below(length(eval_mat(abstract_mat(l))))"
     generic_matrix_props nil)
    (eval_height formula-decl nil generic_matrix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (n skolem-const-decl "below(length(eval_mat(abstract_mat(l))))"
     generic_matrix_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (l skolem-const-decl "(rectangular?)" generic_matrix_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (n skolem-const-decl "below(length(eval_mat(abstract_mat(l))))"
     generic_matrix_props nil))
   shostak))
 (eval_abstract_matrix 0
  (eval_abstract_matrix-1 nil 3906626553
   ("" (skeep)
    (("" (lemma "abstract_eval_matrix")
      (("" (instantiate -1 "abstract_mat(l)")
        (("" (lemma "abstract_rectangular_injective")
          (("" (inst?)
            (("1" (assert) nil nil)
             ("2" (lemma "rectangular_eval_abstract_rectangular")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abstract_eval_matrix formula-decl nil generic_matrix_props nil)
    (rectangular? const-decl "bool" generic_matrix_props nil)
    (abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract_rectangular_injective formula-decl nil generic_matrix_props
     nil)
    (rectangular_eval_abstract_rectangular formula-decl nil
     generic_matrix_props nil)
    (iff_rectangular formula-decl nil generic_matrix_props nil)
    (eval_rectangular? def-decl "bool" generic_matrix_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (l skolem-const-decl "(rectangular?)" generic_matrix_props nil))
   shostak))
 (eval_mat_equality 0
  (eval_mat_equality-1 nil 3907244984
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1"
          (case "abstract_mat(eval_mat(M)) = abstract_mat(eval_mat(N))")
          (("1" (lemma "abstract_eval_matrix")
            (("1" (instantiate -1 "M" 'copy)
              (("1" (instantiate -1 "N") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil)
           ("3" (skeep)
            (("3" (typepred "i")
              (("3" (typepred "j")
                (("3" (lemma "eval_width")
                  (("3" (instantiate -1 ("N" "i") 'copy)
                    (("1" (instantiate -1 ("N" "j"))
                      (("1" (assert) nil nil)
                       ("2" (lemma "eval_height")
                        (("2" (instantiate -1 "N")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "eval_height")
                      (("2" (instantiate -1 "N")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (lemma "eval_width")
              (("4" (instantiate -1 ("M" "i") 'copy)
                (("1" (instantiate -1 ("M" "j"))
                  (("1" (assert) nil nil)
                   ("2" (typepred "j")
                    (("2" (lemma "eval_height")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (lemma "eval_height")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract_eval_matrix formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eval_width formula-decl nil generic_matrix_props nil)
    (i skolem-const-decl "below(length(eval_mat(N)))" generic_matrix_props
       nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (eval_height formula-decl nil generic_matrix_props nil)
    (N skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (j skolem-const-decl "below(length(eval_mat(N)))" generic_matrix_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
       nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (j skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
     nil))
   shostak))
 (eval_vec_lemma 0
  (eval_vec_lemma-1 nil 3907246445
   ("" (skeep)
    (("" (case "abstract_vec(eval_vec(v)) = abstract_vec(l)")
      (("1" (lemma "abstract_eval_vector")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((eval_vec def-decl "list[T]" generic_matrix_defs nil)
    (abstract_vec const-decl "gvec" generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract_eval_vector formula-decl nil generic_matrix_props nil))
   shostak))
 (eval_mat_lemma 0
  (eval_mat_lemma-1 nil 3907246647
   ("" (skeep)
    (("" (case "abstract_mat(eval_mat(M)) = abstract_mat(l)")
      (("1" (lemma "abstract_eval_matrix")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (lemma "eval_width")
          (("3" (instantiate -1 ("M" "i") 'copy)
            (("1" (instantiate -1 ("M" "j"))
              (("1" (assert) nil nil)
               ("2" (typepred "j")
                (("2" (lemma "eval_height")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred "i")
              (("2" (lemma "eval_height")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rectangular? const-decl "bool" generic_matrix_props nil)
    (eval_mat def-decl "list[list[T]]" generic_matrix_defs nil)
    (abstract_mat const-decl "gmat" generic_matrix_defs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract_eval_matrix formula-decl nil generic_matrix_props nil)
    (eval_width formula-decl nil generic_matrix_props nil)
    (i skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
       nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (eval_height formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (M skolem-const-decl "gmat[T, default]" generic_matrix_props nil)
    (j skolem-const-decl "below(length(eval_mat(M)))" generic_matrix_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (vector_evaluation 0
  (vector_evaluation-1 nil 3908029715
   ("" (skeep)
    (("" (split)
      (("1" (expand "eval")
        (("1" (expand "abstract")
          (("1" (lemma "eval_vec_lemma") (("1" (inst?) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1)
          (("2" (expand "eval")
            (("2" (expand "abstract")
              (("2" (lemma "eval_abstract_vector")
                (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abstract const-decl "gvec" generic_matrix_props nil)
    (list type-decl nil list_adt nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_vec_lemma formula-decl nil generic_matrix_props nil)
    (eval const-decl "list[T]" generic_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (eval_abstract_vector formula-decl nil generic_matrix_props nil))
   shostak))
 (matrix_evaluation 0
  (matrix_evaluation-1 nil 3908029885
   ("" (skeep)
    (("" (split)
      (("1" (lemma "eval_mat_lemma")
        (("1" (expand "eval")
          (("1" (expand "abstract") (("1" (inst?) nil nil)) nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1)
          (("2" (typepred "l")
            (("2" (lemma "eval_abstract_matrix")
              (("2" (expand "eval")
                (("2" (expand "abstract") (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval const-decl "list[list[T]]" generic_matrix_props nil)
    (rectangular? const-decl "bool" generic_matrix_props nil)
    (list type-decl nil list_adt nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil generic_matrix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abstract const-decl "gmat" generic_matrix_props nil)
    (eval_mat_lemma formula-decl nil generic_matrix_props nil)
    (TRUE const-decl "bool" booleans nil)
    (eval_abstract_matrix formula-decl nil generic_matrix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

