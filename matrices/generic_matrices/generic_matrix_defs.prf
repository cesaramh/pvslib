(generic_matrix_defs
 (cdr_TCC1 0
  (cdr_TCC1-1 nil 3906118744
   ("" (skeep)
    (("" (typepred "v")
      (("" (assert)
        (("" (skeep)
          (("" (typepred "length(v)")
            (("" (instantiate -1 "1+k")
              (("" (assert)
                (("" (expand "nth") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (cdr subtype "(number_fields.-)(length(generic_matrix_defs.v), 1)"
        "{i_1 | FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), generic_matrix_defs.nth(generic_matrix_defs.v, (number_fields.+)(1, generic_matrix_defs.k)) = generic_matrix_defs.default)}")))
 (cons_TCC1 0
  (cons_TCC1-1 nil 3906118744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (cons subtype "(number_fields.-)(generic_matrix_defs.i, 1)" "nat")))
 (cons_TCC2 0
  (cons_TCC2-1 nil 3906118744
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "length(tail)")
          (("" (instantiate -1 "k-1")
            (("" (assert)
              (("" (expand "nth") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (cons subtype "(number_fields.+)(length(generic_matrix_defs.tail), 1)"
         "{i_1 | FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), COND generic_matrix_defs.k = 0 -> generic_matrix_defs.head, ELSE -> generic_matrix_defs.nth(generic_matrix_defs.tail, (number_fields.-)(generic_matrix_defs.k, 1)) ENDCOND = generic_matrix_defs.default)}")))
 (minimal_default_matrix_TCC1 0
  (minimal_default_matrix_TCC1-1 nil 3906131891
   ("" (subtype-tcc) nil nil) nil nil
   (minimal_default_matrix subtype "(0, 0)"
    "{(i_1, j_1) | (booleans.IFF(i_1 = 0, j_1 = 0))}")))
 (row_TCC1 0
  (row_TCC1-1 nil 3906120781
   ("" (skeep)
    (("" (skeep)
      (("" (expand "width")
        (("" (typepred "dimension(M)")
          (("" (inst? -4)
            (("" (assert)
              (("" (instantiate -4 "i")
                (("" (expand "ijth") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil))
   nil
   (row subtype "generic_matrix_defs.width(generic_matrix_defs.M)"
    "{i_1 | FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), generic_matrix_defs.ijth(generic_matrix_defs.M, generic_matrix_defs.i, generic_matrix_defs.k) = generic_matrix_defs.default)}")))
 (column_TCC1 0
  (column_TCC1-1 nil 3906120781
   ("" (skeep)
    (("" (skeep)
      (("" (expand "height")
        (("" (typepred "dimension(M)")
          (("" (inst? -3)
            (("" (assert)
              (("" (instantiate -3 "j")
                (("" (expand "ijth") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil))
   nil
   (column subtype "generic_matrix_defs.height(generic_matrix_defs.M)"
    "{i_1 | FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), generic_matrix_defs.ijth(generic_matrix_defs.M, generic_matrix_defs.k, generic_matrix_defs.j) = generic_matrix_defs.default)}")))
 (row_cdr_TCC1 0
  (row_cdr_TCC1-1 nil 3906126404
   ("" (skeep)
    (("" (typepred "M")
      (("" (assert)
        (("" (skeep)
          (("" (typepred "height(M)")
            (("" (instantiate -1 "k+1")
              (("" (assert)
                (("" (skeep)
                  (("" (instantiate -1 "j_1")
                    (("" (expand "ijth") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (row_cdr subtype
    "(number_fields.-)(generic_matrix_defs.height(generic_matrix_defs.M), 1)"
    "nat")))
 (row_cdr_TCC2 0
  (row_cdr_TCC2-1 nil 3906126404
   ("" (skeep)
    (("" (split)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "height")
            (("3" (typepred "dimension(M)")
              (("3" (instantiate -3 "k+1")
                (("3" (assert)
                  (("3" (instantiate -3 "j1")
                    (("3" (expand "ijth") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "width")
            (("4" (typepred "dimension(M)")
              (("4" (inst? -4)
                (("4" (assert)
                  (("4" (instantiate -4 "1+i1")
                    (("4" (expand "ijth") (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (height const-decl "nat" generic_matrix_defs nil))
   nil
   (row_cdr subtype
    "((number_fields.-)(generic_matrix_defs.height(generic_matrix_defs.M), 1), generic_matrix_defs.width(generic_matrix_defs.M))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): generic_matrix_defs.ijth(generic_matrix_defs.M, (number_fields.+)(1, generic_matrix_defs.k), j1) = generic_matrix_defs.default), FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): generic_matrix_defs.ijth(generic_matrix_defs.M, (number_fields.+)(1, i1), generic_matrix_defs.k) = generic_matrix_defs.default)))}")))
 (row_cons_TCC1 0
  (row_cons_TCC1-1 nil 3906127798 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (row_cons subtype "(number_fields.-)(generic_matrix_defs.i, 1)"
    "nat")))
 (row_cons_TCC2 0
  (row_cons_TCC2-1 nil 3906127798
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "tail") (("1" (assert) nil nil)) nil)) nil)
       ("2" (flatten)
        (("2" (typepred "tail") (("2" (assert) nil nil)) nil)) nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten)
                (("1" (typepred "length(head)")
                  (("1" (typepred "tail") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "tail")
                  (("2" (expand "height")
                    (("2" (typepred "dimension(tail)")
                      (("2" (instantiate -3 "k-1")
                        (("1" (assert)
                          (("1" (instantiate -3 "j1")
                            (("1" (expand "ijth")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (lift-if)
            (("4" (split)
              (("1" (flatten)
                (("1" (typepred "tail")
                  (("1" (typepred "length(head)")
                    (("1" (instantiate -1 "k")
                      (("1" (assert)
                        (("1" (expand "nth") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "width")
                  (("2" (typepred "dimension(tail)")
                    (("2" (instantiate -4 "k")
                      (("2" (assert)
                        (("2" (instantiate -4 "i1-1")
                          (("2" (expand "ijth")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec type-eq-decl nil generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (k skolem-const-decl "nat" generic_matrix_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (nth const-decl "T" generic_matrix_defs nil))
   nil
   (row_cons subtype
    "((number_fields.+)(generic_matrix_defs.height(generic_matrix_defs.tail), 1), generic_matrix_defs.width(generic_matrix_defs.tail))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): COND generic_matrix_defs.k = 0 -> generic_matrix_defs.nth(generic_matrix_defs.head, j1), ELSE -> generic_matrix_defs.ijth(generic_matrix_defs.tail, (number_fields.-)(generic_matrix_defs.k, 1), j1) ENDCOND = generic_matrix_defs.default), FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): COND i1 = 0 -> generic_matrix_defs.nth(generic_matrix_defs.head, generic_matrix_defs.k), ELSE -> generic_matrix_defs.ijth(generic_matrix_defs.tail, (number_fields.-)(i1, 1), generic_matrix_defs.k) ENDCOND = generic_matrix_defs.default)))}")))
 (col_cdr_TCC1 0
  (col_cdr_TCC1-1 nil 3906126404
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "height(M)")
        (("" (inst?)
          (("" (assert)
            (("" (skeep)
              (("" (instantiate -1 "1+j_1")
                (("" (expand "ijth") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (col_cdr subtype
    "(number_fields.-)(generic_matrix_defs.width(generic_matrix_defs.M), 1)"
    "nat")))
 (col_cdr_TCC2 0
  (col_cdr_TCC2-1 nil 3906126404
   ("" (skeep)
    (("" (typepred "M")
      (("" (assert)
        (("" (split)
          (("1" (skeep)
            (("1" (expand "height")
              (("1" (typepred "dimension(M)")
                (("1" (instantiate -3 "k")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (instantiate -2 "j1+1")
                        (("1" (expand "ijth") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "width")
                (("2" (typepred "dimension(M)")
                  (("2" (instantiate -4 "k+1")
                    (("2" (assert)
                      (("2" (instantiate -3 "i1")
                        (("2" (expand "ijth") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (col_cdr subtype
    "(generic_matrix_defs.height(generic_matrix_defs.M), (number_fields.-)(generic_matrix_defs.width(generic_matrix_defs.M), 1))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): generic_matrix_defs.ijth(generic_matrix_defs.M, generic_matrix_defs.k, (number_fields.+)(1, j1)) = generic_matrix_defs.default), FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): generic_matrix_defs.ijth(generic_matrix_defs.M, i1, (number_fields.+)(1, generic_matrix_defs.k)) = generic_matrix_defs.default)))}")))
 (col_cons_TCC1 0
  (col_cons_TCC1-1 nil 3906127798 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (col_cons subtype "(number_fields.-)(generic_matrix_defs.j, 1)"
    "nat")))
 (col_cons_TCC2 0
  (col_cons_TCC2-1 nil 3906127798
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "tail") (("1" (assert) nil nil)) nil)) nil)
       ("2" (flatten)
        (("2" (typepred "dimension(tail)")
          (("2" (expand "width")
            (("2" (expand "height") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten)
                (("1" (expand "height")
                  (("1" (typepred "tail")
                    (("1" (typepred "length(head)")
                      (("1" (instantiate -1 "k")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "height")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "height")
                  (("2" (typepred "dimension(tail)")
                    (("2" (instantiate -3 "k")
                      (("2" (assert)
                        (("2" (instantiate -3 "j1-1")
                          (("2" (expand "ijth")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (lift-if)
            (("4" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "width")
                  (("2" (typepred "dimension(tail)")
                    (("2" (instantiate -4 "k-1")
                      (("1" (assert)
                        (("1" (instantiate -4 "i1")
                          (("1" (expand "ijth")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" generic_matrix_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (k skolem-const-decl "nat" generic_matrix_defs nil))
   nil
   (col_cons subtype
    "(generic_matrix_defs.height(generic_matrix_defs.tail), (number_fields.+)(generic_matrix_defs.width(generic_matrix_defs.tail), 1))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): COND j1 = 0 -> generic_matrix_defs.nth(generic_matrix_defs.head, generic_matrix_defs.k), ELSE -> generic_matrix_defs.ijth(generic_matrix_defs.tail, generic_matrix_defs.k, (number_fields.-)(j1, 1)) ENDCOND = generic_matrix_defs.default), FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): COND generic_matrix_defs.k = 0 -> generic_matrix_defs.nth(generic_matrix_defs.head, i1), ELSE -> generic_matrix_defs.ijth(generic_matrix_defs.tail, i1, (number_fields.-)(generic_matrix_defs.k, 1)) ENDCOND = generic_matrix_defs.default)))}")))
 (eval_vec_TCC1 0
  (eval_vec_TCC1-1 nil 3906126404 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (eval_vec subtype "generic_matrix_defs.v"
    "{u | reals.>(length(generic_matrix_defs.u), 0)}")))
 (eval_vec_TCC2 0
  (eval_vec_TCC2-1 nil 3906126404 ("" (termination-tcc) nil nil)
   ((nth const-decl "T" generic_matrix_defs nil)
    (cdr const-decl "gvec" generic_matrix_defs nil))
   nil
   (eval_vec termination
    "generic_matrix_defs.eval_vec(generic_matrix_defs.cdr(generic_matrix_defs.v))"
    "nil")))
 (eval_mat_TCC1 0
  (eval_mat_TCC1-1 nil 3906126404 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil))
   nil
   (eval_mat subtype "generic_matrix_defs.M"
    "{N | booleans.AND(reals.>(generic_matrix_defs.height(generic_matrix_defs.N), 0), reals.>(generic_matrix_defs.width(generic_matrix_defs.N), 0))}")))
 (eval_mat_TCC2 0
  (eval_mat_TCC2-1 nil 3906126404 ("" (termination-tcc) nil nil)
   ((height const-decl "nat" generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (minimal_default_matrix const-decl "gmat" generic_matrix_defs nil)
    (M_default const-decl "gmat" generic_matrix_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (row_cdr const-decl "gmat" generic_matrix_defs nil))
   nil
   (eval_mat termination
    "generic_matrix_defs.eval_mat(generic_matrix_defs.row_cdr(generic_matrix_defs.M))"
    "nil")))
 (abstract_vec_TCC1 0
  (abstract_vec_TCC1-1 nil 3906131891 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (abstract_vec subtype
    "list_props[generic_matrix_defs.T].length(generic_matrix_defs.l)"
    "{i_1 | FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), COND reals.<(generic_matrix_defs.k, list_props[generic_matrix_defs.T].length(generic_matrix_defs.l)) -> list_props[generic_matrix_defs.T].nth(generic_matrix_defs.l, generic_matrix_defs.k), ELSE -> generic_matrix_defs.default ENDCOND = generic_matrix_defs.default)}")))
 (abstract_mat_TCC1 0
  (abstract_mat_TCC1-1 nil 3906131891
   ("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)) nil
   (abstract_mat subtype "generic_matrix_defs.l"
    "(list_adt[list_adt[generic_matrix_defs.T].list].cons?)")))
 (abstract_mat_TCC2 0
  (abstract_mat_TCC2-1 nil 3906131891
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "l")
        (("" (instantiate -1 ("0" "i"))
          (("1" (expand "nth" -1 1) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l skolem-const-decl "{x: list[list[T]] |
   FORALL (i, j: below(length(x))): length(nth(x, i)) = length(nth(x, j))}"
     generic_matrix_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil
   (abstract_mat subtype "generic_matrix_defs.j"
    "below[length[T](nth[list[T]](l, i))]")))
 (abstract_mat_TCC3 0
  (abstract_mat_TCC3-1 nil 3906131891 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil generic_matrix_defs nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (abstract_mat subtype
    "(list_props[list_adt[generic_matrix_defs.T].list].length(generic_matrix_defs.l), list_props[generic_matrix_defs.T].length(list_adt[list_adt[generic_matrix_defs.T].list].car(generic_matrix_defs.l)))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): COND booleans.AND(reals.<(generic_matrix_defs.k, list_props[list_adt[generic_matrix_defs.T].list].length(generic_matrix_defs.l)), reals.<(j1, list_props[generic_matrix_defs.T].length(list_adt[list_adt[generic_matrix_defs.T].list].car(generic_matrix_defs.l)))) -> list_props[generic_matrix_defs.T].nth(list_props[list_adt[generic_matrix_defs.T].list].nth(generic_matrix_defs.l, generic_matrix_defs.k), j1), ELSE -> generic_matrix_defs.default ENDCOND = generic_matrix_defs.default), FORALL (k): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): COND booleans.AND(reals.<(i1, list_props[list_adt[generic_matrix_defs.T].list].length(generic_matrix_defs.l)), reals.<(generic_matrix_defs.k, list_props[generic_matrix_defs.T].length(list_adt[list_adt[generic_matrix_defs.T].list].car(generic_matrix_defs.l)))) -> list_props[generic_matrix_defs.T].nth(list_props[list_adt[generic_matrix_defs.T].list].nth(generic_matrix_defs.l, i1), generic_matrix_defs.k), ELSE -> generic_matrix_defs.default ENDCOND = generic_matrix_defs.default)))}"))))

